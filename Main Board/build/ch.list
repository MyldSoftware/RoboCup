
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4823      	ldr	r0, [pc, #140]	; (8000250 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f003 fb4d 	bl	8003870 <__core_init>
 80001d6:	f003 fa1b 	bl	8003610 <__early_init>
 80001da:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001de:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xa>)
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <endfiniloop+0xe>)

080001e2 <msloop>:
 80001e2:	4291      	cmp	r1, r2
 80001e4:	bf3c      	itt	cc
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ea:	e7fa      	bcc.n	80001e2 <msloop>
 80001ec:	491b      	ldr	r1, [pc, #108]	; (800025c <endfiniloop+0x12>)
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <endfiniloop+0x6>)

080001f0 <psloop>:
 80001f0:	4291      	cmp	r1, r2
 80001f2:	bf3c      	itt	cc
 80001f4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f8:	e7fa      	bcc.n	80001f0 <psloop>
 80001fa:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x16>)
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <endfiniloop+0x1a>)
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x1e>)

08000200 <dloop>:
 8000200:	429a      	cmp	r2, r3
 8000202:	bf3e      	ittt	cc
 8000204:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000208:	f842 0b04 	strcc.w	r0, [r2], #4
 800020c:	e7f8      	bcc.n	8000200 <dloop>
 800020e:	2000      	movs	r0, #0
 8000210:	4916      	ldr	r1, [pc, #88]	; (800026c <endfiniloop+0x22>)
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x26>)

08000214 <bloop>:
 8000214:	4291      	cmp	r1, r2
 8000216:	bf3c      	itt	cc
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
 800021c:	e7fa      	bcc.n	8000214 <bloop>
 800021e:	f003 fadf 	bl	80037e0 <__init_ram_areas>
 8000222:	f003 fb1d 	bl	8003860 <__late_init>
 8000226:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2a>)
 8000228:	4d13      	ldr	r5, [pc, #76]	; (8000278 <endfiniloop+0x2e>)

0800022a <initloop>:
 800022a:	42ac      	cmp	r4, r5
 800022c:	da03      	bge.n	8000236 <endinitloop>
 800022e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000232:	4788      	blx	r1
 8000234:	e7f9      	b.n	800022a <initloop>

08000236 <endinitloop>:
 8000236:	f002 fda3 	bl	8002d80 <main>
 800023a:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x32>)
 800023c:	4d10      	ldr	r5, [pc, #64]	; (8000280 <endfiniloop+0x36>)

0800023e <finiloop>:
 800023e:	42ac      	cmp	r4, r5
 8000240:	da03      	bge.n	800024a <endfiniloop>
 8000242:	f854 1b04 	ldr.w	r1, [r4], #4
 8000246:	4788      	blx	r1
 8000248:	e7f9      	b.n	800023e <finiloop>

0800024a <endfiniloop>:
 800024a:	f003 bb01 	b.w	8003850 <__default_exit>
 800024e:	0000      	.short	0x0000
 8000250:	20000800 	.word	0x20000800
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	080050b0 	.word	0x080050b0
 8000264:	20000800 	.word	0x20000800
 8000268:	20000838 	.word	0x20000838
 800026c:	20000838 	.word	0x20000838
 8000270:	20001108 	.word	0x20001108
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f003 fa10 	bl	80036d0 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f003 fa76 	bl	80037a0 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop
	...

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>
	...

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2f>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd8:	bf24      	itt	cs
 8000bda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bde:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be2:	d90d      	bls.n	8000c00 <__aeabi_d2f+0x30>
 8000be4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c04:	d121      	bne.n	8000c4a <__aeabi_d2f+0x7a>
 8000c06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0a:	bfbc      	itt	lt
 8000c0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	4770      	bxlt	lr
 8000c12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c16:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1a:	f1c2 0218 	rsb	r2, r2, #24
 8000c1e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c22:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c26:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2a:	bf18      	it	ne
 8000c2c:	f040 0001 	orrne.w	r0, r0, #1
 8000c30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c38:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c3c:	ea40 000c 	orr.w	r0, r0, ip
 8000c40:	fa23 f302 	lsr.w	r3, r3, r2
 8000c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c48:	e7cc      	b.n	8000be4 <__aeabi_d2f+0x14>
 8000c4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4e:	d107      	bne.n	8000c60 <__aeabi_d2f+0x90>
 8000c50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c54:	bf1e      	ittt	ne
 8000c56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5e:	4770      	bxne	lr
 8000c60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__gesf2>:
 8000c70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c74:	e006      	b.n	8000c84 <__cmpsf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__lesf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	e002      	b.n	8000c84 <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__cmpsf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c94:	bf18      	it	ne
 8000c96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9a:	d011      	beq.n	8000cc0 <__cmpsf2+0x40>
 8000c9c:	b001      	add	sp, #4
 8000c9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ca2:	bf18      	it	ne
 8000ca4:	ea90 0f01 	teqne	r0, r1
 8000ca8:	bf58      	it	pl
 8000caa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cae:	bf88      	it	hi
 8000cb0:	17c8      	asrhi	r0, r1, #31
 8000cb2:	bf38      	it	cc
 8000cb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cb8:	bf18      	it	ne
 8000cba:	f040 0001 	orrne.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	d102      	bne.n	8000ccc <__cmpsf2+0x4c>
 8000cc6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cca:	d105      	bne.n	8000cd8 <__cmpsf2+0x58>
 8000ccc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd0:	d1e4      	bne.n	8000c9c <__cmpsf2+0x1c>
 8000cd2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cd6:	d0e1      	beq.n	8000c9c <__cmpsf2+0x1c>
 8000cd8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <__aeabi_cfrcmple>:
 8000ce0:	4684      	mov	ip, r0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	4661      	mov	r1, ip
 8000ce6:	e7ff      	b.n	8000ce8 <__aeabi_cfcmpeq>

08000ce8 <__aeabi_cfcmpeq>:
 8000ce8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cea:	f7ff ffc9 	bl	8000c80 <__cmpsf2>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	bf48      	it	mi
 8000cf2:	f110 0f00 	cmnmi.w	r0, #0
 8000cf6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cf8 <__aeabi_fcmpeq>:
 8000cf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cfc:	f7ff fff4 	bl	8000ce8 <__aeabi_cfcmpeq>
 8000d00:	bf0c      	ite	eq
 8000d02:	2001      	moveq	r0, #1
 8000d04:	2000      	movne	r0, #0
 8000d06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0a:	bf00      	nop

08000d0c <__aeabi_fcmplt>:
 8000d0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d10:	f7ff ffea 	bl	8000ce8 <__aeabi_cfcmpeq>
 8000d14:	bf34      	ite	cc
 8000d16:	2001      	movcc	r0, #1
 8000d18:	2000      	movcs	r0, #0
 8000d1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d1e:	bf00      	nop

08000d20 <__aeabi_fcmple>:
 8000d20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d24:	f7ff ffe0 	bl	8000ce8 <__aeabi_cfcmpeq>
 8000d28:	bf94      	ite	ls
 8000d2a:	2001      	movls	r0, #1
 8000d2c:	2000      	movhi	r0, #0
 8000d2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d32:	bf00      	nop

08000d34 <__aeabi_fcmpge>:
 8000d34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d38:	f7ff ffd2 	bl	8000ce0 <__aeabi_cfrcmple>
 8000d3c:	bf94      	ite	ls
 8000d3e:	2001      	movls	r0, #1
 8000d40:	2000      	movhi	r0, #0
 8000d42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d46:	bf00      	nop

08000d48 <__aeabi_fcmpgt>:
 8000d48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d4c:	f7ff ffc8 	bl	8000ce0 <__aeabi_cfrcmple>
 8000d50:	bf34      	ite	cc
 8000d52:	2001      	movcc	r0, #1
 8000d54:	2000      	movcs	r0, #0
 8000d56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5a:	bf00      	nop
 8000d5c:	0000      	movs	r0, r0
	...

08000d60 <__aeabi_f2iz>:
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d68:	d30f      	bcc.n	8000d8a <__aeabi_f2iz+0x2a>
 8000d6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_f2iz+0x30>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d7c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	bf18      	it	ne
 8000d86:	4240      	negne	r0, r0
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2iz+0x3a>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d105      	bne.n	8000da6 <__aeabi_f2iz+0x46>
 8000d9a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr
 8000dac:	0000      	movs	r0, r0
	...

08000db0 <chTMStartMeasurementX.constprop.35>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000db0:	4b01      	ldr	r3, [pc, #4]	; (8000db8 <chTMStartMeasurementX.constprop.35+0x8>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000db4:	6083      	str	r3, [r0, #8]
}
 8000db6:	4770      	bx	lr
 8000db8:	e0001000 	.word	0xe0001000
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8000dc0:	4a02      	ldr	r2, [pc, #8]	; (8000dcc <notify1+0xc>)
 8000dc2:	68d3      	ldr	r3, [r2, #12]
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	60d3      	str	r3, [r2, #12]
}
 8000dca:	4770      	bx	lr
 8000dcc:	40011000 	.word	0x40011000

08000dd0 <sdObjectInit.constprop.27>:
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <sdObjectInit.constprop.27+0x54>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <sdObjectInit.constprop.27+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000dd4:	b470      	push	{r4, r5, r6}
  sdp->vmt = &vmt;
 8000dd6:	4618      	mov	r0, r3
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000dd8:	4c14      	ldr	r4, [pc, #80]	; (8000e2c <sdObjectInit.constprop.27+0x5c>)
 8000dda:	f840 2b04 	str.w	r2, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000dde:	2501      	movs	r5, #1
  iqp->q_counter = 0;
 8000de0:	2200      	movs	r2, #0
  oqp->q_counter = size;
 8000de2:	2110      	movs	r1, #16
 8000de4:	721d      	strb	r5, [r3, #8]
  oqp->q_top     = bp + size;
 8000de6:	f103 0674 	add.w	r6, r3, #116	; 0x74
  iqp->q_counter = 0;
 8000dea:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000dec:	f103 050c 	add.w	r5, r3, #12
  iqp->q_notify  = infy;
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  oqp->q_counter = size;
 8000df2:	6399      	str	r1, [r3, #56]	; 0x38
  iqp->q_top     = bp + size;
 8000df4:	f103 0264 	add.w	r2, r3, #100	; 0x64
  iqp->q_buffer  = bp;
 8000df8:	f103 0154 	add.w	r1, r3, #84	; 0x54
  oqp->q_notify  = onfy;
 8000dfc:	64dc      	str	r4, [r3, #76]	; 0x4c
 8000dfe:	f103 0430 	add.w	r4, r3, #48	; 0x30
  oqp->q_top     = bp + size;
 8000e02:	641e      	str	r6, [r3, #64]	; 0x40
  tqp->p_prev = (thread_t *)tqp;
 8000e04:	e9c3 5503 	strd	r5, r5, [r3, #12]
 8000e08:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
  iqp->q_link    = link;
 8000e0c:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_link    = link;
 8000e0e:	651b      	str	r3, [r3, #80]	; 0x50
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8000e10:	6058      	str	r0, [r3, #4]
  iqp->q_buffer  = bp;
 8000e12:	6199      	str	r1, [r3, #24]
  iqp->q_wrptr   = bp;
 8000e14:	e9c3 1108 	strd	r1, r1, [r3, #32]
  iqp->q_top     = bp + size;
 8000e18:	61da      	str	r2, [r3, #28]
  oqp->q_buffer  = bp;
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 8000e1c:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
 8000e20:	bc70      	pop	{r4, r5, r6}
 8000e22:	4770      	bx	lr
 8000e24:	200008d4 	.word	0x200008d4
 8000e28:	08004eb0 	.word	0x08004eb0
 8000e2c:	08000dc1 	.word	0x08000dc1

08000e30 <adc_lld_start_conversion.constprop.18>:
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <adc_lld_start_conversion.constprop.18+0x88>)
 8000e32:	6913      	ldr	r3, [r2, #16]
 8000e34:	68d1      	ldr	r1, [r2, #12]

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
 8000e36:	7818      	ldrb	r0, [r3, #0]
void adc_lld_start_conversion(ADCDriver *adcp) {
 8000e38:	b4f0      	push	{r4, r5, r6, r7}
  mode = adcp->dmamode;
 8000e3a:	6b14      	ldr	r4, [r2, #48]	; 0x30
  if (grpp->circular) {
 8000e3c:	b128      	cbz	r0, 8000e4a <adc_lld_start_conversion.constprop.18+0x1a>
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 8000e3e:	2901      	cmp	r1, #1
    mode |= STM32_DMA_CR_CIRC;
 8000e40:	bf94      	ite	ls
 8000e42:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 8000e46:	f444 7484 	orrhi.w	r4, r4, #264	; 0x108
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000e4a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8000e4c:	885d      	ldrh	r5, [r3, #2]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000e4e:	6800      	ldr	r0, [r0, #0]
 8000e50:	6896      	ldr	r6, [r2, #8]
 8000e52:	60c6      	str	r6, [r0, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8000e54:	fb01 f105 	mul.w	r1, r1, r5
 8000e58:	6041      	str	r1, [r0, #4]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000e5a:	68d9      	ldr	r1, [r3, #12]
  dmaStreamSetMode(adcp->dmastp, mode);
 8000e5c:	6004      	str	r4, [r0, #0]
  dmaStreamEnable(adcp->dmastp);
 8000e5e:	6805      	ldr	r5, [r0, #0]
  adcp->adc->SR    = 0;
 8000e60:	6a92      	ldr	r2, [r2, #40]	; 0x28
  adcp->adc->SMPR2 = grpp->smpr2;
 8000e62:	699e      	ldr	r6, [r3, #24]
  dmaStreamEnable(adcp->dmastp);
 8000e64:	f045 0501 	orr.w	r5, r5, #1
  adcp->adc->SMPR1 = grpp->smpr1;
 8000e68:	e9d3 4704 	ldrd	r4, r7, [r3, #16]
  dmaStreamEnable(adcp->dmastp);
 8000e6c:	6005      	str	r5, [r0, #0]
  adcp->adc->SR    = 0;
 8000e6e:	2000      	movs	r0, #0
 8000e70:	6010      	str	r0, [r2, #0]
  adcp->adc->SQR1  = grpp->sqr1;
 8000e72:	69dd      	ldr	r5, [r3, #28]
  adcp->adc->SMPR1 = grpp->smpr1;
 8000e74:	60d7      	str	r7, [r2, #12]
  adcp->adc->SQR3  = grpp->sqr3;
 8000e76:	e9d3 0308 	ldrd	r0, r3, [r3, #32]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000e7a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  adcp->adc->SMPR2 = grpp->smpr2;
 8000e7e:	6116      	str	r6, [r2, #16]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000e80:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  adcp->adc->SQR1  = grpp->sqr1;
 8000e84:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 8000e86:	6310      	str	r0, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8000e88:	6353      	str	r3, [r2, #52]	; 0x34
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8000e8a:	0063      	lsls	r3, r4, #1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000e8c:	6051      	str	r1, [r2, #4]
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8000e8e:	d50b      	bpl.n	8000ea8 <adc_lld_start_conversion.constprop.18+0x78>
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8000e90:	f024 4380 	bic.w	r3, r4, #1073741824	; 0x40000000
 8000e94:	f240 3103 	movw	r1, #771	; 0x303
 8000e98:	f023 0302 	bic.w	r3, r3, #2

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8000e9c:	430c      	orrs	r4, r1
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	6093      	str	r3, [r2, #8]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8000ea2:	6094      	str	r4, [r2, #8]
  }
  else
    adcp->adc->CR2 = cr2;
}
 8000ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea6:	4770      	bx	lr
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8000ea8:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000eac:	f044 0401 	orr.w	r4, r4, #1
    adcp->adc->CR2 = cr2;
 8000eb0:	6094      	str	r4, [r2, #8]
}
 8000eb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000838 	.word	0x20000838
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <pwmEnableChannel.constprop.13>:
 * @param[in] channel   PWM channel identifier (0...channels-1)
 * @param[in] width     PWM pulse width as clock pulses number
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
 8000ec0:	b430      	push	{r4, r5}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <pwmEnableChannel.constprop.13+0x2c>)
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 8000eca:	699c      	ldr	r4, [r3, #24]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	f100 050c 	add.w	r5, r0, #12
 8000ed2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000ed6:	2501      	movs	r5, #1
 8000ed8:	4085      	lsls	r5, r0
 8000eda:	432a      	orrs	r2, r5
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	6061      	str	r1, [r4, #4]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8000ee6:	bc30      	pop	{r4, r5}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200008b8 	.word	0x200008b8

08000ef0 <_idle_thread>:
}
 8000ef0:	e7fe      	b.n	8000ef0 <_idle_thread>
 8000ef2:	bf00      	nop
	...

08000f00 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000f00:	4603      	mov	r3, r0
 8000f02:	2220      	movs	r2, #32
 8000f04:	f382 8811 	msr	BASEPRI, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000f08:	4908      	ldr	r1, [pc, #32]	; (8000f2c <chCoreAlloc+0x2c>)
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <chCoreAlloc+0x30>)
 8000f0c:	6808      	ldr	r0, [r1, #0]
 8000f0e:	6812      	ldr	r2, [r2, #0]
  size = MEM_ALIGN_NEXT(size);
 8000f10:	3307      	adds	r3, #7
 8000f12:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000f16:	1a12      	subs	r2, r2, r0
 8000f18:	4293      	cmp	r3, r2
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000f1a:	bf9a      	itte	ls
 8000f1c:	181b      	addls	r3, r3, r0
 8000f1e:	600b      	strls	r3, [r1, #0]
    return NULL;
 8000f20:	2000      	movhi	r0, #0
 8000f22:	2300      	movs	r3, #0
 8000f24:	f383 8811 	msr	BASEPRI, r3
}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000ba0 	.word	0x20000ba0
 8000f30:	20000b44 	.word	0x20000b44
	...

08000f40 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 8000f42:	68c3      	ldr	r3, [r0, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000f44:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
 8000f46:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000f48:	68dc      	ldr	r4, [r3, #12]
 8000f4a:	4014      	ands	r4, r2
 8000f4c:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 8000f4e:	43d2      	mvns	r2, r2
 8000f50:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000f52:	7d0b      	ldrb	r3, [r1, #20]
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8000f54:	4605      	mov	r5, r0
 8000f56:	f004 0702 	and.w	r7, r4, #2
 8000f5a:	f004 0604 	and.w	r6, r4, #4
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000f5e:	b9c3      	cbnz	r3, 8000f92 <icu_lld_serve_interrupt+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000f60:	b17e      	cbz	r6, 8000f82 <icu_lld_serve_interrupt+0x42>
      _icu_isr_invoke_width_cb(icup);
 8000f62:	7803      	ldrb	r3, [r0, #0]
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d009      	beq.n	8000f7c <icu_lld_serve_interrupt+0x3c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000f68:	b987      	cbnz	r7, 8000f8c <icu_lld_serve_interrupt+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8000f6a:	07e3      	lsls	r3, r4, #31
 8000f6c:	d505      	bpl.n	8000f7a <icu_lld_serve_interrupt+0x3a>
    _icu_isr_invoke_overflow_cb(icup);
 8000f6e:	686b      	ldr	r3, [r5, #4]
 8000f70:	4628      	mov	r0, r5
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	4798      	blx	r3
 8000f76:	2303      	movs	r3, #3
 8000f78:	702b      	strb	r3, [r5, #0]
}
 8000f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _icu_isr_invoke_width_cb(icup);
 8000f7c:	688b      	ldr	r3, [r1, #8]
 8000f7e:	b303      	cbz	r3, 8000fc2 <icu_lld_serve_interrupt+0x82>
 8000f80:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000f82:	2f00      	cmp	r7, #0
 8000f84:	d0f1      	beq.n	8000f6a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
 8000f86:	782b      	ldrb	r3, [r5, #0]
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d011      	beq.n	8000fb0 <icu_lld_serve_interrupt+0x70>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	702b      	strb	r3, [r5, #0]
 8000f90:	e7eb      	b.n	8000f6a <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000f92:	b147      	cbz	r7, 8000fa6 <icu_lld_serve_interrupt+0x66>
      _icu_isr_invoke_width_cb(icup);
 8000f94:	7803      	ldrb	r3, [r0, #0]
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d002      	beq.n	8000fa0 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	d1f6      	bne.n	8000f8c <icu_lld_serve_interrupt+0x4c>
 8000f9e:	e7e4      	b.n	8000f6a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_width_cb(icup);
 8000fa0:	688b      	ldr	r3, [r1, #8]
 8000fa2:	b18b      	cbz	r3, 8000fc8 <icu_lld_serve_interrupt+0x88>
 8000fa4:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	d0df      	beq.n	8000f6a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
 8000faa:	782b      	ldrb	r3, [r5, #0]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d1ed      	bne.n	8000f8c <icu_lld_serve_interrupt+0x4c>
 8000fb0:	6869      	ldr	r1, [r5, #4]
 8000fb2:	68cb      	ldr	r3, [r1, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0e9      	beq.n	8000f8c <icu_lld_serve_interrupt+0x4c>
 8000fb8:	4628      	mov	r0, r5
 8000fba:	4798      	blx	r3
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	702b      	strb	r3, [r5, #0]
 8000fc0:	e7d3      	b.n	8000f6a <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000fc2:	2f00      	cmp	r7, #0
 8000fc4:	d1f5      	bne.n	8000fb2 <icu_lld_serve_interrupt+0x72>
 8000fc6:	e7d0      	b.n	8000f6a <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d1f2      	bne.n	8000fb2 <icu_lld_serve_interrupt+0x72>
 8000fcc:	e7cd      	b.n	8000f6a <icu_lld_serve_interrupt+0x2a>
 8000fce:	bf00      	nop

08000fd0 <icu_lld_enable_notifications>:
  uint32_t dier = icup->tim->DIER;
 8000fd0:	68c2      	ldr	r2, [r0, #12]
 8000fd2:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
 8000fd4:	b410      	push	{r4}
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8000fd6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000fda:	d10c      	bne.n	8000ff6 <icu_lld_enable_notifications+0x26>
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000fdc:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
 8000fde:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000fe0:	7d0c      	ldrb	r4, [r1, #20]
 8000fe2:	6888      	ldr	r0, [r1, #8]
 8000fe4:	b94c      	cbnz	r4, 8000ffa <icu_lld_enable_notifications+0x2a>
      if (icup->config->width_cb != NULL)
 8000fe6:	b168      	cbz	r0, 8001004 <icu_lld_enable_notifications+0x34>
        dier |= STM32_TIM_DIER_CC1IE;
 8000fe8:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
 8000fec:	6909      	ldr	r1, [r1, #16]
 8000fee:	b109      	cbz	r1, 8000ff4 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
 8000ff4:	60d3      	str	r3, [r2, #12]
}
 8000ff6:	bc10      	pop	{r4}
 8000ff8:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d1f4      	bne.n	8000fe8 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC2IE;
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	e7f3      	b.n	8000fec <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC1IE;
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	e7f0      	b.n	8000fec <icu_lld_enable_notifications+0x1c>
 800100a:	bf00      	nop
 800100c:	0000      	movs	r0, r0
	...

08001010 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
 8001010:	7802      	ldrb	r2, [r0, #0]
 8001012:	68c3      	ldr	r3, [r0, #12]
 8001014:	2a01      	cmp	r2, #1
void icu_lld_start(ICUDriver *icup) {
 8001016:	b430      	push	{r4, r5}
  if (icup->state == ICU_STOP) {
 8001018:	d037      	beq.n	800108a <icu_lld_start+0x7a>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001020:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (icup->clock / icup->config->frequency) - 1;
 8001024:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8001028:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
 800102a:	684d      	ldr	r5, [r1, #4]
 800102c:	fbb2 f2f5 	udiv	r2, r2, r5
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8001030:	2500      	movs	r5, #0
 8001032:	611d      	str	r5, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8001034:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
 8001038:	3a01      	subs	r2, #1
  icup->tim->ARR  = 0xFFFF;
 800103a:	f64f 75ff 	movw	r5, #65535	; 0xffff
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800103e:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 8001042:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001044:	7d0c      	ldrb	r4, [r1, #20]
 8001046:	780a      	ldrb	r2, [r1, #0]
 8001048:	b98c      	cbnz	r4, 800106e <icu_lld_start+0x5e>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 800104a:	f240 2401 	movw	r4, #513	; 0x201
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800104e:	2154      	movs	r1, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8001050:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8001052:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8001054:	b142      	cbz	r2, 8001068 <icu_lld_start+0x58>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8001056:	2213      	movs	r2, #19
 8001058:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 800105a:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 800105e:	3334      	adds	r3, #52	; 0x34
 8001060:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
 8001064:	bc30      	pop	{r4, r5}
 8001066:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8001068:	2231      	movs	r2, #49	; 0x31
 800106a:	621a      	str	r2, [r3, #32]
 800106c:	e7f5      	b.n	800105a <icu_lld_start+0x4a>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 800106e:	f44f 7481 	mov.w	r4, #258	; 0x102
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8001072:	2164      	movs	r1, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8001074:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8001076:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8001078:	bb3a      	cbnz	r2, 80010ca <icu_lld_start+0xba>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800107a:	2213      	movs	r2, #19
 800107c:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 800107e:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 8001082:	3338      	adds	r3, #56	; 0x38
 8001084:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001088:	e7ec      	b.n	8001064 <icu_lld_start+0x54>
    if (&ICUD2 == icup) {
 800108a:	4a28      	ldr	r2, [pc, #160]	; (800112c <icu_lld_start+0x11c>)
 800108c:	4290      	cmp	r0, r2
 800108e:	d036      	beq.n	80010fe <icu_lld_start+0xee>
    if (&ICUD3 == icup) {
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <icu_lld_start+0x120>)
 8001092:	4290      	cmp	r0, r2
 8001094:	d01c      	beq.n	80010d0 <icu_lld_start+0xc0>
    if (&ICUD5 == icup) {
 8001096:	4a27      	ldr	r2, [pc, #156]	; (8001134 <icu_lld_start+0x124>)
 8001098:	4290      	cmp	r0, r2
 800109a:	d1c3      	bne.n	8001024 <icu_lld_start+0x14>
      rccEnableTIM5(FALSE);
 800109c:	4a26      	ldr	r2, [pc, #152]	; (8001138 <icu_lld_start+0x128>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800109e:	4927      	ldr	r1, [pc, #156]	; (800113c <icu_lld_start+0x12c>)
 80010a0:	6c14      	ldr	r4, [r2, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 80010a2:	4d27      	ldr	r5, [pc, #156]	; (8001140 <icu_lld_start+0x130>)
      rccEnableTIM5(FALSE);
 80010a4:	f044 0408 	orr.w	r4, r4, #8
 80010a8:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM5();
 80010aa:	6a14      	ldr	r4, [r2, #32]
 80010ac:	f044 0408 	orr.w	r4, r4, #8
 80010b0:	6214      	str	r4, [r2, #32]
 80010b2:	2400      	movs	r4, #0
 80010b4:	6214      	str	r4, [r2, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010ba:	2470      	movs	r4, #112	; 0x70
 80010bc:	f881 4332 	strb.w	r4, [r1, #818]	; 0x332
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010c0:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010c4:	604a      	str	r2, [r1, #4]
      icup->clock = STM32_TIMCLK1;
 80010c6:	6085      	str	r5, [r0, #8]
 80010c8:	e7ac      	b.n	8001024 <icu_lld_start+0x14>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80010ca:	2231      	movs	r2, #49	; 0x31
 80010cc:	621a      	str	r2, [r3, #32]
 80010ce:	e7d6      	b.n	800107e <icu_lld_start+0x6e>
      rccEnableTIM3(FALSE);
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <icu_lld_start+0x128>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010d2:	491a      	ldr	r1, [pc, #104]	; (800113c <icu_lld_start+0x12c>)
 80010d4:	6c14      	ldr	r4, [r2, #64]	; 0x40
     icup->clock = STM32_TIMCLK1;
 80010d6:	4d1a      	ldr	r5, [pc, #104]	; (8001140 <icu_lld_start+0x130>)
      rccEnableTIM3(FALSE);
 80010d8:	f044 0402 	orr.w	r4, r4, #2
 80010dc:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM3();
 80010de:	6a14      	ldr	r4, [r2, #32]
 80010e0:	f044 0402 	orr.w	r4, r4, #2
 80010e4:	6214      	str	r4, [r2, #32]
 80010e6:	2400      	movs	r4, #0
 80010e8:	6214      	str	r4, [r2, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010ee:	2470      	movs	r4, #112	; 0x70
 80010f0:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010f4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010f8:	600a      	str	r2, [r1, #0]
     icup->clock = STM32_TIMCLK1;
 80010fa:	6085      	str	r5, [r0, #8]
    if (&ICUD5 == icup) {
 80010fc:	e792      	b.n	8001024 <icu_lld_start+0x14>
      rccEnableTIM2(FALSE);
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <icu_lld_start+0x128>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001100:	490e      	ldr	r1, [pc, #56]	; (800113c <icu_lld_start+0x12c>)
 8001102:	6c14      	ldr	r4, [r2, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 8001104:	4d0e      	ldr	r5, [pc, #56]	; (8001140 <icu_lld_start+0x130>)
      rccEnableTIM2(FALSE);
 8001106:	f044 0401 	orr.w	r4, r4, #1
 800110a:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM2();
 800110c:	6a14      	ldr	r4, [r2, #32]
 800110e:	f044 0401 	orr.w	r4, r4, #1
 8001112:	6214      	str	r4, [r2, #32]
 8001114:	2400      	movs	r4, #0
 8001116:	6214      	str	r4, [r2, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800111c:	2470      	movs	r4, #112	; 0x70
 800111e:	f881 431c 	strb.w	r4, [r1, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001122:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001126:	600a      	str	r2, [r1, #0]
      icup->clock = STM32_TIMCLK1;
 8001128:	6085      	str	r5, [r0, #8]
    if (&ICUD5 == icup) {
 800112a:	e77b      	b.n	8001024 <icu_lld_start+0x14>
 800112c:	2000086c 	.word	0x2000086c
 8001130:	20000884 	.word	0x20000884
 8001134:	2000089c 	.word	0x2000089c
 8001138:	40023800 	.word	0x40023800
 800113c:	e000e100 	.word	0xe000e100
 8001140:	05b8d800 	.word	0x05b8d800
	...

08001150 <icu_lld_init>:
void icu_lld_init(void) {
 8001150:	b430      	push	{r4, r5}
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8001152:	480a      	ldr	r0, [pc, #40]	; (800117c <icu_lld_init+0x2c>)
 8001154:	4c0a      	ldr	r4, [pc, #40]	; (8001180 <icu_lld_init+0x30>)
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <icu_lld_init+0x34>)
  ICUD3.tim = STM32_TIM3;
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <icu_lld_init+0x38>)
 800115a:	60c2      	str	r2, [r0, #12]
 800115c:	2101      	movs	r1, #1
  ICUD2.tim = STM32_TIM2;
 800115e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  icup->config = NULL;
 8001162:	2200      	movs	r2, #0
 8001164:	60e5      	str	r5, [r4, #12]
  icup->state  = ICU_STOP;
 8001166:	7001      	strb	r1, [r0, #0]
  ICUD5.tim = STM32_TIM5;
 8001168:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800116c:	7019      	strb	r1, [r3, #0]
 800116e:	7021      	strb	r1, [r4, #0]
  icup->config = NULL;
 8001170:	6062      	str	r2, [r4, #4]
 8001172:	60dd      	str	r5, [r3, #12]
 8001174:	6042      	str	r2, [r0, #4]
 8001176:	605a      	str	r2, [r3, #4]
}
 8001178:	bc30      	pop	{r4, r5}
 800117a:	4770      	bx	lr
 800117c:	20000884 	.word	0x20000884
 8001180:	2000086c 	.word	0x2000086c
 8001184:	2000089c 	.word	0x2000089c
 8001188:	40000400 	.word	0x40000400
 800118c:	00000000 	.word	0x00000000

08001190 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001190:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 8001194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001198:	09d2      	lsrs	r2, r2, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800119a:	4667      	mov	r7, ip
  uint32_t bit     = 0;
 800119c:	2400      	movs	r4, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800119e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
 80011a2:	f04f 0803 	mov.w	r8, #3
      m4 = 15 << ((bit & 7) * 4);
 80011a6:	f04f 0e0f 	mov.w	lr, #15
 80011aa:	e00f      	b.n	80011cc <_pal_lld_setgroupmode+0x3c>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80011ac:	f8d0 a000 	ldr.w	sl, [r0]
 80011b0:	ea03 030a 	and.w	r3, r3, sl
 80011b4:	433b      	orrs	r3, r7
        if (bit < 8)
 80011b6:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80011b8:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80011ba:	d835      	bhi.n	8001228 <_pal_lld_setgroupmode+0x98>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80011bc:	6a03      	ldr	r3, [r0, #32]
 80011be:	401e      	ands	r6, r3
 80011c0:	4335      	orrs	r5, r6
 80011c2:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80011c4:	0849      	lsrs	r1, r1, #1
 80011c6:	d02d      	beq.n	8001224 <_pal_lld_setgroupmode+0x94>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 80011c8:	00bf      	lsls	r7, r7, #2
    bit++;
 80011ca:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 80011cc:	07cb      	lsls	r3, r1, #31
 80011ce:	d5f9      	bpl.n	80011c4 <_pal_lld_setgroupmode+0x34>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80011d0:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80011d2:	fa09 f504 	lsl.w	r5, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80011d6:	ea23 0305 	bic.w	r3, r3, r5
 80011da:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 80011dc:	0063      	lsls	r3, r4, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80011de:	6885      	ldr	r5, [r0, #8]
      m2 = 3 << (bit * 2);
 80011e0:	fa08 f303 	lsl.w	r3, r8, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401d      	ands	r5, r3
 80011e8:	6085      	str	r5, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011ea:	68c6      	ldr	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80011ec:	f004 0507 	and.w	r5, r4, #7
 80011f0:	00ad      	lsls	r5, r5, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011f2:	401e      	ands	r6, r3
      m4 = 15 << ((bit & 7) * 4);
 80011f4:	fa0e fa05 	lsl.w	sl, lr, r5
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80011f8:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011fc:	60c6      	str	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80011fe:	fa02 f505 	lsl.w	r5, r2, r5
 8001202:	ea6f 060a 	mvn.w	r6, sl
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001206:	d1d1      	bne.n	80011ac <_pal_lld_setgroupmode+0x1c>
        if (bit < 8)
 8001208:	2c07      	cmp	r4, #7
 800120a:	d812      	bhi.n	8001232 <_pal_lld_setgroupmode+0xa2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800120c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8001210:	ea06 060a 	and.w	r6, r6, sl
 8001214:	4335      	orrs	r5, r6
 8001216:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8001218:	6805      	ldr	r5, [r0, #0]
 800121a:	402b      	ands	r3, r5
 800121c:	433b      	orrs	r3, r7
    if (!mask)
 800121e:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8001220:	6003      	str	r3, [r0, #0]
    if (!mask)
 8001222:	d1d1      	bne.n	80011c8 <_pal_lld_setgroupmode+0x38>
  }
}
 8001224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001228:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800122a:	401e      	ands	r6, r3
 800122c:	4335      	orrs	r5, r6
 800122e:	6245      	str	r5, [r0, #36]	; 0x24
 8001230:	e7c8      	b.n	80011c4 <_pal_lld_setgroupmode+0x34>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001232:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8001236:	ea06 060a 	and.w	r6, r6, sl
 800123a:	4335      	orrs	r5, r6
 800123c:	6245      	str	r5, [r0, #36]	; 0x24
 800123e:	e7eb      	b.n	8001218 <_pal_lld_setgroupmode+0x88>

08001240 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 8001240:	b430      	push	{r4, r5}
 8001242:	2320      	movs	r3, #32
 8001244:	f383 8811 	msr	BASEPRI, r3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8001248:	68c3      	ldr	r3, [r0, #12]
 800124a:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 800124c:	2100      	movs	r1, #0
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800124e:	f042 0201 	orr.w	r2, r2, #1
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8001252:	2505      	movs	r5, #5

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 8001254:	2403      	movs	r4, #3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8001256:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 8001258:	6119      	str	r1, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800125a:	601d      	str	r5, [r3, #0]
 800125c:	7004      	strb	r4, [r0, #0]
 800125e:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 8001262:	bc30      	pop	{r4, r5}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
	...

08001270 <_port_irq_epilogue>:
 8001270:	2320      	movs	r3, #32
 8001272:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_port_irq_epilogue+0x4c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800127e:	d102      	bne.n	8001286 <_port_irq_epilogue+0x16>
 8001280:	f383 8811 	msr	BASEPRI, r3
 8001284:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800128a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800128e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001292:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8001296:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800129a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <_port_irq_epilogue+0x50>)
 80012a0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 80012a2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80012a4:	6889      	ldr	r1, [r1, #8]
 80012a6:	6892      	ldr	r2, [r2, #8]
 80012a8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80012aa:	bf8c      	ite	hi
 80012ac:	4a05      	ldrhi	r2, [pc, #20]	; (80012c4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80012ae:	4a06      	ldrls	r2, [pc, #24]	; (80012c8 <_port_irq_epilogue+0x58>)
 80012b0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	20000950 	.word	0x20000950
 80012c4:	080002b1 	.word	0x080002b1
 80012c8:	080002b4 	.word	0x080002b4
 80012cc:	00000000 	.word	0x00000000

080012d0 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 80012d0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80012d2:	4d17      	ldr	r5, [pc, #92]	; (8001330 <VectorA4+0x60>)
 80012d4:	69ab      	ldr	r3, [r5, #24]
 80012d6:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	4014      	ands	r4, r2
 80012dc:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80012de:	43d2      	mvns	r2, r2
 80012e0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80012e2:	07a3      	lsls	r3, r4, #30
 80012e4:	d504      	bpl.n	80012f0 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80012e6:	686b      	ldr	r3, [r5, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80012ea:	b10b      	cbz	r3, 80012f0 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 80012ec:	4628      	mov	r0, r5
 80012ee:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80012f0:	0760      	lsls	r0, r4, #29
 80012f2:	d504      	bpl.n	80012fe <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80012f4:	686b      	ldr	r3, [r5, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80012f8:	b10b      	cbz	r3, 80012fe <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <VectorA4+0x60>)
 80012fc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80012fe:	0721      	lsls	r1, r4, #28
 8001300:	d504      	bpl.n	800130c <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8001302:	686b      	ldr	r3, [r5, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8001306:	b10b      	cbz	r3, 800130c <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <VectorA4+0x60>)
 800130a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800130c:	06e2      	lsls	r2, r4, #27
 800130e:	d504      	bpl.n	800131a <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8001310:	686b      	ldr	r3, [r5, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8001314:	b10b      	cbz	r3, 800131a <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <VectorA4+0x60>)
 8001318:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800131a:	07e3      	lsls	r3, r4, #31
 800131c:	d504      	bpl.n	8001328 <VectorA4+0x58>
 800131e:	686b      	ldr	r3, [r5, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	b10b      	cbz	r3, 8001328 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <VectorA4+0x60>)
 8001326:	4798      	blx	r3
}
 8001328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800132c:	f7ff bfa0 	b.w	8001270 <_port_irq_epilogue>
 8001330:	200008b8 	.word	0x200008b8
	...

08001340 <VectorAC>:
 8001340:	f7ff bfc6 	b.w	80012d0 <VectorA4>
	...

08001350 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8001350:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD5);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <Vector108+0x10>)
 8001354:	f7ff fdf4 	bl	8000f40 <icu_lld_serve_interrupt>
}
 8001358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800135c:	f7ff bf88 	b.w	8001270 <_port_irq_epilogue>
 8001360:	2000089c 	.word	0x2000089c
	...

08001370 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8001370:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD3);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <VectorB4+0x10>)
 8001374:	f7ff fde4 	bl	8000f40 <icu_lld_serve_interrupt>
}
 8001378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800137c:	f7ff bf78 	b.w	8001270 <_port_irq_epilogue>
 8001380:	20000884 	.word	0x20000884
	...

08001390 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8001390:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD2);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <VectorB0+0x10>)
 8001394:	f7ff fdd4 	bl	8000f40 <icu_lld_serve_interrupt>
}
 8001398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800139c:	f7ff bf68 	b.w	8001270 <_port_irq_epilogue>
 80013a0:	2000086c 	.word	0x2000086c
	...

080013b0 <VectorB8>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80013b0:	4a26      	ldr	r2, [pc, #152]	; (800144c <VectorB8+0x9c>)
 80013b2:	6913      	ldr	r3, [r2, #16]
 80013b4:	079b      	lsls	r3, r3, #30
 80013b6:	d401      	bmi.n	80013bc <VectorB8+0xc>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80013b8:	f7ff bf5a 	b.w	8001270 <_port_irq_epilogue>
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80013bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    STM32_ST_TIM->SR = 0U;
 80013c0:	2700      	movs	r7, #0
 80013c2:	6117      	str	r7, [r2, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80013c4:	2620      	movs	r6, #32
 80013c6:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80013ca:	4c21      	ldr	r4, [pc, #132]	; (8001450 <VectorB8+0xa0>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80013cc:	6a50      	ldr	r0, [r2, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80013ce:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
  vtp = ch.vtlist.vt_next;
 80013d2:	69e1      	ldr	r1, [r4, #28]
 80013d4:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80013d6:	eba0 050c 	sub.w	r5, r0, ip
 80013da:	890b      	ldrh	r3, [r1, #8]
 80013dc:	b2ad      	uxth	r5, r5
 80013de:	429d      	cmp	r5, r3
 80013e0:	bf38      	it	cc
 80013e2:	f104 081c 	addcc.w	r8, r4, #28
 80013e6:	d31e      	bcc.n	8001426 <VectorB8+0x76>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80013e8:	4615      	mov	r5, r2
 80013ea:	f104 081c 	add.w	r8, r4, #28
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80013ee:	680a      	ldr	r2, [r1, #0]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80013f0:	4463      	add	r3, ip
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80013f2:	4542      	cmp	r2, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80013f4:	84e3      	strh	r3, [r4, #38]	; 0x26
    fn = vtp->vt_func;
 80013f6:	68cb      	ldr	r3, [r1, #12]
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80013f8:	f8c2 8004 	str.w	r8, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80013fc:	61e2      	str	r2, [r4, #28]
    vtp->vt_func = NULL;
 80013fe:	60cf      	str	r7, [r1, #12]
 8001400:	bf08      	it	eq
 8001402:	60ef      	streq	r7, [r5, #12]
 8001404:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8001408:	6908      	ldr	r0, [r1, #16]
 800140a:	4798      	blx	r3
 800140c:	f386 8811 	msr	BASEPRI, r6
  return (systime_t)STM32_ST_TIM->CNT;
 8001410:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001412:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8001416:	69e1      	ldr	r1, [r4, #28]
 8001418:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800141a:	eba0 020c 	sub.w	r2, r0, ip
 800141e:	890b      	ldrh	r3, [r1, #8]
 8001420:	b292      	uxth	r2, r2
 8001422:	4293      	cmp	r3, r2
 8001424:	d9e3      	bls.n	80013ee <VectorB8+0x3e>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8001426:	4541      	cmp	r1, r8
 8001428:	d009      	beq.n	800143e <VectorB8+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800142a:	4463      	add	r3, ip
 800142c:	1a1b      	subs	r3, r3, r0
 800142e:	b29b      	uxth	r3, r3
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 8001430:	2b02      	cmp	r3, #2
 8001432:	bf2c      	ite	cs
 8001434:	18c3      	addcs	r3, r0, r3
 8001436:	1c83      	addcc	r3, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <VectorB8+0x9c>)
 800143a:	b29b      	uxth	r3, r3
 800143c:	6353      	str	r3, [r2, #52]	; 0x34
 800143e:	2300      	movs	r3, #0
 8001440:	f383 8811 	msr	BASEPRI, r3
}
 8001444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001448:	f7ff bf12 	b.w	8001270 <_port_irq_epilogue>
 800144c:	40000800 	.word	0x40000800
 8001450:	20000950 	.word	0x20000950
	...

08001460 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8001462:	4809      	ldr	r0, [pc, #36]	; (8001488 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001464:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8001466:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001468:	0d89      	lsrs	r1, r1, #22
 800146a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800146e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8001470:	058c      	lsls	r4, r1, #22
 8001472:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8001474:	b10a      	cbz	r2, 800147a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8001476:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8001478:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800147a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800147e:	f7ff bef7 	b.w	8001270 <_port_irq_epilogue>
 8001482:	bf00      	nop
 8001484:	40026400 	.word	0x40026400
 8001488:	20000ac0 	.word	0x20000ac0
 800148c:	00000000 	.word	0x00000000

08001490 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001494:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8001496:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001498:	0c09      	lsrs	r1, r1, #16
 800149a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800149e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 80014a0:	040c      	lsls	r4, r1, #16
 80014a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 80014a4:	b10a      	cbz	r2, 80014aa <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 80014a6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80014a8:	4790      	blx	r2
}
 80014aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80014ae:	f7ff bedf 	b.w	8001270 <_port_irq_epilogue>
 80014b2:	bf00      	nop
 80014b4:	40026400 	.word	0x40026400
 80014b8:	20000ac0 	.word	0x20000ac0
 80014bc:	00000000 	.word	0x00000000

080014c0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80014c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 80014c6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80014c8:	0989      	lsrs	r1, r1, #6
 80014ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80014ce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80014d0:	018c      	lsls	r4, r1, #6
 80014d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 80014d4:	b10a      	cbz	r2, 80014da <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 80014d6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80014d8:	4790      	blx	r2
}
 80014da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80014de:	f7ff bec7 	b.w	8001270 <_port_irq_epilogue>
 80014e2:	bf00      	nop
 80014e4:	40026400 	.word	0x40026400
 80014e8:	20000ac0 	.word	0x20000ac0
 80014ec:	00000000 	.word	0x00000000

080014f0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80014f0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80014f6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 80014f8:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80014fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80014fe:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8001500:	b10a      	cbz	r2, 8001506 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8001502:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001504:	4790      	blx	r2
}
 8001506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800150a:	f7ff beb1 	b.w	8001270 <_port_irq_epilogue>
 800150e:	bf00      	nop
 8001510:	40026400 	.word	0x40026400
 8001514:	20000ac0 	.word	0x20000ac0
	...

08001520 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001524:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8001526:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001528:	0d89      	lsrs	r1, r1, #22
 800152a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800152e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8001530:	058c      	lsls	r4, r1, #22
 8001532:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8001534:	b10a      	cbz	r2, 800153a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8001536:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001538:	4790      	blx	r2
}
 800153a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800153e:	f7ff be97 	b.w	8001270 <_port_irq_epilogue>
 8001542:	bf00      	nop
 8001544:	40026400 	.word	0x40026400
 8001548:	20000ac0 	.word	0x20000ac0
 800154c:	00000000 	.word	0x00000000

08001550 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
 8001552:	4809      	ldr	r0, [pc, #36]	; (8001578 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001554:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 8001556:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800155e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8001560:	040c      	lsls	r4, r1, #16
 8001562:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8001564:	b10a      	cbz	r2, 800156a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8001566:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001568:	4790      	blx	r2
}
 800156a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800156e:	f7ff be7f 	b.w	8001270 <_port_irq_epilogue>
 8001572:	bf00      	nop
 8001574:	40026400 	.word	0x40026400
 8001578:	20000ac0 	.word	0x20000ac0
 800157c:	00000000 	.word	0x00000000

08001580 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001584:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 8001586:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001588:	0989      	lsrs	r1, r1, #6
 800158a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800158e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8001590:	018c      	lsls	r4, r1, #6
 8001592:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8001594:	b10a      	cbz	r2, 800159a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8001596:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001598:	4790      	blx	r2
}
 800159a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800159e:	f7ff be67 	b.w	8001270 <_port_irq_epilogue>
 80015a2:	bf00      	nop
 80015a4:	40026400 	.word	0x40026400
 80015a8:	20000ac0 	.word	0x20000ac0
 80015ac:	00000000 	.word	0x00000000

080015b0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80015b0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80015b6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 80015b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80015ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80015be:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 80015c0:	b10a      	cbz	r2, 80015c6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80015c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80015c4:	4790      	blx	r2
}
 80015c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80015ca:	f7ff be51 	b.w	8001270 <_port_irq_epilogue>
 80015ce:	bf00      	nop
 80015d0:	40026400 	.word	0x40026400
 80015d4:	20000ac0 	.word	0x20000ac0
	...

080015e0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80015e4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 80015e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80015e8:	0d89      	lsrs	r1, r1, #22
 80015ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80015ee:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 80015f0:	058c      	lsls	r4, r1, #22
 80015f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80015f4:	b10a      	cbz	r2, 80015fa <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80015f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80015f8:	4790      	blx	r2
}
 80015fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80015fe:	f7ff be37 	b.w	8001270 <_port_irq_epilogue>
 8001602:	bf00      	nop
 8001604:	40026000 	.word	0x40026000
 8001608:	20000ac0 	.word	0x20000ac0
 800160c:	00000000 	.word	0x00000000

08001610 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001614:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8001616:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001618:	0c09      	lsrs	r1, r1, #16
 800161a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800161e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8001620:	040c      	lsls	r4, r1, #16
 8001622:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8001624:	b10a      	cbz	r2, 800162a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8001626:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001628:	4790      	blx	r2
}
 800162a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800162e:	f7ff be1f 	b.w	8001270 <_port_irq_epilogue>
 8001632:	bf00      	nop
 8001634:	40026000 	.word	0x40026000
 8001638:	20000ac0 	.word	0x20000ac0
 800163c:	00000000 	.word	0x00000000

08001640 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001644:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8001646:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001648:	0989      	lsrs	r1, r1, #6
 800164a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800164e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8001650:	018c      	lsls	r4, r1, #6
 8001652:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8001654:	b10a      	cbz	r2, 800165a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8001656:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001658:	4790      	blx	r2
}
 800165a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800165e:	f7ff be07 	b.w	8001270 <_port_irq_epilogue>
 8001662:	bf00      	nop
 8001664:	40026000 	.word	0x40026000
 8001668:	20000ac0 	.word	0x20000ac0
 800166c:	00000000 	.word	0x00000000

08001670 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001670:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001676:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8001678:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800167a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800167e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8001680:	b10a      	cbz	r2, 8001686 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8001682:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001684:	4790      	blx	r2
}
 8001686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800168a:	f7ff bdf1 	b.w	8001270 <_port_irq_epilogue>
 800168e:	bf00      	nop
 8001690:	40026000 	.word	0x40026000
 8001694:	20000ac0 	.word	0x20000ac0
	...

080016a0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80016a4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 80016a6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80016a8:	0d89      	lsrs	r1, r1, #22
 80016aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80016ae:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 80016b0:	058c      	lsls	r4, r1, #22
 80016b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80016b4:	b10a      	cbz	r2, 80016ba <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80016b6:	69c0      	ldr	r0, [r0, #28]
 80016b8:	4790      	blx	r2
}
 80016ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80016be:	f7ff bdd7 	b.w	8001270 <_port_irq_epilogue>
 80016c2:	bf00      	nop
 80016c4:	40026000 	.word	0x40026000
 80016c8:	20000ac0 	.word	0x20000ac0
 80016cc:	00000000 	.word	0x00000000

080016d0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80016d4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 80016d6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80016d8:	0c09      	lsrs	r1, r1, #16
 80016da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80016de:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80016e0:	040c      	lsls	r4, r1, #16
 80016e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80016e4:	b10a      	cbz	r2, 80016ea <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80016e6:	6940      	ldr	r0, [r0, #20]
 80016e8:	4790      	blx	r2
}
 80016ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80016ee:	f7ff bdbf 	b.w	8001270 <_port_irq_epilogue>
 80016f2:	bf00      	nop
 80016f4:	40026000 	.word	0x40026000
 80016f8:	20000ac0 	.word	0x20000ac0
 80016fc:	00000000 	.word	0x00000000

08001700 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001704:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 8001706:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001708:	0989      	lsrs	r1, r1, #6
 800170a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800170e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8001710:	018c      	lsls	r4, r1, #6
 8001712:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8001714:	b10a      	cbz	r2, 800171a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8001716:	68c0      	ldr	r0, [r0, #12]
 8001718:	4790      	blx	r2
}
 800171a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800171e:	f7ff bda7 	b.w	8001270 <_port_irq_epilogue>
 8001722:	bf00      	nop
 8001724:	40026000 	.word	0x40026000
 8001728:	20000ac0 	.word	0x20000ac0
 800172c:	00000000 	.word	0x00000000

08001730 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8001730:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800173c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	b10b      	cbz	r3, 8001746 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001742:	6850      	ldr	r0, [r2, #4]
 8001744:	4798      	blx	r3
}
 8001746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800174a:	f7ff bd91 	b.w	8001270 <_port_irq_epilogue>
 800174e:	bf00      	nop
 8001750:	40026000 	.word	0x40026000
 8001754:	20000ac0 	.word	0x20000ac0
	...

08001760 <SVC_Handler>:
void SVC_Handler(void) {
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001764:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8001768:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800176a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800176e:	2300      	movs	r3, #0
 8001770:	f383 8811 	msr	BASEPRI, r3
}
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	0000      	movs	r0, r0
	...

08001780 <chTMStopMeasurementX>:
  return DWT->CYCCNT;
 8001780:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <chTMStopMeasurementX+0x44>)
 8001784:	6852      	ldr	r2, [r2, #4]
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8001788:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800178a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
  tmp->last = (now - tmp->last) - offset;
 800178e:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8001790:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8001794:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001796:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8001798:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 800179a:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800179c:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800179e:	eb14 0b03 	adds.w	fp, r4, r3
  if (tmp->last < tmp->best) {
 80017a2:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 80017a4:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80017a6:	f145 0c00 	adc.w	ip, r5, #0
  if (tmp->last > tmp->worst) {
 80017aa:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 80017ac:	bf88      	it	hi
 80017ae:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80017b0:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80017b2:	e9c0 bc04 	strd	fp, ip, [r0, #16]
    tmp->best = tmp->last;
 80017b6:	bf38      	it	cc
 80017b8:	6003      	strcc	r3, [r0, #0]
}
 80017ba:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 80017be:	4770      	bx	lr
 80017c0:	e0001000 	.word	0xe0001000
 80017c4:	20000950 	.word	0x20000950
	...

080017d0 <wakeup>:
 80017d0:	2320      	movs	r3, #32
 80017d2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->p_state) {
 80017d6:	7f03      	ldrb	r3, [r0, #28]
 80017d8:	2b07      	cmp	r3, #7
 80017da:	d80d      	bhi.n	80017f8 <wakeup+0x28>
 80017dc:	e8df f003 	tbb	[pc, r3]
 80017e0:	220c0c26 	.word	0x220c0c26
 80017e4:	080c0408 	.word	0x080c0408
    chSemFastSignalI(tp->p_u.wtsemp);
 80017e8:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80017ea:	6893      	ldr	r3, [r2, #8]
 80017ec:	3301      	adds	r3, #1
 80017ee:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80017f0:	e9d0 3200 	ldrd	r3, r2, [r0]
 80017f4:	6013      	str	r3, [r2, #0]
  tp->p_next->p_prev = tp->p_prev;
 80017f6:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 80017f8:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 80017fa:	2200      	movs	r2, #0
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80017fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->p_prio >= tp->p_prio);
 8001800:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <wakeup+0x64>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8001804:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 8001806:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 8001808:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	428a      	cmp	r2, r1
 800180e:	d2fb      	bcs.n	8001808 <wakeup+0x38>
  tp->p_prev = cp->p_prev;
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	2100      	movs	r1, #0
 8001814:	e9c0 3200 	strd	r3, r2, [r0]
  tp->p_prev->p_next = tp;
 8001818:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800181a:	6058      	str	r0, [r3, #4]
 800181c:	f381 8811 	msr	BASEPRI, r1
}
 8001820:	bc10      	pop	{r4}
 8001822:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 8001824:	6a03      	ldr	r3, [r0, #32]
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
    break;
 800182a:	e7e5      	b.n	80017f8 <wakeup+0x28>
 800182c:	2300      	movs	r3, #0
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	4770      	bx	lr
 8001834:	20000950 	.word	0x20000950
	...

08001840 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 8001840:	2200      	movs	r2, #0
  } while (cp->p_prio >= tp->p_prio);
 8001842:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <chSchReadyI+0x24>)
thread_t *chSchReadyI(thread_t *tp) {
 8001846:	b410      	push	{r4}
 8001848:	4604      	mov	r4, r0
  tp->p_state = CH_STATE_READY;
 800184a:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 800184c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	428a      	cmp	r2, r1
 8001852:	d2fb      	bcs.n	800184c <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 8001854:	685a      	ldr	r2, [r3, #4]
}
 8001856:	4620      	mov	r0, r4
  tp->p_prev = cp->p_prev;
 8001858:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 800185c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800185e:	605c      	str	r4, [r3, #4]
}
 8001860:	bc10      	pop	{r4}
 8001862:	4770      	bx	lr
 8001864:	20000950 	.word	0x20000950
	...

08001870 <chEvtBroadcastFlagsI.constprop.33>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001872:	4f15      	ldr	r7, [pc, #84]	; (80018c8 <chEvtBroadcastFlagsI.constprop.33+0x58>)
 8001874:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001878:	42bc      	cmp	r4, r7
 800187a:	d01f      	beq.n	80018bc <chEvtBroadcastFlagsI.constprop.33+0x4c>
 800187c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800187e:	2600      	movs	r6, #0
 8001880:	e004      	b.n	800188c <chEvtBroadcastFlagsI.constprop.33+0x1c>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001882:	2a0b      	cmp	r2, #11
 8001884:	d01b      	beq.n	80018be <chEvtBroadcastFlagsI.constprop.33+0x4e>
    elp = elp->el_next;
 8001886:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001888:	42bc      	cmp	r4, r7
 800188a:	d017      	beq.n	80018bc <chEvtBroadcastFlagsI.constprop.33+0x4c>
    elp->el_flags |= flags;
 800188c:	68e3      	ldr	r3, [r4, #12]
 800188e:	432b      	orrs	r3, r5
 8001890:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001892:	b115      	cbz	r5, 800189a <chEvtBroadcastFlagsI.constprop.33+0x2a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8001894:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001896:	4213      	tst	r3, r2
 8001898:	d0f5      	beq.n	8001886 <chEvtBroadcastFlagsI.constprop.33+0x16>
  tp->p_epending |= events;
 800189a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800189e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80018a0:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 80018a2:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80018a4:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 80018a6:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80018a8:	d1eb      	bne.n	8001882 <chEvtBroadcastFlagsI.constprop.33+0x12>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80018aa:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80018ac:	4213      	tst	r3, r2
 80018ae:	d0ea      	beq.n	8001886 <chEvtBroadcastFlagsI.constprop.33+0x16>
    tp->p_u.rdymsg = MSG_OK;
 80018b0:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 80018b2:	f7ff ffc5 	bl	8001840 <chSchReadyI>
    elp = elp->el_next;
 80018b6:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80018b8:	42bc      	cmp	r4, r7
 80018ba:	d1e7      	bne.n	800188c <chEvtBroadcastFlagsI.constprop.33+0x1c>
}
 80018bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80018be:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80018c0:	ea32 0303 	bics.w	r3, r2, r3
 80018c4:	d1df      	bne.n	8001886 <chEvtBroadcastFlagsI.constprop.33+0x16>
 80018c6:	e7f3      	b.n	80018b0 <chEvtBroadcastFlagsI.constprop.33+0x40>
 80018c8:	200008d4 	.word	0x200008d4
 80018cc:	00000000 	.word	0x00000000

080018d0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80018d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80018d4:	4c67      	ldr	r4, [pc, #412]	; (8001a74 <VectorD4+0x1a4>)
 80018d6:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80018d8:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 80018dc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80018de:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80018e0:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80018e2:	d47d      	bmi.n	80019e0 <VectorD4+0x110>
 80018e4:	2320      	movs	r3, #32
 80018e6:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80018ea:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80018ee:	d049      	beq.n	8001984 <VectorD4+0xb4>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80018f0:	4f61      	ldr	r7, [pc, #388]	; (8001a78 <VectorD4+0x1a8>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80018f2:	f04f 0900 	mov.w	r9, #0
 80018f6:	e008      	b.n	800190a <VectorD4+0x3a>
    if (sr & USART_SR_RXNE)
 80018f8:	06a9      	lsls	r1, r5, #26
    b = u->DR;
 80018fa:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80018fe:	d41d      	bmi.n	800193c <VectorD4+0x6c>
    sr = u->SR;
 8001900:	6835      	ldr	r5, [r6, #0]
 8001902:	b2ad      	uxth	r5, r5
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001904:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8001908:	d03c      	beq.n	8001984 <VectorD4+0xb4>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800190a:	072b      	lsls	r3, r5, #28
 800190c:	d0f4      	beq.n	80018f8 <VectorD4+0x28>
    sts |= SD_OVERRUN_ERROR;
 800190e:	f015 0f08 	tst.w	r5, #8
 8001912:	bf0c      	ite	eq
 8001914:	2000      	moveq	r0, #0
 8001916:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8001918:	07e9      	lsls	r1, r5, #31
    sts |= SD_PARITY_ERROR;
 800191a:	bf48      	it	mi
 800191c:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8001920:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8001922:	bf48      	it	mi
 8001924:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8001928:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800192a:	bf48      	it	mi
 800192c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001930:	f7ff ff9e 	bl	8001870 <chEvtBroadcastFlagsI.constprop.33>
    if (sr & USART_SR_RXNE)
 8001934:	06a9      	lsls	r1, r5, #26
    b = u->DR;
 8001936:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800193a:	d5e1      	bpl.n	8001900 <VectorD4+0x30>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800193c:	6963      	ldr	r3, [r4, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800193e:	2b00      	cmp	r3, #0
 8001940:	d040      	beq.n	80019c4 <VectorD4+0xf4>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001942:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001946:	4293      	cmp	r3, r2
 8001948:	d043      	beq.n	80019d2 <VectorD4+0x102>
  iqp->q_counter++;
 800194a:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
 800194c:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
 800194e:	3201      	adds	r2, #1
 8001950:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
 8001952:	6221      	str	r1, [r4, #32]
    b = u->DR;
 8001954:	f883 a000 	strb.w	sl, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001958:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800195c:	429a      	cmp	r2, r3
 800195e:	d301      	bcc.n	8001964 <VectorD4+0x94>
    iqp->q_wrptr = iqp->q_buffer;
 8001960:	69a3      	ldr	r3, [r4, #24]
 8001962:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001964:	68e3      	ldr	r3, [r4, #12]
 8001966:	42bb      	cmp	r3, r7
 8001968:	d0ca      	beq.n	8001900 <VectorD4+0x30>
  tqp->p_next = tp->p_next;
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	60e2      	str	r2, [r4, #12]
  (void) chSchReadyI(tp);
 800196e:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001970:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 8001972:	f8c3 9020 	str.w	r9, [r3, #32]
  (void) chSchReadyI(tp);
 8001976:	f7ff ff63 	bl	8001840 <chSchReadyI>
    sr = u->SR;
 800197a:	6835      	ldr	r5, [r6, #0]
 800197c:	b2ad      	uxth	r5, r5
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800197e:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8001982:	d1c2      	bne.n	800190a <VectorD4+0x3a>
 8001984:	2300      	movs	r3, #0
 8001986:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800198a:	f018 0f80 	tst.w	r8, #128	; 0x80
 800198e:	d001      	beq.n	8001994 <VectorD4+0xc4>
 8001990:	062a      	lsls	r2, r5, #24
 8001992:	d433      	bmi.n	80019fc <VectorD4+0x12c>
  if (sr & USART_SR_TC) {
 8001994:	066b      	lsls	r3, r5, #25
 8001996:	d511      	bpl.n	80019bc <VectorD4+0xec>
 8001998:	2320      	movs	r3, #32
 800199a:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800199e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d051      	beq.n	8001a4a <VectorD4+0x17a>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80019a6:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80019aa:	ea08 0303 	and.w	r3, r8, r3
    u->SR = ~USART_SR_TC;
 80019ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80019b2:	60f3      	str	r3, [r6, #12]
 80019b4:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 80019b6:	6032      	str	r2, [r6, #0]
 80019b8:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 80019bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80019c0:	f7ff bc56 	b.w	8001270 <_port_irq_epilogue>
 80019c4:	2004      	movs	r0, #4
 80019c6:	f7ff ff53 	bl	8001870 <chEvtBroadcastFlagsI.constprop.33>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80019ca:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d1bb      	bne.n	800194a <VectorD4+0x7a>
 80019d2:	6962      	ldr	r2, [r4, #20]
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d0b8      	beq.n	800194a <VectorD4+0x7a>
 80019d8:	2080      	movs	r0, #128	; 0x80
 80019da:	f7ff ff49 	bl	8001870 <chEvtBroadcastFlagsI.constprop.33>
 80019de:	e78f      	b.n	8001900 <VectorD4+0x30>
 80019e0:	2320      	movs	r3, #32
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019ea:	f7ff ff41 	bl	8001870 <chEvtBroadcastFlagsI.constprop.33>
    u->SR = ~USART_SR_LBD;
 80019ee:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80019f2:	6033      	str	r3, [r6, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	f383 8811 	msr	BASEPRI, r3
 80019fa:	e773      	b.n	80018e4 <VectorD4+0x14>
 80019fc:	2320      	movs	r3, #32
 80019fe:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8001a02:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d026      	beq.n	8001a58 <VectorD4+0x188>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8001a0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8001a0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
  b = *oqp->q_rdptr++;
 8001a0e:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 8001a10:	3201      	adds	r2, #1
 8001a12:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8001a14:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8001a16:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 8001a18:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001a1a:	d301      	bcc.n	8001a20 <VectorD4+0x150>
    oqp->q_rdptr = oqp->q_buffer;
 8001a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a1e:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001a20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a22:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <VectorD4+0x1ac>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d009      	beq.n	8001a3c <VectorD4+0x16c>
  tqp->p_next = tp->p_next;
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_u.rdymsg = msg;
 8001a2c:	f04f 0c00 	mov.w	ip, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001a30:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8001a32:	4618      	mov	r0, r3
  tp->p_u.rdymsg = msg;
 8001a34:	f8c3 c020 	str.w	ip, [r3, #32]
  (void) chSchReadyI(tp);
 8001a38:	f7ff ff02 	bl	8001840 <chSchReadyI>
      u->DR = b;
 8001a3c:	6077      	str	r7, [r6, #4]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f383 8811 	msr	BASEPRI, r3
  if (sr & USART_SR_TC) {
 8001a44:	066b      	lsls	r3, r5, #25
 8001a46:	d5b9      	bpl.n	80019bc <VectorD4+0xec>
 8001a48:	e7a6      	b.n	8001998 <VectorD4+0xc8>
 8001a4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0aa      	beq.n	80019a6 <VectorD4+0xd6>
 8001a50:	2010      	movs	r0, #16
 8001a52:	f7ff ff0d 	bl	8001870 <chEvtBroadcastFlagsI.constprop.33>
 8001a56:	e7a6      	b.n	80019a6 <VectorD4+0xd6>
 8001a58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a5a:	2a00      	cmp	r2, #0
 8001a5c:	d0d5      	beq.n	8001a0a <VectorD4+0x13a>
 8001a5e:	2008      	movs	r0, #8
 8001a60:	f7ff ff06 	bl	8001870 <chEvtBroadcastFlagsI.constprop.33>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001a64:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001a68:	ea08 0303 	and.w	r3, r8, r3
 8001a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a70:	60f3      	str	r3, [r6, #12]
 8001a72:	e7e4      	b.n	8001a3e <VectorD4+0x16e>
 8001a74:	200008d4 	.word	0x200008d4
 8001a78:	200008e0 	.word	0x200008e0
 8001a7c:	20000904 	.word	0x20000904

08001a80 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr = ADC1->SR;
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <Vector88+0x8c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8001a86:	2100      	movs	r1, #0
 8001a88:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001a8a:	0693      	lsls	r3, r2, #26
 8001a8c:	d536      	bpl.n	8001afc <Vector88+0x7c>
 8001a8e:	4c20      	ldr	r4, [pc, #128]	; (8001b10 <Vector88+0x90>)
 8001a90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a92:	680a      	ldr	r2, [r1, #0]
 8001a94:	6853      	ldr	r3, [r2, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d030      	beq.n	8001afc <Vector88+0x7c>
    if (ADCD1.grpp != NULL)
 8001a9a:	6925      	ldr	r5, [r4, #16]
 8001a9c:	2d00      	cmp	r5, #0
 8001a9e:	d02d      	beq.n	8001afc <Vector88+0x7c>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001aa0:	6813      	ldr	r3, [r2, #0]
 8001aa2:	f023 031f 	bic.w	r3, r3, #31
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	f013 0301 	ands.w	r3, r3, #1
 8001aae:	d1fb      	bne.n	8001aa8 <Vector88+0x28>
 8001ab0:	7a0f      	ldrb	r7, [r1, #8]
 8001ab2:	684e      	ldr	r6, [r1, #4]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001ab4:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 8001ab6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8001ab8:	203d      	movs	r0, #61	; 0x3d
 8001aba:	40b8      	lsls	r0, r7
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001abc:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
 8001abe:	6030      	str	r0, [r6, #0]
  adcp->adc->CR1 = 0;
 8001ac0:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001ac2:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001ac4:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001ac6:	b1ed      	cbz	r5, 8001b04 <Vector88+0x84>
 8001ac8:	2305      	movs	r3, #5
 8001aca:	7023      	strb	r3, [r4, #0]
 8001acc:	4810      	ldr	r0, [pc, #64]	; (8001b10 <Vector88+0x90>)
 8001ace:	47a8      	blx	r5
 8001ad0:	7823      	ldrb	r3, [r4, #0]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	bf04      	itt	eq
 8001ad6:	2302      	moveq	r3, #2
 8001ad8:	7023      	strbeq	r3, [r4, #0]
 8001ada:	2300      	movs	r3, #0
 8001adc:	6123      	str	r3, [r4, #16]
 8001ade:	2320      	movs	r3, #32
 8001ae0:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001ae4:	6960      	ldr	r0, [r4, #20]
 8001ae6:	b130      	cbz	r0, 8001af6 <Vector88+0x76>
    tp->p_u.rdymsg = msg;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aec:	6203      	str	r3, [r0, #32]
    *trp = NULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	6163      	str	r3, [r4, #20]
    (void) chSchReadyI(tp);
 8001af2:	f7ff fea5 	bl	8001840 <chSchReadyI>
 8001af6:	2300      	movs	r3, #0
 8001af8:	f383 8811 	msr	BASEPRI, r3
}
 8001afc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001b00:	f7ff bbb6 	b.w	8001270 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001b04:	2302      	movs	r3, #2
 8001b06:	6125      	str	r5, [r4, #16]
 8001b08:	7023      	strb	r3, [r4, #0]
 8001b0a:	e7e8      	b.n	8001ade <Vector88+0x5e>
 8001b0c:	40012000 	.word	0x40012000
 8001b10:	20000838 	.word	0x20000838
	...

08001b20 <adc_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001b20:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b28:	4604      	mov	r4, r0
 8001b2a:	6905      	ldr	r5, [r0, #16]
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001b2c:	d033      	beq.n	8001b96 <adc_lld_serve_rx_interrupt+0x76>
  dmaStreamDisable(adcp->dmastp);
 8001b2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001b30:	6803      	ldr	r3, [r0, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	f022 021f 	bic.w	r2, r2, #31
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	f011 0101 	ands.w	r1, r1, #1
 8001b40:	d1fb      	bne.n	8001b3a <adc_lld_serve_rx_interrupt+0x1a>
 8001b42:	7a07      	ldrb	r7, [r0, #8]
 8001b44:	6846      	ldr	r6, [r0, #4]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001b46:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 8001b48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8001b4a:	223d      	movs	r2, #61	; 0x3d
 8001b4c:	40ba      	lsls	r2, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001b4e:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001b50:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8001b52:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8001b54:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001b56:	6098      	str	r0, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	d03e      	beq.n	8001bda <adc_lld_serve_rx_interrupt+0xba>
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	7023      	strb	r3, [r4, #0]
 8001b60:	4620      	mov	r0, r4
 8001b62:	47a8      	blx	r5
 8001b64:	7823      	ldrb	r3, [r4, #0]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	bf04      	itt	eq
 8001b6a:	2302      	moveq	r3, #2
 8001b6c:	7023      	strbeq	r3, [r4, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	6123      	str	r3, [r4, #16]
 8001b72:	2320      	movs	r3, #32
 8001b74:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001b78:	6963      	ldr	r3, [r4, #20]
 8001b7a:	b13b      	cbz	r3, 8001b8c <adc_lld_serve_rx_interrupt+0x6c>
    *trp = NULL;
 8001b7c:	2100      	movs	r1, #0
    tp->p_u.rdymsg = msg;
 8001b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    *trp = NULL;
 8001b82:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8001b84:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001b86:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001b88:	f7ff fe5a 	bl	8001840 <chSchReadyI>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f383 8811 	msr	BASEPRI, r3
}
 8001b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (adcp->grpp != NULL) {
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	d0fb      	beq.n	8001b92 <adc_lld_serve_rx_interrupt+0x72>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8001b9a:	068a      	lsls	r2, r1, #26
 8001b9c:	d512      	bpl.n	8001bc4 <adc_lld_serve_rx_interrupt+0xa4>
        _adc_isr_full_code(adcp);
 8001b9e:	782b      	ldrb	r3, [r5, #0]
 8001ba0:	686e      	ldr	r6, [r5, #4]
 8001ba2:	b1f3      	cbz	r3, 8001be2 <adc_lld_serve_rx_interrupt+0xc2>
 8001ba4:	2e00      	cmp	r6, #0
 8001ba6:	d0f4      	beq.n	8001b92 <adc_lld_serve_rx_interrupt+0x72>
 8001ba8:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8001bac:	2a01      	cmp	r2, #1
 8001bae:	d943      	bls.n	8001c38 <adc_lld_serve_rx_interrupt+0x118>
 8001bb0:	886b      	ldrh	r3, [r5, #2]
 8001bb2:	0852      	lsrs	r2, r2, #1
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001bbc:	4633      	mov	r3, r6
}
 8001bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 8001bc2:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001bc4:	06cb      	lsls	r3, r1, #27
 8001bc6:	d5e4      	bpl.n	8001b92 <adc_lld_serve_rx_interrupt+0x72>
        _adc_isr_half_code(adcp);
 8001bc8:	686b      	ldr	r3, [r5, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0e1      	beq.n	8001b92 <adc_lld_serve_rx_interrupt+0x72>
 8001bce:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
}
 8001bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_half_code(adcp);
 8001bd6:	0852      	lsrs	r2, r2, #1
 8001bd8:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001bda:	2302      	movs	r3, #2
 8001bdc:	6125      	str	r5, [r4, #16]
 8001bde:	7023      	strb	r3, [r4, #0]
 8001be0:	e7c7      	b.n	8001b72 <adc_lld_serve_rx_interrupt+0x52>
  dmaStreamDisable(adcp->dmastp);
 8001be2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001be4:	6802      	ldr	r2, [r0, #0]
 8001be6:	6813      	ldr	r3, [r2, #0]
 8001be8:	f023 031f 	bic.w	r3, r3, #31
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	6813      	ldr	r3, [r2, #0]
 8001bf0:	f013 0301 	ands.w	r3, r3, #1
 8001bf4:	d1fb      	bne.n	8001bee <adc_lld_serve_rx_interrupt+0xce>
 8001bf6:	7a07      	ldrb	r7, [r0, #8]
 8001bf8:	6845      	ldr	r5, [r0, #4]
  adcp->adc->CR1 = 0;
 8001bfa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8001bfc:	213d      	movs	r1, #61	; 0x3d
 8001bfe:	40b9      	lsls	r1, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001c00:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001c02:	6029      	str	r1, [r5, #0]
  adcp->adc->CR1 = 0;
 8001c04:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001c06:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001c08:	6090      	str	r0, [r2, #8]
        _adc_isr_full_code(adcp);
 8001c0a:	b1ce      	cbz	r6, 8001c40 <adc_lld_serve_rx_interrupt+0x120>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	7023      	strb	r3, [r4, #0]
 8001c10:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001c14:	4620      	mov	r0, r4
 8001c16:	47b0      	blx	r6
 8001c18:	7823      	ldrb	r3, [r4, #0]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d010      	beq.n	8001c40 <adc_lld_serve_rx_interrupt+0x120>
 8001c1e:	2320      	movs	r3, #32
 8001c20:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001c24:	6963      	ldr	r3, [r4, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0b0      	beq.n	8001b8c <adc_lld_serve_rx_interrupt+0x6c>
    *trp = NULL;
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
 8001c2e:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001c30:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001c32:	f7ff fe05 	bl	8001840 <chSchReadyI>
 8001c36:	e7a9      	b.n	8001b8c <adc_lld_serve_rx_interrupt+0x6c>
 8001c38:	4633      	mov	r3, r6
}
 8001c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 8001c3e:	4718      	bx	r3
 8001c40:	2202      	movs	r2, #2
 8001c42:	2300      	movs	r3, #0
 8001c44:	7022      	strb	r2, [r4, #0]
 8001c46:	6123      	str	r3, [r4, #16]
 8001c48:	e7e9      	b.n	8001c1e <adc_lld_serve_rx_interrupt+0xfe>
 8001c4a:	bf00      	nop
 8001c4c:	0000      	movs	r0, r0
	...

08001c50 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <chVTDoResetI+0x70>)
 8001c52:	6802      	ldr	r2, [r0, #0]
 8001c54:	69d9      	ldr	r1, [r3, #28]
 8001c56:	4281      	cmp	r1, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8001c58:	b430      	push	{r4, r5}
  if (ch.vtlist.vt_next != vtp) {
 8001c5a:	d00e      	beq.n	8001c7a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001c5c:	6841      	ldr	r1, [r0, #4]
 8001c5e:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001c60:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001c62:	331c      	adds	r3, #28
    vtp->vt_func = NULL;
 8001c64:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001c66:	429a      	cmp	r2, r3
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001c68:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 8001c6a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001c6c:	d003      	beq.n	8001c76 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8001c6e:	8901      	ldrh	r1, [r0, #8]
 8001c70:	8913      	ldrh	r3, [r2, #8]
 8001c72:	440b      	add	r3, r1
 8001c74:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001c76:	bc30      	pop	{r4, r5}
 8001c78:	4770      	bx	lr
  ch.vtlist.vt_next = vtp->vt_next;
 8001c7a:	4618      	mov	r0, r3
  vtp->vt_func = NULL;
 8001c7c:	2400      	movs	r4, #0
  ch.vtlist.vt_next = vtp->vt_next;
 8001c7e:	f840 2f1c 	str.w	r2, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001c82:	4282      	cmp	r2, r0
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001c84:	6050      	str	r0, [r2, #4]
  vtp->vt_func = NULL;
 8001c86:	60cc      	str	r4, [r1, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001c88:	d017      	beq.n	8001cba <chVTDoResetI+0x6a>
  return (systime_t)STM32_ST_TIM->CNT;
 8001c8a:	4c0e      	ldr	r4, [pc, #56]	; (8001cc4 <chVTDoResetI+0x74>)
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001c8c:	8908      	ldrh	r0, [r1, #8]
 8001c8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001c90:	8cdd      	ldrh	r5, [r3, #38]	; 0x26
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001c92:	8913      	ldrh	r3, [r2, #8]
 8001c94:	b289      	uxth	r1, r1
 8001c96:	4403      	add	r3, r0
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001c98:	1b48      	subs	r0, r1, r5
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001c9a:	b29b      	uxth	r3, r3
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001c9c:	b280      	uxth	r0, r0
 8001c9e:	4283      	cmp	r3, r0
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001ca0:	8113      	strh	r3, [r2, #8]
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001ca2:	d9e8      	bls.n	8001c76 <chVTDoResetI+0x26>
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001ca4:	1a6d      	subs	r5, r5, r1
 8001ca6:	442b      	add	r3, r5
 8001ca8:	b29b      	uxth	r3, r3
  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	bf2c      	ite	cs
 8001cae:	18cb      	addcs	r3, r1, r3
 8001cb0:	1c8b      	addcc	r3, r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001cb6:	bc30      	pop	{r4, r5}
 8001cb8:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0;
 8001cba:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <chVTDoResetI+0x74>)
 8001cbc:	60dc      	str	r4, [r3, #12]
    return;
 8001cbe:	e7da      	b.n	8001c76 <chVTDoResetI+0x26>
 8001cc0:	20000950 	.word	0x20000950
 8001cc4:	40000800 	.word	0x40000800
	...

08001cd0 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001cd0:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001cd2:	4e25      	ldr	r6, [pc, #148]	; (8001d68 <chVTDoSetI+0x98>)
  return (systime_t)STM32_ST_TIM->CNT;
 8001cd4:	4f25      	ldr	r7, [pc, #148]	; (8001d6c <chVTDoSetI+0x9c>)
 8001cd6:	46b4      	mov	ip, r6
 8001cd8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8001cda:	f85c 4f1c 	ldr.w	r4, [ip, #28]!
 8001cde:	2902      	cmp	r1, #2
 8001ce0:	bf38      	it	cc
 8001ce2:	2102      	movcc	r1, #2
 8001ce4:	4564      	cmp	r4, ip
  vtp->vt_func = vtfunc;
 8001ce6:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8001cea:	b2aa      	uxth	r2, r5
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001cec:	d02d      	beq.n	8001d4a <chVTDoSetI+0x7a>
    delta = now - ch.vtlist.vt_lasttime + delay;
 8001cee:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
 8001cf2:	8923      	ldrh	r3, [r4, #8]
 8001cf4:	eba2 020c 	sub.w	r2, r2, ip
    if (delta < now - ch.vtlist.vt_lasttime) {
 8001cf8:	b2ad      	uxth	r5, r5
    delta = now - ch.vtlist.vt_lasttime + delay;
 8001cfa:	4411      	add	r1, r2
 8001cfc:	b289      	uxth	r1, r1
    if (delta < now - ch.vtlist.vt_lasttime) {
 8001cfe:	eba5 050c 	sub.w	r5, r5, ip
 8001d02:	42a9      	cmp	r1, r5
 8001d04:	db17      	blt.n	8001d36 <chVTDoSetI+0x66>
    else if (delta < p->vt_delta) {
 8001d06:	428b      	cmp	r3, r1
 8001d08:	d81a      	bhi.n	8001d40 <chVTDoSetI+0x70>
  while (p->vt_delta < delta) {
 8001d0a:	4299      	cmp	r1, r3
 8001d0c:	d905      	bls.n	8001d1a <chVTDoSetI+0x4a>
    p = p->vt_next;
 8001d0e:	6824      	ldr	r4, [r4, #0]
    delta -= p->vt_delta;
 8001d10:	1ac9      	subs	r1, r1, r3
  while (p->vt_delta < delta) {
 8001d12:	8923      	ldrh	r3, [r4, #8]
    delta -= p->vt_delta;
 8001d14:	b289      	uxth	r1, r1
  while (p->vt_delta < delta) {
 8001d16:	428b      	cmp	r3, r1
 8001d18:	d3f9      	bcc.n	8001d0e <chVTDoSetI+0x3e>
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001d1a:	6863      	ldr	r3, [r4, #4]
 8001d1c:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->vt_prev->vt_next = vtp;
 8001d20:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 8001d22:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001d24:	8101      	strh	r1, [r0, #8]
  p->vt_delta -= delta;
 8001d26:	8923      	ldrh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
  p->vt_delta -= delta;
 8001d2c:	1a59      	subs	r1, r3, r1
 8001d2e:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001d30:	84b2      	strh	r2, [r6, #36]	; 0x24
}
 8001d32:	bcf0      	pop	{r4, r5, r6, r7}
 8001d34:	4770      	bx	lr
      p = p->vt_next;
 8001d36:	6824      	ldr	r4, [r4, #0]
      delta -= p->vt_delta;
 8001d38:	1ac9      	subs	r1, r1, r3
 8001d3a:	b289      	uxth	r1, r1
      p = p->vt_next;
 8001d3c:	8923      	ldrh	r3, [r4, #8]
 8001d3e:	e7e4      	b.n	8001d0a <chVTDoSetI+0x3a>
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8001d40:	448c      	add	ip, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001d42:	fa1f f28c 	uxth.w	r2, ip
 8001d46:	637a      	str	r2, [r7, #52]	; 0x34
 8001d48:	e7df      	b.n	8001d0a <chVTDoSetI+0x3a>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001d4a:	188b      	adds	r3, r1, r2
      ch.vtlist.vt_lasttime = now;
 8001d4c:	84f2      	strh	r2, [r6, #38]	; 0x26
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001d4e:	b29b      	uxth	r3, r3
  STM32_ST_TIM->SR     = 0;
 8001d50:	2500      	movs	r5, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001d52:	2202      	movs	r2, #2
      ch.vtlist.vt_prev = vtp;
 8001d54:	e9c6 0007 	strd	r0, r0, [r6, #28]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001d58:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->vt_delta = delay;
 8001d5c:	8101      	strh	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001d60:	613d      	str	r5, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001d62:	60fa      	str	r2, [r7, #12]
 8001d64:	e7e5      	b.n	8001d32 <chVTDoSetI+0x62>
 8001d66:	bf00      	nop
 8001d68:	20000950 	.word	0x20000950
 8001d6c:	40000800 	.word	0x40000800

08001d70 <timer_reset>:
int16_t period[3];

void motor_tick(void *i);

void timer_reset(int8_t sender) {
    switch(sender) {
 8001d70:	2801      	cmp	r0, #1
void timer_reset(int8_t sender) {
 8001d72:	b510      	push	{r4, lr}
    switch(sender) {
 8001d74:	d035      	beq.n	8001de2 <timer_reset+0x72>
 8001d76:	2802      	cmp	r0, #2
 8001d78:	d019      	beq.n	8001dae <timer_reset+0x3e>
 8001d7a:	b100      	cbz	r0, 8001d7e <timer_reset+0xe>
            chVTResetI(&main_timer[sender]);
            chVTSetI(&main_timer[sender], MS2ST(15), motor_tick, &MOTOR_2);
            chSysUnlockFromISR();
            break;
    }
}
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	2320      	movs	r3, #32
 8001d80:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8001d84:	4c24      	ldr	r4, [pc, #144]	; (8001e18 <timer_reset+0xa8>)
 8001d86:	68e3      	ldr	r3, [r4, #12]
 8001d88:	b13b      	cbz	r3, 8001d9a <timer_reset+0x2a>
    chVTDoResetI(vtp);
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff ff60 	bl	8001c50 <chVTDoResetI>
  if (chVTIsArmedI(vtp)) {
 8001d90:	68e3      	ldr	r3, [r4, #12]
 8001d92:	b113      	cbz	r3, 8001d9a <timer_reset+0x2a>
    chVTDoResetI(vtp);
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7ff ff5b 	bl	8001c50 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <timer_reset+0xac>)
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <timer_reset+0xb0>)
 8001d9e:	481e      	ldr	r0, [pc, #120]	; (8001e18 <timer_reset+0xa8>)
 8001da0:	2196      	movs	r1, #150	; 0x96
 8001da2:	f7ff ff95 	bl	8001cd0 <chVTDoSetI>
 8001da6:	2300      	movs	r3, #0
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	2320      	movs	r3, #32
 8001db0:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8001db4:	4c18      	ldr	r4, [pc, #96]	; (8001e18 <timer_reset+0xa8>)
 8001db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001db8:	b14b      	cbz	r3, 8001dce <timer_reset+0x5e>
    chVTDoResetI(vtp);
 8001dba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001dbe:	f7ff ff47 	bl	8001c50 <chVTDoResetI>
  if (chVTIsArmedI(vtp)) {
 8001dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dc4:	b11b      	cbz	r3, 8001dce <timer_reset+0x5e>
    chVTDoResetI(vtp);
 8001dc6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001dca:	f7ff ff41 	bl	8001c50 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <timer_reset+0xb4>)
 8001dd0:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <timer_reset+0xb0>)
 8001dd2:	4815      	ldr	r0, [pc, #84]	; (8001e28 <timer_reset+0xb8>)
 8001dd4:	2196      	movs	r1, #150	; 0x96
 8001dd6:	f7ff ff7b 	bl	8001cd0 <chVTDoSetI>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	bd10      	pop	{r4, pc}
 8001de2:	2320      	movs	r3, #32
 8001de4:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8001de8:	4c0b      	ldr	r4, [pc, #44]	; (8001e18 <timer_reset+0xa8>)
 8001dea:	6a23      	ldr	r3, [r4, #32]
 8001dec:	b14b      	cbz	r3, 8001e02 <timer_reset+0x92>
    chVTDoResetI(vtp);
 8001dee:	f104 0014 	add.w	r0, r4, #20
 8001df2:	f7ff ff2d 	bl	8001c50 <chVTDoResetI>
  if (chVTIsArmedI(vtp)) {
 8001df6:	6a23      	ldr	r3, [r4, #32]
 8001df8:	b11b      	cbz	r3, 8001e02 <timer_reset+0x92>
    chVTDoResetI(vtp);
 8001dfa:	f104 0014 	add.w	r0, r4, #20
 8001dfe:	f7ff ff27 	bl	8001c50 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <timer_reset+0xbc>)
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <timer_reset+0xb0>)
 8001e06:	480a      	ldr	r0, [pc, #40]	; (8001e30 <timer_reset+0xc0>)
 8001e08:	2196      	movs	r1, #150	; 0x96
 8001e0a:	f7ff ff61 	bl	8001cd0 <chVTDoSetI>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f383 8811 	msr	BASEPRI, r3
 8001e14:	bd10      	pop	{r4, pc}
 8001e16:	bf00      	nop
 8001e18:	20000b4c 	.word	0x20000b4c
 8001e1c:	200008b4 	.word	0x200008b4
 8001e20:	08001fe1 	.word	0x08001fe1
 8001e24:	20000801 	.word	0x20000801
 8001e28:	20000b74 	.word	0x20000b74
 8001e2c:	20000800 	.word	0x20000800
 8001e30:	20000b60 	.word	0x20000b60
	...

08001e40 <encoder_pulse_captured>:

void encoder_pulse_captured(ICUDriver *icup) {
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int16_t period_width = 1000000/icuGetPeriodX(icup);
    int16_t period_calc = (1848*period_width-281984)/1667;

    //ICUD sender
    int8_t sender = -1;
    if (icup == &ICUD2) {
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <encoder_pulse_captured+0x9c>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001e44:	6942      	ldr	r2, [r0, #20]
    if (icup == &ICUD2) {
 8001e46:	4298      	cmp	r0, r3
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001e48:	6816      	ldr	r6, [r2, #0]
    if (icup == &ICUD2) {
 8001e4a:	d03e      	beq.n	8001eca <encoder_pulse_captured+0x8a>
        sender = 0;
    } else if (icup == &ICUD5) {
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <encoder_pulse_captured+0xa0>)
 8001e4e:	4298      	cmp	r0, r3
 8001e50:	d009      	beq.n	8001e66 <encoder_pulse_captured+0x26>
        sender = 1;
    } else if (icup == &ICUD3) {
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <encoder_pulse_captured+0xa4>)
 8001e54:	4298      	cmp	r0, r3
 8001e56:	d03c      	beq.n	8001ed2 <encoder_pulse_captured+0x92>
    int8_t sender = -1;
 8001e58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            pwmEnableChannel(&PWMD1, sender, ++motor_actual_speeds[sender]);
        } else {
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
        }
    }
    timer_reset(sender);
 8001e5c:	4620      	mov	r0, r4
}
 8001e5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    timer_reset(sender);
 8001e62:	f7ff bf85 	b.w	8001d70 <timer_reset>
    } else if (icup == &ICUD5) {
 8001e66:	2001      	movs	r0, #1
 8001e68:	4605      	mov	r5, r0
        sender = 1;
 8001e6a:	4604      	mov	r4, r0
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001e6c:	f8df c090 	ldr.w	ip, [pc, #144]	; 8001f00 <encoder_pulse_captured+0xc0>
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001e70:	4f1d      	ldr	r7, [pc, #116]	; (8001ee8 <encoder_pulse_captured+0xa8>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <encoder_pulse_captured+0xac>)
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001e74:	491e      	ldr	r1, [pc, #120]	; (8001ef0 <encoder_pulse_captured+0xb0>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001e76:	3601      	adds	r6, #1
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001e78:	f44f 63e7 	mov.w	r3, #1848	; 0x738
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001e7c:	fbb2 f2f6 	udiv	r2, r2, r6
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001e80:	2620      	movs	r6, #32
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001e82:	b212      	sxth	r2, r2
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001e84:	837e      	strh	r6, [r7, #26]
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001e86:	fb12 c303 	smlabb	r3, r2, r3, ip
        rotations_per_sec[sender] = period_width;
 8001e8a:	4f1a      	ldr	r7, [pc, #104]	; (8001ef4 <encoder_pulse_captured+0xb4>)
        if(period_calc < motor_freqs[sender]) {;
 8001e8c:	4e1a      	ldr	r6, [pc, #104]	; (8001ef8 <encoder_pulse_captured+0xb8>)
        rotations_per_sec[sender] = period_width;
 8001e8e:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001e92:	fb81 c103 	smull	ip, r1, r1, r3
 8001e96:	18ca      	adds	r2, r1, r3
 8001e98:	17db      	asrs	r3, r3, #31
 8001e9a:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <encoder_pulse_captured+0xbc>)
        if(period_calc < motor_freqs[sender]) {;
 8001ea0:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8001ea4:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	42b3      	cmp	r3, r6
            pwmEnableChannel(&PWMD1, sender, ++motor_actual_speeds[sender]);
 8001eac:	bfb4      	ite	lt
 8001eae:	3101      	addlt	r1, #1
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
 8001eb0:	f101 31ff 	addge.w	r1, r1, #4294967295	; 0xffffffff
 8001eb4:	b20b      	sxth	r3, r1
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
 8001ebc:	f7ff f800 	bl	8000ec0 <pwmEnableChannel.constprop.13>
    timer_reset(sender);
 8001ec0:	4620      	mov	r0, r4
}
 8001ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    timer_reset(sender);
 8001ec6:	f7ff bf53 	b.w	8001d70 <timer_reset>
    if (icup == &ICUD2) {
 8001eca:	2000      	movs	r0, #0
 8001ecc:	4605      	mov	r5, r0
        sender = 0;
 8001ece:	4604      	mov	r4, r0
 8001ed0:	e7cc      	b.n	8001e6c <encoder_pulse_captured+0x2c>
    } else if (icup == &ICUD3) {
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	4605      	mov	r5, r0
        sender = 2;
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	e7c8      	b.n	8001e6c <encoder_pulse_captured+0x2c>
 8001eda:	bf00      	nop
 8001edc:	2000086c 	.word	0x2000086c
 8001ee0:	2000089c 	.word	0x2000089c
 8001ee4:	20000884 	.word	0x20000884
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	000f4240 	.word	0x000f4240
 8001ef0:	9d414457 	.word	0x9d414457
 8001ef4:	20000ba4 	.word	0x20000ba4
 8001ef8:	20000b90 	.word	0x20000b90
 8001efc:	20000b88 	.word	0x20000b88
 8001f00:	fffbb280 	.word	0xfffbb280
	...

08001f10 <BusFault_Handler>:
__attribute__((weak))
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
 8001f10:	e7fe      	b.n	8001f10 <BusFault_Handler>
 8001f12:	bf00      	nop
	...

08001f20 <chSchWakeupS.constprop.37>:
  if (ntp->p_prio <= currp->p_prio) {
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <chSchWakeupS.constprop.37+0x50>)
 8001f22:	6999      	ldr	r1, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001f24:	b430      	push	{r4, r5}
 8001f26:	4604      	mov	r4, r0
  if (ntp->p_prio <= currp->p_prio) {
 8001f28:	688d      	ldr	r5, [r1, #8]
 8001f2a:	6880      	ldr	r0, [r0, #8]
  ntp->p_u.rdymsg = msg;
 8001f2c:	2200      	movs	r2, #0
  if (ntp->p_prio <= currp->p_prio) {
 8001f2e:	42a8      	cmp	r0, r5
  ntp->p_u.rdymsg = msg;
 8001f30:	6222      	str	r2, [r4, #32]
  if (ntp->p_prio <= currp->p_prio) {
 8001f32:	d80b      	bhi.n	8001f4c <chSchWakeupS.constprop.37+0x2c>
  tp->p_state = CH_STATE_READY;
 8001f34:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 8001f36:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	4290      	cmp	r0, r2
 8001f3c:	d9fb      	bls.n	8001f36 <chSchWakeupS.constprop.37+0x16>
  tp->p_prev = cp->p_prev;
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 8001f44:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001f46:	605c      	str	r4, [r3, #4]
}
 8001f48:	bc30      	pop	{r4, r5}
 8001f4a:	4770      	bx	lr
  tp->p_state = CH_STATE_READY;
 8001f4c:	770a      	strb	r2, [r1, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001f4e:	461a      	mov	r2, r3
    cp = cp->p_next;
 8001f50:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001f52:	6890      	ldr	r0, [r2, #8]
 8001f54:	4285      	cmp	r5, r0
 8001f56:	d9fb      	bls.n	8001f50 <chSchWakeupS.constprop.37+0x30>
  tp->p_prev = cp->p_prev;
 8001f58:	6850      	ldr	r0, [r2, #4]
 8001f5a:	6048      	str	r0, [r1, #4]
    ntp->p_state = CH_STATE_CURRENT;
 8001f5c:	2501      	movs	r5, #1
  tp->p_next = cp;
 8001f5e:	600a      	str	r2, [r1, #0]
  tp->p_prev->p_next = tp;
 8001f60:	6001      	str	r1, [r0, #0]
  cp->p_prev = tp;
 8001f62:	6051      	str	r1, [r2, #4]
    ntp->p_state = CH_STATE_CURRENT;
 8001f64:	7725      	strb	r5, [r4, #28]
    chSysSwitch(ntp, otp);
 8001f66:	4620      	mov	r0, r4
    setcurrp(ntp);
 8001f68:	619c      	str	r4, [r3, #24]
}
 8001f6a:	bc30      	pop	{r4, r5}
    chSysSwitch(ntp, otp);
 8001f6c:	f7fe b990 	b.w	8000290 <_port_switch>
 8001f70:	20000950 	.word	0x20000950
	...

08001f80 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	9e06      	ldr	r6, [sp, #24]
 8001f84:	4604      	mov	r4, r0
 8001f86:	2520      	movs	r5, #32
 8001f88:	f385 8811 	msr	BASEPRI, r5
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001f8c:	3924      	subs	r1, #36	; 0x24
 8001f8e:	1845      	adds	r5, r0, r1
 8001f90:	60c5      	str	r5, [r0, #12]
 8001f92:	4f11      	ldr	r7, [pc, #68]	; (8001fd8 <chThdCreateStatic+0x58>)
 8001f94:	5043      	str	r3, [r0, r1]
  REG_INSERT(tp);
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <chThdCreateStatic+0x5c>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001f98:	606e      	str	r6, [r5, #4]
 8001f9a:	622f      	str	r7, [r5, #32]
  REG_INSERT(tp);
 8001f9c:	6103      	str	r3, [r0, #16]
 8001f9e:	6959      	ldr	r1, [r3, #20]
  tp->p_realprio = prio;
 8001fa0:	63c2      	str	r2, [r0, #60]	; 0x3c
  tp->p_prio = prio;
 8001fa2:	6082      	str	r2, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 8001fa4:	f04f 0c02 	mov.w	ip, #2
  queue_init(&tp->p_msgqueue);
 8001fa8:	f100 0228 	add.w	r2, r0, #40	; 0x28
  list_init(&tp->p_waiting);
 8001fac:	f100 0624 	add.w	r6, r0, #36	; 0x24
  tp->p_mtxlist = NULL;
 8001fb0:	2500      	movs	r5, #0
  tp->p_refs = (trefs_t)1;
 8001fb2:	2701      	movs	r7, #1
  REG_INSERT(tp);
 8001fb4:	6141      	str	r1, [r0, #20]
  tp->p_state = CH_STATE_WTSTART;
 8001fb6:	f8a0 c01c 	strh.w	ip, [r0, #28]
  tp->p_refs = (trefs_t)1;
 8001fba:	7787      	strb	r7, [r0, #30]
  tp->p_epending = (eventmask_t)0;
 8001fbc:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
  tp->p_name = NULL;
 8001fc0:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8001fc2:	6108      	str	r0, [r1, #16]
  tqp->p_next = (thread_t *)tqp;
 8001fc4:	e9c0 6209 	strd	r6, r2, [r0, #36]	; 0x24
  tqp->p_prev = (thread_t *)tqp;
 8001fc8:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001fca:	6158      	str	r0, [r3, #20]
  chSchWakeupS(tp, MSG_OK);
 8001fcc:	f7ff ffa8 	bl	8001f20 <chSchWakeupS.constprop.37>
 8001fd0:	f385 8811 	msr	BASEPRI, r5
}
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fd8:	080002a1 	.word	0x080002a1
 8001fdc:	20000950 	.word	0x20000950

08001fe0 <motor_tick>:
    timer_reset(i);
    chThdExit((msg_t)NULL);
}


void motor_tick(void *nm) {
 8001fe0:	b500      	push	{lr}
    int8_t i = (*(int8_t*)nm);
 8001fe2:	f990 3000 	ldrsb.w	r3, [r0]
    main_visualizer[i] = 0;
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <motor_tick+0x40>)
 8001fe8:	2120      	movs	r1, #32
    switch(i) {
 8001fea:	2b01      	cmp	r3, #1
void motor_tick(void *nm) {
 8001fec:	b083      	sub	sp, #12
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 8001fee:	8311      	strh	r1, [r2, #24]
    switch(i) {
 8001ff0:	d005      	beq.n	8001ffe <motor_tick+0x1e>
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d011      	beq.n	800201a <motor_tick+0x3a>
 8001ff6:	b173      	cbz	r3, 8002016 <motor_tick+0x36>
        case 2:
             chThdCreateStatic(waMotorBalanceThread, sizeof(waMotorBalanceThread), NORMALPRIO, MotorBalanceThread, &MOTOR_2);
            break;
    }
   
}
 8001ff8:	b003      	add	sp, #12
 8001ffa:	f85d fb04 	ldr.w	pc, [sp], #4
             chThdCreateStatic(waMotorBalanceThread, sizeof(waMotorBalanceThread), NORMALPRIO, MotorBalanceThread, &MOTOR_1);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <motor_tick+0x44>)
             chThdCreateStatic(waMotorBalanceThread, sizeof(waMotorBalanceThread), NORMALPRIO, MotorBalanceThread, &MOTOR_2);
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <motor_tick+0x48>)
 8002006:	4809      	ldr	r0, [pc, #36]	; (800202c <motor_tick+0x4c>)
 8002008:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800200c:	f7ff ffb8 	bl	8001f80 <chThdCreateStatic>
}
 8002010:	b003      	add	sp, #12
 8002012:	f85d fb04 	ldr.w	pc, [sp], #4
             chThdCreateStatic(waMotorBalanceThread, sizeof(waMotorBalanceThread), NORMALPRIO, MotorBalanceThread, &MOTOR_0);
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <motor_tick+0x50>)
 8002018:	e7f2      	b.n	8002000 <motor_tick+0x20>
             chThdCreateStatic(waMotorBalanceThread, sizeof(waMotorBalanceThread), NORMALPRIO, MotorBalanceThread, &MOTOR_2);
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <motor_tick+0x54>)
 800201c:	e7f0      	b.n	8002000 <motor_tick+0x20>
 800201e:	bf00      	nop
 8002020:	40020000 	.word	0x40020000
 8002024:	20000800 	.word	0x20000800
 8002028:	08003721 	.word	0x08003721
 800202c:	20000bb0 	.word	0x20000bb0
 8002030:	200008b4 	.word	0x200008b4
 8002034:	20000801 	.word	0x20000801
	...

08002040 <chSchGoSleepS>:
  otp = currp;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <chSchGoSleepS+0x20>)
 8002042:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8002044:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8002046:	b410      	push	{r4}
  otp->p_state = newstate;
 8002048:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 800204a:	6810      	ldr	r0, [r2, #0]
 800204c:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 800204e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8002050:	6043      	str	r3, [r0, #4]
 8002052:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8002054:	4610      	mov	r0, r2
}
 8002056:	bc10      	pop	{r4}
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8002058:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800205a:	f7fe b919 	b.w	8000290 <_port_switch>
 800205e:	bf00      	nop
 8002060:	20000950 	.word	0x20000950
	...

08002070 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8002070:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != time) {
 8002072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002076:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8002078:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 800207a:	d012      	beq.n	80020a2 <chSchGoSleepTimeoutS+0x32>
    chVTDoSetI(&vt, time, wakeup, currp);
 800207c:	4c0c      	ldr	r4, [pc, #48]	; (80020b0 <chSchGoSleepTimeoutS+0x40>)
 800207e:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <chSchGoSleepTimeoutS+0x44>)
 8002080:	69a3      	ldr	r3, [r4, #24]
 8002082:	4605      	mov	r5, r0
 8002084:	a801      	add	r0, sp, #4
 8002086:	f7ff fe23 	bl	8001cd0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800208a:	4628      	mov	r0, r5
 800208c:	f7ff ffd8 	bl	8002040 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8002090:	9b04      	ldr	r3, [sp, #16]
 8002092:	b113      	cbz	r3, 800209a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8002094:	a801      	add	r0, sp, #4
 8002096:	f7ff fddb 	bl	8001c50 <chVTDoResetI>
  return currp->p_u.rdymsg;
 800209a:	69a3      	ldr	r3, [r4, #24]
}
 800209c:	6a18      	ldr	r0, [r3, #32]
 800209e:	b007      	add	sp, #28
 80020a0:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 80020a2:	4c03      	ldr	r4, [pc, #12]	; (80020b0 <chSchGoSleepTimeoutS+0x40>)
 80020a4:	f7ff ffcc 	bl	8002040 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 80020a8:	69a3      	ldr	r3, [r4, #24]
}
 80020aa:	6a18      	ldr	r0, [r3, #32]
 80020ac:	b007      	add	sp, #28
 80020ae:	bd30      	pop	{r4, r5, pc}
 80020b0:	20000950 	.word	0x20000950
 80020b4:	080017d1 	.word	0x080017d1
	...

080020c0 <SensorThread>:
int16_t sensors[NUM_OF_SENSORS];
bool line = false;
bool a = false;

THD_WORKING_AREA(waSensorThread, 512);
THD_FUNCTION(SensorThread, arg) {
 80020c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80020c4:	4c41      	ldr	r4, [pc, #260]	; (80021cc <SensorThread+0x10c>)
 80020c6:	4f42      	ldr	r7, [pc, #264]	; (80021d0 <SensorThread+0x110>)
 80020c8:	b083      	sub	sp, #12
 80020ca:	f104 0814 	add.w	r8, r4, #20
        palSetPad(GPIOA,5);
 80020ce:	2620      	movs	r6, #32
THD_FUNCTION(SensorThread, arg) {
 80020d0:	f04f 0900 	mov.w	r9, #0
 80020d4:	fa5f f389 	uxtb.w	r3, r9
        palClearPad(GPIOA,5);
 80020d8:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <SensorThread+0x114>)
        palClearPad(GPIOC,7);
 80020da:	493f      	ldr	r1, [pc, #252]	; (80021d8 <SensorThread+0x118>)
    if (num & 0b1) {
 80020dc:	07dd      	lsls	r5, r3, #31
        palClearPad(GPIOA,5);
 80020de:	bf4c      	ite	mi
 80020e0:	8356      	strhmi	r6, [r2, #26]
        palSetPad(GPIOA,5);
 80020e2:	8316      	strhpl	r6, [r2, #24]
    if (num & 0b10) {
 80020e4:	0798      	lsls	r0, r3, #30
        palClearPad(GPIOC,7);
 80020e6:	f04f 0280 	mov.w	r2, #128	; 0x80
 80020ea:	bf4c      	ite	mi
 80020ec:	834a      	strhmi	r2, [r1, #26]
        palSetPad(GPIOC,7);
 80020ee:	830a      	strhpl	r2, [r1, #24]
        palClearPad(GPIOB,6);
 80020f0:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <SensorThread+0x11c>)
    if (num & 0b100) {
 80020f2:	f013 0f04 	tst.w	r3, #4
        palClearPad(GPIOB,6);
 80020f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80020fa:	bf14      	ite	ne
 80020fc:	8353      	strhne	r3, [r2, #26]
        palSetPad(GPIOB,6);
 80020fe:	8313      	strheq	r3, [r2, #24]
 8002100:	f386 8811 	msr	BASEPRI, r6
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 8002104:	f10d 0306 	add.w	r3, sp, #6
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8002108:	2503      	movs	r5, #3
  adcp->samples  = samples;
 800210a:	60a3      	str	r3, [r4, #8]
  adcp->depth    = depth;
 800210c:	f04f 0b01 	mov.w	fp, #1
  adcp->grpp     = grpp;
 8002110:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <SensorThread+0x120>)
 8002112:	6123      	str	r3, [r4, #16]
  adcp->state    = ADC_ACTIVE;
 8002114:	7025      	strb	r5, [r4, #0]
  adcp->depth    = depth;
 8002116:	f8c4 b00c 	str.w	fp, [r4, #12]
  adc_lld_start_conversion(adcp);
 800211a:	f7fe fe89 	bl	8000e30 <adc_lld_start_conversion.constprop.18>
  return ch.rlist.r_current;
 800211e:	69bb      	ldr	r3, [r7, #24]
  *trp = tp;
 8002120:	6163      	str	r3, [r4, #20]
  tp->p_u.wttrp = trp;
 8002122:	f8c3 8020 	str.w	r8, [r3, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002126:	4628      	mov	r0, r5
 8002128:	f7ff ff8a 	bl	8002040 <chSchGoSleepS>
 800212c:	f04f 0a00 	mov.w	sl, #0
 8002130:	f38a 8811 	msr	BASEPRI, sl
 8002134:	f386 8811 	msr	BASEPRI, r6
  adcp->samples  = samples;
 8002138:	ab01      	add	r3, sp, #4
  adcp->depth    = depth;
 800213a:	e9c4 3b02 	strd	r3, fp, [r4, #8]
  adcp->grpp     = grpp;
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <SensorThread+0x124>)
 8002140:	6123      	str	r3, [r4, #16]
  adcp->state    = ADC_ACTIVE;
 8002142:	7025      	strb	r5, [r4, #0]
  adc_lld_start_conversion(adcp);
 8002144:	f7fe fe74 	bl	8000e30 <adc_lld_start_conversion.constprop.18>
 8002148:	69bb      	ldr	r3, [r7, #24]
  *trp = tp;
 800214a:	6163      	str	r3, [r4, #20]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800214c:	4628      	mov	r0, r5
  tp->p_u.wttrp = trp;
 800214e:	f8c3 8020 	str.w	r8, [r3, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002152:	f7ff ff75 	bl	8002040 <chSchGoSleepS>
 8002156:	f38a 8811 	msr	BASEPRI, sl
        for (uint8_t i = 0; i < NUM_OF_SENSORS/2; i++) {
            mx_set(i);
            adcConvert(&ADCD1, &line_sensors_cfg1, &sensor_value1, 1);
            adcConvert(&ADCD1, &line_sensors_cfg2, &sensor_value2, 1);
            //revert
            if (sensor_value1 < 800 || sensor_value2 < 800) { a = true; }
 800215a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800215e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002162:	d304      	bcc.n	800216e <SensorThread+0xae>
 8002164:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002168:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800216c:	d202      	bcs.n	8002174 <SensorThread+0xb4>
 800216e:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <SensorThread+0x128>)
 8002170:	2301      	movs	r3, #1
 8002172:	7013      	strb	r3, [r2, #0]
            if (SENSOR_DEBUG) {
 8002174:	f109 0901 	add.w	r9, r9, #1
        for (uint8_t i = 0; i < NUM_OF_SENSORS/2; i++) {
 8002178:	f1b9 0f08 	cmp.w	r9, #8
 800217c:	d1aa      	bne.n	80020d4 <SensorThread+0x14>
                sensors[i] = sensor_value1;
                sensors[i+8] = sensor_value2;
            }
        }
        chMsgSend(moving_thread, a ? (msg_t)true : (msg_t)false);
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <SensorThread+0x12c>)
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <SensorThread+0x128>)
 8002184:	7819      	ldrb	r1, [r3, #0]
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f386 8811 	msr	BASEPRI, r6

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800218c:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8002190:	621a      	str	r2, [r3, #32]
  tp->p_next = (thread_t *)tqp;
 8002192:	601a      	str	r2, [r3, #0]
  tp->p_prev = tqp->p_prev;
 8002194:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002196:	605a      	str	r2, [r3, #4]
  ctp->p_msg = msg;
 8002198:	6319      	str	r1, [r3, #48]	; 0x30
  tp->p_prev->p_next = tp;
 800219a:	6013      	str	r3, [r2, #0]
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 800219c:	7f02      	ldrb	r2, [r0, #28]
  tqp->p_prev = tp;
 800219e:	62c3      	str	r3, [r0, #44]	; 0x2c
 80021a0:	2a0e      	cmp	r2, #14
 80021a2:	d010      	beq.n	80021c6 <SensorThread+0x106>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80021a4:	200c      	movs	r0, #12
 80021a6:	f7ff ff4b 	bl	8002040 <chSchGoSleepS>
 80021aa:	2500      	movs	r5, #0
 80021ac:	f385 8811 	msr	BASEPRI, r5
        a = false;
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <SensorThread+0x128>)
 80021b2:	701d      	strb	r5, [r3, #0]
 80021b4:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80021b8:	2101      	movs	r1, #1
 80021ba:	2008      	movs	r0, #8
 80021bc:	f7ff ff58 	bl	8002070 <chSchGoSleepTimeoutS>
 80021c0:	f385 8811 	msr	BASEPRI, r5
 80021c4:	e784      	b.n	80020d0 <SensorThread+0x10>
    (void) chSchReadyI(tp);
 80021c6:	f7ff fb3b 	bl	8001840 <chSchReadyI>
 80021ca:	e7eb      	b.n	80021a4 <SensorThread+0xe4>
 80021cc:	20000838 	.word	0x20000838
 80021d0:	20000950 	.word	0x20000950
 80021d4:	40020000 	.word	0x40020000
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020400 	.word	0x40020400
 80021e0:	08004d90 	.word	0x08004d90
 80021e4:	08004dc0 	.word	0x08004dc0
 80021e8:	2000094c 	.word	0x2000094c
 80021ec:	20000b9c 	.word	0x20000b9c

080021f0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 80021f0:	b161      	cbz	r1, 800220c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <chThdEnqueueTimeoutS+0x24>)
 80021f4:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80021f6:	b410      	push	{r4}
  tp->p_next = (thread_t *)tqp;
 80021f8:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 80021fa:	6844      	ldr	r4, [r0, #4]
 80021fc:	605c      	str	r4, [r3, #4]
 80021fe:	4602      	mov	r2, r0
  tp->p_prev->p_next = tp;
 8002200:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002202:	2004      	movs	r0, #4
  tqp->p_prev = tp;
 8002204:	6053      	str	r3, [r2, #4]
}
 8002206:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002208:	f7ff bf32 	b.w	8002070 <chSchGoSleepTimeoutS>
}
 800220c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000950 	.word	0x20000950
	...

08002220 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8002220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002224:	b083      	sub	sp, #12
 8002226:	4604      	mov	r4, r0
 8002228:	460e      	mov	r6, r1
 800222a:	4615      	mov	r5, r2
 800222c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800222e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8002232:	f04f 0920 	mov.w	r9, #32
 8002236:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800223a:	2700      	movs	r7, #0
 800223c:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800223e:	68a2      	ldr	r2, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8002240:	46b3      	mov	fp, r6
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8002242:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8002244:	b302      	cbz	r2, 8002288 <chOQWriteTimeout+0x68>
    *oqp->q_wrptr++ = *bp++;
 8002246:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 8002248:	68a2      	ldr	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800224a:	1c4e      	adds	r6, r1, #1
    oqp->q_counter--;
 800224c:	3a01      	subs	r2, #1
    *oqp->q_wrptr++ = *bp++;
 800224e:	6166      	str	r6, [r4, #20]
    oqp->q_counter--;
 8002250:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8002252:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8002256:	700a      	strb	r2, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8002258:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800225c:	4291      	cmp	r1, r2
      oqp->q_wrptr = oqp->q_buffer;
 800225e:	bf24      	itt	cs
 8002260:	68e2      	ldrcs	r2, [r4, #12]
 8002262:	6162      	strcs	r2, [r4, #20]
    if (nfy != NULL) {
 8002264:	f1b8 0f00 	cmp.w	r8, #0
 8002268:	d000      	beq.n	800226c <chOQWriteTimeout+0x4c>
      nfy(oqp);
 800226a:	47c0      	blx	r8
 800226c:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8002270:	3d01      	subs	r5, #1
    w++;
 8002272:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8002276:	d011      	beq.n	800229c <chOQWriteTimeout+0x7c>
 8002278:	f389 8811 	msr	BASEPRI, r9
 800227c:	68a2      	ldr	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800227e:	465e      	mov	r6, fp
 8002280:	46b3      	mov	fp, r6
      nfy(oqp);
 8002282:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8002284:	2a00      	cmp	r2, #0
 8002286:	d1de      	bne.n	8002246 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8002288:	9901      	ldr	r1, [sp, #4]
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	4620      	mov	r0, r4
 800228e:	f7ff ffaf 	bl	80021f0 <chThdEnqueueTimeoutS>
 8002292:	9a00      	ldr	r2, [sp, #0]
 8002294:	2800      	cmp	r0, #0
 8002296:	d0d2      	beq.n	800223e <chOQWriteTimeout+0x1e>
 8002298:	f382 8811 	msr	BASEPRI, r2
      return w;
    }
    chSysLock();
  }
}
 800229c:	4638      	mov	r0, r7
 800229e:	b003      	add	sp, #12
 80022a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080022b0 <writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80022b0:	3030      	adds	r0, #48	; 0x30
 80022b2:	f7ff bfb5 	b.w	8002220 <chOQWriteTimeout>
 80022b6:	bf00      	nop
	...

080022c0 <write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80022c0:	3030      	adds	r0, #48	; 0x30
 80022c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c6:	f7ff bfab 	b.w	8002220 <chOQWriteTimeout>
 80022ca:	bf00      	nop
 80022cc:	0000      	movs	r0, r0
	...

080022d0 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	4604      	mov	r4, r0
 80022d4:	460f      	mov	r7, r1
 80022d6:	4616      	mov	r6, r2
 80022d8:	2320      	movs	r3, #32
 80022da:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80022de:	e003      	b.n	80022e8 <chOQPutTimeout+0x18>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80022e0:	f7ff ff86 	bl	80021f0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80022e4:	2800      	cmp	r0, #0
 80022e6:	db18      	blt.n	800231a <chOQPutTimeout+0x4a>
 80022e8:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80022ea:	4631      	mov	r1, r6
 80022ec:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 80022ee:	2d00      	cmp	r5, #0
 80022f0:	d0f6      	beq.n	80022e0 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 80022f2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80022f4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80022f6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80022f8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80022fa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80022fc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80022fe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002300:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002304:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002306:	bf24      	itt	cs
 8002308:	68e3      	ldrcs	r3, [r4, #12]
 800230a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800230c:	69e3      	ldr	r3, [r4, #28]
 800230e:	b103      	cbz	r3, 8002312 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 8002310:	4798      	blx	r3
 8002312:	2000      	movs	r0, #0
 8002314:	f380 8811 	msr	BASEPRI, r0
}
 8002318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800231a:	f385 8811 	msr	BASEPRI, r5
 800231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002320 <putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002320:	3030      	adds	r0, #48	; 0x30
 8002322:	f7ff bfd5 	b.w	80022d0 <chOQPutTimeout>
 8002326:	bf00      	nop
	...

08002330 <put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002330:	3030      	adds	r0, #48	; 0x30
 8002332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002336:	f7ff bfcb 	b.w	80022d0 <chOQPutTimeout>
 800233a:	bf00      	nop
 800233c:	0000      	movs	r0, r0
	...

08002340 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 8002340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002344:	4604      	mov	r4, r0
 8002346:	b083      	sub	sp, #12
 8002348:	4689      	mov	r9, r1
 800234a:	4693      	mov	fp, r2
 800234c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800234e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8002352:	2720      	movs	r7, #32
 8002354:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8002358:	2600      	movs	r6, #0
 800235a:	9701      	str	r7, [sp, #4]
 800235c:	46b2      	mov	sl, r6
    if (nfy != NULL) {
 800235e:	f1b8 0f00 	cmp.w	r8, #0
 8002362:	d005      	beq.n	8002370 <chIQReadTimeout+0x30>
      nfy(iqp);
 8002364:	4620      	mov	r0, r4
 8002366:	47c0      	blx	r8
 8002368:	e002      	b.n	8002370 <chIQReadTimeout+0x30>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800236a:	f7ff ff41 	bl	80021f0 <chThdEnqueueTimeoutS>
 800236e:	b9e0      	cbnz	r0, 80023aa <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 8002370:	68a7      	ldr	r7, [r4, #8]
 8002372:	4629      	mov	r1, r5
 8002374:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 8002376:	2f00      	cmp	r7, #0
 8002378:	d0f7      	beq.n	800236a <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 800237a:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 800237c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800237e:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8002380:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8002382:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 8002384:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8002386:	7813      	ldrb	r3, [r2, #0]
 8002388:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800238c:	6923      	ldr	r3, [r4, #16]
 800238e:	69a2      	ldr	r2, [r4, #24]
 8002390:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8002392:	bf24      	itt	cs
 8002394:	68e3      	ldrcs	r3, [r4, #12]
 8002396:	61a3      	strcs	r3, [r4, #24]
 8002398:	f38a 8811 	msr	BASEPRI, sl
    r++;
 800239c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800239e:	45b3      	cmp	fp, r6
 80023a0:	d005      	beq.n	80023ae <chIQReadTimeout+0x6e>
 80023a2:	9b01      	ldr	r3, [sp, #4]
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	e7d9      	b.n	800235e <chIQReadTimeout+0x1e>
 80023aa:	f387 8811 	msr	BASEPRI, r7
}
 80023ae:	4630      	mov	r0, r6
 80023b0:	b003      	add	sp, #12
 80023b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b6:	bf00      	nop
	...

080023c0 <readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80023c0:	300c      	adds	r0, #12
 80023c2:	f7ff bfbd 	b.w	8002340 <chIQReadTimeout>
 80023c6:	bf00      	nop
	...

080023d0 <read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80023d0:	300c      	adds	r0, #12
 80023d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d6:	f7ff bfb3 	b.w	8002340 <chIQReadTimeout>
 80023da:	bf00      	nop
 80023dc:	0000      	movs	r0, r0
	...

080023e0 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	2320      	movs	r3, #32
 80023e4:	460e      	mov	r6, r1
 80023e6:	4604      	mov	r4, r0
 80023e8:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 80023ec:	69c3      	ldr	r3, [r0, #28]
 80023ee:	b12b      	cbz	r3, 80023fc <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 80023f0:	4798      	blx	r3
 80023f2:	e003      	b.n	80023fc <chIQGetTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80023f4:	f7ff fefc 	bl	80021f0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80023f8:	2800      	cmp	r0, #0
 80023fa:	db15      	blt.n	8002428 <chIQGetTimeout+0x48>
 80023fc:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80023fe:	4631      	mov	r1, r6
 8002400:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 8002402:	2d00      	cmp	r5, #0
 8002404:	d0f6      	beq.n	80023f4 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8002406:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8002408:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800240a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800240c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800240e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8002410:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 8002412:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8002414:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8002416:	bf28      	it	cs
 8002418:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800241a:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800241c:	bf28      	it	cs
 800241e:	61a3      	strcs	r3, [r4, #24]
 8002420:	2300      	movs	r3, #0
 8002422:	f383 8811 	msr	BASEPRI, r3
}
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	f385 8811 	msr	BASEPRI, r5
 800242c:	bd70      	pop	{r4, r5, r6, pc}
 800242e:	bf00      	nop

08002430 <gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002430:	300c      	adds	r0, #12
 8002432:	f7ff bfd5 	b.w	80023e0 <chIQGetTimeout>
 8002436:	bf00      	nop
	...

08002440 <get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002440:	300c      	adds	r0, #12
 8002442:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002446:	f7ff bfcb 	b.w	80023e0 <chIQGetTimeout>
 800244a:	bf00      	nop
 800244c:	0000      	movs	r0, r0
	...

08002450 <chprintf.constprop.3>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002450:	b40e      	push	{r1, r2, r3}
 8002452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002456:	b092      	sub	sp, #72	; 0x48
  int n = 0;
 8002458:	2300      	movs	r3, #0
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800245a:	af1c      	add	r7, sp, #112	; 0x70
    c = *fmt++;
 800245c:	4da2      	ldr	r5, [pc, #648]	; (80026e8 <chprintf.constprop.3+0x298>)
 800245e:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80026f4 <chprintf.constprop.3+0x2a4>
  int n = 0;
 8002462:	9301      	str	r3, [sp, #4]
  va_start(ap, fmt);
 8002464:	970b      	str	r7, [sp, #44]	; 0x2c
    left_align = FALSE;
 8002466:	9302      	str	r3, [sp, #8]
    if (*fmt == '0') {
 8002468:	782b      	ldrb	r3, [r5, #0]
 800246a:	2b30      	cmp	r3, #48	; 0x30
 800246c:	f000 80bd 	beq.w	80025ea <chprintf.constprop.3+0x19a>
    filler = ' ';
 8002470:	2220      	movs	r2, #32
 8002472:	9203      	str	r2, [sp, #12]
 8002474:	3501      	adds	r5, #1
    width = 0;
 8002476:	2400      	movs	r4, #0
 8002478:	e007      	b.n	800248a <chprintf.constprop.3+0x3a>
        c = va_arg(ap, int);
 800247a:	f851 2b04 	ldr.w	r2, [r1], #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	460f      	mov	r7, r1
 8002482:	f815 3b01 	ldrb.w	r3, [r5], #1
      width = width * 10 + c;
 8002486:	eb02 0440 	add.w	r4, r2, r0, lsl #1
      if (c >= '0' && c <= '9')
 800248a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	2a09      	cmp	r2, #9
        c = va_arg(ap, int);
 8002492:	4639      	mov	r1, r7
      c = *fmt++;
 8002494:	462e      	mov	r6, r5
      width = width * 10 + c;
 8002496:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 800249a:	d9f2      	bls.n	8002482 <chprintf.constprop.3+0x32>
      else if (c == '*')
 800249c:	2b2a      	cmp	r3, #42	; 0x2a
 800249e:	d0ec      	beq.n	800247a <chprintf.constprop.3+0x2a>
    if (c == '.') {
 80024a0:	2b2e      	cmp	r3, #46	; 0x2e
    precision = 0;
 80024a2:	f04f 0200 	mov.w	r2, #0
    if (c == '.') {
 80024a6:	d04a      	beq.n	800253e <chprintf.constprop.3+0xee>
    if (c == 'l' || c == 'L') {
 80024a8:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80024ac:	294c      	cmp	r1, #76	; 0x4c
 80024ae:	f896 a000 	ldrb.w	sl, [r6]
 80024b2:	d056      	beq.n	8002562 <chprintf.constprop.3+0x112>
      is_long = (c >= 'A') && (c <= 'Z');
 80024b4:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
    switch (c) {
 80024b8:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 80024bc:	b2c9      	uxtb	r1, r1
    switch (c) {
 80024be:	2834      	cmp	r0, #52	; 0x34
 80024c0:	f200 81ca 	bhi.w	8002858 <chprintf.constprop.3+0x408>
 80024c4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80024c8:	01c8021a 	.word	0x01c8021a
 80024cc:	01c801c8 	.word	0x01c801c8
 80024d0:	021a01c8 	.word	0x021a01c8
 80024d4:	01c801c8 	.word	0x01c801c8
 80024d8:	01c801c8 	.word	0x01c801c8
 80024dc:	025e01c8 	.word	0x025e01c8
 80024e0:	01c801c8 	.word	0x01c801c8
 80024e4:	01c801c8 	.word	0x01c801c8
 80024e8:	025401c8 	.word	0x025401c8
 80024ec:	01c801c8 	.word	0x01c801c8
 80024f0:	01c8025c 	.word	0x01c8025c
 80024f4:	01c801c8 	.word	0x01c801c8
 80024f8:	01c801c8 	.word	0x01c801c8
 80024fc:	01c801c8 	.word	0x01c801c8
 8002500:	01c801c8 	.word	0x01c801c8
 8002504:	016501c8 	.word	0x016501c8
 8002508:	01c8021a 	.word	0x01c8021a
 800250c:	01c800c3 	.word	0x01c800c3
 8002510:	021a01c8 	.word	0x021a01c8
 8002514:	01c801c8 	.word	0x01c801c8
 8002518:	01c801c8 	.word	0x01c801c8
 800251c:	025e01c8 	.word	0x025e01c8
 8002520:	01c801c8 	.word	0x01c801c8
 8002524:	009501c8 	.word	0x009501c8
 8002528:	025401c8 	.word	0x025401c8
 800252c:	01c801c8 	.word	0x01c801c8
 8002530:	025c      	.short	0x025c
          c = va_arg(ap, int);
 8002532:	f850 1b04 	ldr.w	r1, [r0], #4
 8002536:	b2c9      	uxtb	r1, r1
 8002538:	4607      	mov	r7, r0
        precision += c;
 800253a:	eb01 0245 	add.w	r2, r1, r5, lsl #1
        c = *fmt++;
 800253e:	f816 3b01 	ldrb.w	r3, [r6], #1
        if (c >= '0' && c <= '9')
 8002542:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002546:	b2c9      	uxtb	r1, r1
 8002548:	2909      	cmp	r1, #9
          c = va_arg(ap, int);
 800254a:	4638      	mov	r0, r7
        precision *= 10;
 800254c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
 8002550:	d9f3      	bls.n	800253a <chprintf.constprop.3+0xea>
        else if (c == '*')
 8002552:	2b2a      	cmp	r3, #42	; 0x2a
 8002554:	d0ed      	beq.n	8002532 <chprintf.constprop.3+0xe2>
    if (c == 'l' || c == 'L') {
 8002556:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800255a:	294c      	cmp	r1, #76	; 0x4c
 800255c:	f896 a000 	ldrb.w	sl, [r6]
 8002560:	d1a8      	bne.n	80024b4 <chprintf.constprop.3+0x64>
      if (*fmt)
 8002562:	f1ba 0f00 	cmp.w	sl, #0
 8002566:	f000 8177 	beq.w	8002858 <chprintf.constprop.3+0x408>
 800256a:	1c71      	adds	r1, r6, #1
    switch (c) {
 800256c:	f1aa 0344 	sub.w	r3, sl, #68	; 0x44
 8002570:	9106      	str	r1, [sp, #24]
 8002572:	f896 8001 	ldrb.w	r8, [r6, #1]
 8002576:	2b34      	cmp	r3, #52	; 0x34
 8002578:	f200 816b 	bhi.w	8002852 <chprintf.constprop.3+0x402>
 800257c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002580:	016901e9 	.word	0x016901e9
 8002584:	01690169 	.word	0x01690169
 8002588:	01e90169 	.word	0x01e90169
 800258c:	01690169 	.word	0x01690169
 8002590:	01690169 	.word	0x01690169
 8002594:	018b0169 	.word	0x018b0169
 8002598:	01690169 	.word	0x01690169
 800259c:	01690169 	.word	0x01690169
 80025a0:	01b60169 	.word	0x01b60169
 80025a4:	01690169 	.word	0x01690169
 80025a8:	016901ba 	.word	0x016901ba
 80025ac:	01690169 	.word	0x01690169
 80025b0:	01690169 	.word	0x01690169
 80025b4:	01690169 	.word	0x01690169
 80025b8:	01690169 	.word	0x01690169
 80025bc:	010b0169 	.word	0x010b0169
 80025c0:	016901e9 	.word	0x016901e9
 80025c4:	01690069 	.word	0x01690069
 80025c8:	01e90169 	.word	0x01e90169
 80025cc:	01690169 	.word	0x01690169
 80025d0:	01690169 	.word	0x01690169
 80025d4:	018b0169 	.word	0x018b0169
 80025d8:	01690169 	.word	0x01690169
 80025dc:	003b0169 	.word	0x003b0169
 80025e0:	01b60169 	.word	0x01b60169
 80025e4:	01690169 	.word	0x01690169
 80025e8:	01ba      	.short	0x01ba
      filler = '0';
 80025ea:	9303      	str	r3, [sp, #12]
      fmt++;
 80025ec:	3501      	adds	r5, #1
    if (*fmt == '0') {
 80025ee:	782b      	ldrb	r3, [r5, #0]
 80025f0:	e740      	b.n	8002474 <chprintf.constprop.3+0x24>
    switch (c) {
 80025f2:	46d0      	mov	r8, sl
 80025f4:	9606      	str	r6, [sp, #24]
      if ((s = va_arg(ap, char *)) == 0)
 80025f6:	f857 5b04 	ldr.w	r5, [r7], #4
 80025fa:	2d00      	cmp	r5, #0
 80025fc:	f000 81cd 	beq.w	800299a <chprintf.constprop.3+0x54a>
 8002600:	782b      	ldrb	r3, [r5, #0]
        precision = 32767;
 8002602:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002606:	2a00      	cmp	r2, #0
 8002608:	bf08      	it	eq
 800260a:	460a      	moveq	r2, r1
      for (p = s; *p && (--precision >= 0); p++)
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 81e4 	beq.w	80029da <chprintf.constprop.3+0x58a>
    switch (c) {
 8002612:	462b      	mov	r3, r5
 8002614:	e001      	b.n	800261a <chprintf.constprop.3+0x1ca>
      for (p = s; *p && (--precision >= 0); p++)
 8002616:	42d1      	cmn	r1, r2
 8002618:	d405      	bmi.n	8002626 <chprintf.constprop.3+0x1d6>
 800261a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800261e:	43d9      	mvns	r1, r3
 8002620:	4429      	add	r1, r5
 8002622:	2800      	cmp	r0, #0
 8002624:	d1f7      	bne.n	8002616 <chprintf.constprop.3+0x1c6>
 8002626:	1b5b      	subs	r3, r3, r5
      filler = ' ';
 8002628:	2220      	movs	r2, #32
    if ((width -= i) < 0)
 800262a:	1ae4      	subs	r4, r4, r3
      for (p = s; *p && (--precision >= 0); p++)
 800262c:	46c2      	mov	sl, r8
 800262e:	9e06      	ldr	r6, [sp, #24]
      filler = ' ';
 8002630:	9203      	str	r2, [sp, #12]
 8002632:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    if ((width -= i) < 0)
 8002636:	f140 80bd 	bpl.w	80027b4 <chprintf.constprop.3+0x364>
    if (left_align == FALSE)
 800263a:	9b02      	ldr	r3, [sp, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 8125 	bne.w	800288c <chprintf.constprop.3+0x43c>
    while (--i >= 0) {
 8002642:	f1b8 0f00 	cmp.w	r8, #0
 8002646:	f2c0 8124 	blt.w	8002892 <chprintf.constprop.3+0x442>
      width = -width;
 800264a:	9c02      	ldr	r4, [sp, #8]
 800264c:	e0d2      	b.n	80027f4 <chprintf.constprop.3+0x3a4>
    switch (c) {
 800264e:	46d0      	mov	r8, sl
 8002650:	9606      	str	r6, [sp, #24]
      f = (float) va_arg(ap, double);
 8002652:	3707      	adds	r7, #7
 8002654:	f027 0707 	bic.w	r7, r7, #7
 8002658:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800265c:	9204      	str	r2, [sp, #16]
 800265e:	f7fe fab7 	bl	8000bd0 <__aeabi_d2f>
      if (f < 0) {
 8002662:	2100      	movs	r1, #0
      f = (float) va_arg(ap, double);
 8002664:	4683      	mov	fp, r0
      if (f < 0) {
 8002666:	f7fe fb51 	bl	8000d0c <__aeabi_fcmplt>
 800266a:	9a04      	ldr	r2, [sp, #16]
 800266c:	2800      	cmp	r0, #0
 800266e:	f040 818b 	bne.w	8002988 <chprintf.constprop.3+0x538>
    p = tmpbuf;
 8002672:	ad0c      	add	r5, sp, #48	; 0x30
 8002674:	46aa      	mov	sl, r5
      p = ftoa(p, f, precision);
 8002676:	4658      	mov	r0, fp
 8002678:	9207      	str	r2, [sp, #28]
 800267a:	f7fd ff85 	bl	8000588 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800267e:	9a07      	ldr	r2, [sp, #28]
 8002680:	3a01      	subs	r2, #1
 8002682:	2a08      	cmp	r2, #8
      p = ftoa(p, f, precision);
 8002684:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002688:	f200 819c 	bhi.w	80029c4 <chprintf.constprop.3+0x574>
 800268c:	4b17      	ldr	r3, [pc, #92]	; (80026ec <chprintf.constprop.3+0x29c>)
 800268e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002692:	9307      	str	r3, [sp, #28]
 8002694:	4618      	mov	r0, r3
 8002696:	461e      	mov	r6, r3
 8002698:	f7fd ff54 	bl	8000544 <__aeabi_ui2d>
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <chprintf.constprop.3+0x2a0>)
 800269e:	4633      	mov	r3, r6
 80026a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80026a4:	fba2 3603 	umull	r3, r6, r2, r3
 80026a8:	08f6      	lsrs	r6, r6, #3
  l = (long)num;
 80026aa:	4658      	mov	r0, fp
 80026ac:	f7fe fb58 	bl	8000d60 <__aeabi_f2iz>
  q = p + MAX_FILLER;
 80026b0:	f10a 0c0b 	add.w	ip, sl, #11
  l = num;
 80026b4:	4601      	mov	r1, r0
  q = p + MAX_FILLER;
 80026b6:	4662      	mov	r2, ip
    i = (int)(l % radix);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <chprintf.constprop.3+0x2a0>)
 80026ba:	fba3 e301 	umull	lr, r3, r3, r1
 80026be:	08db      	lsrs	r3, r3, #3
 80026c0:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80026c4:	469e      	mov	lr, r3
 80026c6:	eba1 034b 	sub.w	r3, r1, fp, lsl #1
    i += '0';
 80026ca:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 80026cc:	468b      	mov	fp, r1
    *--q = i;
 80026ce:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80026d0:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 80026d4:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 80026d8:	4671      	mov	r1, lr
  } while ((ll /= radix) != 0);
 80026da:	d8ed      	bhi.n	80026b8 <chprintf.constprop.3+0x268>
  i = (int)(p + MAX_FILLER - q);
 80026dc:	ebac 0c02 	sub.w	ip, ip, r2
 80026e0:	eb0a 0e0c 	add.w	lr, sl, ip
 80026e4:	4651      	mov	r1, sl
 80026e6:	e009      	b.n	80026fc <chprintf.constprop.3+0x2ac>
 80026e8:	08004d11 	.word	0x08004d11
 80026ec:	08004e00 	.word	0x08004e00
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	200008d4 	.word	0x200008d4
 80026f8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 80026fc:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8002700:	4571      	cmp	r1, lr
 8002702:	d1f9      	bne.n	80026f8 <chprintf.constprop.3+0x2a8>
  *p++ = '.';
 8002704:	232e      	movs	r3, #46	; 0x2e
 8002706:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800270a:	700b      	strb	r3, [r1, #0]
 800270c:	44e2      	add	sl, ip
  l = (long)((num - l) * precision);
 800270e:	f7fd ff29 	bl	8000564 <__aeabi_i2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800271a:	f7fd fdd5 	bl	80002c8 <__aeabi_dsub>
 800271e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002722:	f7fd ff8d 	bl	8000640 <__aeabi_dmul>
 8002726:	f7fe fa2b 	bl	8000b80 <__aeabi_d2iz>
    ll = num;
 800272a:	9b07      	ldr	r3, [sp, #28]
  q = p + MAX_FILLER;
 800272c:	f10a 0e0d 	add.w	lr, sl, #13
    ll = num;
 8002730:	2b09      	cmp	r3, #9
 8002732:	bf98      	it	ls
 8002734:	4606      	movls	r6, r0
  q = p + MAX_FILLER;
 8002736:	4671      	mov	r1, lr
  *p++ = '.';
 8002738:	f10a 0302 	add.w	r3, sl, #2
    i = (int)(l % radix);
 800273c:	4aae      	ldr	r2, [pc, #696]	; (80029f8 <chprintf.constprop.3+0x5a8>)
 800273e:	fba2 c200 	umull	ip, r2, r2, r0
 8002742:	08d2      	lsrs	r2, r2, #3
 8002744:	eb02 0b82 	add.w	fp, r2, r2, lsl #2
 8002748:	4694      	mov	ip, r2
 800274a:	eba0 024b 	sub.w	r2, r0, fp, lsl #1
  } while ((ll /= radix) != 0);
 800274e:	48aa      	ldr	r0, [pc, #680]	; (80029f8 <chprintf.constprop.3+0x5a8>)
 8002750:	46b3      	mov	fp, r6
    i += '0';
 8002752:	3230      	adds	r2, #48	; 0x30
  } while ((ll /= radix) != 0);
 8002754:	fba0 0606 	umull	r0, r6, r0, r6
    *--q = i;
 8002758:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 800275a:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 800275e:	f801 2d01 	strb.w	r2, [r1, #-1]!
    l /= radix;
 8002762:	4660      	mov	r0, ip
  } while ((ll /= radix) != 0);
 8002764:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 8002768:	d8e8      	bhi.n	800273c <chprintf.constprop.3+0x2ec>
  i = (int)(p + MAX_FILLER - q);
 800276a:	ebae 0e01 	sub.w	lr, lr, r1
 800276e:	f10e 0002 	add.w	r0, lr, #2
 8002772:	4482      	add	sl, r0
 8002774:	4618      	mov	r0, r3
 8002776:	e001      	b.n	800277c <chprintf.constprop.3+0x32c>
 8002778:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *p++ = *q++;
 800277c:	f800 2b01 	strb.w	r2, [r0], #1
  while (--i);
 8002780:	4550      	cmp	r0, sl
 8002782:	d1f9      	bne.n	8002778 <chprintf.constprop.3+0x328>
 8002784:	4473      	add	r3, lr
 8002786:	1b5b      	subs	r3, r3, r5
 8002788:	46c2      	mov	sl, r8
 800278a:	9e06      	ldr	r6, [sp, #24]
 800278c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002790:	e00d      	b.n	80027ae <chprintf.constprop.3+0x35e>
    switch (c) {
 8002792:	46d0      	mov	r8, sl
 8002794:	9606      	str	r6, [sp, #24]
      *p++ = va_arg(ap, int);
 8002796:	f857 3b04 	ldr.w	r3, [r7], #4
 800279a:	9e06      	ldr	r6, [sp, #24]
 800279c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
      filler = ' ';
 80027a0:	2220      	movs	r2, #32
      *p++ = va_arg(ap, int);
 80027a2:	46c2      	mov	sl, r8
 80027a4:	2301      	movs	r3, #1
 80027a6:	f04f 0800 	mov.w	r8, #0
      filler = ' ';
 80027aa:	9203      	str	r2, [sp, #12]
    s = tmpbuf;
 80027ac:	ad0c      	add	r5, sp, #48	; 0x30
    if ((width -= i) < 0)
 80027ae:	1ae4      	subs	r4, r4, r3
 80027b0:	f53f af43 	bmi.w	800263a <chprintf.constprop.3+0x1ea>
    if (left_align == FALSE)
 80027b4:	9b02      	ldr	r3, [sp, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d164      	bne.n	8002884 <chprintf.constprop.3+0x434>
      width = -width;
 80027ba:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
 80027be:	2c00      	cmp	r4, #0
 80027c0:	d05f      	beq.n	8002882 <chprintf.constprop.3+0x432>
      if (*s == '-' && filler == '0') {
 80027c2:	7829      	ldrb	r1, [r5, #0]
 80027c4:	f8d9 3000 	ldr.w	r3, [r9]
 80027c8:	292d      	cmp	r1, #45	; 0x2d
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	d103      	bne.n	80027d6 <chprintf.constprop.3+0x386>
 80027ce:	e0e9      	b.n	80029a4 <chprintf.constprop.3+0x554>
 80027d0:	f8d9 3000 	ldr.w	r3, [r9]
 80027d4:	689b      	ldr	r3, [r3, #8]
        streamPut(chp, (uint8_t)filler);
 80027d6:	9903      	ldr	r1, [sp, #12]
 80027d8:	4648      	mov	r0, r9
 80027da:	4798      	blx	r3
      } while (++width != 0);
 80027dc:	f11b 0b01 	adds.w	fp, fp, #1
 80027e0:	d1f6      	bne.n	80027d0 <chprintf.constprop.3+0x380>
 80027e2:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 80027e4:	f1b8 0f00 	cmp.w	r8, #0
 80027e8:	4423      	add	r3, r4
 80027ea:	9301      	str	r3, [sp, #4]
        n++;
 80027ec:	bfb8      	it	lt
 80027ee:	461c      	movlt	r4, r3
    while (--i >= 0) {
 80027f0:	db1e      	blt.n	8002830 <chprintf.constprop.3+0x3e0>
      width = 0;
 80027f2:	2400      	movs	r4, #0
 80027f4:	eb05 0b08 	add.w	fp, r5, r8
      streamPut(chp, (uint8_t)*s++);
 80027f8:	f8d9 3000 	ldr.w	r3, [r9]
 80027fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4648      	mov	r0, r9
 8002804:	4798      	blx	r3
 8002806:	ebab 0305 	sub.w	r3, fp, r5
    while (--i >= 0) {
 800280a:	2b00      	cmp	r3, #0
 800280c:	daf4      	bge.n	80027f8 <chprintf.constprop.3+0x3a8>
 800280e:	9b01      	ldr	r3, [sp, #4]
 8002810:	3301      	adds	r3, #1
 8002812:	4443      	add	r3, r8
 8002814:	9301      	str	r3, [sp, #4]
    while (width) {
 8002816:	2c00      	cmp	r4, #0
 8002818:	d03b      	beq.n	8002892 <chprintf.constprop.3+0x442>
 800281a:	4625      	mov	r5, r4
      streamPut(chp, (uint8_t)filler);
 800281c:	f8d9 3000 	ldr.w	r3, [r9]
 8002820:	9903      	ldr	r1, [sp, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4648      	mov	r0, r9
 8002826:	4798      	blx	r3
    while (width) {
 8002828:	3d01      	subs	r5, #1
 800282a:	d1f7      	bne.n	800281c <chprintf.constprop.3+0x3cc>
 800282c:	9b01      	ldr	r3, [sp, #4]
 800282e:	441c      	add	r4, r3
 8002830:	1ba4      	subs	r4, r4, r6
 8002832:	4653      	mov	r3, sl
 8002834:	1932      	adds	r2, r6, r4
      streamPut(chp, (uint8_t)c);
 8002836:	4619      	mov	r1, r3
 8002838:	4870      	ldr	r0, [pc, #448]	; (80029fc <chprintf.constprop.3+0x5ac>)
 800283a:	9201      	str	r2, [sp, #4]
    c = *fmt++;
 800283c:	1c75      	adds	r5, r6, #1
    if (c == 0)
 800283e:	b1d3      	cbz	r3, 8002876 <chprintf.constprop.3+0x426>
    if (c != '%') {
 8002840:	2b25      	cmp	r3, #37	; 0x25
 8002842:	d010      	beq.n	8002866 <chprintf.constprop.3+0x416>
      streamPut(chp, (uint8_t)c);
 8002844:	f8d9 3000 	ldr.w	r3, [r9]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4798      	blx	r3
 800284c:	462e      	mov	r6, r5
 800284e:	782b      	ldrb	r3, [r5, #0]
 8002850:	e7f0      	b.n	8002834 <chprintf.constprop.3+0x3e4>
        c = *fmt++;
 8002852:	9e06      	ldr	r6, [sp, #24]
    switch (c) {
 8002854:	4653      	mov	r3, sl
 8002856:	46c2      	mov	sl, r8
      *p++ = c;
 8002858:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800285c:	f04f 0800 	mov.w	r8, #0
 8002860:	2301      	movs	r3, #1
    s = tmpbuf;
 8002862:	ad0c      	add	r5, sp, #48	; 0x30
 8002864:	e7a3      	b.n	80027ae <chprintf.constprop.3+0x35e>
    if (*fmt == '-') {
 8002866:	7873      	ldrb	r3, [r6, #1]
 8002868:	2b2d      	cmp	r3, #45	; 0x2d
      left_align = TRUE;
 800286a:	bf0a      	itet	eq
 800286c:	2301      	moveq	r3, #1
    left_align = FALSE;
 800286e:	2300      	movne	r3, #0
      fmt++;
 8002870:	1cb5      	addeq	r5, r6, #2
    left_align = FALSE;
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	e5f8      	b.n	8002468 <chprintf.constprop.3+0x18>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002876:	9801      	ldr	r0, [sp, #4]
 8002878:	b012      	add	sp, #72	; 0x48
 800287a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287e:	b003      	add	sp, #12
 8002880:	4770      	bx	lr
      width = -width;
 8002882:	465c      	mov	r4, fp
    while (--i >= 0) {
 8002884:	f1b8 0f00 	cmp.w	r8, #0
 8002888:	dab4      	bge.n	80027f4 <chprintf.constprop.3+0x3a4>
 800288a:	e7c4      	b.n	8002816 <chprintf.constprop.3+0x3c6>
 800288c:	f1b8 0f00 	cmp.w	r8, #0
 8002890:	daaf      	bge.n	80027f2 <chprintf.constprop.3+0x3a2>
    while (width) {
 8002892:	9c01      	ldr	r4, [sp, #4]
 8002894:	e7cc      	b.n	8002830 <chprintf.constprop.3+0x3e0>
 8002896:	f857 0b04 	ldr.w	r0, [r7], #4
    switch (c) {
 800289a:	2508      	movs	r5, #8
      if (is_long)
 800289c:	9e06      	ldr	r6, [sp, #24]
 800289e:	46c2      	mov	sl, r8
  q = p + MAX_FILLER;
 80028a0:	f10d 033b 	add.w	r3, sp, #59	; 0x3b
 80028a4:	461a      	mov	r2, r3
 80028a6:	e000      	b.n	80028aa <chprintf.constprop.3+0x45a>
  } while ((ll /= radix) != 0);
 80028a8:	4662      	mov	r2, ip
    i = (int)(l % radix);
 80028aa:	4686      	mov	lr, r0
 80028ac:	fbb0 f0f5 	udiv	r0, r0, r5
 80028b0:	fb05 e810 	mls	r8, r5, r0, lr
    i += '0';
 80028b4:	f108 0130 	add.w	r1, r8, #48	; 0x30
    if (i > '9')
 80028b8:	2939      	cmp	r1, #57	; 0x39
      i += 'A' - '0' - 10;
 80028ba:	bfc8      	it	gt
 80028bc:	f108 0137 	addgt.w	r1, r8, #55	; 0x37
    *--q = i;
 80028c0:	b2c9      	uxtb	r1, r1
  } while ((ll /= radix) != 0);
 80028c2:	45ae      	cmp	lr, r5
    *--q = i;
 80028c4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80028c8:	f802 1c01 	strb.w	r1, [r2, #-1]
  } while ((ll /= radix) != 0);
 80028cc:	d2ec      	bcs.n	80028a8 <chprintf.constprop.3+0x458>
  i = (int)(p + MAX_FILLER - q);
 80028ce:	eba3 030c 	sub.w	r3, r3, ip
 80028d2:	ad0c      	add	r5, sp, #48	; 0x30
 80028d4:	449c      	add	ip, r3
 80028d6:	4628      	mov	r0, r5
 80028d8:	e001      	b.n	80028de <chprintf.constprop.3+0x48e>
 80028da:	f812 1b01 	ldrb.w	r1, [r2], #1
    *p++ = *q++;
 80028de:	f800 1b01 	strb.w	r1, [r0], #1
  while (--i);
 80028e2:	4594      	cmp	ip, r2
 80028e4:	d1f9      	bne.n	80028da <chprintf.constprop.3+0x48a>
 80028e6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80028ea:	e760      	b.n	80027ae <chprintf.constprop.3+0x35e>
 80028ec:	f857 0b04 	ldr.w	r0, [r7], #4
    switch (c) {
 80028f0:	250a      	movs	r5, #10
 80028f2:	e7d3      	b.n	800289c <chprintf.constprop.3+0x44c>
 80028f4:	f857 0b04 	ldr.w	r0, [r7], #4
 80028f8:	2510      	movs	r5, #16
 80028fa:	e7cf      	b.n	800289c <chprintf.constprop.3+0x44c>
      if (is_long)
 80028fc:	2919      	cmp	r1, #25
 80028fe:	f107 0304 	add.w	r3, r7, #4
 8002902:	d971      	bls.n	80029e8 <chprintf.constprop.3+0x598>
        l = va_arg(ap, int);
 8002904:	6838      	ldr	r0, [r7, #0]
      if (l < 0) {
 8002906:	2800      	cmp	r0, #0
        l = va_arg(ap, int);
 8002908:	461f      	mov	r7, r3
      if (l < 0) {
 800290a:	db29      	blt.n	8002960 <chprintf.constprop.3+0x510>
    p = tmpbuf;
 800290c:	ad0c      	add	r5, sp, #48	; 0x30
 800290e:	462b      	mov	r3, r5
  q = p + MAX_FILLER;
 8002910:	f103 0e0b 	add.w	lr, r3, #11
 8002914:	46f4      	mov	ip, lr
 8002916:	e000      	b.n	800291a <chprintf.constprop.3+0x4ca>
  } while ((ll /= radix) != 0);
 8002918:	4608      	mov	r0, r1
    i = (int)(l % radix);
 800291a:	4a37      	ldr	r2, [pc, #220]	; (80029f8 <chprintf.constprop.3+0x5a8>)
 800291c:	fba2 2100 	umull	r2, r1, r2, r0
 8002920:	08c9      	lsrs	r1, r1, #3
 8002922:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002926:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
    i += '0';
 800292a:	3230      	adds	r2, #48	; 0x30
    *--q = i;
 800292c:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 800292e:	2809      	cmp	r0, #9
    *--q = i;
 8002930:	f80c 2d01 	strb.w	r2, [ip, #-1]!
  } while ((ll /= radix) != 0);
 8002934:	dcf0      	bgt.n	8002918 <chprintf.constprop.3+0x4c8>
  i = (int)(p + MAX_FILLER - q);
 8002936:	ebae 0e0c 	sub.w	lr, lr, ip
 800293a:	449e      	add	lr, r3
 800293c:	e001      	b.n	8002942 <chprintf.constprop.3+0x4f2>
 800293e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    *p++ = *q++;
 8002942:	f803 2b01 	strb.w	r2, [r3], #1
  while (--i);
 8002946:	4573      	cmp	r3, lr
 8002948:	d1f9      	bne.n	800293e <chprintf.constprop.3+0x4ee>
 800294a:	1b5b      	subs	r3, r3, r5
 800294c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002950:	e72d      	b.n	80027ae <chprintf.constprop.3+0x35e>
 8002952:	1d3b      	adds	r3, r7, #4
        l = va_arg(ap, long);
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	9e06      	ldr	r6, [sp, #24]
      if (l < 0) {
 8002958:	2800      	cmp	r0, #0
        l = va_arg(ap, long);
 800295a:	46c2      	mov	sl, r8
 800295c:	461f      	mov	r7, r3
      if (l < 0) {
 800295e:	dad5      	bge.n	800290c <chprintf.constprop.3+0x4bc>
        *p++ = '-';
 8002960:	232d      	movs	r3, #45	; 0x2d
 8002962:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        l = -l;
 8002966:	4240      	negs	r0, r0
        *p++ = '-';
 8002968:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 800296c:	ad0c      	add	r5, sp, #48	; 0x30
 800296e:	e7cf      	b.n	8002910 <chprintf.constprop.3+0x4c0>
    switch (c) {
 8002970:	250a      	movs	r5, #10
      if (is_long)
 8002972:	2919      	cmp	r1, #25
 8002974:	f857 0b04 	ldr.w	r0, [r7], #4
 8002978:	d892      	bhi.n	80028a0 <chprintf.constprop.3+0x450>
 800297a:	46d0      	mov	r8, sl
 800297c:	9606      	str	r6, [sp, #24]
 800297e:	e78d      	b.n	800289c <chprintf.constprop.3+0x44c>
    switch (c) {
 8002980:	2510      	movs	r5, #16
 8002982:	e7f6      	b.n	8002972 <chprintf.constprop.3+0x522>
 8002984:	2508      	movs	r5, #8
 8002986:	e7f4      	b.n	8002972 <chprintf.constprop.3+0x522>
        *p++ = '-';
 8002988:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 800298a:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
        *p++ = '-';
 800298e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002992:	f10d 0a31 	add.w	sl, sp, #49	; 0x31
 8002996:	ad0c      	add	r5, sp, #48	; 0x30
 8002998:	e66d      	b.n	8002676 <chprintf.constprop.3+0x226>
      if (precision == 0)
 800299a:	b9e2      	cbnz	r2, 80029d6 <chprintf.constprop.3+0x586>
        precision = 32767;
 800299c:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
 80029a0:	4d17      	ldr	r5, [pc, #92]	; (8002a00 <chprintf.constprop.3+0x5b0>)
 80029a2:	e636      	b.n	8002612 <chprintf.constprop.3+0x1c2>
      if (*s == '-' && filler == '0') {
 80029a4:	9a03      	ldr	r2, [sp, #12]
 80029a6:	2a30      	cmp	r2, #48	; 0x30
 80029a8:	f47f af15 	bne.w	80027d6 <chprintf.constprop.3+0x386>
        streamPut(chp, (uint8_t)*s++);
 80029ac:	4648      	mov	r0, r9
 80029ae:	4798      	blx	r3
 80029b0:	9a01      	ldr	r2, [sp, #4]
 80029b2:	f8d9 3000 	ldr.w	r3, [r9]
 80029b6:	3201      	adds	r2, #1
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	9201      	str	r2, [sp, #4]
 80029bc:	3501      	adds	r5, #1
 80029be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80029c2:	e708      	b.n	80027d6 <chprintf.constprop.3+0x386>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80029c4:	a30a      	add	r3, pc, #40	; (adr r3, 80029f0 <chprintf.constprop.3+0x5a0>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <chprintf.constprop.3+0x5b4>)
 80029d0:	4e0d      	ldr	r6, [pc, #52]	; (8002a08 <chprintf.constprop.3+0x5b8>)
 80029d2:	9307      	str	r3, [sp, #28]
 80029d4:	e669      	b.n	80026aa <chprintf.constprop.3+0x25a>
        s = "(null)";
 80029d6:	4d0a      	ldr	r5, [pc, #40]	; (8002a00 <chprintf.constprop.3+0x5b0>)
 80029d8:	e61b      	b.n	8002612 <chprintf.constprop.3+0x1c2>
      filler = ' ';
 80029da:	2320      	movs	r3, #32
      for (p = s; *p && (--precision >= 0); p++)
 80029dc:	46c2      	mov	sl, r8
 80029de:	9e06      	ldr	r6, [sp, #24]
      filler = ' ';
 80029e0:	9303      	str	r3, [sp, #12]
      for (p = s; *p && (--precision >= 0); p++)
 80029e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80029e6:	e6e5      	b.n	80027b4 <chprintf.constprop.3+0x364>
      if (is_long)
 80029e8:	46d0      	mov	r8, sl
 80029ea:	9606      	str	r6, [sp, #24]
 80029ec:	e7b2      	b.n	8002954 <chprintf.constprop.3+0x504>
 80029ee:	bf00      	nop
 80029f0:	00000000 	.word	0x00000000
 80029f4:	41cdcd65 	.word	0x41cdcd65
 80029f8:	cccccccd 	.word	0xcccccccd
 80029fc:	200008d4 	.word	0x200008d4
 8002a00:	08004d1c 	.word	0x08004d1c
 8002a04:	3b9aca00 	.word	0x3b9aca00
 8002a08:	05f5e100 	.word	0x05f5e100
 8002a0c:	00000000 	.word	0x00000000

08002a10 <MoveThread>:
    }

}

 THD_WORKING_AREA(waMoveThread, 128);
    THD_FUNCTION(MoveThread, arg) {
 8002a10:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002a14:	f8df b318 	ldr.w	fp, [pc, #792]	; 8002d30 <MoveThread+0x320>
 8002a18:	b08b      	sub	sp, #44	; 0x2c
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8002a20:	4bb9      	ldr	r3, [pc, #740]	; (8002d08 <MoveThread+0x2f8>)
 8002a22:	6999      	ldr	r1, [r3, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 8002a24:	460a      	mov	r2, r1
 8002a26:	f852 0f28 	ldr.w	r0, [r2, #40]!
 8002a2a:	4290      	cmp	r0, r2
 8002a2c:	d107      	bne.n	8002a3e <MoveThread+0x2e>
    chSchGoSleepS(CH_STATE_WTMSG);
 8002a2e:	200e      	movs	r0, #14
 8002a30:	f7ff fb06 	bl	8002040 <chSchGoSleepS>
 8002a34:	4bb4      	ldr	r3, [pc, #720]	; (8002d08 <MoveThread+0x2f8>)
 8002a36:	6999      	ldr	r1, [r3, #24]
 8002a38:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8002a3a:	f101 0228 	add.w	r2, r1, #40	; 0x28
  tqp->p_next = tp->p_next;
 8002a3e:	6803      	ldr	r3, [r0, #0]
 8002a40:	628b      	str	r3, [r1, #40]	; 0x28
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8002a42:	210d      	movs	r1, #13
  tqp->p_next->p_prev = (thread_t *)tqp;
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	2400      	movs	r4, #0
 8002a48:	7701      	strb	r1, [r0, #28]
 8002a4a:	f384 8811 	msr	BASEPRI, r4
    
        (void)arg;

        while(1){
            sensor_thread = chMsgWait();
            line = (bool)chMsgGet(sensor_thread);
 8002a4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002a50:	4dae      	ldr	r5, [pc, #696]	; (8002d0c <MoveThread+0x2fc>)
 8002a52:	1b1b      	subs	r3, r3, r4
 8002a54:	bf18      	it	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	702b      	strb	r3, [r5, #0]
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002a60:	f7ff fa5e 	bl	8001f20 <chSchWakeupS.constprop.37>
 8002a64:	f384 8811 	msr	BASEPRI, r4
            chMsgRelease(sensor_thread, MSG_OK);
            // PROCESS
            calculate_speed(line ? -1 : 1 * get_camera_output(),20);
 8002a68:	782d      	ldrb	r5, [r5, #0]
 8002a6a:	2d00      	cmp	r5, #0
 8002a6c:	f040 80c5 	bne.w	8002bfa <MoveThread+0x1ea>
 8002a70:	4ca7      	ldr	r4, [pc, #668]	; (8002d10 <MoveThread+0x300>)
 8002a72:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8002d64 <MoveThread+0x354>
 8002a76:	2300      	movs	r3, #0
 8002a78:	e9cd 3402 	strd	r3, r4, [sp, #8]
    for (int8_t i = 0; i < NUM_OF_MOTORS; i++) {
     chVTObjectInit(&main_timer[i]);
    }
}
 
void calculate_speed(double smer, int8_t percent) {
 8002a7c:	4ba5      	ldr	r3, [pc, #660]	; (8002d14 <MoveThread+0x304>)
 8002a7e:	9308      	str	r3, [sp, #32]
 8002a80:	4ba5      	ldr	r3, [pc, #660]	; (8002d18 <MoveThread+0x308>)
 8002a82:	9309      	str	r3, [sp, #36]	; 0x24
 8002a84:	4ba5      	ldr	r3, [pc, #660]	; (8002d1c <MoveThread+0x30c>)
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4ba5      	ldr	r3, [pc, #660]	; (8002d20 <MoveThread+0x310>)
 8002a8a:	9301      	str	r3, [sp, #4]
    if (percent <= 100 && percent > 0) {
        if(smer != -2) {
            double smer_motor = -1;
 8002a8c:	4ba5      	ldr	r3, [pc, #660]	; (8002d24 <MoveThread+0x314>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	e9cd 2306 	strd	r2, r3, [sp, #24]
    THD_FUNCTION(MoveThread, arg) {
 8002a94:	2408      	movs	r4, #8
 8002a96:	2700      	movs	r7, #0
 8002a98:	2609      	movs	r6, #9
 8002a9a:	9404      	str	r4, [sp, #16]
 8002a9c:	b2fc      	uxtb	r4, r7
            for (int8_t i = 0; i < NUM_OF_MOTORS; i++) {
                smer_motor += MOTOR_CONST;
                double speed = truncl(sin(((double)smer_motor-(double)smer)*(double)PI) * 17 * percent);
                speed += ((speed < 0) ? speed*-1 : speed) < 5 ? -speed : (speed < 0 ? -300 : 300);
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9405      	str	r4, [sp, #20]
 8002aa8:	fa4f fa87 	sxtb.w	sl, r7
 8002aac:	f7fe f840 	bl	8000b30 <__aeabi_dcmplt>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	f040 80aa 	bne.w	8002c0a <MoveThread+0x1fa>
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	4641      	mov	r1, r8
 8002aba:	2200      	movs	r2, #0
 8002abc:	4b9a      	ldr	r3, [pc, #616]	; (8002d28 <MoveThread+0x318>)
 8002abe:	f7fe f837 	bl	8000b30 <__aeabi_dcmplt>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	f040 8095 	bne.w	8002bf2 <MoveThread+0x1e2>
 8002ac8:	f8df e29c 	ldr.w	lr, [pc, #668]	; 8002d68 <MoveThread+0x358>
 8002acc:	4684      	mov	ip, r0
 8002ace:	4643      	mov	r3, r8
 8002ad0:	462a      	mov	r2, r5
 8002ad2:	4660      	mov	r0, ip
 8002ad4:	4671      	mov	r1, lr
 8002ad6:	f7fd fbf9 	bl	80002cc <__adddf3>
                speed *= i == 2 ? 1.2 : 1;
 8002ada:	2f02      	cmp	r7, #2
                speed += ((speed < 0) ? speed*-1 : speed) < 5 ? -speed : (speed < 0 ? -300 : 300);
 8002adc:	4680      	mov	r8, r0
 8002ade:	4689      	mov	r9, r1
                speed *= i == 2 ? 1.2 : 1;
 8002ae0:	f000 8101 	beq.w	8002ce6 <MoveThread+0x2d6>
                move_motor(i,speed);
 8002ae4:	4640      	mov	r0, r8
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	f7fe f84a 	bl	8000b80 <__aeabi_d2iz>
 8002aec:	9a04      	ldr	r2, [sp, #16]
 8002aee:	2301      	movs	r3, #1
 8002af0:	b205      	sxth	r5, r0
    if (speed < 0) {
 8002af2:	fa03 f606 	lsl.w	r6, r3, r6
 8002af6:	fa03 f402 	lsl.w	r4, r3, r2
 8002afa:	2d00      	cmp	r5, #0
 8002afc:	b2b6      	uxth	r6, r6
 8002afe:	b2a4      	uxth	r4, r4
 8002b00:	f2c0 808f 	blt.w	8002c22 <MoveThread+0x212>
        case 0:
            palClearPad(GPIOC, pinA);
            palClearPad(GPIOC, pinB);
            break;
        case 1:
            palSetPad(GPIOC, pinA);
 8002b04:	4b89      	ldr	r3, [pc, #548]	; (8002d2c <MoveThread+0x31c>)
 8002b06:	bf14      	ite	ne
 8002b08:	831e      	strhne	r6, [r3, #24]
            palClearPad(GPIOC, pinA);
 8002b0a:	835e      	strheq	r6, [r3, #26]
            palClearPad(GPIOC, pinB);
 8002b0c:	835c      	strh	r4, [r3, #26]
    motor_freqs[motor_number] = speed; 
 8002b0e:	9a01      	ldr	r2, [sp, #4]
    if (motor_actual_speeds[motor_number] == 0) {
 8002b10:	9b00      	ldr	r3, [sp, #0]
    motor_freqs[motor_number] = speed; 
 8002b12:	f842 5b04 	str.w	r5, [r2], #4
    if (motor_actual_speeds[motor_number] == 0) {
 8002b16:	f9b3 3000 	ldrsh.w	r3, [r3]
    motor_freqs[motor_number] = speed; 
 8002b1a:	9201      	str	r2, [sp, #4]
    if (motor_actual_speeds[motor_number] == 0) {
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8086 	beq.w	8002c2e <MoveThread+0x21e>
    switch(motor_number) {
 8002b22:	f1ba 0f01 	cmp.w	sl, #1
 8002b26:	f04f 0320 	mov.w	r3, #32
 8002b2a:	f000 808c 	beq.w	8002c46 <MoveThread+0x236>
 8002b2e:	f1ba 0f02 	cmp.w	sl, #2
 8002b32:	f000 80b0 	beq.w	8002c96 <MoveThread+0x286>
 8002b36:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8002b3a:	f8db 300c 	ldr.w	r3, [fp, #12]
 8002b3e:	b113      	cbz	r3, 8002b46 <MoveThread+0x136>
    chVTDoResetI(vtp);
 8002b40:	487b      	ldr	r0, [pc, #492]	; (8002d30 <MoveThread+0x320>)
 8002b42:	f7ff f885 	bl	8001c50 <chVTDoResetI>
 8002b46:	2300      	movs	r3, #0
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8002b52:	f8db 300c 	ldr.w	r3, [fp, #12]
 8002b56:	b113      	cbz	r3, 8002b5e <MoveThread+0x14e>
    chVTDoResetI(vtp);
 8002b58:	4875      	ldr	r0, [pc, #468]	; (8002d30 <MoveThread+0x320>)
 8002b5a:	f7ff f879 	bl	8001c50 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8002b5e:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <MoveThread+0x324>)
 8002b60:	4a75      	ldr	r2, [pc, #468]	; (8002d38 <MoveThread+0x328>)
 8002b62:	4873      	ldr	r0, [pc, #460]	; (8002d30 <MoveThread+0x320>)
 8002b64:	2196      	movs	r1, #150	; 0x96
 8002b66:	f7ff f8b3 	bl	8001cd0 <chVTDoSetI>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f383 8811 	msr	BASEPRI, r3
                chprintf((BaseSequentialStream*)&SD1,"%d : %d \r\n", i, (int)speed);
 8002b70:	4649      	mov	r1, r9
 8002b72:	4640      	mov	r0, r8
 8002b74:	f7fe f804 	bl	8000b80 <__aeabi_d2iz>
 8002b78:	463a      	mov	r2, r7
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	496f      	ldr	r1, [pc, #444]	; (8002d3c <MoveThread+0x32c>)
 8002b7e:	4870      	ldr	r0, [pc, #448]	; (8002d40 <MoveThread+0x330>)
 8002b80:	f7ff fc66 	bl	8002450 <chprintf.constprop.3>
            for (int8_t i = 0; i < NUM_OF_MOTORS; i++) {
 8002b84:	9b05      	ldr	r3, [sp, #20]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	f43f af47 	beq.w	8002a1a <MoveThread+0xa>
                smer_motor += MOTOR_CONST;
 8002b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b90:	a359      	add	r3, pc, #356	; (adr r3, 8002cf8 <MoveThread+0x2e8>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd fb99 	bl	80002cc <__adddf3>
 8002b9a:	a357      	add	r3, pc, #348	; (adr r3, 8002cf8 <MoveThread+0x2e8>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002ba4:	f7fd fb92 	bl	80002cc <__adddf3>
 8002ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002bac:	f7fd fb8c 	bl	80002c8 <__aeabi_dsub>
 8002bb0:	a353      	add	r3, pc, #332	; (adr r3, 8002d00 <MoveThread+0x2f0>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd fd43 	bl	8000640 <__aeabi_dmul>
 8002bba:	f000 fe61 	bl	8003880 <sin>
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4b60      	ldr	r3, [pc, #384]	; (8002d44 <MoveThread+0x334>)
 8002bc2:	f7fd fd3d 	bl	8000640 <__aeabi_dmul>
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <MoveThread+0x338>)
 8002bca:	f7fd fd39 	bl	8000640 <__aeabi_dmul>
 8002bce:	f000 fea7 	bl	8003920 <truncl>
 8002bd2:	9b08      	ldr	r3, [sp, #32]
 8002bd4:	f913 6b01 	ldrsb.w	r6, [r3], #1
 8002bd8:	9308      	str	r3, [sp, #32]
 8002bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bdc:	f913 2b01 	ldrsb.w	r2, [r3], #1
 8002be0:	9309      	str	r3, [sp, #36]	; 0x24
 8002be2:	9b00      	ldr	r3, [sp, #0]
 8002be4:	9204      	str	r2, [sp, #16]
 8002be6:	3302      	adds	r3, #2
 8002be8:	4605      	mov	r5, r0
 8002bea:	4688      	mov	r8, r1
 8002bec:	3701      	adds	r7, #1
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	e754      	b.n	8002a9c <MoveThread+0x8c>
                speed += ((speed < 0) ? speed*-1 : speed) < 5 ? -speed : (speed < 0 ? -300 : 300);
 8002bf2:	46ac      	mov	ip, r5
 8002bf4:	f108 4e00 	add.w	lr, r8, #2147483648	; 0x80000000
 8002bf8:	e769      	b.n	8002ace <MoveThread+0xbe>
            calculate_speed(line ? -1 : 1 * get_camera_output(),20);
 8002bfa:	4625      	mov	r5, r4
 8002bfc:	4c49      	ldr	r4, [pc, #292]	; (8002d24 <MoveThread+0x314>)
 8002bfe:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002d6c <MoveThread+0x35c>
 8002c02:	2300      	movs	r3, #0
 8002c04:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002c08:	e738      	b.n	8002a7c <MoveThread+0x6c>
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4b4e      	ldr	r3, [pc, #312]	; (8002d4c <MoveThread+0x33c>)
 8002c12:	f7fd ffab 	bl	8000b6c <__aeabi_dcmpgt>
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d1eb      	bne.n	8002bf2 <MoveThread+0x1e2>
 8002c1a:	4684      	mov	ip, r0
 8002c1c:	f8df e150 	ldr.w	lr, [pc, #336]	; 8002d70 <MoveThread+0x360>
 8002c20:	e755      	b.n	8002ace <MoveThread+0xbe>
            palClearPad(GPIOC, pinB);
            break;
        case 2:
            palSetPad(GPIOC, pinB);
 8002c22:	4b42      	ldr	r3, [pc, #264]	; (8002d2c <MoveThread+0x31c>)
        speed *= -1;
 8002c24:	4240      	negs	r0, r0
            palSetPad(GPIOC, pinB);
 8002c26:	831c      	strh	r4, [r3, #24]
        speed *= -1;
 8002c28:	b205      	sxth	r5, r0
            palClearPad(GPIOC, pinA);
 8002c2a:	835e      	strh	r6, [r3, #26]
        speed *= -1;
 8002c2c:	e76f      	b.n	8002b0e <MoveThread+0xfe>
        pwmEnableChannel(&PWMD1, motor_number, speed);
 8002c2e:	4629      	mov	r1, r5
 8002c30:	9805      	ldr	r0, [sp, #20]
 8002c32:	f7fe f945 	bl	8000ec0 <pwmEnableChannel.constprop.13>
        motor_actual_speeds[motor_number] = speed;
 8002c36:	9b00      	ldr	r3, [sp, #0]
    switch(motor_number) {
 8002c38:	f1ba 0f01 	cmp.w	sl, #1
        motor_actual_speeds[motor_number] = speed;
 8002c3c:	801d      	strh	r5, [r3, #0]
 8002c3e:	f04f 0320 	mov.w	r3, #32
    switch(motor_number) {
 8002c42:	f47f af74 	bne.w	8002b2e <MoveThread+0x11e>
 8002c46:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8002c4a:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002c4e:	b113      	cbz	r3, 8002c56 <MoveThread+0x246>
    chVTDoResetI(vtp);
 8002c50:	483f      	ldr	r0, [pc, #252]	; (8002d50 <MoveThread+0x340>)
 8002c52:	f7fe fffd 	bl	8001c50 <chVTDoResetI>
 8002c56:	2300      	movs	r3, #0
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8002c62:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002c66:	b113      	cbz	r3, 8002c6e <MoveThread+0x25e>
    chVTDoResetI(vtp);
 8002c68:	4839      	ldr	r0, [pc, #228]	; (8002d50 <MoveThread+0x340>)
 8002c6a:	f7fe fff1 	bl	8001c50 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8002c6e:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <MoveThread+0x344>)
 8002c70:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <MoveThread+0x328>)
 8002c72:	4837      	ldr	r0, [pc, #220]	; (8002d50 <MoveThread+0x340>)
 8002c74:	2196      	movs	r1, #150	; 0x96
 8002c76:	f7ff f82b 	bl	8001cd0 <chVTDoSetI>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f383 8811 	msr	BASEPRI, r3
                chprintf((BaseSequentialStream*)&SD1,"%d : %d \r\n", i, (int)speed);
 8002c80:	4649      	mov	r1, r9
 8002c82:	4640      	mov	r0, r8
 8002c84:	f7fd ff7c 	bl	8000b80 <__aeabi_d2iz>
 8002c88:	463a      	mov	r2, r7
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	492b      	ldr	r1, [pc, #172]	; (8002d3c <MoveThread+0x32c>)
 8002c8e:	482c      	ldr	r0, [pc, #176]	; (8002d40 <MoveThread+0x330>)
 8002c90:	f7ff fbde 	bl	8002450 <chprintf.constprop.3>
 8002c94:	e77a      	b.n	8002b8c <MoveThread+0x17c>
 8002c96:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8002c9a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002c9e:	b113      	cbz	r3, 8002ca6 <MoveThread+0x296>
    chVTDoResetI(vtp);
 8002ca0:	482d      	ldr	r0, [pc, #180]	; (8002d58 <MoveThread+0x348>)
 8002ca2:	f7fe ffd5 	bl	8001c50 <chVTDoResetI>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	2320      	movs	r3, #32
 8002cae:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8002cb2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002cb6:	b113      	cbz	r3, 8002cbe <MoveThread+0x2ae>
    chVTDoResetI(vtp);
 8002cb8:	4827      	ldr	r0, [pc, #156]	; (8002d58 <MoveThread+0x348>)
 8002cba:	f7fe ffc9 	bl	8001c50 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8002cbe:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <MoveThread+0x34c>)
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <MoveThread+0x328>)
 8002cc2:	4825      	ldr	r0, [pc, #148]	; (8002d58 <MoveThread+0x348>)
 8002cc4:	2196      	movs	r1, #150	; 0x96
 8002cc6:	f7ff f803 	bl	8001cd0 <chVTDoSetI>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	4640      	mov	r0, r8
 8002cd4:	f7fd ff54 	bl	8000b80 <__aeabi_d2iz>
 8002cd8:	463a      	mov	r2, r7
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4917      	ldr	r1, [pc, #92]	; (8002d3c <MoveThread+0x32c>)
 8002cde:	4818      	ldr	r0, [pc, #96]	; (8002d40 <MoveThread+0x330>)
 8002ce0:	f7ff fbb6 	bl	8002450 <chprintf.constprop.3>
 8002ce4:	e699      	b.n	8002a1a <MoveThread+0xa>
 8002ce6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <MoveThread+0x350>)
 8002cec:	f7fd fca8 	bl	8000640 <__aeabi_dmul>
 8002cf0:	4680      	mov	r8, r0
 8002cf2:	4689      	mov	r9, r1
 8002cf4:	e6f6      	b.n	8002ae4 <MoveThread+0xd4>
 8002cf6:	bf00      	nop
 8002cf8:	55555555 	.word	0x55555555
 8002cfc:	3fe55555 	.word	0x3fe55555
 8002d00:	54411744 	.word	0x54411744
 8002d04:	400921fb 	.word	0x400921fb
 8002d08:	20000950 	.word	0x20000950
 8002d0c:	20000b48 	.word	0x20000b48
 8002d10:	3fe00000 	.word	0x3fe00000
 8002d14:	08004c11 	.word	0x08004c11
 8002d18:	08004c21 	.word	0x08004c21
 8002d1c:	20000b88 	.word	0x20000b88
 8002d20:	20000b90 	.word	0x20000b90
 8002d24:	bff00000 	.word	0xbff00000
 8002d28:	40140000 	.word	0x40140000
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	20000b4c 	.word	0x20000b4c
 8002d34:	200008b4 	.word	0x200008b4
 8002d38:	08001fe1 	.word	0x08001fe1
 8002d3c:	08004d10 	.word	0x08004d10
 8002d40:	200008d4 	.word	0x200008d4
 8002d44:	40310000 	.word	0x40310000
 8002d48:	40340000 	.word	0x40340000
 8002d4c:	c0140000 	.word	0xc0140000
 8002d50:	20000b60 	.word	0x20000b60
 8002d54:	20000800 	.word	0x20000800
 8002d58:	20000b74 	.word	0x20000b74
 8002d5c:	20000801 	.word	0x20000801
 8002d60:	3ff33333 	.word	0x3ff33333
 8002d64:	c0654000 	.word	0xc0654000
 8002d68:	4072c000 	.word	0x4072c000
 8002d6c:	40726000 	.word	0x40726000
 8002d70:	c072c000 	.word	0xc072c000
	...

08002d80 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <main+0x6c>)
  PWR->CR |= PWR_CR_DBP;
 8002d82:	4c1b      	ldr	r4, [pc, #108]	; (8002df0 <main+0x70>)
  rccResetAHB1(~0);
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d8a:	2200      	movs	r2, #0
#include "includes/chprintf.h"
#include <math.h>

///home/adam/ChibiOS_16.1.9/os/hal/lib/streams/

int main(void) {
 8002d8c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002d90:	6119      	str	r1, [r3, #16]
 8002d92:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8002d94:	6958      	ldr	r0, [r3, #20]
 8002d96:	6159      	str	r1, [r3, #20]
 8002d98:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002d9a:	6a18      	ldr	r0, [r3, #32]
 8002d9c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8002da0:	6218      	str	r0, [r3, #32]
 8002da2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8002da4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002da6:	6259      	str	r1, [r3, #36]	; 0x24
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8002daa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002dac:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002db0:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8002db2:	6821      	ldr	r1, [r4, #0]
 8002db4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002db8:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002dba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002dbc:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002dc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002dc4:	b08b      	sub	sp, #44	; 0x2c
 8002dc6:	d003      	beq.n	8002dd0 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8002dc8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002dcc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002dce:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8002dd0:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <main+0x70>)
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <main+0x74>)
 8002dd4:	6853      	ldr	r3, [r2, #4]
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8002dd6:	4d08      	ldr	r5, [pc, #32]	; (8002df8 <main+0x78>)
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ddc:	6053      	str	r3, [r2, #4]
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <main+0x7c>)
 8002de0:	2000      	movs	r0, #0
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002de2:	4602      	mov	r2, r0
  dma_streams_mask = 0U;
 8002de4:	6018      	str	r0, [r3, #0]
    _stm32_dma_streams[i].stream->CR = 0U;
 8002de6:	4604      	mov	r4, r0
 8002de8:	e00c      	b.n	8002e04 <main+0x84>
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000
 8002df4:	08004c3c 	.word	0x08004c3c
 8002df8:	40026010 	.word	0x40026010
 8002dfc:	20000b40 	.word	0x20000b40
 8002e00:	f851 5c0c 	ldr.w	r5, [r1, #-12]
    dma_isr_redir[i].dma_func = NULL;
 8002e04:	4bc1      	ldr	r3, [pc, #772]	; (800310c <main+0x38c>)
    _stm32_dma_streams[i].stream->CR = 0U;
 8002e06:	602c      	str	r4, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
 8002e08:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002e0c:	3201      	adds	r2, #1
 8002e0e:	2a10      	cmp	r2, #16
 8002e10:	f101 010c 	add.w	r1, r1, #12
 8002e14:	d1f4      	bne.n	8002e00 <main+0x80>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002e16:	f8df b358 	ldr.w	fp, [pc, #856]	; 8003170 <main+0x3f0>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002e1a:	f8df e358 	ldr.w	lr, [pc, #856]	; 8003174 <main+0x3f4>
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002e1e:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8003178 <main+0x3f8>
 8002e22:	9203      	str	r2, [sp, #12]
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e28:	f8cb 3008 	str.w	r3, [fp, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8002e2c:	f8cb 300c 	str.w	r3, [fp, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002e30:	f8ce 3008 	str.w	r3, [lr, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002e34:	f8ce 300c 	str.w	r3, [lr, #12]
 8002e38:	f8d9 e030 	ldr.w	lr, [r9, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
 8002e3c:	f8df a33c 	ldr.w	sl, [pc, #828]	; 800317c <main+0x3fc>
  gpiop->PUPDR   = config->pupdr;
 8002e40:	4ab3      	ldr	r2, [pc, #716]	; (8003110 <main+0x390>)
  gpiop->OTYPER  = config->otyper;
 8002e42:	f8df c33c 	ldr.w	ip, [pc, #828]	; 8003180 <main+0x400>
  gpiop->MODER   = config->moder;
 8002e46:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8003184 <main+0x404>
  gpiop->OTYPER  = config->otyper;
 8002e4a:	4eb2      	ldr	r6, [pc, #712]	; (8003114 <main+0x394>)
 8002e4c:	4db2      	ldr	r5, [pc, #712]	; (8003118 <main+0x398>)
 8002e4e:	48b3      	ldr	r0, [pc, #716]	; (800311c <main+0x39c>)
 8002e50:	49b3      	ldr	r1, [pc, #716]	; (8003120 <main+0x3a0>)
  adcp->state    = ADC_STOP;
 8002e52:	4fb4      	ldr	r7, [pc, #720]	; (8003124 <main+0x3a4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002e54:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8003188 <main+0x408>
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002e58:	f04e 0e9f 	orr.w	lr, lr, #159	; 0x9f
 8002e5c:	f8c9 e030 	str.w	lr, [r9, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8002e60:	f8d9 e050 	ldr.w	lr, [r9, #80]	; 0x50
 8002e64:	f04e 0e9f 	orr.w	lr, lr, #159	; 0x9f
 8002e68:	f8c9 e050 	str.w	lr, [r9, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8002e6c:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8002e70:	f8ca 4004 	str.w	r4, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002e74:	f8ca e008 	str.w	lr, [sl, #8]
  gpiop->ODR     = config->odr;
 8002e78:	f64f 7edf 	movw	lr, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 8002e7c:	f8ca 200c 	str.w	r2, [sl, #12]
  gpiop->ODR     = config->odr;
 8002e80:	f8ca e014 	str.w	lr, [sl, #20]
  gpiop->AFRL    = config->afrl;
 8002e84:	f44f 4eee 	mov.w	lr, #30464	; 0x7700
 8002e88:	f8ca e020 	str.w	lr, [sl, #32]
  gpiop->AFRH    = config->afrh;
 8002e8c:	f44f 2e2a 	mov.w	lr, #696320	; 0xaa000
 8002e90:	f8ca e024 	str.w	lr, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	f8ca b000 	str.w	fp, [sl]
  gpiop->PUPDR   = config->pupdr;
 8002e9a:	f04f 3e55 	mov.w	lr, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8002e9e:	f64f 7bff 	movw	fp, #65535	; 0xffff
  gpiop->OTYPER  = config->otyper;
 8002ea2:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002ea6:	f8cc 3008 	str.w	r3, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8002eaa:	f8cc e00c 	str.w	lr, [ip, #12]
  gpiop->ODR     = config->odr;
 8002eae:	f8cc b014 	str.w	fp, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8002eb2:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8002eb6:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002eba:	f8cc 2000 	str.w	r2, [ip]
  gpiop->PUPDR   = config->pupdr;
 8002ebe:	4a9a      	ldr	r2, [pc, #616]	; (8003128 <main+0x3a8>)
 8002ec0:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 800318c <main+0x40c>
  gpiop->OTYPER  = config->otyper;
 8002ec4:	6074      	str	r4, [r6, #4]
 8002ec6:	f04f 0a01 	mov.w	sl, #1
  gpiop->OSPEEDR = config->ospeedr;
 8002eca:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8002ecc:	60f2      	str	r2, [r6, #12]
  gpiop->ODR     = config->odr;
 8002ece:	f8c6 b014 	str.w	fp, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8002ed2:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8002ed4:	6274      	str	r4, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002ed6:	6034      	str	r4, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8002ed8:	606c      	str	r4, [r5, #4]
 8002eda:	2660      	movs	r6, #96	; 0x60
  gpiop->OSPEEDR = config->ospeedr;
 8002edc:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002ede:	f8c5 e00c 	str.w	lr, [r5, #12]
  gpiop->ODR     = config->odr;
 8002ee2:	f8c5 b014 	str.w	fp, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8002ee6:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8002ee8:	626c      	str	r4, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002eea:	602c      	str	r4, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8002eec:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002eee:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8002ef0:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->ODR     = config->odr;
 8002ef4:	f8c0 b014 	str.w	fp, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8002ef8:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8002efa:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002efc:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8002efe:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002f00:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8002f02:	f8c1 c00c 	str.w	ip, [r1, #12]
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8002f06:	f8df c288 	ldr.w	ip, [pc, #648]	; 8003190 <main+0x410>
  gpiop->ODR     = config->odr;
 8002f0a:	f8c1 b014 	str.w	fp, [r1, #20]
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8002f0e:	f8df e284 	ldr.w	lr, [pc, #644]	; 8003194 <main+0x414>
  gpiop->AFRL    = config->afrl;
 8002f12:	620c      	str	r4, [r1, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f14:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  gpiop->AFRH    = config->afrh;
 8002f18:	624c      	str	r4, [r1, #36]	; 0x24
  ADCD1.adc = ADC1;
 8002f1a:	f5a0 4070 	sub.w	r0, r0, #61440	; 0xf000
  gpiop->MODER   = config->moder;
 8002f1e:	600c      	str	r4, [r1, #0]
 8002f20:	f887 a000 	strb.w	sl, [r7]
  tqp->p_next = (thread_t *)tqp;
 8002f24:	f107 0118 	add.w	r1, r7, #24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f28:	f888 6312 	strb.w	r6, [r8, #786]	; 0x312
  pwmp->state    = PWM_STOP;
 8002f2c:	4e7f      	ldr	r6, [pc, #508]	; (800312c <main+0x3ac>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f2e:	f8c8 5180 	str.w	r5, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002f32:	f8c8 5000 	str.w	r5, [r8]
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8002f36:	e9c7 0c0a 	strd	r0, ip, [r7, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8002f3a:	f8c7 e030 	str.w	lr, [r7, #48]	; 0x30
  adcp->samples  = NULL;
 8002f3e:	e9c7 4401 	strd	r4, r4, [r7, #4]
  adcp->grpp     = NULL;
 8002f42:	e9c7 4403 	strd	r4, r4, [r7, #12]
  adcp->thread   = NULL;
 8002f46:	617c      	str	r4, [r7, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8002f48:	623c      	str	r4, [r7, #32]
  tqp->p_prev = (thread_t *)tqp;
 8002f4a:	e9c7 1106 	strd	r1, r1, [r7, #24]
  icu_lld_init();
 8002f4e:	f7fe f8ff 	bl	8001150 <icu_lld_init>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002f52:	2004      	movs	r0, #4
  PWMD1.tim = STM32_TIM1;
 8002f54:	4976      	ldr	r1, [pc, #472]	; (8003130 <main+0x3b0>)
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002f56:	7430      	strb	r0, [r6, #16]
  PWMD1.tim = STM32_TIM1;
 8002f58:	61b1      	str	r1, [r6, #24]
 8002f5a:	f886 a000 	strb.w	sl, [r6]
  pwmp->config   = NULL;
 8002f5e:	6074      	str	r4, [r6, #4]
  pwmp->enabled  = 0;
 8002f60:	60f4      	str	r4, [r6, #12]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8002f62:	f7fd ff35 	bl	8000dd0 <sdObjectInit.constprop.27>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002f66:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002f6a:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8003198 <main+0x418>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002f6e:	4871      	ldr	r0, [pc, #452]	; (8003134 <main+0x3b4>)
  SCB->VTOR = CORTEX_VTOR_INIT;
 8002f70:	4971      	ldr	r1, [pc, #452]	; (8003138 <main+0x3b8>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002f72:	f8df e228 	ldr.w	lr, [pc, #552]	; 800319c <main+0x41c>
  ST_ENABLE_CLOCK();
 8002f76:	f045 0504 	orr.w	r5, r5, #4
 8002f7a:	f8c9 5040 	str.w	r5, [r9, #64]	; 0x40
  ST_ENABLE_STOP();
 8002f7e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8002f82:	f045 0504 	orr.w	r5, r5, #4
 8002f86:	f8cc 5008 	str.w	r5, [ip, #8]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f8a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f8e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002f92:	f242 5c7f 	movw	ip, #9599	; 0x257f
 8002f96:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002f9a:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8002f9e:	6184      	str	r4, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002fa0:	6344      	str	r4, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8002fa2:	60c4      	str	r4, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8002fa4:	6044      	str	r4, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002fa6:	f8c0 a014 	str.w	sl, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002faa:	f8c0 a000 	str.w	sl, [r0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002fae:	f888 331e 	strb.w	r3, [r8, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fb2:	f8c8 5180 	str.w	r5, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002fb6:	f8c8 5000 	str.w	r5, [r8]
 8002fba:	608c      	str	r4, [r1, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	68c8      	ldr	r0, [r1, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002fbe:	4b5f      	ldr	r3, [pc, #380]	; (800313c <main+0x3bc>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002fc0:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80031a0 <main+0x420>
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	9a03      	ldr	r2, [sp, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8002fc6:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 8002fca:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 8002fcc:	ea40 0e0e 	orr.w	lr, r0, lr
  SCB->AIRCR =  reg_value;
 8002fd0:	f8c1 e00c 	str.w	lr, [r1, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002fd4:	68d8      	ldr	r0, [r3, #12]
  tqp->p_next = (thread_t *)tqp;
 8002fd6:	4d5a      	ldr	r5, [pc, #360]	; (8003140 <main+0x3c0>)
 8002fd8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  tqp->p_prev = (thread_t *)tqp;
 8002fdc:	606d      	str	r5, [r5, #4]
 8002fde:	60d8      	str	r0, [r3, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002fe0:	f8dc 0000 	ldr.w	r0, [ip]
  ch.rlist.r_prio = NOPRIO;
 8002fe4:	60ac      	str	r4, [r5, #8]
 8002fe6:	ea40 000a 	orr.w	r0, r0, sl
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	f04f 0320 	mov.w	r3, #32
 8002fee:	f8cc 0000 	str.w	r0, [ip]
 8002ff2:	77ca      	strb	r2, [r1, #31]
 8002ff4:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8002ff8:	f105 021c 	add.w	r2, r5, #28
  SD1.usart = USART1;
 8002ffc:	4b51      	ldr	r3, [pc, #324]	; (8003144 <main+0x3c4>)
  tqp->p_next = (thread_t *)tqp;
 8002ffe:	602d      	str	r5, [r5, #0]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003000:	e9c5 2207 	strd	r2, r2, [r5, #28]
 8003004:	4a50      	ldr	r2, [pc, #320]	; (8003148 <main+0x3c8>)
  tmp->cumulative = (rttime_t)0;
 8003006:	2100      	movs	r1, #0
  chTMStartMeasurementX(&tm);
 8003008:	a804      	add	r0, sp, #16
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800300a:	e9c5 5504 	strd	r5, r5, [r5, #16]
 800300e:	675a      	str	r2, [r3, #116]	; 0x74
  tmp->cumulative = (rttime_t)0;
 8003010:	2200      	movs	r2, #0
  tmp->best       = (rtcnt_t)-1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  ch.vtlist.vt_delta = (systime_t)-1;
 8003016:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
  tmp->cumulative = (rttime_t)0;
 800301a:	e9cd 1208 	strd	r1, r2, [sp, #32]
  tmp->worst      = (rtcnt_t)0;
 800301e:	e9cd 3404 	strd	r3, r4, [sp, #16]
  ch.tm.offset = (rtcnt_t)0;
 8003022:	672c      	str	r4, [r5, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 8003024:	e9cd 4406 	strd	r4, r4, [sp, #24]
  chTMStartMeasurementX(&tm);
 8003028:	f7fd fec2 	bl	8000db0 <chTMStartMeasurementX.constprop.35>
  chTMStopMeasurementX(&tm);
 800302c:	a804      	add	r0, sp, #16
 800302e:	f7fe fba7 	bl	8001780 <chTMStopMeasurementX>
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8003032:	4946      	ldr	r1, [pc, #280]	; (800314c <main+0x3cc>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8003034:	4b46      	ldr	r3, [pc, #280]	; (8003150 <main+0x3d0>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8003036:	4a47      	ldr	r2, [pc, #284]	; (8003154 <main+0x3d4>)
  REG_INSERT(tp);
 8003038:	f8d5 b014 	ldr.w	fp, [r5, #20]
 800303c:	619c      	str	r4, [r3, #24]
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800303e:	f021 0c07 	bic.w	ip, r1, #7
  ch.tm.offset = tm.last;
 8003042:	9906      	ldr	r1, [sp, #24]
 8003044:	6729      	str	r1, [r5, #112]	; 0x70
 8003046:	f103 0010 	add.w	r0, r3, #16
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800304a:	f022 0e07 	bic.w	lr, r2, #7
  tp->p_prio = prio;
 800304e:	2140      	movs	r1, #64	; 0x40
  REG_INSERT(tp);
 8003050:	f105 022c 	add.w	r2, r5, #44	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8003054:	e9c3 0004 	strd	r0, r0, [r3, #16]
  tp->p_prio = prio;
 8003058:	6369      	str	r1, [r5, #52]	; 0x34
  tp->p_realprio = prio;
 800305a:	66a9      	str	r1, [r5, #104]	; 0x68
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800305c:	f885 4049 	strb.w	r4, [r5, #73]	; 0x49
  tp->p_epending = (eventmask_t)0;
 8003060:	e9c5 4418 	strd	r4, r4, [r5, #96]	; 0x60
  tp->p_refs = (trefs_t)1;
 8003064:	f885 a04a 	strb.w	sl, [r5, #74]	; 0x4a
  tp->p_name = NULL;
 8003068:	646c      	str	r4, [r5, #68]	; 0x44
  REG_INSERT(tp);
 800306a:	63ed      	str	r5, [r5, #60]	; 0x3c
 800306c:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
 8003070:	f8cb 2010 	str.w	r2, [fp, #16]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8003074:	e9c5 2205 	strd	r2, r2, [r5, #20]
  tlp->p_next = (thread_t *)tlp;
 8003078:	f105 0250 	add.w	r2, r5, #80	; 0x50
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800307c:	4936      	ldr	r1, [pc, #216]	; (8003158 <main+0x3d8>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800307e:	4837      	ldr	r0, [pc, #220]	; (800315c <main+0x3dc>)
 8003080:	652a      	str	r2, [r5, #80]	; 0x50
 8003082:	4a37      	ldr	r2, [pc, #220]	; (8003160 <main+0x3e0>)
 8003084:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
 8003086:	e9c3 4402 	strd	r4, r4, [r3, #8]
  tqp->p_next = (thread_t *)tqp;
 800308a:	f105 0354 	add.w	r3, r5, #84	; 0x54
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800308e:	f885 a048 	strb.w	sl, [r5, #72]	; 0x48
  tqp->p_prev = (thread_t *)tqp;
 8003092:	e9c5 3315 	strd	r3, r3, [r5, #84]	; 0x54
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8003096:	f8c1 c000 	str.w	ip, [r1]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800309a:	f8c0 e000 	str.w	lr, [r0]
 800309e:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 80030a2:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80030a4:	69ab      	ldr	r3, [r5, #24]
 80030a6:	4a2f      	ldr	r2, [pc, #188]	; (8003164 <main+0x3e4>)
 80030a8:	619a      	str	r2, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 80030aa:	21d8      	movs	r1, #216	; 0xd8
 80030ac:	4652      	mov	r2, sl
 80030ae:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80030b2:	9400      	str	r4, [sp, #0]
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <main+0x3e8>)
 80030b6:	f7fe ff63 	bl	8001f80 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80030ba:	4b2c      	ldr	r3, [pc, #176]	; (800316c <main+0x3ec>)
 80030bc:	6183      	str	r3, [r0, #24]
  sdObjectInit(&SD1, NULL, notify1);
 80030be:	f7fd fe87 	bl	8000dd0 <sdObjectInit.constprop.27>
  SD1.usart = USART1;
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <main+0x3c4>)
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <main+0x3c8>)
 80030c6:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80030c8:	2220      	movs	r2, #32
 80030ca:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80030ce:	7a1b      	ldrb	r3, [r3, #8]
 80030d0:	4553      	cmp	r3, sl
 80030d2:	d10d      	bne.n	80030f0 <main+0x370>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 80030d4:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80030d8:	f043 0310 	orr.w	r3, r3, #16
 80030dc:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80030e0:	22c0      	movs	r2, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80030e2:	2320      	movs	r3, #32
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80030e4:	f888 2325 	strb.w	r2, [r8, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80030e8:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80030ec:	f8c8 3004 	str.w	r3, [r8, #4]
  USART_TypeDef *u = sdp->usart;
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <main+0x3c4>)
 80030f2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <main+0x3c8>)
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d054      	beq.n	80031a4 <main+0x424>
 80030fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030fe:	429a      	cmp	r2, r3
 8003100:	d050      	beq.n	80031a4 <main+0x424>
    u->BRR = STM32_PCLK1 / config->speed;
 8003102:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8003106:	6093      	str	r3, [r2, #8]
 8003108:	e04f      	b.n	80031aa <main+0x42a>
 800310a:	bf00      	nop
 800310c:	20000ac0 	.word	0x20000ac0
 8003110:	64155105 	.word	0x64155105
 8003114:	40020800 	.word	0x40020800
 8003118:	40020c00 	.word	0x40020c00
 800311c:	40021000 	.word	0x40021000
 8003120:	40021c00 	.word	0x40021c00
 8003124:	20000838 	.word	0x20000838
 8003128:	51555555 	.word	0x51555555
 800312c:	200008b8 	.word	0x200008b8
 8003130:	40010000 	.word	0x40010000
 8003134:	40000800 	.word	0x40000800
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	e000edf0 	.word	0xe000edf0
 8003140:	20000950 	.word	0x20000950
 8003144:	200008d4 	.word	0x200008d4
 8003148:	40011000 	.word	0x40011000
 800314c:	2000110f 	.word	0x2000110f
 8003150:	20000aa0 	.word	0x20000aa0
 8003154:	20020000 	.word	0x20020000
 8003158:	20000ba0 	.word	0x20000ba0
 800315c:	20000b44 	.word	0x20000b44
 8003160:	08000f01 	.word	0x08000f01
 8003164:	08004cf0 	.word	0x08004cf0
 8003168:	08000ef1 	.word	0x08000ef1
 800316c:	08004df0 	.word	0x08004df0
 8003170:	40026000 	.word	0x40026000
 8003174:	40026400 	.word	0x40026400
 8003178:	40023800 	.word	0x40023800
 800317c:	40020000 	.word	0x40020000
 8003180:	40020400 	.word	0x40020400
 8003184:	2a8004a0 	.word	0x2a8004a0
 8003188:	e000e100 	.word	0xe000e100
 800318c:	55555550 	.word	0x55555550
 8003190:	08004cc0 	.word	0x08004cc0
 8003194:	00022c16 	.word	0x00022c16
 8003198:	e0042000 	.word	0xe0042000
 800319c:	05fa0300 	.word	0x05fa0300
 80031a0:	e0001000 	.word	0xe0001000
    u->BRR = STM32_PCLK2 / config->speed;
 80031a4:	f240 3341 	movw	r3, #833	; 0x341
 80031a8:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80031aa:	2340      	movs	r3, #64	; 0x40
 80031ac:	6113      	str	r3, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80031ae:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80031b0:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 80031b4:	2300      	movs	r3, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80031b6:	6151      	str	r1, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80031b8:	60d0      	str	r0, [r2, #12]
  u->SR = 0;
 80031ba:	6013      	str	r3, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80031bc:	6814      	ldr	r4, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80031be:	6852      	ldr	r2, [r2, #4]
  sdp->state = SD_READY;
 80031c0:	4ab4      	ldr	r2, [pc, #720]	; (8003494 <main+0x714>)
 80031c2:	2002      	movs	r0, #2
 80031c4:	7210      	strb	r0, [r2, #8]
 80031c6:	f383 8811 	msr	BASEPRI, r3
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80031ca:	2004      	movs	r0, #4
  PWMD1.tim = STM32_TIM1;
 80031cc:	4ab2      	ldr	r2, [pc, #712]	; (8003498 <main+0x718>)
 80031ce:	61b2      	str	r2, [r6, #24]
  pwmp->state    = PWM_STOP;
 80031d0:	7031      	strb	r1, [r6, #0]
  pwmp->config   = NULL;
 80031d2:	6073      	str	r3, [r6, #4]
  pwmp->enabled  = 0;
 80031d4:	60f3      	str	r3, [r6, #12]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80031d6:	7430      	strb	r0, [r6, #16]
 80031d8:	2220      	movs	r2, #32
 80031da:	f382 8811 	msr	BASEPRI, r2
  pwmp->config = config;
 80031de:	49af      	ldr	r1, [pc, #700]	; (800349c <main+0x71c>)
  if (pwmp->state == PWM_STOP) {
 80031e0:	7832      	ldrb	r2, [r6, #0]
  pwmp->period = config->period;
 80031e2:	684c      	ldr	r4, [r1, #4]
 80031e4:	2a01      	cmp	r2, #1
 80031e6:	e9c6 1401 	strd	r1, r4, [r6, #4]
 80031ea:	f000 81d3 	beq.w	8003594 <main+0x814>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80031ee:	69b2      	ldr	r2, [r6, #24]
 80031f0:	6013      	str	r3, [r2, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80031f2:	6353      	str	r3, [r2, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80031f4:	6393      	str	r3, [r2, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 80031f6:	63d3      	str	r3, [r2, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80031fa:	6253      	str	r3, [r2, #36]	; 0x24
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80031fc:	68cb      	ldr	r3, [r1, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80031fe:	6972      	ldr	r2, [r6, #20]
 8003200:	6808      	ldr	r0, [r1, #0]
 8003202:	fbb2 f0f0 	udiv	r0, r2, r0
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8003206:	f003 030f 	and.w	r3, r3, #15
  pwmp->tim->PSC  = psc;
 800320a:	69b2      	ldr	r2, [r6, #24]
  pwmp->tim->CR2  = pwmp->config->cr2;
 800320c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pwmp->tim->ARR  = pwmp->period - 1;
 800320e:	3c01      	subs	r4, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8003210:	3801      	subs	r0, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8003212:	2b01      	cmp	r3, #1
  pwmp->tim->PSC  = psc;
 8003214:	6290      	str	r0, [r2, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8003216:	62d4      	str	r4, [r2, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8003218:	6055      	str	r5, [r2, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800321a:	f000 8127 	beq.w	800346c <main+0x6ec>
 800321e:	2b02      	cmp	r3, #2
 8003220:	f000 8125 	beq.w	800346e <main+0x6ee>
  ccer = 0;
 8003224:	2300      	movs	r3, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8003226:	6948      	ldr	r0, [r1, #20]
 8003228:	f000 000f 	and.w	r0, r0, #15
 800322c:	2801      	cmp	r0, #1
 800322e:	f000 8123 	beq.w	8003478 <main+0x6f8>
 8003232:	2802      	cmp	r0, #2
 8003234:	f000 811e 	beq.w	8003474 <main+0x6f4>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8003238:	69c8      	ldr	r0, [r1, #28]
 800323a:	f000 000f 	and.w	r0, r0, #15
 800323e:	2801      	cmp	r0, #1
 8003240:	f000 811f 	beq.w	8003482 <main+0x702>
 8003244:	2802      	cmp	r0, #2
 8003246:	f000 811a 	beq.w	800347e <main+0x6fe>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 800324a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800324c:	f000 000f 	and.w	r0, r0, #15
 8003250:	2801      	cmp	r0, #1
 8003252:	f000 811b 	beq.w	800348c <main+0x70c>
 8003256:	2802      	cmp	r0, #2
 8003258:	f000 8116 	beq.w	8003488 <main+0x708>
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800325c:	6b09      	ldr	r1, [r1, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 800325e:	6213      	str	r3, [r2, #32]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8003260:	2400      	movs	r4, #0
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8003262:	f021 03ff 	bic.w	r3, r1, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8003266:	2501      	movs	r5, #1
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8003268:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 800326c:	2185      	movs	r1, #133	; 0x85
  pwmp->state = PWM_READY;
 800326e:	f04f 0802 	mov.w	r8, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8003272:	6155      	str	r5, [r2, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8003274:	6114      	str	r4, [r2, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8003276:	60d3      	str	r3, [r2, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8003278:	6450      	str	r0, [r2, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 800327a:	6011      	str	r1, [r2, #0]
  pwmp->enabled = 0;
 800327c:	60f4      	str	r4, [r6, #12]
  pwmp->state = PWM_READY;
 800327e:	f886 8000 	strb.w	r8, [r6]
 8003282:	f384 8811 	msr	BASEPRI, r4
 8003286:	f7fd ff63 	bl	8001150 <icu_lld_init>
 800328a:	2520      	movs	r5, #32
 800328c:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 8003290:	f8df a228 	ldr.w	sl, [pc, #552]	; 80034bc <main+0x73c>
 8003294:	4b82      	ldr	r3, [pc, #520]	; (80034a0 <main+0x720>)
 8003296:	f8ca 3004 	str.w	r3, [sl, #4]
  icu_lld_start(icup);
 800329a:	4650      	mov	r0, sl
 800329c:	f7fd feb8 	bl	8001010 <icu_lld_start>
  icup->state = ICU_READY;
 80032a0:	f88a 8000 	strb.w	r8, [sl]
 80032a4:	f384 8811 	msr	BASEPRI, r4
 80032a8:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 80032ac:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80034c0 <main+0x740>
 80032b0:	4b7c      	ldr	r3, [pc, #496]	; (80034a4 <main+0x724>)
 80032b2:	f8c9 3004 	str.w	r3, [r9, #4]
  icu_lld_start(icup);
 80032b6:	4648      	mov	r0, r9
 80032b8:	f7fd feaa 	bl	8001010 <icu_lld_start>
  icup->state = ICU_READY;
 80032bc:	f889 8000 	strb.w	r8, [r9]
 80032c0:	f384 8811 	msr	BASEPRI, r4
 80032c4:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 80032c8:	4e77      	ldr	r6, [pc, #476]	; (80034a8 <main+0x728>)
 80032ca:	4b78      	ldr	r3, [pc, #480]	; (80034ac <main+0x72c>)
 80032cc:	6073      	str	r3, [r6, #4]
  icu_lld_start(icup);
 80032ce:	4630      	mov	r0, r6
 80032d0:	f7fd fe9e 	bl	8001010 <icu_lld_start>
  icup->state = ICU_READY;
 80032d4:	f886 8000 	strb.w	r8, [r6]
 80032d8:	f384 8811 	msr	BASEPRI, r4
    
    icuStart(&ICUD2, &icucfgA);
    icuStart(&ICUD5, &icucfgB);
    icuStart(&ICUD3, &icucfgC);
    
    icuStartCapture(&ICUD2);
 80032dc:	4650      	mov	r0, sl
 80032de:	f7fd ffaf 	bl	8001240 <icuStartCapture>
    icuStartCapture(&ICUD5);
 80032e2:	4648      	mov	r0, r9
 80032e4:	f7fd ffac 	bl	8001240 <icuStartCapture>
    icuStartCapture(&ICUD3);
 80032e8:	4630      	mov	r0, r6
 80032ea:	f7fd ffa9 	bl	8001240 <icuStartCapture>

    //ADC
    palSetGroupMode(GPIOA, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 80032ee:	2203      	movs	r2, #3
 80032f0:	2106      	movs	r1, #6
 80032f2:	486f      	ldr	r0, [pc, #444]	; (80034b0 <main+0x730>)
 80032f4:	f7fd ff4c 	bl	8001190 <_pal_lld_setgroupmode>
                    0, PAL_MODE_INPUT_ANALOG);
    palSetGroupMode(GPIOB, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 80032f8:	2203      	movs	r2, #3
 80032fa:	2106      	movs	r1, #6
 80032fc:	486d      	ldr	r0, [pc, #436]	; (80034b4 <main+0x734>)
 80032fe:	f7fd ff47 	bl	8001190 <_pal_lld_setgroupmode>
 8003302:	f385 8811 	msr	BASEPRI, r5
  if (adcp->state == ADC_STOP) {
 8003306:	783b      	ldrb	r3, [r7, #0]
  adcp->config = config;
 8003308:	607c      	str	r4, [r7, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	f000 80ea 	beq.w	80034e4 <main+0x764>
  adcp->state = ADC_READY;
 8003310:	f04f 0802 	mov.w	r8, #2
 8003314:	f887 8000 	strb.w	r8, [r7]
 8003318:	2400      	movs	r4, #0
 800331a:	f384 8811 	msr	BASEPRI, r4
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 800331e:	4a66      	ldr	r2, [pc, #408]	; (80034b8 <main+0x738>)
 8003320:	6853      	ldr	r3, [r2, #4]
 8003322:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003326:	6053      	str	r3, [r2, #4]
 8003328:	2620      	movs	r6, #32
 800332a:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 800332e:	4863      	ldr	r0, [pc, #396]	; (80034bc <main+0x73c>)
 8003330:	f7fd fe4e 	bl	8000fd0 <icu_lld_enable_notifications>
 8003334:	f384 8811 	msr	BASEPRI, r4
 8003338:	f386 8811 	msr	BASEPRI, r6
 800333c:	4860      	ldr	r0, [pc, #384]	; (80034c0 <main+0x740>)
 800333e:	f7fd fe47 	bl	8000fd0 <icu_lld_enable_notifications>
 8003342:	f384 8811 	msr	BASEPRI, r4
 8003346:	f386 8811 	msr	BASEPRI, r6
 800334a:	4857      	ldr	r0, [pc, #348]	; (80034a8 <main+0x728>)
 800334c:	f7fd fe40 	bl	8000fd0 <icu_lld_enable_notifications>
 8003350:	f384 8811 	msr	BASEPRI, r4
    palSetPadMode(GPIOA,15,PAL_MODE_ALTERNATE(7));
 8003354:	4d56      	ldr	r5, [pc, #344]	; (80034b0 <main+0x730>)
  vtp->vt_func = NULL;
 8003356:	4f5b      	ldr	r7, [pc, #364]	; (80034c4 <main+0x744>)
 8003358:	f240 3282 	movw	r2, #898	; 0x382
 800335c:	4628      	mov	r0, r5
 800335e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003362:	f7fd ff15 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,3,PAL_MODE_ALTERNATE(7));
 8003366:	f240 3282 	movw	r2, #898	; 0x382
 800336a:	2108      	movs	r1, #8
 800336c:	4851      	ldr	r0, [pc, #324]	; (80034b4 <main+0x734>)
 800336e:	f7fd ff0f 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,10,PAL_MODE_OUTPUT_PUSHPULL);
 8003372:	2201      	movs	r2, #1
 8003374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003378:	4853      	ldr	r0, [pc, #332]	; (80034c8 <main+0x748>)
 800337a:	f7fd ff09 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,12,PAL_MODE_OUTPUT_PUSHPULL);
 800337e:	2201      	movs	r2, #1
 8003380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003384:	4850      	ldr	r0, [pc, #320]	; (80034c8 <main+0x748>)
 8003386:	f7fd ff03 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,8,PAL_MODE_ALTERNATE(1));
 800338a:	4628      	mov	r0, r5
 800338c:	2282      	movs	r2, #130	; 0x82
 800338e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003392:	f7fd fefd 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,8,PAL_MODE_OUTPUT_PUSHPULL);
 8003396:	2201      	movs	r2, #1
 8003398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800339c:	484a      	ldr	r0, [pc, #296]	; (80034c8 <main+0x748>)
 800339e:	f7fd fef7 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,9,PAL_MODE_OUTPUT_PUSHPULL);
 80033a2:	2201      	movs	r2, #1
 80033a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033a8:	4847      	ldr	r0, [pc, #284]	; (80034c8 <main+0x748>)
 80033aa:	f7fd fef1 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,9,PAL_MODE_ALTERNATE(1));
 80033ae:	4628      	mov	r0, r5
 80033b0:	2282      	movs	r2, #130	; 0x82
 80033b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b6:	f7fd feeb 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,5,PAL_MODE_OUTPUT_PUSHPULL);
 80033ba:	4631      	mov	r1, r6
 80033bc:	2201      	movs	r2, #1
 80033be:	4842      	ldr	r0, [pc, #264]	; (80034c8 <main+0x748>)
 80033c0:	f7fd fee6 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,6,PAL_MODE_OUTPUT_PUSHPULL);
 80033c4:	2201      	movs	r2, #1
 80033c6:	2140      	movs	r1, #64	; 0x40
 80033c8:	483f      	ldr	r0, [pc, #252]	; (80034c8 <main+0x748>)
 80033ca:	f7fd fee1 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,10,PAL_MODE_ALTERNATE(1));
 80033ce:	4628      	mov	r0, r5
 80033d0:	2282      	movs	r2, #130	; 0x82
 80033d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033d6:	f7fd fedb 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,0,PAL_MODE_ALTERNATE(1));
 80033da:	2282      	movs	r2, #130	; 0x82
 80033dc:	2101      	movs	r1, #1
 80033de:	f7fd fed7 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,1,PAL_MODE_ALTERNATE(2));
 80033e2:	4641      	mov	r1, r8
 80033e4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80033e8:	f7fd fed2 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,4,PAL_MODE_ALTERNATE(2));
 80033ec:	f44f 7281 	mov.w	r2, #258	; 0x102
 80033f0:	2110      	movs	r1, #16
 80033f2:	4830      	ldr	r0, [pc, #192]	; (80034b4 <main+0x734>)
 80033f4:	f7fd fecc 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,6,PAL_MODE_INPUT_ANALOG);
 80033f8:	4628      	mov	r0, r5
 80033fa:	2203      	movs	r2, #3
 80033fc:	2140      	movs	r1, #64	; 0x40
 80033fe:	f7fd fec7 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,7,PAL_MODE_INPUT_ANALOG);
 8003402:	2203      	movs	r2, #3
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	f7fd fec3 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,5,PAL_MODE_OUTPUT_PUSHPULL);
 800340a:	4631      	mov	r1, r6
 800340c:	2201      	movs	r2, #1
 800340e:	f7fd febf 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,6,PAL_MODE_OUTPUT_PUSHPULL);
 8003412:	2201      	movs	r2, #1
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	4827      	ldr	r0, [pc, #156]	; (80034b4 <main+0x734>)
 8003418:	f7fd feba 	bl	8001190 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,7,PAL_MODE_OUTPUT_PUSHPULL);
 800341c:	2201      	movs	r2, #1
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	4829      	ldr	r0, [pc, #164]	; (80034c8 <main+0x748>)
 8003422:	f7fd feb5 	bl	8001190 <_pal_lld_setgroupmode>

    for (int8_t i = 0; i < NUM_OF_SENSORS; i++) {
		sensors[i] = 0;
    }

    sensor_thread = chThdCreateStatic(waSensorThread, sizeof(waSensorThread), NORMALPRIO, SensorThread, NULL);
 8003426:	9400      	str	r4, [sp, #0]
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <main+0x74c>)
 800342a:	60fc      	str	r4, [r7, #12]
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8003432:	623c      	str	r4, [r7, #32]
 8003434:	637c      	str	r4, [r7, #52]	; 0x34
 8003436:	4826      	ldr	r0, [pc, #152]	; (80034d0 <main+0x750>)
 8003438:	f7fe fda2 	bl	8001f80 <chThdCreateStatic>
}

void init_moving_thread() {
    line = false;
 800343c:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <main+0x754>)
    
    moving_thread = chThdCreateStatic(waMoveThread, sizeof(waMoveThread), NORMALPRIO, MoveThread, NULL);
 800343e:	9400      	str	r4, [sp, #0]
 8003440:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <main+0x758>)
    line = false;
 8003442:	7014      	strb	r4, [r2, #0]
    moving_thread = chThdCreateStatic(waMoveThread, sizeof(waMoveThread), NORMALPRIO, MoveThread, NULL);
 8003444:	4825      	ldr	r0, [pc, #148]	; (80034dc <main+0x75c>)
 8003446:	2240      	movs	r2, #64	; 0x40
 8003448:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800344c:	f7fe fd98 	bl	8001f80 <chThdCreateStatic>
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <main+0x760>)
 8003452:	4634      	mov	r4, r6
 8003454:	6018      	str	r0, [r3, #0]
    init_pins();
    timer_init();
    init_sensor_thread();
    init_moving_thread();
    
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 8003456:	836e      	strh	r6, [r5, #26]
 8003458:	f384 8811 	msr	BASEPRI, r4
 800345c:	2132      	movs	r1, #50	; 0x32
 800345e:	2008      	movs	r0, #8
 8003460:	f7fe fe06 	bl	8002070 <chSchGoSleepTimeoutS>
 8003464:	2300      	movs	r3, #0
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	e7f5      	b.n	8003458 <main+0x6d8>
  ccer = 0;
 800346c:	2300      	movs	r3, #0
    ccer |= STM32_TIM_CCER_CC1E;
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	e6d8      	b.n	8003226 <main+0x4a6>
    ccer |= STM32_TIM_CCER_CC2P;
 8003474:	f043 0320 	orr.w	r3, r3, #32
    ccer |= STM32_TIM_CCER_CC2E;
 8003478:	f043 0310 	orr.w	r3, r3, #16
 800347c:	e6dc      	b.n	8003238 <main+0x4b8>
    ccer |= STM32_TIM_CCER_CC3P;
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8003482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003486:	e6e0      	b.n	800324a <main+0x4ca>
    ccer |= STM32_TIM_CCER_CC4P;
 8003488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 800348c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003490:	e6e4      	b.n	800325c <main+0x4dc>
 8003492:	bf00      	nop
 8003494:	200008d4 	.word	0x200008d4
 8003498:	40010000 	.word	0x40010000
 800349c:	20000804 	.word	0x20000804
 80034a0:	08004d30 	.word	0x08004d30
 80034a4:	08004d50 	.word	0x08004d50
 80034a8:	20000884 	.word	0x20000884
 80034ac:	08004d70 	.word	0x08004d70
 80034b0:	40020000 	.word	0x40020000
 80034b4:	40020400 	.word	0x40020400
 80034b8:	40012300 	.word	0x40012300
 80034bc:	2000086c 	.word	0x2000086c
 80034c0:	2000089c 	.word	0x2000089c
 80034c4:	20000b4c 	.word	0x20000b4c
 80034c8:	40020800 	.word	0x40020800
 80034cc:	080020c1 	.word	0x080020c1
 80034d0:	20000e40 	.word	0x20000e40
 80034d4:	20000b48 	.word	0x20000b48
 80034d8:	08002a11 	.word	0x08002a11
 80034dc:	20000cf8 	.word	0x20000cf8
 80034e0:	20000b9c 	.word	0x20000b9c
      b = dmaStreamAllocate(adcp->dmastp,
 80034e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 80034e6:	4d41      	ldr	r5, [pc, #260]	; (80035ec <main+0x86c>)
 80034e8:	7a51      	ldrb	r1, [r2, #9]
 80034ea:	6828      	ldr	r0, [r5, #0]
 80034ec:	408b      	lsls	r3, r1
 80034ee:	4203      	tst	r3, r0
 80034f0:	d13a      	bne.n	8003568 <main+0x7e8>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80034f2:	4e3f      	ldr	r6, [pc, #252]	; (80035f0 <main+0x870>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 80034f4:	4303      	orrs	r3, r0
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80034f6:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80034fa:	483e      	ldr	r0, [pc, #248]	; (80035f4 <main+0x874>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 80034fc:	602b      	str	r3, [r5, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80034fe:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8003502:	6067      	str	r7, [r4, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8003504:	f846 0031 	str.w	r0, [r6, r1, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8003508:	d004      	beq.n	8003514 <main+0x794>
    rccEnableDMA1(false);
 800350a:	483b      	ldr	r0, [pc, #236]	; (80035f8 <main+0x878>)
 800350c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800350e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8003512:	6301      	str	r1, [r0, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8003514:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8003518:	d161      	bne.n	80035de <main+0x85e>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800351a:	6813      	ldr	r3, [r2, #0]
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	f021 011f 	bic.w	r1, r1, #31
 8003522:	6019      	str	r1, [r3, #0]
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	f011 0101 	ands.w	r1, r1, #1
 800352a:	d1fb      	bne.n	8003524 <main+0x7a4>
 800352c:	7a14      	ldrb	r4, [r2, #8]
 800352e:	6855      	ldr	r5, [r2, #4]
 8003530:	203d      	movs	r0, #61	; 0x3d
 8003532:	40a0      	lsls	r0, r4
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8003534:	2421      	movs	r4, #33	; 0x21
  dmaStreamDisable(dmastp);
 8003536:	6028      	str	r0, [r5, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8003538:	6019      	str	r1, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800353a:	615c      	str	r4, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 800353c:	7a91      	ldrb	r1, [r2, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800353e:	094b      	lsrs	r3, r1, #5
 8003540:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003542:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
 8003546:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800354a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800354e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003552:	f001 011f 	and.w	r1, r1, #31
 8003556:	2001      	movs	r0, #1
 8003558:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800355c:	2560      	movs	r5, #96	; 0x60
 800355e:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003562:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003566:	6019      	str	r1, [r3, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8003568:	6813      	ldr	r3, [r2, #0]
      rccEnableADC1(FALSE);
 800356a:	4923      	ldr	r1, [pc, #140]	; (80035f8 <main+0x878>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 800356c:	4a23      	ldr	r2, [pc, #140]	; (80035fc <main+0x87c>)
 800356e:	609a      	str	r2, [r3, #8]
      rccEnableADC1(FALSE);
 8003570:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8003572:	4823      	ldr	r0, [pc, #140]	; (8003600 <main+0x880>)
    adcp->adc->CR1 = 0;
 8003574:	6aba      	ldr	r2, [r7, #40]	; 0x28
      rccEnableADC1(FALSE);
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	644b      	str	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800357c:	6843      	ldr	r3, [r0, #4]
 800357e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    adcp->adc->CR1 = 0;
 8003582:	2100      	movs	r1, #0
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 8003588:	2401      	movs	r4, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800358a:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
 800358c:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 800358e:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8003590:	6094      	str	r4, [r2, #8]
 8003592:	e6bd      	b.n	8003310 <main+0x590>
      rccEnableTIM1(FALSE);
 8003594:	4818      	ldr	r0, [pc, #96]	; (80035f8 <main+0x878>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003596:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <main+0x884>)
 8003598:	6c45      	ldr	r5, [r0, #68]	; 0x44
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800359a:	f8d6 c018 	ldr.w	ip, [r6, #24]
      rccEnableTIM1(FALSE);
 800359e:	f045 0501 	orr.w	r5, r5, #1
 80035a2:	6445      	str	r5, [r0, #68]	; 0x44
      rccResetTIM1();
 80035a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80035a6:	f045 0501 	orr.w	r5, r5, #1
 80035aa:	6245      	str	r5, [r0, #36]	; 0x24
 80035ac:	6243      	str	r3, [r0, #36]	; 0x24
 80035ae:	2370      	movs	r3, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035b0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80035b4:	f882 3319 	strb.w	r3, [r2, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035b8:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80035bc:	6010      	str	r0, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80035c2:	f882 331b 	strb.w	r3, [r2, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035c6:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80035ca:	f646 0368 	movw	r3, #26728	; 0x6868
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80035ce:	6010      	str	r0, [r2, #0]
      pwmp->clock = STM32_TIMCLK2;
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <main+0x888>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80035d2:	f8cc 3018 	str.w	r3, [ip, #24]
      pwmp->clock = STM32_TIMCLK2;
 80035d6:	6172      	str	r2, [r6, #20]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 80035d8:	f8cc 301c 	str.w	r3, [ip, #28]
 80035dc:	e60e      	b.n	80031fc <main+0x47c>
    rccEnableDMA2(false);
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <main+0x878>)
 80035e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80035e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035e6:	630b      	str	r3, [r1, #48]	; 0x30
 80035e8:	e797      	b.n	800351a <main+0x79a>
 80035ea:	bf00      	nop
 80035ec:	20000b40 	.word	0x20000b40
 80035f0:	20000ac0 	.word	0x20000ac0
 80035f4:	08001b21 	.word	0x08001b21
 80035f8:	40023800 	.word	0x40023800
 80035fc:	4001204c 	.word	0x4001204c
 8003600:	40012300 	.word	0x40012300
 8003604:	e000e100 	.word	0xe000e100
 8003608:	05b8d800 	.word	0x05b8d800
 800360c:	00000000 	.word	0x00000000

08003610 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <__early_init+0xa0>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003612:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <__early_init+0xa4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003614:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8003618:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800361c:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800361e:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	0790      	lsls	r0, r2, #30
 800362c:	d5fc      	bpl.n	8003628 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800362e:	6899      	ldr	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003630:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <__early_init+0xa0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003632:	f021 0103 	bic.w	r1, r1, #3
 8003636:	6099      	str	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8003638:	6899      	ldr	r1, [r3, #8]
 800363a:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800363c:	6891      	ldr	r1, [r2, #8]
 800363e:	f011 010c 	ands.w	r1, r1, #12
 8003642:	d1fb      	bne.n	800363c <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003644:	6810      	ldr	r0, [r2, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003646:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <__early_init+0xa0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003648:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800364c:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800364e:	6091      	str	r1, [r2, #8]
  RCC->CSR |= RCC_CSR_LSION;
 8003650:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8003652:	f041 0101 	orr.w	r1, r1, #1
 8003656:	6751      	str	r1, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003658:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800365a:	0791      	lsls	r1, r2, #30
 800365c:	d5fc      	bpl.n	8003658 <__early_init+0x48>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <__early_init+0xa8>)
 8003660:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003662:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003664:	4913      	ldr	r1, [pc, #76]	; (80036b4 <__early_init+0xa4>)
  RCC->CR |= RCC_CR_PLLON;
 8003666:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800366a:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800366c:	684b      	ldr	r3, [r1, #4]
 800366e:	045a      	lsls	r2, r3, #17
 8003670:	d5fc      	bpl.n	800366c <__early_init+0x5c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003672:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <__early_init+0xa0>)
 8003674:	6813      	ldr	r3, [r2, #0]
 8003676:	019b      	lsls	r3, r3, #6
 8003678:	d5fc      	bpl.n	8003674 <__early_init+0x64>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <__early_init+0xac>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800367c:	4910      	ldr	r1, [pc, #64]	; (80036c0 <__early_init+0xb0>)
 800367e:	6091      	str	r1, [r2, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003680:	f240 7103 	movw	r1, #1795	; 0x703
 8003684:	6019      	str	r1, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003686:	6891      	ldr	r1, [r2, #8]
 8003688:	f041 0102 	orr.w	r1, r1, #2
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800368c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003690:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	f002 020c 	and.w	r2, r2, #12
 8003698:	2a08      	cmp	r2, #8
 800369a:	d1fa      	bne.n	8003692 <__early_init+0x82>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800369c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
 80036a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036aa:	665a      	str	r2, [r3, #100]	; 0x64
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40007000 	.word	0x40007000
 80036b8:	08016010 	.word	0x08016010
 80036bc:	40023c00 	.word	0x40023c00
 80036c0:	38881000 	.word	0x38881000
	...

080036d0 <chThdExit>:
void chThdExit(msg_t msg) {
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	2320      	movs	r3, #32
 80036d4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <chThdExit+0x40>)
 80036da:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 80036dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
 80036de:	6220      	str	r0, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 80036e0:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80036e4:	42ab      	cmp	r3, r5
 80036e6:	d007      	beq.n	80036f8 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe f8a7 	bl	8001840 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 80036f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	d1f7      	bne.n	80036e8 <chThdExit+0x18>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80036f8:	7f63      	ldrb	r3, [r4, #29]
 80036fa:	079b      	lsls	r3, r3, #30
 80036fc:	d103      	bne.n	8003706 <chThdExit+0x36>
    REG_REMOVE(tp);
 80036fe:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003702:	6113      	str	r3, [r2, #16]
 8003704:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8003706:	200f      	movs	r0, #15
}
 8003708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800370c:	f7fe bc98 	b.w	8002040 <chSchGoSleepS>
 8003710:	20000950 	.word	0x20000950
	...

08003720 <MotorBalanceThread>:
THD_FUNCTION(MotorBalanceThread, arg) {
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (motor_actual_speeds[i] < 2048) {
 8003722:	4d1a      	ldr	r5, [pc, #104]	; (800378c <MotorBalanceThread+0x6c>)
    int8_t i = (*(int8_t*)arg);
 8003724:	f990 4000 	ldrsb.w	r4, [r0]
    if (motor_actual_speeds[i] < 2048) {
 8003728:	f935 1014 	ldrsh.w	r1, [r5, r4, lsl #1]
 800372c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003730:	b2e7      	uxtb	r7, r4
 8003732:	db21      	blt.n	8003778 <MotorBalanceThread+0x58>
        chVTReset(&main_timer[i]);
 8003734:	4816      	ldr	r0, [pc, #88]	; (8003790 <MotorBalanceThread+0x70>)
 8003736:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800373a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800373e:	2320      	movs	r3, #32
 8003740:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8003744:	68c3      	ldr	r3, [r0, #12]
 8003746:	b10b      	cbz	r3, 800374c <MotorBalanceThread+0x2c>
    chVTDoResetI(vtp);
 8003748:	f7fe fa82 	bl	8001c50 <chVTDoResetI>
 800374c:	2600      	movs	r6, #0
 800374e:	f386 8811 	msr	BASEPRI, r6
        motor_actual_speeds[i] = motor_freqs[i]; // set to default
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <MotorBalanceThread+0x74>)
        pwmEnableChannel(&PWMD1, i, motor_actual_speeds[i]);
 8003754:	4638      	mov	r0, r7
        motor_actual_speeds[i] = motor_freqs[i]; // set to default
 8003756:	f933 1024 	ldrsh.w	r1, [r3, r4, lsl #2]
 800375a:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
        pwmEnableChannel(&PWMD1, i, motor_actual_speeds[i]);
 800375e:	f7fd fbaf 	bl	8000ec0 <pwmEnableChannel.constprop.13>
        chThdExit((msg_t)NULL);
 8003762:	4630      	mov	r0, r6
 8003764:	f7ff ffb4 	bl	80036d0 <chThdExit>
    timer_reset(i);
 8003768:	4620      	mov	r0, r4
 800376a:	f7fe fb01 	bl	8001d70 <timer_reset>
    chThdExit((msg_t)NULL);
 800376e:	2000      	movs	r0, #0
}
 8003770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chThdExit((msg_t)NULL);
 8003774:	f7ff bfac 	b.w	80036d0 <chThdExit>
        pwmEnableChannel(&PWMD1, i, ++motor_actual_speeds[i]);
 8003778:	3101      	adds	r1, #1
 800377a:	b20b      	sxth	r3, r1
 800377c:	4619      	mov	r1, r3
 800377e:	4638      	mov	r0, r7
 8003780:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 8003784:	f7fd fb9c 	bl	8000ec0 <pwmEnableChannel.constprop.13>
 8003788:	e7ee      	b.n	8003768 <MotorBalanceThread+0x48>
 800378a:	bf00      	nop
 800378c:	20000b88 	.word	0x20000b88
 8003790:	20000b4c 	.word	0x20000b4c
 8003794:	20000b90 	.word	0x20000b90
	...

080037a0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80037a0:	490d      	ldr	r1, [pc, #52]	; (80037d8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 80037a2:	6808      	ldr	r0, [r1, #0]
 80037a4:	698a      	ldr	r2, [r1, #24]
  tqp->p_next = tp->p_next;
 80037a6:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80037a8:	b430      	push	{r4, r5}
  if (otp->p_prio == IDLEPRIO) {
 80037aa:	6895      	ldr	r5, [r2, #8]
 80037ac:	600b      	str	r3, [r1, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80037ae:	6059      	str	r1, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 80037b0:	2401      	movs	r4, #1
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80037b2:	6188      	str	r0, [r1, #24]
  otp->p_state = CH_STATE_READY;
 80037b4:	2100      	movs	r1, #0
  currp->p_state = CH_STATE_CURRENT;
 80037b6:	7704      	strb	r4, [r0, #28]
  otp->p_state = CH_STATE_READY;
 80037b8:	7711      	strb	r1, [r2, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80037ba:	e000      	b.n	80037be <chSchDoReschedule+0x1e>
 80037bc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	428d      	cmp	r5, r1
 80037c2:	d3fb      	bcc.n	80037bc <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 80037c4:	685c      	ldr	r4, [r3, #4]
  chSysSwitch(currp, otp);
 80037c6:	4611      	mov	r1, r2
  otp->p_prev = cp->p_prev;
 80037c8:	e9c2 3400 	strd	r3, r4, [r2]
  otp->p_prev->p_next = otp;
 80037cc:	6022      	str	r2, [r4, #0]
  cp->p_prev = otp;
 80037ce:	605a      	str	r2, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 80037d0:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 80037d2:	f7fc bd5d 	b.w	8000290 <_port_switch>
 80037d6:	bf00      	nop
 80037d8:	20000950 	.word	0x20000950
 80037dc:	00000000 	.word	0x00000000

080037e0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80037e0:	b4f0      	push	{r4, r5, r6, r7}
 80037e2:	4f14      	ldr	r7, [pc, #80]	; (8003834 <__init_ram_areas+0x54>)
 80037e4:	4d14      	ldr	r5, [pc, #80]	; (8003838 <__init_ram_areas+0x58>)
 80037e6:	4815      	ldr	r0, [pc, #84]	; (800383c <__init_ram_areas+0x5c>)
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <__init_ram_areas+0x60>)
 80037ea:	4916      	ldr	r1, [pc, #88]	; (8003844 <__init_ram_areas+0x64>)
 80037ec:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80037f0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80037f2:	4298      	cmp	r0, r3
 80037f4:	d911      	bls.n	800381a <__init_ram_areas+0x3a>
 80037f6:	3904      	subs	r1, #4
 80037f8:	461a      	mov	r2, r3
      *p = *tp;
 80037fa:	f851 4f04 	ldr.w	r4, [r1, #4]!
 80037fe:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8003802:	4290      	cmp	r0, r2
 8003804:	d8f9      	bhi.n	80037fa <__init_ram_areas+0x1a>
 8003806:	1e42      	subs	r2, r0, #1
 8003808:	1ad2      	subs	r2, r2, r3
 800380a:	f022 0203 	bic.w	r2, r2, #3
 800380e:	3204      	adds	r2, #4
 8003810:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8003812:	429d      	cmp	r5, r3
 8003814:	d903      	bls.n	800381e <__init_ram_areas+0x3e>
      *p = 0;
 8003816:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800381a:	429d      	cmp	r5, r3
 800381c:	d8fb      	bhi.n	8003816 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800381e:	4567      	cmp	r7, ip
 8003820:	d005      	beq.n	800382e <__init_ram_areas+0x4e>
 8003822:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8003826:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800382a:	3710      	adds	r7, #16
 800382c:	e7e1      	b.n	80037f2 <__init_ram_areas+0x12>
#endif
}
 800382e:	bcf0      	pop	{r4, r5, r6, r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	08004e30 	.word	0x08004e30
 8003838:	20001108 	.word	0x20001108
 800383c:	20001108 	.word	0x20001108
 8003840:	20001108 	.word	0x20001108
 8003844:	080050e8 	.word	0x080050e8
	...

08003850 <__default_exit>:
  }
 8003850:	e7fe      	b.n	8003850 <__default_exit>
 8003852:	bf00      	nop
	...

08003860 <__late_init>:
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
	...

08003870 <__core_init>:
}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
	...

08003880 <sin>:
 8003880:	b530      	push	{r4, r5, lr}
 8003882:	4a22      	ldr	r2, [pc, #136]	; (800390c <sin+0x8c>)
 8003884:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003888:	4293      	cmp	r3, r2
 800388a:	b087      	sub	sp, #28
 800388c:	dd1b      	ble.n	80038c6 <sin+0x46>
 800388e:	4a20      	ldr	r2, [pc, #128]	; (8003910 <sin+0x90>)
 8003890:	4293      	cmp	r3, r2
 8003892:	dd05      	ble.n	80038a0 <sin+0x20>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	f7fc fd16 	bl	80002c8 <__aeabi_dsub>
 800389c:	b007      	add	sp, #28
 800389e:	bd30      	pop	{r4, r5, pc}
 80038a0:	aa02      	add	r2, sp, #8
 80038a2:	f000 f845 	bl	8003930 <__ieee754_rem_pio2>
 80038a6:	f000 0003 	and.w	r0, r0, #3
 80038aa:	2801      	cmp	r0, #1
 80038ac:	d013      	beq.n	80038d6 <sin+0x56>
 80038ae:	2802      	cmp	r0, #2
 80038b0:	d021      	beq.n	80038f6 <sin+0x76>
 80038b2:	b1b8      	cbz	r0, 80038e4 <sin+0x64>
 80038b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038bc:	f000 fa58 	bl	8003d70 <__kernel_cos>
 80038c0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80038c4:	e7ea      	b.n	800389c <sin+0x1c>
 80038c6:	2300      	movs	r3, #0
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2300      	movs	r3, #0
 80038ce:	f000 ff97 	bl	8004800 <__kernel_sin>
 80038d2:	b007      	add	sp, #28
 80038d4:	bd30      	pop	{r4, r5, pc}
 80038d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038de:	f000 fa47 	bl	8003d70 <__kernel_cos>
 80038e2:	e7db      	b.n	800389c <sin+0x1c>
 80038e4:	2301      	movs	r3, #1
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038f0:	f000 ff86 	bl	8004800 <__kernel_sin>
 80038f4:	e7d2      	b.n	800389c <sin+0x1c>
 80038f6:	2301      	movs	r3, #1
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003902:	f000 ff7d 	bl	8004800 <__kernel_sin>
 8003906:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800390a:	e7c7      	b.n	800389c <sin+0x1c>
 800390c:	3fe921fb 	.word	0x3fe921fb
 8003910:	7fefffff 	.word	0x7fefffff
	...

08003920 <truncl>:
 8003920:	f001 b936 	b.w	8004b90 <trunc>
	...

08003930 <__ieee754_rem_pio2>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	4cbe      	ldr	r4, [pc, #760]	; (8003c30 <__ieee754_rem_pio2+0x300>)
 8003936:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 800393a:	42a5      	cmp	r5, r4
 800393c:	b08f      	sub	sp, #60	; 0x3c
 800393e:	f340 8082 	ble.w	8003a46 <__ieee754_rem_pio2+0x116>
 8003942:	4614      	mov	r4, r2
 8003944:	4abb      	ldr	r2, [pc, #748]	; (8003c34 <__ieee754_rem_pio2+0x304>)
 8003946:	4295      	cmp	r5, r2
 8003948:	460e      	mov	r6, r1
 800394a:	dc26      	bgt.n	800399a <__ieee754_rem_pio2+0x6a>
 800394c:	2900      	cmp	r1, #0
 800394e:	a3ae      	add	r3, pc, #696	; (adr r3, 8003c08 <__ieee754_rem_pio2+0x2d8>)
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f340 81b3 	ble.w	8003cbe <__ieee754_rem_pio2+0x38e>
 8003958:	f7fc fcb6 	bl	80002c8 <__aeabi_dsub>
 800395c:	4bb6      	ldr	r3, [pc, #728]	; (8003c38 <__ieee754_rem_pio2+0x308>)
 800395e:	429d      	cmp	r5, r3
 8003960:	4606      	mov	r6, r0
 8003962:	460f      	mov	r7, r1
 8003964:	f000 8084 	beq.w	8003a70 <__ieee754_rem_pio2+0x140>
 8003968:	a3a9      	add	r3, pc, #676	; (adr r3, 8003c10 <__ieee754_rem_pio2+0x2e0>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fc fcab 	bl	80002c8 <__aeabi_dsub>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	e9c4 2300 	strd	r2, r3, [r4]
 800397a:	4639      	mov	r1, r7
 800397c:	4630      	mov	r0, r6
 800397e:	f7fc fca3 	bl	80002c8 <__aeabi_dsub>
 8003982:	a3a3      	add	r3, pc, #652	; (adr r3, 8003c10 <__ieee754_rem_pio2+0x2e0>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc fc9e 	bl	80002c8 <__aeabi_dsub>
 800398c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003990:	2701      	movs	r7, #1
 8003992:	4638      	mov	r0, r7
 8003994:	b00f      	add	sp, #60	; 0x3c
 8003996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399a:	4aa8      	ldr	r2, [pc, #672]	; (8003c3c <__ieee754_rem_pio2+0x30c>)
 800399c:	4295      	cmp	r5, r2
 800399e:	f340 8087 	ble.w	8003ab0 <__ieee754_rem_pio2+0x180>
 80039a2:	4aa7      	ldr	r2, [pc, #668]	; (8003c40 <__ieee754_rem_pio2+0x310>)
 80039a4:	4295      	cmp	r5, r2
 80039a6:	dc59      	bgt.n	8003a5c <__ieee754_rem_pio2+0x12c>
 80039a8:	152f      	asrs	r7, r5, #20
 80039aa:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
 80039ae:	eba5 5107 	sub.w	r1, r5, r7, lsl #20
 80039b2:	4689      	mov	r9, r1
 80039b4:	4680      	mov	r8, r0
 80039b6:	f7fd f8e3 	bl	8000b80 <__aeabi_d2iz>
 80039ba:	f7fc fdd3 	bl	8000564 <__aeabi_i2d>
 80039be:	4682      	mov	sl, r0
 80039c0:	468b      	mov	fp, r1
 80039c2:	4640      	mov	r0, r8
 80039c4:	4649      	mov	r1, r9
 80039c6:	4652      	mov	r2, sl
 80039c8:	465b      	mov	r3, fp
 80039ca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80039ce:	f7fc fc7b 	bl	80002c8 <__aeabi_dsub>
 80039d2:	2200      	movs	r2, #0
 80039d4:	4b9b      	ldr	r3, [pc, #620]	; (8003c44 <__ieee754_rem_pio2+0x314>)
 80039d6:	f7fc fe33 	bl	8000640 <__aeabi_dmul>
 80039da:	4689      	mov	r9, r1
 80039dc:	4680      	mov	r8, r0
 80039de:	f7fd f8cf 	bl	8000b80 <__aeabi_d2iz>
 80039e2:	4605      	mov	r5, r0
 80039e4:	f7fc fdbe 	bl	8000564 <__aeabi_i2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4640      	mov	r0, r8
 80039ee:	4649      	mov	r1, r9
 80039f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80039f4:	f7fc fc68 	bl	80002c8 <__aeabi_dsub>
 80039f8:	2200      	movs	r2, #0
 80039fa:	4b92      	ldr	r3, [pc, #584]	; (8003c44 <__ieee754_rem_pio2+0x314>)
 80039fc:	f7fc fe20 	bl	8000640 <__aeabi_dmul>
 8003a00:	2200      	movs	r2, #0
 8003a02:	2300      	movs	r3, #0
 8003a04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003a08:	f7fd f888 	bl	8000b1c <__aeabi_dcmpeq>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	f000 80f6 	beq.w	8003bfe <__ieee754_rem_pio2+0x2ce>
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2302      	movne	r3, #2
 8003a1a:	4a8b      	ldr	r2, [pc, #556]	; (8003c48 <__ieee754_rem_pio2+0x318>)
 8003a1c:	9201      	str	r2, [sp, #4]
 8003a1e:	2102      	movs	r1, #2
 8003a20:	463a      	mov	r2, r7
 8003a22:	9100      	str	r1, [sp, #0]
 8003a24:	a808      	add	r0, sp, #32
 8003a26:	4621      	mov	r1, r4
 8003a28:	f000 faca 	bl	8003fc0 <__kernel_rem_pio2>
 8003a2c:	2e00      	cmp	r6, #0
 8003a2e:	4607      	mov	r7, r0
 8003a30:	daaf      	bge.n	8003992 <__ieee754_rem_pio2+0x62>
 8003a32:	6862      	ldr	r2, [r4, #4]
 8003a34:	68e3      	ldr	r3, [r4, #12]
 8003a36:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003a3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003a3e:	4247      	negs	r7, r0
 8003a40:	6062      	str	r2, [r4, #4]
 8003a42:	60e3      	str	r3, [r4, #12]
 8003a44:	e7a5      	b.n	8003992 <__ieee754_rem_pio2+0x62>
 8003a46:	2700      	movs	r7, #0
 8003a48:	2400      	movs	r4, #0
 8003a4a:	2500      	movs	r5, #0
 8003a4c:	e9c2 0100 	strd	r0, r1, [r2]
 8003a50:	4638      	mov	r0, r7
 8003a52:	e9c2 4502 	strd	r4, r5, [r2, #8]
 8003a56:	b00f      	add	sp, #60	; 0x3c
 8003a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	f7fc fc32 	bl	80002c8 <__aeabi_dsub>
 8003a64:	2700      	movs	r7, #0
 8003a66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a6a:	e9c4 0100 	strd	r0, r1, [r4]
 8003a6e:	e790      	b.n	8003992 <__ieee754_rem_pio2+0x62>
 8003a70:	a369      	add	r3, pc, #420	; (adr r3, 8003c18 <__ieee754_rem_pio2+0x2e8>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f7fc fc27 	bl	80002c8 <__aeabi_dsub>
 8003a7a:	a369      	add	r3, pc, #420	; (adr r3, 8003c20 <__ieee754_rem_pio2+0x2f0>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	4606      	mov	r6, r0
 8003a82:	460f      	mov	r7, r1
 8003a84:	f7fc fc20 	bl	80002c8 <__aeabi_dsub>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	e9c4 2300 	strd	r2, r3, [r4]
 8003a90:	4630      	mov	r0, r6
 8003a92:	4639      	mov	r1, r7
 8003a94:	f7fc fc18 	bl	80002c8 <__aeabi_dsub>
 8003a98:	a361      	add	r3, pc, #388	; (adr r3, 8003c20 <__ieee754_rem_pio2+0x2f0>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fc13 	bl	80002c8 <__aeabi_dsub>
 8003aa2:	2701      	movs	r7, #1
 8003aa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	b00f      	add	sp, #60	; 0x3c
 8003aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab0:	f000 ff5e 	bl	8004970 <fabs>
 8003ab4:	a35c      	add	r3, pc, #368	; (adr r3, 8003c28 <__ieee754_rem_pio2+0x2f8>)
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	4680      	mov	r8, r0
 8003abc:	4689      	mov	r9, r1
 8003abe:	f7fc fdbf 	bl	8000640 <__aeabi_dmul>
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	4b61      	ldr	r3, [pc, #388]	; (8003c4c <__ieee754_rem_pio2+0x31c>)
 8003ac6:	f7fc fc01 	bl	80002cc <__adddf3>
 8003aca:	f7fd f859 	bl	8000b80 <__aeabi_d2iz>
 8003ace:	4607      	mov	r7, r0
 8003ad0:	f7fc fd48 	bl	8000564 <__aeabi_i2d>
 8003ad4:	a34c      	add	r3, pc, #304	; (adr r3, 8003c08 <__ieee754_rem_pio2+0x2d8>)
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	4682      	mov	sl, r0
 8003adc:	468b      	mov	fp, r1
 8003ade:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003ae2:	f7fc fdad 	bl	8000640 <__aeabi_dmul>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4640      	mov	r0, r8
 8003aec:	4649      	mov	r1, r9
 8003aee:	f7fc fbeb 	bl	80002c8 <__aeabi_dsub>
 8003af2:	a347      	add	r3, pc, #284	; (adr r3, 8003c10 <__ieee754_rem_pio2+0x2e0>)
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003afc:	4650      	mov	r0, sl
 8003afe:	4659      	mov	r1, fp
 8003b00:	f7fc fd9e 	bl	8000640 <__aeabi_dmul>
 8003b04:	2f1f      	cmp	r7, #31
 8003b06:	4680      	mov	r8, r0
 8003b08:	4689      	mov	r9, r1
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b12:	dc28      	bgt.n	8003b66 <__ieee754_rem_pio2+0x236>
 8003b14:	f7fc fbd8 	bl	80002c8 <__aeabi_dsub>
 8003b18:	4b4d      	ldr	r3, [pc, #308]	; (8003c50 <__ieee754_rem_pio2+0x320>)
 8003b1a:	1e7a      	subs	r2, r7, #1
 8003b1c:	4683      	mov	fp, r0
 8003b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b22:	42ab      	cmp	r3, r5
 8003b24:	468a      	mov	sl, r1
 8003b26:	d022      	beq.n	8003b6e <__ieee754_rem_pio2+0x23e>
 8003b28:	465a      	mov	r2, fp
 8003b2a:	4653      	mov	r3, sl
 8003b2c:	e9c4 2300 	strd	r2, r3, [r4]
 8003b30:	465a      	mov	r2, fp
 8003b32:	4653      	mov	r3, sl
 8003b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b38:	f7fc fbc6 	bl	80002c8 <__aeabi_dsub>
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	f7fc fbc2 	bl	80002c8 <__aeabi_dsub>
 8003b44:	2e00      	cmp	r6, #0
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003b4e:	f6bf af20 	bge.w	8003992 <__ieee754_rem_pio2+0x62>
 8003b52:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003b56:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003b5a:	e9c4 b300 	strd	fp, r3, [r4]
 8003b5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b62:	427f      	negs	r7, r7
 8003b64:	e715      	b.n	8003992 <__ieee754_rem_pio2+0x62>
 8003b66:	f7fc fbaf 	bl	80002c8 <__aeabi_dsub>
 8003b6a:	4683      	mov	fp, r0
 8003b6c:	468a      	mov	sl, r1
 8003b6e:	152d      	asrs	r5, r5, #20
 8003b70:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8003b74:	1aeb      	subs	r3, r5, r3
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	ddd6      	ble.n	8003b28 <__ieee754_rem_pio2+0x1f8>
 8003b7a:	a327      	add	r3, pc, #156	; (adr r3, 8003c18 <__ieee754_rem_pio2+0x2e8>)
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b84:	f7fc fd5c 	bl	8000640 <__aeabi_dmul>
 8003b88:	4680      	mov	r8, r0
 8003b8a:	4689      	mov	r9, r1
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b94:	f7fc fb98 	bl	80002c8 <__aeabi_dsub>
 8003b98:	4682      	mov	sl, r0
 8003b9a:	468b      	mov	fp, r1
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ba4:	f7fc fb90 	bl	80002c8 <__aeabi_dsub>
 8003ba8:	4642      	mov	r2, r8
 8003baa:	464b      	mov	r3, r9
 8003bac:	f7fc fb8c 	bl	80002c8 <__aeabi_dsub>
 8003bb0:	a31b      	add	r3, pc, #108	; (adr r3, 8003c20 <__ieee754_rem_pio2+0x2f0>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	4680      	mov	r8, r0
 8003bb8:	4689      	mov	r9, r1
 8003bba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bbe:	f7fc fd3f 	bl	8000640 <__aeabi_dmul>
 8003bc2:	4642      	mov	r2, r8
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	f7fc fb7f 	bl	80002c8 <__aeabi_dsub>
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4680      	mov	r8, r0
 8003bd0:	4689      	mov	r9, r1
 8003bd2:	4650      	mov	r0, sl
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003bda:	f7fc fb75 	bl	80002c8 <__aeabi_dsub>
 8003bde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003be2:	1aed      	subs	r5, r5, r3
 8003be4:	2d31      	cmp	r5, #49	; 0x31
 8003be6:	4683      	mov	fp, r0
 8003be8:	468a      	mov	sl, r1
 8003bea:	dc33      	bgt.n	8003c54 <__ieee754_rem_pio2+0x324>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	e9c4 2300 	strd	r2, r3, [r4]
 8003bf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bfc:	e798      	b.n	8003b30 <__ieee754_rem_pio2+0x200>
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e70b      	b.n	8003a1a <__ieee754_rem_pio2+0xea>
 8003c02:	bf00      	nop
 8003c04:	f3af 8000 	nop.w
 8003c08:	54400000 	.word	0x54400000
 8003c0c:	3ff921fb 	.word	0x3ff921fb
 8003c10:	1a626331 	.word	0x1a626331
 8003c14:	3dd0b461 	.word	0x3dd0b461
 8003c18:	1a600000 	.word	0x1a600000
 8003c1c:	3dd0b461 	.word	0x3dd0b461
 8003c20:	2e037073 	.word	0x2e037073
 8003c24:	3ba3198a 	.word	0x3ba3198a
 8003c28:	6dc9c883 	.word	0x6dc9c883
 8003c2c:	3fe45f30 	.word	0x3fe45f30
 8003c30:	3fe921fb 	.word	0x3fe921fb
 8003c34:	4002d97b 	.word	0x4002d97b
 8003c38:	3ff921fb 	.word	0x3ff921fb
 8003c3c:	413921fb 	.word	0x413921fb
 8003c40:	7fefffff 	.word	0x7fefffff
 8003c44:	41700000 	.word	0x41700000
 8003c48:	08004f50 	.word	0x08004f50
 8003c4c:	3fe00000 	.word	0x3fe00000
 8003c50:	08004ed0 	.word	0x08004ed0
 8003c54:	a338      	add	r3, pc, #224	; (adr r3, 8003d38 <__ieee754_rem_pio2+0x408>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c5e:	f7fc fcef 	bl	8000640 <__aeabi_dmul>
 8003c62:	4680      	mov	r8, r0
 8003c64:	4689      	mov	r9, r1
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c6e:	f7fc fb2b 	bl	80002c8 <__aeabi_dsub>
 8003c72:	4682      	mov	sl, r0
 8003c74:	468b      	mov	fp, r1
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c7e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003c82:	f7fc fb21 	bl	80002c8 <__aeabi_dsub>
 8003c86:	4642      	mov	r2, r8
 8003c88:	464b      	mov	r3, r9
 8003c8a:	f7fc fb1d 	bl	80002c8 <__aeabi_dsub>
 8003c8e:	a32c      	add	r3, pc, #176	; (adr r3, 8003d40 <__ieee754_rem_pio2+0x410>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	4680      	mov	r8, r0
 8003c96:	4689      	mov	r9, r1
 8003c98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c9c:	f7fc fcd0 	bl	8000640 <__aeabi_dmul>
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	f7fc fb10 	bl	80002c8 <__aeabi_dsub>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4680      	mov	r8, r0
 8003cae:	4689      	mov	r9, r1
 8003cb0:	4650      	mov	r0, sl
 8003cb2:	4659      	mov	r1, fp
 8003cb4:	f7fc fb08 	bl	80002c8 <__aeabi_dsub>
 8003cb8:	4683      	mov	fp, r0
 8003cba:	468a      	mov	sl, r1
 8003cbc:	e734      	b.n	8003b28 <__ieee754_rem_pio2+0x1f8>
 8003cbe:	f7fc fb05 	bl	80002cc <__adddf3>
 8003cc2:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <__ieee754_rem_pio2+0x430>)
 8003cc4:	429d      	cmp	r5, r3
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460f      	mov	r7, r1
 8003cca:	d016      	beq.n	8003cfa <__ieee754_rem_pio2+0x3ca>
 8003ccc:	a31e      	add	r3, pc, #120	; (adr r3, 8003d48 <__ieee754_rem_pio2+0x418>)
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f7fc fafb 	bl	80002cc <__adddf3>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	e9c4 2300 	strd	r2, r3, [r4]
 8003cde:	4639      	mov	r1, r7
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f7fc faf1 	bl	80002c8 <__aeabi_dsub>
 8003ce6:	a318      	add	r3, pc, #96	; (adr r3, 8003d48 <__ieee754_rem_pio2+0x418>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f7fc faee 	bl	80002cc <__adddf3>
 8003cf0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003cf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003cf8:	e64b      	b.n	8003992 <__ieee754_rem_pio2+0x62>
 8003cfa:	a315      	add	r3, pc, #84	; (adr r3, 8003d50 <__ieee754_rem_pio2+0x420>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc fae4 	bl	80002cc <__adddf3>
 8003d04:	a314      	add	r3, pc, #80	; (adr r3, 8003d58 <__ieee754_rem_pio2+0x428>)
 8003d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0a:	460f      	mov	r7, r1
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	f7fc fadd 	bl	80002cc <__adddf3>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	e9c4 2300 	strd	r2, r3, [r4]
 8003d1a:	4639      	mov	r1, r7
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f7fc fad3 	bl	80002c8 <__aeabi_dsub>
 8003d22:	a30d      	add	r3, pc, #52	; (adr r3, 8003d58 <__ieee754_rem_pio2+0x428>)
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f7fc fad0 	bl	80002cc <__adddf3>
 8003d2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003d30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d34:	e62d      	b.n	8003992 <__ieee754_rem_pio2+0x62>
 8003d36:	bf00      	nop
 8003d38:	2e000000 	.word	0x2e000000
 8003d3c:	3ba3198a 	.word	0x3ba3198a
 8003d40:	252049c1 	.word	0x252049c1
 8003d44:	397b839a 	.word	0x397b839a
 8003d48:	1a626331 	.word	0x1a626331
 8003d4c:	3dd0b461 	.word	0x3dd0b461
 8003d50:	1a600000 	.word	0x1a600000
 8003d54:	3dd0b461 	.word	0x3dd0b461
 8003d58:	2e037073 	.word	0x2e037073
 8003d5c:	3ba3198a 	.word	0x3ba3198a
 8003d60:	3ff921fb 	.word	0x3ff921fb
	...

08003d70 <__kernel_cos>:
 8003d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d74:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003d78:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	460c      	mov	r4, r1
 8003d80:	4692      	mov	sl, r2
 8003d82:	469b      	mov	fp, r3
 8003d84:	4605      	mov	r5, r0
 8003d86:	da6b      	bge.n	8003e60 <__kernel_cos+0xf0>
 8003d88:	f7fc fefa 	bl	8000b80 <__aeabi_d2iz>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	f000 80e8 	beq.w	8003f62 <__kernel_cos+0x1f2>
 8003d92:	462a      	mov	r2, r5
 8003d94:	4623      	mov	r3, r4
 8003d96:	4628      	mov	r0, r5
 8003d98:	4621      	mov	r1, r4
 8003d9a:	f7fc fc51 	bl	8000640 <__aeabi_dmul>
 8003d9e:	a374      	add	r3, pc, #464	; (adr r3, 8003f70 <__kernel_cos+0x200>)
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	4680      	mov	r8, r0
 8003da6:	4689      	mov	r9, r1
 8003da8:	f7fc fc4a 	bl	8000640 <__aeabi_dmul>
 8003dac:	a372      	add	r3, pc, #456	; (adr r3, 8003f78 <__kernel_cos+0x208>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f7fc fa8b 	bl	80002cc <__adddf3>
 8003db6:	4642      	mov	r2, r8
 8003db8:	464b      	mov	r3, r9
 8003dba:	f7fc fc41 	bl	8000640 <__aeabi_dmul>
 8003dbe:	a370      	add	r3, pc, #448	; (adr r3, 8003f80 <__kernel_cos+0x210>)
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f7fc fa80 	bl	80002c8 <__aeabi_dsub>
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	f7fc fc38 	bl	8000640 <__aeabi_dmul>
 8003dd0:	a36d      	add	r3, pc, #436	; (adr r3, 8003f88 <__kernel_cos+0x218>)
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f7fc fa79 	bl	80002cc <__adddf3>
 8003dda:	4642      	mov	r2, r8
 8003ddc:	464b      	mov	r3, r9
 8003dde:	f7fc fc2f 	bl	8000640 <__aeabi_dmul>
 8003de2:	a36b      	add	r3, pc, #428	; (adr r3, 8003f90 <__kernel_cos+0x220>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fa6e 	bl	80002c8 <__aeabi_dsub>
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	f7fc fc26 	bl	8000640 <__aeabi_dmul>
 8003df4:	a368      	add	r3, pc, #416	; (adr r3, 8003f98 <__kernel_cos+0x228>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f7fc fa67 	bl	80002cc <__adddf3>
 8003dfe:	4642      	mov	r2, r8
 8003e00:	464b      	mov	r3, r9
 8003e02:	f7fc fc1d 	bl	8000640 <__aeabi_dmul>
 8003e06:	e9cd 0100 	strd	r0, r1, [sp]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	4b64      	ldr	r3, [pc, #400]	; (8003fa0 <__kernel_cos+0x230>)
 8003e0e:	4640      	mov	r0, r8
 8003e10:	4649      	mov	r1, r9
 8003e12:	f7fc fc15 	bl	8000640 <__aeabi_dmul>
 8003e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e1a:	4606      	mov	r6, r0
 8003e1c:	460f      	mov	r7, r1
 8003e1e:	4640      	mov	r0, r8
 8003e20:	4649      	mov	r1, r9
 8003e22:	f7fc fc0d 	bl	8000640 <__aeabi_dmul>
 8003e26:	4652      	mov	r2, sl
 8003e28:	4680      	mov	r8, r0
 8003e2a:	4689      	mov	r9, r1
 8003e2c:	465b      	mov	r3, fp
 8003e2e:	4628      	mov	r0, r5
 8003e30:	4621      	mov	r1, r4
 8003e32:	f7fc fc05 	bl	8000640 <__aeabi_dmul>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	f7fc fa43 	bl	80002c8 <__aeabi_dsub>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4630      	mov	r0, r6
 8003e48:	4639      	mov	r1, r7
 8003e4a:	f7fc fa3d 	bl	80002c8 <__aeabi_dsub>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	2000      	movs	r0, #0
 8003e54:	4953      	ldr	r1, [pc, #332]	; (8003fa4 <__kernel_cos+0x234>)
 8003e56:	f7fc fa37 	bl	80002c8 <__aeabi_dsub>
 8003e5a:	b005      	add	sp, #20
 8003e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	f7fc fbec 	bl	8000640 <__aeabi_dmul>
 8003e68:	a341      	add	r3, pc, #260	; (adr r3, 8003f70 <__kernel_cos+0x200>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	4680      	mov	r8, r0
 8003e70:	4689      	mov	r9, r1
 8003e72:	f7fc fbe5 	bl	8000640 <__aeabi_dmul>
 8003e76:	a340      	add	r3, pc, #256	; (adr r3, 8003f78 <__kernel_cos+0x208>)
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f7fc fa26 	bl	80002cc <__adddf3>
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	f7fc fbdc 	bl	8000640 <__aeabi_dmul>
 8003e88:	a33d      	add	r3, pc, #244	; (adr r3, 8003f80 <__kernel_cos+0x210>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f7fc fa1b 	bl	80002c8 <__aeabi_dsub>
 8003e92:	4642      	mov	r2, r8
 8003e94:	464b      	mov	r3, r9
 8003e96:	f7fc fbd3 	bl	8000640 <__aeabi_dmul>
 8003e9a:	a33b      	add	r3, pc, #236	; (adr r3, 8003f88 <__kernel_cos+0x218>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f7fc fa14 	bl	80002cc <__adddf3>
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	f7fc fbca 	bl	8000640 <__aeabi_dmul>
 8003eac:	a338      	add	r3, pc, #224	; (adr r3, 8003f90 <__kernel_cos+0x220>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f7fc fa09 	bl	80002c8 <__aeabi_dsub>
 8003eb6:	4642      	mov	r2, r8
 8003eb8:	464b      	mov	r3, r9
 8003eba:	f7fc fbc1 	bl	8000640 <__aeabi_dmul>
 8003ebe:	a336      	add	r3, pc, #216	; (adr r3, 8003f98 <__kernel_cos+0x228>)
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f7fc fa02 	bl	80002cc <__adddf3>
 8003ec8:	464b      	mov	r3, r9
 8003eca:	4642      	mov	r2, r8
 8003ecc:	f7fc fbb8 	bl	8000640 <__aeabi_dmul>
 8003ed0:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <__kernel_cos+0x238>)
 8003ed2:	429e      	cmp	r6, r3
 8003ed4:	e9cd 0100 	strd	r0, r1, [sp]
 8003ed8:	dd97      	ble.n	8003e0a <__kernel_cos+0x9a>
 8003eda:	4b34      	ldr	r3, [pc, #208]	; (8003fac <__kernel_cos+0x23c>)
 8003edc:	429e      	cmp	r6, r3
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	dc38      	bgt.n	8003f56 <__kernel_cos+0x1e6>
 8003ee4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 8003ee8:	2000      	movs	r0, #0
 8003eea:	492e      	ldr	r1, [pc, #184]	; (8003fa4 <__kernel_cos+0x234>)
 8003eec:	4616      	mov	r6, r2
 8003eee:	461f      	mov	r7, r3
 8003ef0:	f7fc f9ea 	bl	80002c8 <__aeabi_dsub>
 8003ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <__kernel_cos+0x230>)
 8003efc:	4640      	mov	r0, r8
 8003efe:	4649      	mov	r1, r9
 8003f00:	f7fc fb9e 	bl	8000640 <__aeabi_dmul>
 8003f04:	4632      	mov	r2, r6
 8003f06:	463b      	mov	r3, r7
 8003f08:	f7fc f9de 	bl	80002c8 <__aeabi_dsub>
 8003f0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f10:	4606      	mov	r6, r0
 8003f12:	460f      	mov	r7, r1
 8003f14:	4640      	mov	r0, r8
 8003f16:	4649      	mov	r1, r9
 8003f18:	f7fc fb92 	bl	8000640 <__aeabi_dmul>
 8003f1c:	4652      	mov	r2, sl
 8003f1e:	4680      	mov	r8, r0
 8003f20:	4689      	mov	r9, r1
 8003f22:	465b      	mov	r3, fp
 8003f24:	4628      	mov	r0, r5
 8003f26:	4621      	mov	r1, r4
 8003f28:	f7fc fb8a 	bl	8000640 <__aeabi_dmul>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4640      	mov	r0, r8
 8003f32:	4649      	mov	r1, r9
 8003f34:	f7fc f9c8 	bl	80002c8 <__aeabi_dsub>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	4639      	mov	r1, r7
 8003f40:	f7fc f9c2 	bl	80002c8 <__aeabi_dsub>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f4c:	f7fc f9bc 	bl	80002c8 <__aeabi_dsub>
 8003f50:	b005      	add	sp, #20
 8003f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <__kernel_cos+0x240>)
 8003f58:	4f16      	ldr	r7, [pc, #88]	; (8003fb4 <__kernel_cos+0x244>)
 8003f5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f5e:	2600      	movs	r6, #0
 8003f60:	e7ca      	b.n	8003ef8 <__kernel_cos+0x188>
 8003f62:	4910      	ldr	r1, [pc, #64]	; (8003fa4 <__kernel_cos+0x234>)
 8003f64:	2000      	movs	r0, #0
 8003f66:	b005      	add	sp, #20
 8003f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6c:	f3af 8000 	nop.w
 8003f70:	be8838d4 	.word	0xbe8838d4
 8003f74:	bda8fae9 	.word	0xbda8fae9
 8003f78:	bdb4b1c4 	.word	0xbdb4b1c4
 8003f7c:	3e21ee9e 	.word	0x3e21ee9e
 8003f80:	809c52ad 	.word	0x809c52ad
 8003f84:	3e927e4f 	.word	0x3e927e4f
 8003f88:	19cb1590 	.word	0x19cb1590
 8003f8c:	3efa01a0 	.word	0x3efa01a0
 8003f90:	16c15177 	.word	0x16c15177
 8003f94:	3f56c16c 	.word	0x3f56c16c
 8003f98:	5555554c 	.word	0x5555554c
 8003f9c:	3fa55555 	.word	0x3fa55555
 8003fa0:	3fe00000 	.word	0x3fe00000
 8003fa4:	3ff00000 	.word	0x3ff00000
 8003fa8:	3fd33332 	.word	0x3fd33332
 8003fac:	3fe90000 	.word	0x3fe90000
 8003fb0:	3fe70000 	.word	0x3fe70000
 8003fb4:	3fd20000 	.word	0x3fd20000
	...

08003fc0 <__kernel_rem_pio2>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003fc8:	4cb6      	ldr	r4, [pc, #728]	; (80042a4 <__kernel_rem_pio2+0x2e4>)
 8003fca:	9da2      	ldr	r5, [sp, #648]	; 0x288
 8003fcc:	9308      	str	r3, [sp, #32]
 8003fce:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8003fd2:	9405      	str	r4, [sp, #20]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	f112 0f14 	cmn.w	r2, #20
 8003fda:	4606      	mov	r6, r0
 8003fdc:	910b      	str	r1, [sp, #44]	; 0x2c
 8003fde:	9303      	str	r3, [sp, #12]
 8003fe0:	f2c0 82c8 	blt.w	8004574 <__kernel_rem_pio2+0x5b4>
 8003fe4:	49b0      	ldr	r1, [pc, #704]	; (80042a8 <__kernel_rem_pio2+0x2e8>)
 8003fe6:	1ed3      	subs	r3, r2, #3
 8003fe8:	fb81 0103 	smull	r0, r1, r1, r3
 8003fec:	17db      	asrs	r3, r3, #31
 8003fee:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8003ff2:	9307      	str	r3, [sp, #28]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	9306      	str	r3, [sp, #24]
 8004000:	9a07      	ldr	r2, [sp, #28]
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	1ad4      	subs	r4, r2, r3
 8004006:	9a05      	ldr	r2, [sp, #20]
 8004008:	18d7      	adds	r7, r2, r3
 800400a:	d41b      	bmi.n	8004044 <__kernel_rem_pio2+0x84>
 800400c:	3701      	adds	r7, #1
 800400e:	4427      	add	r7, r4
 8004010:	ad20      	add	r5, sp, #128	; 0x80
 8004012:	f04f 0800 	mov.w	r8, #0
 8004016:	f04f 0900 	mov.w	r9, #0
 800401a:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 800401e:	e008      	b.n	8004032 <__kernel_rem_pio2+0x72>
 8004020:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8004024:	f7fc fa9e 	bl	8000564 <__aeabi_i2d>
 8004028:	3401      	adds	r4, #1
 800402a:	42bc      	cmp	r4, r7
 800402c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004030:	d008      	beq.n	8004044 <__kernel_rem_pio2+0x84>
 8004032:	2c00      	cmp	r4, #0
 8004034:	daf4      	bge.n	8004020 <__kernel_rem_pio2+0x60>
 8004036:	3401      	adds	r4, #1
 8004038:	4640      	mov	r0, r8
 800403a:	4649      	mov	r1, r9
 800403c:	42bc      	cmp	r4, r7
 800403e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004042:	d1f6      	bne.n	8004032 <__kernel_rem_pio2+0x72>
 8004044:	9b05      	ldr	r3, [sp, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f2c0 83b5 	blt.w	80047b6 <__kernel_rem_pio2+0x7f6>
 800404c:	9b08      	ldr	r3, [sp, #32]
 800404e:	f1a6 0208 	sub.w	r2, r6, #8
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	eb02 0803 	add.w	r8, r2, r3
 8004058:	9204      	str	r2, [sp, #16]
 800405a:	aa20      	add	r2, sp, #128	; 0x80
 800405c:	eb02 0a03 	add.w	sl, r2, r3
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	9b05      	ldr	r3, [sp, #20]
 8004064:	aa72      	add	r2, sp, #456	; 0x1c8
 8004066:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
 800406a:	f50d 79e0 	add.w	r9, sp, #448	; 0x1c0
 800406e:	9b03      	ldr	r3, [sp, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f2c0 819a 	blt.w	80043aa <__kernel_rem_pio2+0x3ea>
 8004076:	9c04      	ldr	r4, [sp, #16]
 8004078:	4655      	mov	r5, sl
 800407a:	2600      	movs	r6, #0
 800407c:	2700      	movs	r7, #0
 800407e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004082:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 8004086:	f7fc fadb 	bl	8000640 <__aeabi_dmul>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4630      	mov	r0, r6
 8004090:	4639      	mov	r1, r7
 8004092:	f7fc f91b 	bl	80002cc <__adddf3>
 8004096:	4544      	cmp	r4, r8
 8004098:	4606      	mov	r6, r0
 800409a:	460f      	mov	r7, r1
 800409c:	d1ef      	bne.n	800407e <__kernel_rem_pio2+0xbe>
 800409e:	e8e9 6702 	strd	r6, r7, [r9], #8
 80040a2:	45d9      	cmp	r9, fp
 80040a4:	f10a 0a08 	add.w	sl, sl, #8
 80040a8:	d1e1      	bne.n	800406e <__kernel_rem_pio2+0xae>
 80040aa:	9801      	ldr	r0, [sp, #4]
 80040ac:	9c04      	ldr	r4, [sp, #16]
 80040ae:	9905      	ldr	r1, [sp, #20]
 80040b0:	9101      	str	r1, [sp, #4]
 80040b2:	4420      	add	r0, r4
 80040b4:	008b      	lsls	r3, r1, #2
 80040b6:	4683      	mov	fp, r0
 80040b8:	a80b      	add	r0, sp, #44	; 0x2c
 80040ba:	f1a3 0208 	sub.w	r2, r3, #8
 80040be:	18c3      	adds	r3, r0, r3
 80040c0:	930a      	str	r3, [sp, #40]	; 0x28
 80040c2:	ab0c      	add	r3, sp, #48	; 0x30
 80040c4:	4413      	add	r3, r2
 80040c6:	9309      	str	r3, [sp, #36]	; 0x24
 80040c8:	9a01      	ldr	r2, [sp, #4]
 80040ca:	a998      	add	r1, sp, #608	; 0x260
 80040cc:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80040d6:	dd29      	ble.n	800412c <__kernel_rem_pio2+0x16c>
 80040d8:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80040dc:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80040e0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80040e4:	2200      	movs	r2, #0
 80040e6:	4b71      	ldr	r3, [pc, #452]	; (80042ac <__kernel_rem_pio2+0x2ec>)
 80040e8:	4620      	mov	r0, r4
 80040ea:	4629      	mov	r1, r5
 80040ec:	f7fc faa8 	bl	8000640 <__aeabi_dmul>
 80040f0:	f7fc fd46 	bl	8000b80 <__aeabi_d2iz>
 80040f4:	f7fc fa36 	bl	8000564 <__aeabi_i2d>
 80040f8:	2200      	movs	r2, #0
 80040fa:	4b6d      	ldr	r3, [pc, #436]	; (80042b0 <__kernel_rem_pio2+0x2f0>)
 80040fc:	4606      	mov	r6, r0
 80040fe:	460f      	mov	r7, r1
 8004100:	f7fc fa9e 	bl	8000640 <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4620      	mov	r0, r4
 800410a:	4629      	mov	r1, r5
 800410c:	f7fc f8dc 	bl	80002c8 <__aeabi_dsub>
 8004110:	f7fc fd36 	bl	8000b80 <__aeabi_d2iz>
 8004114:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8004118:	f849 0b04 	str.w	r0, [r9], #4
 800411c:	4639      	mov	r1, r7
 800411e:	4630      	mov	r0, r6
 8004120:	f7fc f8d4 	bl	80002cc <__adddf3>
 8004124:	45d0      	cmp	r8, sl
 8004126:	4604      	mov	r4, r0
 8004128:	460d      	mov	r5, r1
 800412a:	d1db      	bne.n	80040e4 <__kernel_rem_pio2+0x124>
 800412c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8004130:	4620      	mov	r0, r4
 8004132:	4629      	mov	r1, r5
 8004134:	464a      	mov	r2, r9
 8004136:	f000 fcab 	bl	8004a90 <scalbn>
 800413a:	2200      	movs	r2, #0
 800413c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004140:	4604      	mov	r4, r0
 8004142:	460d      	mov	r5, r1
 8004144:	f7fc fa7c 	bl	8000640 <__aeabi_dmul>
 8004148:	f000 fc1a 	bl	8004980 <floor>
 800414c:	2200      	movs	r2, #0
 800414e:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <__kernel_rem_pio2+0x2f4>)
 8004150:	f7fc fa76 	bl	8000640 <__aeabi_dmul>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4620      	mov	r0, r4
 800415a:	4629      	mov	r1, r5
 800415c:	f7fc f8b4 	bl	80002c8 <__aeabi_dsub>
 8004160:	460d      	mov	r5, r1
 8004162:	4604      	mov	r4, r0
 8004164:	f7fc fd0c 	bl	8000b80 <__aeabi_d2iz>
 8004168:	4680      	mov	r8, r0
 800416a:	f7fc f9fb 	bl	8000564 <__aeabi_i2d>
 800416e:	460b      	mov	r3, r1
 8004170:	4602      	mov	r2, r0
 8004172:	4629      	mov	r1, r5
 8004174:	4620      	mov	r0, r4
 8004176:	f7fc f8a7 	bl	80002c8 <__aeabi_dsub>
 800417a:	464b      	mov	r3, r9
 800417c:	2b00      	cmp	r3, #0
 800417e:	4606      	mov	r6, r0
 8004180:	460f      	mov	r7, r1
 8004182:	f340 8099 	ble.w	80042b8 <__kernel_rem_pio2+0x2f8>
 8004186:	9a01      	ldr	r2, [sp, #4]
 8004188:	a90c      	add	r1, sp, #48	; 0x30
 800418a:	3a01      	subs	r2, #1
 800418c:	f1c9 0318 	rsb	r3, r9, #24
 8004190:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8004194:	fa45 f103 	asr.w	r1, r5, r3
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	1aeb      	subs	r3, r5, r3
 800419e:	f1c9 0517 	rsb	r5, r9, #23
 80041a2:	a80c      	add	r0, sp, #48	; 0x30
 80041a4:	fa43 f505 	asr.w	r5, r3, r5
 80041a8:	2d00      	cmp	r5, #0
 80041aa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80041ae:	4488      	add	r8, r1
 80041b0:	f300 808c 	bgt.w	80042cc <__kernel_rem_pio2+0x30c>
 80041b4:	2200      	movs	r2, #0
 80041b6:	2300      	movs	r3, #0
 80041b8:	4630      	mov	r0, r6
 80041ba:	4639      	mov	r1, r7
 80041bc:	f7fc fcae 	bl	8000b1c <__aeabi_dcmpeq>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	f000 829c 	beq.w	80046fe <__kernel_rem_pio2+0x73e>
 80041c6:	9b01      	ldr	r3, [sp, #4]
 80041c8:	9a05      	ldr	r2, [sp, #20]
 80041ca:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 80041ce:	454a      	cmp	r2, r9
 80041d0:	dc10      	bgt.n	80041f4 <__kernel_rem_pio2+0x234>
 80041d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041d6:	aa0c      	add	r2, sp, #48	; 0x30
 80041d8:	3b01      	subs	r3, #1
 80041da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80041dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80041e0:	2200      	movs	r2, #0
 80041e2:	f853 1904 	ldr.w	r1, [r3], #-4
 80041e6:	4283      	cmp	r3, r0
 80041e8:	ea42 0201 	orr.w	r2, r2, r1
 80041ec:	d1f9      	bne.n	80041e2 <__kernel_rem_pio2+0x222>
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	f040 80e5 	bne.w	80043be <__kernel_rem_pio2+0x3fe>
 80041f4:	9b05      	ldr	r3, [sp, #20]
 80041f6:	aa0c      	add	r2, sp, #48	; 0x30
 80041f8:	3b01      	subs	r3, #1
 80041fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 80ce 	bne.w	80043a0 <__kernel_rem_pio2+0x3e0>
 8004204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004206:	2301      	movs	r3, #1
 8004208:	f852 1904 	ldr.w	r1, [r2], #-4
 800420c:	3301      	adds	r3, #1
 800420e:	2900      	cmp	r1, #0
 8004210:	d0fa      	beq.n	8004208 <__kernel_rem_pio2+0x248>
 8004212:	9901      	ldr	r1, [sp, #4]
 8004214:	1c4a      	adds	r2, r1, #1
 8004216:	18cb      	adds	r3, r1, r3
 8004218:	9302      	str	r3, [sp, #8]
 800421a:	4691      	mov	r9, r2
 800421c:	9b07      	ldr	r3, [sp, #28]
 800421e:	9908      	ldr	r1, [sp, #32]
 8004220:	eb02 0a03 	add.w	sl, r2, r3
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	440b      	add	r3, r1
 8004228:	461d      	mov	r5, r3
 800422a:	ab20      	add	r3, sp, #128	; 0x80
 800422c:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 8004230:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004234:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004236:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800423a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800423e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 800424a:	f7fc f98b 	bl	8000564 <__aeabi_i2d>
 800424e:	9b03      	ldr	r3, [sp, #12]
 8004250:	46a8      	mov	r8, r5
 8004252:	2b00      	cmp	r3, #0
 8004254:	e8e8 0102 	strd	r0, r1, [r8], #8
 8004258:	db20      	blt.n	800429c <__kernel_rem_pio2+0x2dc>
 800425a:	3d08      	subs	r5, #8
 800425c:	9c04      	ldr	r4, [sp, #16]
 800425e:	2600      	movs	r6, #0
 8004260:	2700      	movs	r7, #0
 8004262:	e001      	b.n	8004268 <__kernel_rem_pio2+0x2a8>
 8004264:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8004268:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800426c:	f7fc f9e8 	bl	8000640 <__aeabi_dmul>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4630      	mov	r0, r6
 8004276:	4639      	mov	r1, r7
 8004278:	f7fc f828 	bl	80002cc <__adddf3>
 800427c:	455c      	cmp	r4, fp
 800427e:	4606      	mov	r6, r0
 8004280:	460f      	mov	r7, r1
 8004282:	d1ef      	bne.n	8004264 <__kernel_rem_pio2+0x2a4>
 8004284:	9b01      	ldr	r3, [sp, #4]
 8004286:	e8e3 6702 	strd	r6, r7, [r3], #8
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	9b02      	ldr	r3, [sp, #8]
 800428e:	f109 0901 	add.w	r9, r9, #1
 8004292:	4599      	cmp	r9, r3
 8004294:	4645      	mov	r5, r8
 8004296:	ddd6      	ble.n	8004246 <__kernel_rem_pio2+0x286>
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	e715      	b.n	80040c8 <__kernel_rem_pio2+0x108>
 800429c:	2600      	movs	r6, #0
 800429e:	2700      	movs	r7, #0
 80042a0:	e7f0      	b.n	8004284 <__kernel_rem_pio2+0x2c4>
 80042a2:	bf00      	nop
 80042a4:	080050a0 	.word	0x080050a0
 80042a8:	2aaaaaab 	.word	0x2aaaaaab
 80042ac:	3e700000 	.word	0x3e700000
 80042b0:	41700000 	.word	0x41700000
 80042b4:	40200000 	.word	0x40200000
 80042b8:	d169      	bne.n	800438e <__kernel_rem_pio2+0x3ce>
 80042ba:	9b01      	ldr	r3, [sp, #4]
 80042bc:	aa0c      	add	r2, sp, #48	; 0x30
 80042be:	3b01      	subs	r3, #1
 80042c0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80042c4:	15ed      	asrs	r5, r5, #23
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	f77f af74 	ble.w	80041b4 <__kernel_rem_pio2+0x1f4>
 80042cc:	9b01      	ldr	r3, [sp, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f108 0801 	add.w	r8, r8, #1
 80042d4:	f340 8211 	ble.w	80046fa <__kernel_rem_pio2+0x73a>
 80042d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80042da:	2c00      	cmp	r4, #0
 80042dc:	d13a      	bne.n	8004354 <__kernel_rem_pio2+0x394>
 80042de:	9b01      	ldr	r3, [sp, #4]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d009      	beq.n	80042f8 <__kernel_rem_pio2+0x338>
 80042e4:	a90c      	add	r1, sp, #48	; 0x30
 80042e6:	2201      	movs	r2, #1
 80042e8:	f851 4f04 	ldr.w	r4, [r1, #4]!
 80042ec:	1c53      	adds	r3, r2, #1
 80042ee:	bb9c      	cbnz	r4, 8004358 <__kernel_rem_pio2+0x398>
 80042f0:	461a      	mov	r2, r3
 80042f2:	9b01      	ldr	r3, [sp, #4]
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d1f7      	bne.n	80042e8 <__kernel_rem_pio2+0x328>
 80042f8:	9b06      	ldr	r3, [sp, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	dd0e      	ble.n	800431c <__kernel_rem_pio2+0x35c>
 80042fe:	2b01      	cmp	r3, #1
 8004300:	f000 811b 	beq.w	800453a <__kernel_rem_pio2+0x57a>
 8004304:	2b02      	cmp	r3, #2
 8004306:	d109      	bne.n	800431c <__kernel_rem_pio2+0x35c>
 8004308:	9b01      	ldr	r3, [sp, #4]
 800430a:	1e5a      	subs	r2, r3, #1
 800430c:	ab0c      	add	r3, sp, #48	; 0x30
 800430e:	a90c      	add	r1, sp, #48	; 0x30
 8004310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004314:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004318:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800431c:	2d02      	cmp	r5, #2
 800431e:	f47f af49 	bne.w	80041b4 <__kernel_rem_pio2+0x1f4>
 8004322:	4632      	mov	r2, r6
 8004324:	463b      	mov	r3, r7
 8004326:	2000      	movs	r0, #0
 8004328:	4997      	ldr	r1, [pc, #604]	; (8004588 <__kernel_rem_pio2+0x5c8>)
 800432a:	f7fb ffcd 	bl	80002c8 <__aeabi_dsub>
 800432e:	4606      	mov	r6, r0
 8004330:	460f      	mov	r7, r1
 8004332:	2c00      	cmp	r4, #0
 8004334:	f43f af3e 	beq.w	80041b4 <__kernel_rem_pio2+0x1f4>
 8004338:	9a06      	ldr	r2, [sp, #24]
 800433a:	4993      	ldr	r1, [pc, #588]	; (8004588 <__kernel_rem_pio2+0x5c8>)
 800433c:	2000      	movs	r0, #0
 800433e:	f000 fba7 	bl	8004a90 <scalbn>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4630      	mov	r0, r6
 8004348:	4639      	mov	r1, r7
 800434a:	f7fb ffbd 	bl	80002c8 <__aeabi_dsub>
 800434e:	4606      	mov	r6, r0
 8004350:	460f      	mov	r7, r1
 8004352:	e72f      	b.n	80041b4 <__kernel_rem_pio2+0x1f4>
 8004354:	2301      	movs	r3, #1
 8004356:	2200      	movs	r2, #0
 8004358:	a90c      	add	r1, sp, #48	; 0x30
 800435a:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 800435e:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 8004362:	9901      	ldr	r1, [sp, #4]
 8004364:	4299      	cmp	r1, r3
 8004366:	dd10      	ble.n	800438a <__kernel_rem_pio2+0x3ca>
 8004368:	aa0c      	add	r2, sp, #48	; 0x30
 800436a:	a80c      	add	r0, sp, #48	; 0x30
 800436c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004370:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004374:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004378:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800437c:	e000      	b.n	8004380 <__kernel_rem_pio2+0x3c0>
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	1a8a      	subs	r2, r1, r2
 8004382:	f843 2b04 	str.w	r2, [r3], #4
 8004386:	4283      	cmp	r3, r0
 8004388:	d1f9      	bne.n	800437e <__kernel_rem_pio2+0x3be>
 800438a:	2401      	movs	r4, #1
 800438c:	e7b4      	b.n	80042f8 <__kernel_rem_pio2+0x338>
 800438e:	2200      	movs	r2, #0
 8004390:	4b7e      	ldr	r3, [pc, #504]	; (800458c <__kernel_rem_pio2+0x5cc>)
 8004392:	f7fc fbe1 	bl	8000b58 <__aeabi_dcmpge>
 8004396:	2800      	cmp	r0, #0
 8004398:	f040 80da 	bne.w	8004550 <__kernel_rem_pio2+0x590>
 800439c:	4605      	mov	r5, r0
 800439e:	e709      	b.n	80041b4 <__kernel_rem_pio2+0x1f4>
 80043a0:	9b01      	ldr	r3, [sp, #4]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	4691      	mov	r9, r2
 80043a6:	9202      	str	r2, [sp, #8]
 80043a8:	e738      	b.n	800421c <__kernel_rem_pio2+0x25c>
 80043aa:	2600      	movs	r6, #0
 80043ac:	2700      	movs	r7, #0
 80043ae:	e8e9 6702 	strd	r6, r7, [r9], #8
 80043b2:	45d9      	cmp	r9, fp
 80043b4:	f10a 0a08 	add.w	sl, sl, #8
 80043b8:	f47f ae59 	bne.w	800406e <__kernel_rem_pio2+0xae>
 80043bc:	e675      	b.n	80040aa <__kernel_rem_pio2+0xea>
 80043be:	ab0c      	add	r3, sp, #48	; 0x30
 80043c0:	9a06      	ldr	r2, [sp, #24]
 80043c2:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80043c6:	f8cd 801c 	str.w	r8, [sp, #28]
 80043ca:	3a18      	subs	r2, #24
 80043cc:	9504      	str	r5, [sp, #16]
 80043ce:	9206      	str	r2, [sp, #24]
 80043d0:	b973      	cbnz	r3, 80043f0 <__kernel_rem_pio2+0x430>
 80043d2:	9b01      	ldr	r3, [sp, #4]
 80043d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043d8:	3b02      	subs	r3, #2
 80043da:	a90c      	add	r1, sp, #48	; 0x30
 80043dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80043e0:	f853 1904 	ldr.w	r1, [r3], #-4
 80043e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80043e8:	3a18      	subs	r2, #24
 80043ea:	2900      	cmp	r1, #0
 80043ec:	d0f8      	beq.n	80043e0 <__kernel_rem_pio2+0x420>
 80043ee:	9206      	str	r2, [sp, #24]
 80043f0:	9a06      	ldr	r2, [sp, #24]
 80043f2:	4965      	ldr	r1, [pc, #404]	; (8004588 <__kernel_rem_pio2+0x5c8>)
 80043f4:	2000      	movs	r0, #0
 80043f6:	f000 fb4b 	bl	8004a90 <scalbn>
 80043fa:	f1b9 0f00 	cmp.w	r9, #0
 80043fe:	4604      	mov	r4, r0
 8004400:	460d      	mov	r5, r1
 8004402:	f2c0 81df 	blt.w	80047c4 <__kernel_rem_pio2+0x804>
 8004406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800440a:	aa70      	add	r2, sp, #448	; 0x1c0
 800440c:	eb02 0803 	add.w	r8, r2, r3
 8004410:	9306      	str	r3, [sp, #24]
 8004412:	f109 0601 	add.w	r6, r9, #1
 8004416:	ab0c      	add	r3, sp, #48	; 0x30
 8004418:	f8df b174 	ldr.w	fp, [pc, #372]	; 8004590 <__kernel_rem_pio2+0x5d0>
 800441c:	f108 0708 	add.w	r7, r8, #8
 8004420:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8004424:	f04f 0a00 	mov.w	sl, #0
 8004428:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 800442c:	f7fc f89a 	bl	8000564 <__aeabi_i2d>
 8004430:	4622      	mov	r2, r4
 8004432:	462b      	mov	r3, r5
 8004434:	f7fc f904 	bl	8000640 <__aeabi_dmul>
 8004438:	465b      	mov	r3, fp
 800443a:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800443e:	4652      	mov	r2, sl
 8004440:	4620      	mov	r0, r4
 8004442:	4629      	mov	r1, r5
 8004444:	f7fc f8fc 	bl	8000640 <__aeabi_dmul>
 8004448:	ab0c      	add	r3, sp, #48	; 0x30
 800444a:	429e      	cmp	r6, r3
 800444c:	4604      	mov	r4, r0
 800444e:	460d      	mov	r5, r1
 8004450:	d1ea      	bne.n	8004428 <__kernel_rem_pio2+0x468>
 8004452:	f8cd 9008 	str.w	r9, [sp, #8]
 8004456:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800445a:	ab48      	add	r3, sp, #288	; 0x120
 800445c:	f1b9 0f00 	cmp.w	r9, #0
 8004460:	9303      	str	r3, [sp, #12]
 8004462:	46c3      	mov	fp, r8
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	f04f 0a00 	mov.w	sl, #0
 800446a:	db2b      	blt.n	80044c4 <__kernel_rem_pio2+0x504>
 800446c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8004594 <__kernel_rem_pio2+0x5d4>
 8004470:	465d      	mov	r5, fp
 8004472:	a343      	add	r3, pc, #268	; (adr r3, 8004580 <__kernel_rem_pio2+0x5c0>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	2600      	movs	r6, #0
 800447a:	2700      	movs	r7, #0
 800447c:	2400      	movs	r4, #0
 800447e:	e003      	b.n	8004488 <__kernel_rem_pio2+0x4c8>
 8004480:	4554      	cmp	r4, sl
 8004482:	dc10      	bgt.n	80044a6 <__kernel_rem_pio2+0x4e6>
 8004484:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004488:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800448c:	f7fc f8d8 	bl	8000640 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4630      	mov	r0, r6
 8004496:	4639      	mov	r1, r7
 8004498:	f7fb ff18 	bl	80002cc <__adddf3>
 800449c:	3401      	adds	r4, #1
 800449e:	45a1      	cmp	r9, r4
 80044a0:	4606      	mov	r6, r0
 80044a2:	460f      	mov	r7, r1
 80044a4:	daec      	bge.n	8004480 <__kernel_rem_pio2+0x4c0>
 80044a6:	9b01      	ldr	r3, [sp, #4]
 80044a8:	9a02      	ldr	r2, [sp, #8]
 80044aa:	e8e3 6702 	strd	r6, r7, [r3], #8
 80044ae:	4592      	cmp	sl, r2
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	f1ab 0b08 	sub.w	fp, fp, #8
 80044b6:	f10a 0301 	add.w	r3, sl, #1
 80044ba:	d006      	beq.n	80044ca <__kernel_rem_pio2+0x50a>
 80044bc:	f1b9 0f00 	cmp.w	r9, #0
 80044c0:	469a      	mov	sl, r3
 80044c2:	dad3      	bge.n	800446c <__kernel_rem_pio2+0x4ac>
 80044c4:	2600      	movs	r6, #0
 80044c6:	2700      	movs	r7, #0
 80044c8:	e7ed      	b.n	80044a6 <__kernel_rem_pio2+0x4e6>
 80044ca:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80044cc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d82b      	bhi.n	800452c <__kernel_rem_pio2+0x56c>
 80044d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044d8:	00e000f1 	.word	0x00e000f1
 80044dc:	006200e0 	.word	0x006200e0
 80044e0:	2500      	movs	r5, #0
 80044e2:	462c      	mov	r4, r5
 80044e4:	4623      	mov	r3, r4
 80044e6:	462a      	mov	r2, r5
 80044e8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80044ec:	f7fb feec 	bl	80002c8 <__aeabi_dsub>
 80044f0:	9b04      	ldr	r3, [sp, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 813f 	bne.w	8004776 <__kernel_rem_pio2+0x7b6>
 80044f8:	4623      	mov	r3, r4
 80044fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80044fc:	462a      	mov	r2, r5
 80044fe:	f1b9 0f00 	cmp.w	r9, #0
 8004502:	e9c4 2300 	strd	r2, r3, [r4]
 8004506:	dd0c      	ble.n	8004522 <__kernel_rem_pio2+0x562>
 8004508:	ad48      	add	r5, sp, #288	; 0x120
 800450a:	2401      	movs	r4, #1
 800450c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8004510:	3401      	adds	r4, #1
 8004512:	f7fb fedb 	bl	80002cc <__adddf3>
 8004516:	45a1      	cmp	r9, r4
 8004518:	daf8      	bge.n	800450c <__kernel_rem_pio2+0x54c>
 800451a:	9b04      	ldr	r3, [sp, #16]
 800451c:	b10b      	cbz	r3, 8004522 <__kernel_rem_pio2+0x562>
 800451e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004522:	460b      	mov	r3, r1
 8004524:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004526:	4602      	mov	r2, r0
 8004528:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800452c:	9b07      	ldr	r3, [sp, #28]
 800452e:	f003 0007 	and.w	r0, r3, #7
 8004532:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453a:	9b01      	ldr	r3, [sp, #4]
 800453c:	1e5a      	subs	r2, r3, #1
 800453e:	ab0c      	add	r3, sp, #48	; 0x30
 8004540:	a90c      	add	r1, sp, #48	; 0x30
 8004542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004546:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800454a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800454e:	e6e5      	b.n	800431c <__kernel_rem_pio2+0x35c>
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f108 0801 	add.w	r8, r8, #1
 8004558:	bfc8      	it	gt
 800455a:	2502      	movgt	r5, #2
 800455c:	f73f aebc 	bgt.w	80042d8 <__kernel_rem_pio2+0x318>
 8004560:	4632      	mov	r2, r6
 8004562:	463b      	mov	r3, r7
 8004564:	2000      	movs	r0, #0
 8004566:	4908      	ldr	r1, [pc, #32]	; (8004588 <__kernel_rem_pio2+0x5c8>)
 8004568:	f7fb feae 	bl	80002c8 <__aeabi_dsub>
 800456c:	2502      	movs	r5, #2
 800456e:	4606      	mov	r6, r0
 8004570:	460f      	mov	r7, r1
 8004572:	e61f      	b.n	80041b4 <__kernel_rem_pio2+0x1f4>
 8004574:	2100      	movs	r1, #0
 8004576:	f06f 0317 	mvn.w	r3, #23
 800457a:	9107      	str	r1, [sp, #28]
 800457c:	e53e      	b.n	8003ffc <__kernel_rem_pio2+0x3c>
 800457e:	bf00      	nop
 8004580:	40000000 	.word	0x40000000
 8004584:	3ff921fb 	.word	0x3ff921fb
 8004588:	3ff00000 	.word	0x3ff00000
 800458c:	3fe00000 	.word	0x3fe00000
 8004590:	3e700000 	.word	0x3e700000
 8004594:	08005068 	.word	0x08005068
 8004598:	ab48      	add	r3, sp, #288	; 0x120
 800459a:	9303      	str	r3, [sp, #12]
 800459c:	f1b9 0f00 	cmp.w	r9, #0
 80045a0:	f340 8123 	ble.w	80047ea <__kernel_rem_pio2+0x82a>
 80045a4:	9a03      	ldr	r2, [sp, #12]
 80045a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045aa:	eb02 0803 	add.w	r8, r2, r3
 80045ae:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	e958 6702 	ldrd	r6, r7, [r8, #-8]
 80045b8:	4652      	mov	r2, sl
 80045ba:	465b      	mov	r3, fp
 80045bc:	4630      	mov	r0, r6
 80045be:	4639      	mov	r1, r7
 80045c0:	f7fb fe84 	bl	80002cc <__adddf3>
 80045c4:	4604      	mov	r4, r0
 80045c6:	460d      	mov	r5, r1
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4630      	mov	r0, r6
 80045ce:	4639      	mov	r1, r7
 80045d0:	f7fb fe7a 	bl	80002c8 <__aeabi_dsub>
 80045d4:	465b      	mov	r3, fp
 80045d6:	4652      	mov	r2, sl
 80045d8:	f7fb fe78 	bl	80002cc <__adddf3>
 80045dc:	e9c8 0100 	strd	r0, r1, [r8]
 80045e0:	e968 4502 	strd	r4, r5, [r8, #-8]!
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	4543      	cmp	r3, r8
 80045e8:	46a2      	mov	sl, r4
 80045ea:	46ab      	mov	fp, r5
 80045ec:	d1e2      	bne.n	80045b4 <__kernel_rem_pio2+0x5f4>
 80045ee:	f1b9 0f01 	cmp.w	r9, #1
 80045f2:	f340 80fa 	ble.w	80047ea <__kernel_rem_pio2+0x82a>
 80045f6:	9b01      	ldr	r3, [sp, #4]
 80045f8:	9a03      	ldr	r2, [sp, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004600:	461c      	mov	r4, r3
 8004602:	461d      	mov	r5, r3
 8004604:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004608:	4652      	mov	r2, sl
 800460a:	465b      	mov	r3, fp
 800460c:	4640      	mov	r0, r8
 800460e:	4649      	mov	r1, r9
 8004610:	f7fb fe5c 	bl	80002cc <__adddf3>
 8004614:	4606      	mov	r6, r0
 8004616:	460f      	mov	r7, r1
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4640      	mov	r0, r8
 800461e:	4649      	mov	r1, r9
 8004620:	f7fb fe52 	bl	80002c8 <__aeabi_dsub>
 8004624:	465b      	mov	r3, fp
 8004626:	4652      	mov	r2, sl
 8004628:	f7fb fe50 	bl	80002cc <__adddf3>
 800462c:	e9c5 0100 	strd	r0, r1, [r5]
 8004630:	e965 6702 	strd	r6, r7, [r5, #-8]!
 8004634:	ab4a      	add	r3, sp, #296	; 0x128
 8004636:	42ab      	cmp	r3, r5
 8004638:	46b2      	mov	sl, r6
 800463a:	46bb      	mov	fp, r7
 800463c:	d1e2      	bne.n	8004604 <__kernel_rem_pio2+0x644>
 800463e:	9903      	ldr	r1, [sp, #12]
 8004640:	2300      	movs	r3, #0
 8004642:	3408      	adds	r4, #8
 8004644:	461a      	mov	r2, r3
 8004646:	f101 0510 	add.w	r5, r1, #16
 800464a:	4618      	mov	r0, r3
 800464c:	4611      	mov	r1, r2
 800464e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004652:	f7fb fe3b 	bl	80002cc <__adddf3>
 8004656:	42a5      	cmp	r5, r4
 8004658:	4603      	mov	r3, r0
 800465a:	460a      	mov	r2, r1
 800465c:	d1f5      	bne.n	800464a <__kernel_rem_pio2+0x68a>
 800465e:	9903      	ldr	r1, [sp, #12]
 8004660:	e9d1 8c00 	ldrd	r8, ip, [r1]
 8004664:	e9d1 e902 	ldrd	lr, r9, [r1, #8]
 8004668:	9904      	ldr	r1, [sp, #16]
 800466a:	2900      	cmp	r1, #0
 800466c:	f040 808d 	bne.w	800478a <__kernel_rem_pio2+0x7ca>
 8004670:	4618      	mov	r0, r3
 8004672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004674:	4646      	mov	r6, r8
 8004676:	4674      	mov	r4, lr
 8004678:	4667      	mov	r7, ip
 800467a:	464d      	mov	r5, r9
 800467c:	4611      	mov	r1, r2
 800467e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004682:	e9c3 6700 	strd	r6, r7, [r3]
 8004686:	e9c3 4502 	strd	r4, r5, [r3, #8]
 800468a:	9b07      	ldr	r3, [sp, #28]
 800468c:	f003 0007 	and.w	r0, r3, #7
 8004690:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004698:	9e06      	ldr	r6, [sp, #24]
 800469a:	9f03      	ldr	r7, [sp, #12]
 800469c:	3608      	adds	r6, #8
 800469e:	2500      	movs	r5, #0
 80046a0:	443e      	add	r6, r7
 80046a2:	462c      	mov	r4, r5
 80046a4:	4628      	mov	r0, r5
 80046a6:	4621      	mov	r1, r4
 80046a8:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80046ac:	f7fb fe0e 	bl	80002cc <__adddf3>
 80046b0:	42b7      	cmp	r7, r6
 80046b2:	4605      	mov	r5, r0
 80046b4:	460c      	mov	r4, r1
 80046b6:	d1f5      	bne.n	80046a4 <__kernel_rem_pio2+0x6e4>
 80046b8:	e714      	b.n	80044e4 <__kernel_rem_pio2+0x524>
 80046ba:	9c06      	ldr	r4, [sp, #24]
 80046bc:	9d03      	ldr	r5, [sp, #12]
 80046be:	3408      	adds	r4, #8
 80046c0:	2200      	movs	r2, #0
 80046c2:	442c      	add	r4, r5
 80046c4:	4613      	mov	r3, r2
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80046ce:	f7fb fdfd 	bl	80002cc <__adddf3>
 80046d2:	42a5      	cmp	r5, r4
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	d1f5      	bne.n	80046c6 <__kernel_rem_pio2+0x706>
 80046da:	9904      	ldr	r1, [sp, #16]
 80046dc:	b109      	cbz	r1, 80046e2 <__kernel_rem_pio2+0x722>
 80046de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046e2:	4619      	mov	r1, r3
 80046e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046e6:	4610      	mov	r0, r2
 80046e8:	e9c3 0100 	strd	r0, r1, [r3]
 80046ec:	9b07      	ldr	r3, [sp, #28]
 80046ee:	f003 0007 	and.w	r0, r3, #7
 80046f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80046f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fa:	2400      	movs	r4, #0
 80046fc:	e5fc      	b.n	80042f8 <__kernel_rem_pio2+0x338>
 80046fe:	4639      	mov	r1, r7
 8004700:	9f06      	ldr	r7, [sp, #24]
 8004702:	9504      	str	r5, [sp, #16]
 8004704:	427a      	negs	r2, r7
 8004706:	4630      	mov	r0, r6
 8004708:	f8cd 801c 	str.w	r8, [sp, #28]
 800470c:	f000 f9c0 	bl	8004a90 <scalbn>
 8004710:	2200      	movs	r2, #0
 8004712:	4b37      	ldr	r3, [pc, #220]	; (80047f0 <__kernel_rem_pio2+0x830>)
 8004714:	4604      	mov	r4, r0
 8004716:	460d      	mov	r5, r1
 8004718:	f7fc fa1e 	bl	8000b58 <__aeabi_dcmpge>
 800471c:	b308      	cbz	r0, 8004762 <__kernel_rem_pio2+0x7a2>
 800471e:	2200      	movs	r2, #0
 8004720:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <__kernel_rem_pio2+0x834>)
 8004722:	4620      	mov	r0, r4
 8004724:	4629      	mov	r1, r5
 8004726:	f7fb ff8b 	bl	8000640 <__aeabi_dmul>
 800472a:	f7fc fa29 	bl	8000b80 <__aeabi_d2iz>
 800472e:	4606      	mov	r6, r0
 8004730:	f7fb ff18 	bl	8000564 <__aeabi_i2d>
 8004734:	2200      	movs	r2, #0
 8004736:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <__kernel_rem_pio2+0x830>)
 8004738:	f7fb ff82 	bl	8000640 <__aeabi_dmul>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb fdc0 	bl	80002c8 <__aeabi_dsub>
 8004748:	f7fc fa1a 	bl	8000b80 <__aeabi_d2iz>
 800474c:	9b01      	ldr	r3, [sp, #4]
 800474e:	aa0c      	add	r2, sp, #48	; 0x30
 8004750:	f103 0901 	add.w	r9, r3, #1
 8004754:	3718      	adds	r7, #24
 8004756:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800475a:	9706      	str	r7, [sp, #24]
 800475c:	f842 6029 	str.w	r6, [r2, r9, lsl #2]
 8004760:	e646      	b.n	80043f0 <__kernel_rem_pio2+0x430>
 8004762:	4620      	mov	r0, r4
 8004764:	4629      	mov	r1, r5
 8004766:	f7fc fa0b 	bl	8000b80 <__aeabi_d2iz>
 800476a:	9b01      	ldr	r3, [sp, #4]
 800476c:	aa0c      	add	r2, sp, #48	; 0x30
 800476e:	4699      	mov	r9, r3
 8004770:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8004774:	e63c      	b.n	80043f0 <__kernel_rem_pio2+0x430>
 8004776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004778:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800477c:	f1b9 0f00 	cmp.w	r9, #0
 8004780:	e9c3 5400 	strd	r5, r4, [r3]
 8004784:	f73f aec0 	bgt.w	8004508 <__kernel_rem_pio2+0x548>
 8004788:	e6c9      	b.n	800451e <__kernel_rem_pio2+0x55e>
 800478a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	9b07      	ldr	r3, [sp, #28]
 8004790:	f8c4 8000 	str.w	r8, [r4]
 8004794:	f10c 4000 	add.w	r0, ip, #2147483648	; 0x80000000
 8004798:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800479c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80047a0:	6060      	str	r0, [r4, #4]
 80047a2:	f003 0007 	and.w	r0, r3, #7
 80047a6:	60e1      	str	r1, [r4, #12]
 80047a8:	6162      	str	r2, [r4, #20]
 80047aa:	f8c4 e008 	str.w	lr, [r4, #8]
 80047ae:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80047b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b6:	f1a6 0308 	sub.w	r3, r6, #8
 80047ba:	9304      	str	r3, [sp, #16]
 80047bc:	9b08      	ldr	r3, [sp, #32]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	e472      	b.n	80040aa <__kernel_rem_pio2+0xea>
 80047c4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	f63f aeb0 	bhi.w	800452c <__kernel_rem_pio2+0x56c>
 80047cc:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <__kernel_rem_pio2+0x814>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	080044e1 	.word	0x080044e1
 80047dc:	080044e1 	.word	0x080044e1
 80047e0:	08004599 	.word	0x08004599
 80047e4:	2200      	movs	r2, #0
 80047e6:	4613      	mov	r3, r2
 80047e8:	e777      	b.n	80046da <__kernel_rem_pio2+0x71a>
 80047ea:	2300      	movs	r3, #0
 80047ec:	461a      	mov	r2, r3
 80047ee:	e736      	b.n	800465e <__kernel_rem_pio2+0x69e>
 80047f0:	41700000 	.word	0x41700000
 80047f4:	3e700000 	.word	0x3e700000
	...

08004800 <__kernel_sin>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004808:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800480c:	b085      	sub	sp, #20
 800480e:	460c      	mov	r4, r1
 8004810:	4690      	mov	r8, r2
 8004812:	4699      	mov	r9, r3
 8004814:	4605      	mov	r5, r0
 8004816:	da04      	bge.n	8004822 <__kernel_sin+0x22>
 8004818:	f7fc f9b2 	bl	8000b80 <__aeabi_d2iz>
 800481c:	2800      	cmp	r0, #0
 800481e:	f000 8085 	beq.w	800492c <__kernel_sin+0x12c>
 8004822:	462a      	mov	r2, r5
 8004824:	4623      	mov	r3, r4
 8004826:	4628      	mov	r0, r5
 8004828:	4621      	mov	r1, r4
 800482a:	f7fb ff09 	bl	8000640 <__aeabi_dmul>
 800482e:	4606      	mov	r6, r0
 8004830:	460f      	mov	r7, r1
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4628      	mov	r0, r5
 8004838:	4621      	mov	r1, r4
 800483a:	f7fb ff01 	bl	8000640 <__aeabi_dmul>
 800483e:	a33e      	add	r3, pc, #248	; (adr r3, 8004938 <__kernel_sin+0x138>)
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	4682      	mov	sl, r0
 8004846:	468b      	mov	fp, r1
 8004848:	4630      	mov	r0, r6
 800484a:	4639      	mov	r1, r7
 800484c:	f7fb fef8 	bl	8000640 <__aeabi_dmul>
 8004850:	a33b      	add	r3, pc, #236	; (adr r3, 8004940 <__kernel_sin+0x140>)
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f7fb fd37 	bl	80002c8 <__aeabi_dsub>
 800485a:	4632      	mov	r2, r6
 800485c:	463b      	mov	r3, r7
 800485e:	f7fb feef 	bl	8000640 <__aeabi_dmul>
 8004862:	a339      	add	r3, pc, #228	; (adr r3, 8004948 <__kernel_sin+0x148>)
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	f7fb fd30 	bl	80002cc <__adddf3>
 800486c:	4632      	mov	r2, r6
 800486e:	463b      	mov	r3, r7
 8004870:	f7fb fee6 	bl	8000640 <__aeabi_dmul>
 8004874:	a336      	add	r3, pc, #216	; (adr r3, 8004950 <__kernel_sin+0x150>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f7fb fd25 	bl	80002c8 <__aeabi_dsub>
 800487e:	4632      	mov	r2, r6
 8004880:	463b      	mov	r3, r7
 8004882:	f7fb fedd 	bl	8000640 <__aeabi_dmul>
 8004886:	a334      	add	r3, pc, #208	; (adr r3, 8004958 <__kernel_sin+0x158>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f7fb fd1e 	bl	80002cc <__adddf3>
 8004890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004892:	e9cd 0100 	strd	r0, r1, [sp]
 8004896:	b39b      	cbz	r3, 8004900 <__kernel_sin+0x100>
 8004898:	2200      	movs	r2, #0
 800489a:	4b33      	ldr	r3, [pc, #204]	; (8004968 <__kernel_sin+0x168>)
 800489c:	4640      	mov	r0, r8
 800489e:	4649      	mov	r1, r9
 80048a0:	f7fb fece 	bl	8000640 <__aeabi_dmul>
 80048a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048ac:	4650      	mov	r0, sl
 80048ae:	4659      	mov	r1, fp
 80048b0:	f7fb fec6 	bl	8000640 <__aeabi_dmul>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048bc:	f7fb fd04 	bl	80002c8 <__aeabi_dsub>
 80048c0:	4632      	mov	r2, r6
 80048c2:	463b      	mov	r3, r7
 80048c4:	f7fb febc 	bl	8000640 <__aeabi_dmul>
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	f7fb fcfc 	bl	80002c8 <__aeabi_dsub>
 80048d0:	a323      	add	r3, pc, #140	; (adr r3, 8004960 <__kernel_sin+0x160>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	4606      	mov	r6, r0
 80048d8:	460f      	mov	r7, r1
 80048da:	4650      	mov	r0, sl
 80048dc:	4659      	mov	r1, fp
 80048de:	f7fb feaf 	bl	8000640 <__aeabi_dmul>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4630      	mov	r0, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	f7fb fcef 	bl	80002cc <__adddf3>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4628      	mov	r0, r5
 80048f4:	4621      	mov	r1, r4
 80048f6:	f7fb fce7 	bl	80002c8 <__aeabi_dsub>
 80048fa:	b005      	add	sp, #20
 80048fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4630      	mov	r0, r6
 8004906:	4639      	mov	r1, r7
 8004908:	f7fb fe9a 	bl	8000640 <__aeabi_dmul>
 800490c:	a314      	add	r3, pc, #80	; (adr r3, 8004960 <__kernel_sin+0x160>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb fcd9 	bl	80002c8 <__aeabi_dsub>
 8004916:	4652      	mov	r2, sl
 8004918:	465b      	mov	r3, fp
 800491a:	f7fb fe91 	bl	8000640 <__aeabi_dmul>
 800491e:	462a      	mov	r2, r5
 8004920:	4623      	mov	r3, r4
 8004922:	f7fb fcd3 	bl	80002cc <__adddf3>
 8004926:	b005      	add	sp, #20
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	4628      	mov	r0, r5
 800492e:	4621      	mov	r1, r4
 8004930:	b005      	add	sp, #20
 8004932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004936:	bf00      	nop
 8004938:	5acfd57c 	.word	0x5acfd57c
 800493c:	3de5d93a 	.word	0x3de5d93a
 8004940:	8a2b9ceb 	.word	0x8a2b9ceb
 8004944:	3e5ae5e6 	.word	0x3e5ae5e6
 8004948:	57b1fe7d 	.word	0x57b1fe7d
 800494c:	3ec71de3 	.word	0x3ec71de3
 8004950:	19c161d5 	.word	0x19c161d5
 8004954:	3f2a01a0 	.word	0x3f2a01a0
 8004958:	1110f8a6 	.word	0x1110f8a6
 800495c:	3f811111 	.word	0x3f811111
 8004960:	55555549 	.word	0x55555549
 8004964:	3fc55555 	.word	0x3fc55555
 8004968:	3fe00000 	.word	0x3fe00000
 800496c:	00000000 	.word	0x00000000

08004970 <fabs>:
 8004970:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004974:	4619      	mov	r1, r3
 8004976:	4770      	bx	lr
	...

08004980 <floor>:
 8004980:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004988:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800498c:	2e13      	cmp	r6, #19
 800498e:	460b      	mov	r3, r1
 8004990:	460d      	mov	r5, r1
 8004992:	4604      	mov	r4, r0
 8004994:	4607      	mov	r7, r0
 8004996:	dc31      	bgt.n	80049fc <floor+0x7c>
 8004998:	2e00      	cmp	r6, #0
 800499a:	db1f      	blt.n	80049dc <floor+0x5c>
 800499c:	4a38      	ldr	r2, [pc, #224]	; (8004a80 <floor+0x100>)
 800499e:	fa42 f806 	asr.w	r8, r2, r6
 80049a2:	ea08 0201 	and.w	r2, r8, r1
 80049a6:	4302      	orrs	r2, r0
 80049a8:	d02d      	beq.n	8004a06 <floor+0x86>
 80049aa:	a333      	add	r3, pc, #204	; (adr r3, 8004a78 <floor+0xf8>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f7fb fc8c 	bl	80002cc <__adddf3>
 80049b4:	2200      	movs	r2, #0
 80049b6:	2300      	movs	r3, #0
 80049b8:	f7fc f8d8 	bl	8000b6c <__aeabi_dcmpgt>
 80049bc:	b148      	cbz	r0, 80049d2 <floor+0x52>
 80049be:	2d00      	cmp	r5, #0
 80049c0:	da04      	bge.n	80049cc <floor+0x4c>
 80049c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049c6:	fa43 f606 	asr.w	r6, r3, r6
 80049ca:	4435      	add	r5, r6
 80049cc:	ea25 0508 	bic.w	r5, r5, r8
 80049d0:	2700      	movs	r7, #0
 80049d2:	463c      	mov	r4, r7
 80049d4:	4629      	mov	r1, r5
 80049d6:	4620      	mov	r0, r4
 80049d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049dc:	a326      	add	r3, pc, #152	; (adr r3, 8004a78 <floor+0xf8>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fc73 	bl	80002cc <__adddf3>
 80049e6:	2200      	movs	r2, #0
 80049e8:	2300      	movs	r3, #0
 80049ea:	f7fc f8bf 	bl	8000b6c <__aeabi_dcmpgt>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0ef      	beq.n	80049d2 <floor+0x52>
 80049f2:	2d00      	cmp	r5, #0
 80049f4:	db29      	blt.n	8004a4a <floor+0xca>
 80049f6:	2700      	movs	r7, #0
 80049f8:	463d      	mov	r5, r7
 80049fa:	e7ea      	b.n	80049d2 <floor+0x52>
 80049fc:	2e33      	cmp	r6, #51	; 0x33
 80049fe:	dd06      	ble.n	8004a0e <floor+0x8e>
 8004a00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004a04:	d01c      	beq.n	8004a40 <floor+0xc0>
 8004a06:	4619      	mov	r1, r3
 8004a08:	4620      	mov	r0, r4
 8004a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a0e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8004a12:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004a16:	fa28 f802 	lsr.w	r8, r8, r2
 8004a1a:	ea18 0f00 	tst.w	r8, r0
 8004a1e:	d0f2      	beq.n	8004a06 <floor+0x86>
 8004a20:	a315      	add	r3, pc, #84	; (adr r3, 8004a78 <floor+0xf8>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f7fb fc51 	bl	80002cc <__adddf3>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f7fc f89d 	bl	8000b6c <__aeabi_dcmpgt>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d0cd      	beq.n	80049d2 <floor+0x52>
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	db10      	blt.n	8004a5c <floor+0xdc>
 8004a3a:	ea27 0708 	bic.w	r7, r7, r8
 8004a3e:	e7c8      	b.n	80049d2 <floor+0x52>
 8004a40:	4602      	mov	r2, r0
 8004a42:	f7fb fc43 	bl	80002cc <__adddf3>
 8004a46:	4604      	mov	r4, r0
 8004a48:	e7de      	b.n	8004a08 <floor+0x88>
 8004a4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004a4e:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <floor+0x104>)
 8004a50:	431f      	orrs	r7, r3
 8004a52:	2f00      	cmp	r7, #0
 8004a54:	bf18      	it	ne
 8004a56:	4615      	movne	r5, r2
 8004a58:	2700      	movs	r7, #0
 8004a5a:	e7ba      	b.n	80049d2 <floor+0x52>
 8004a5c:	2e14      	cmp	r6, #20
 8004a5e:	d008      	beq.n	8004a72 <floor+0xf2>
 8004a60:	2301      	movs	r3, #1
 8004a62:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004a66:	fa03 f606 	lsl.w	r6, r3, r6
 8004a6a:	1937      	adds	r7, r6, r4
 8004a6c:	bf28      	it	cs
 8004a6e:	18ed      	addcs	r5, r5, r3
 8004a70:	e7e3      	b.n	8004a3a <floor+0xba>
 8004a72:	3501      	adds	r5, #1
 8004a74:	e7e1      	b.n	8004a3a <floor+0xba>
 8004a76:	bf00      	nop
 8004a78:	8800759c 	.word	0x8800759c
 8004a7c:	7e37e43c 	.word	0x7e37e43c
 8004a80:	000fffff 	.word	0x000fffff
 8004a84:	bff00000 	.word	0xbff00000
	...

08004a90 <scalbn>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a96:	4604      	mov	r4, r0
 8004a98:	460d      	mov	r5, r1
 8004a9a:	460e      	mov	r6, r1
 8004a9c:	4617      	mov	r7, r2
 8004a9e:	bb73      	cbnz	r3, 8004afe <scalbn+0x6e>
 8004aa0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4333      	orrs	r3, r6
 8004aa8:	d028      	beq.n	8004afc <scalbn+0x6c>
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <scalbn+0xe0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	f7fb fdc7 	bl	8000640 <__aeabi_dmul>
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <scalbn+0xe4>)
 8004ab4:	429f      	cmp	r7, r3
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	460d      	mov	r5, r1
 8004aba:	db1a      	blt.n	8004af2 <scalbn+0x62>
 8004abc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ac0:	460e      	mov	r6, r1
 8004ac2:	3b36      	subs	r3, #54	; 0x36
 8004ac4:	443b      	add	r3, r7
 8004ac6:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004aca:	4293      	cmp	r3, r2
 8004acc:	dc20      	bgt.n	8004b10 <scalbn+0x80>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	dc3d      	bgt.n	8004b4e <scalbn+0xbe>
 8004ad2:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8004ad6:	da2c      	bge.n	8004b32 <scalbn+0xa2>
 8004ad8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004adc:	429f      	cmp	r7, r3
 8004ade:	dc17      	bgt.n	8004b10 <scalbn+0x80>
 8004ae0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004ae4:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 8004ae8:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004aec:	4822      	ldr	r0, [pc, #136]	; (8004b78 <scalbn+0xe8>)
 8004aee:	f041 011f 	orr.w	r1, r1, #31
 8004af2:	a31b      	add	r3, pc, #108	; (adr r3, 8004b60 <scalbn+0xd0>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f7fb fda2 	bl	8000640 <__aeabi_dmul>
 8004afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004afe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d1de      	bne.n	8004ac4 <scalbn+0x34>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	f7fb fbdf 	bl	80002cc <__adddf3>
 8004b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004b14:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 8004b18:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004b1c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004b20:	a311      	add	r3, pc, #68	; (adr r3, 8004b68 <scalbn+0xd8>)
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	4815      	ldr	r0, [pc, #84]	; (8004b7c <scalbn+0xec>)
 8004b28:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004b2c:	f7fb fd88 	bl	8000640 <__aeabi_dmul>
 8004b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b32:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 8004b36:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 8004b3a:	3336      	adds	r3, #54	; 0x36
 8004b3c:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 8004b40:	4620      	mov	r0, r4
 8004b42:	4629      	mov	r1, r5
 8004b44:	2200      	movs	r2, #0
 8004b46:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <scalbn+0xf0>)
 8004b48:	f7fb fd7a 	bl	8000640 <__aeabi_dmul>
 8004b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b4e:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 8004b52:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 8004b56:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b60:	c2f8f359 	.word	0xc2f8f359
 8004b64:	01a56e1f 	.word	0x01a56e1f
 8004b68:	8800759c 	.word	0x8800759c
 8004b6c:	7e37e43c 	.word	0x7e37e43c
 8004b70:	43500000 	.word	0x43500000
 8004b74:	ffff3cb0 	.word	0xffff3cb0
 8004b78:	c2f8f359 	.word	0xc2f8f359
 8004b7c:	8800759c 	.word	0x8800759c
 8004b80:	3c900000 	.word	0x3c900000
	...

08004b90 <trunc>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004b96:	f2a6 34ff 	subw	r4, r6, #1023	; 0x3ff
 8004b9a:	2c13      	cmp	r4, #19
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	dc12      	bgt.n	8004bc6 <trunc+0x36>
 8004ba0:	2c00      	cmp	r4, #0
 8004ba2:	db09      	blt.n	8004bb8 <trunc+0x28>
 8004ba4:	4916      	ldr	r1, [pc, #88]	; (8004c00 <trunc+0x70>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	fa41 f404 	asr.w	r4, r1, r4
 8004bac:	ea25 0304 	bic.w	r3, r5, r4
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004bbe:	4614      	mov	r4, r2
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	bd70      	pop	{r4, r5, r6, pc}
 8004bc6:	2c33      	cmp	r4, #51	; 0x33
 8004bc8:	4602      	mov	r2, r0
 8004bca:	dd07      	ble.n	8004bdc <trunc+0x4c>
 8004bcc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	d010      	beq.n	8004bf6 <trunc+0x66>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004be0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8004be4:	fa23 f606 	lsr.w	r6, r3, r6
 8004be8:	ea22 0006 	bic.w	r0, r2, r6
 8004bec:	4604      	mov	r4, r0
 8004bee:	462b      	mov	r3, r5
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	bd70      	pop	{r4, r5, r6, pc}
 8004bf6:	f7fb fb69 	bl	80002cc <__adddf3>
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	e7d8      	b.n	8004bb2 <trunc+0x22>
 8004c00:	000fffff 	.word	0x000fffff
	...

08004c10 <CSWTCH.21>:
 8004c10:	00060c09 00000000 00000000 00000000     ................

08004c20 <CSWTCH.22>:
 8004c20:	00050a08 00000000 00000000 00000000     ................

08004c30 <_stm32_dma_streams>:
 8004c30:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8004c40:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8004c50:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8004c60:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8004c70:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8004c80:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8004c90:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8004ca0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8004cb0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8004cc0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8004cd0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8004ce0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08004cf0 <ch_debug>:
 8004cf0:	6e69616d 18811600 08440204 1814100c     main......D.....
 8004d00:	1e1d1c00 00000000 00000000 00000000     ................
 8004d10:	3a206425 20642520 00000a0d 6c756e28     %d : %d ....(nul
 8004d20:	0000296c 00000000 00000000 00000000     l)..............

08004d30 <icucfgA>:
 8004d30:	00000000 000f4240 08001e41 00000000     ....@B..A.......
	...

08004d50 <icucfgB>:
 8004d50:	00000000 000f4240 00000000 08001e41     ....@B......A...
 8004d60:	00000000 00000001 00000000 00000000     ................

08004d70 <icucfgC>:
 8004d70:	00000000 000f4240 00000000 08001e41     ....@B......A...
	...

08004d90 <line_sensors_cfg1>:
 8004d90:	00010000 00000000 00000000 00000000     ................
 8004da0:	40000000 00000000 00000000 00000000     ...@............
 8004db0:	00000000 00000006 00000000 00000000     ................

08004dc0 <line_sensors_cfg2>:
 8004dc0:	00010000 00000000 00000000 00000000     ................
 8004dd0:	40000000 00000000 00000000 00000000     ...@............
 8004de0:	00000000 00000007 00000000 00000000     ................
 8004df0:	656c6469 00000000 00000000 00000000     idle............

08004e00 <pow10>:
 8004e00:	0000000a 00000064 000003e8 00002710     ....d........'..
 8004e10:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8004e20:	3b9aca00 00000000 00000000 00000000     ...;............

08004e30 <ram_areas>:
 8004e30:	080050e8 20001108 20001108 20001108     .P..... ... ... 
 8004e40:	080050e8 00000000 00000000 00000000     .P..............
 8004e50:	080050e8 00000000 00000000 00000000     .P..............
 8004e60:	080050e8 00000000 00000000 00000000     .P..............
 8004e70:	080050e8 00000000 00000000 00000000     .P..............
 8004e80:	080050e8 00000000 00000000 00000000     .P..............
 8004e90:	080050e8 00000000 00000000 00000000     .P..............
 8004ea0:	080050e8 00000000 00000000 00000000     .P..............

08004eb0 <vmt>:
 8004eb0:	080022c1 080023d1 08002331 08002441     ."...#..1#..A$..
 8004ec0:	08002321 08002431 080022b1 080023c1     !#..1$..."...#..

08004ed0 <npio2_hw>:
 8004ed0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 8004ee0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 8004ef0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 8004f00:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 8004f10:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 8004f20:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 8004f30:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 8004f40:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

08004f50 <two_over_pi>:
 8004f50:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 8004f60:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 8004f70:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 8004f80:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 8004f90:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 8004fa0:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 8004fb0:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 8004fc0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 8004fd0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 8004fe0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 8004ff0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 8005000:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 8005010:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 8005020:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 8005030:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 8005040:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 8005050:	0060e27b 00c08c6b 00000000 00000000     {.`.k...........

08005060 <PIo2>:
 8005060:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 8005070:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 8005080:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 8005090:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

080050a0 <init_jk>:
 80050a0:	00000002 00000003 00000004 00000006     ................
