
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4823      	ldr	r0, [pc, #140]	; (8000250 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f001 fbb5 	bl	8001940 <__core_init>
 80001d6:	f000 fd83 	bl	8000ce0 <__early_init>
 80001da:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001de:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xa>)
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <endfiniloop+0xe>)

080001e2 <msloop>:
 80001e2:	4291      	cmp	r1, r2
 80001e4:	bf3c      	itt	cc
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ea:	e7fa      	bcc.n	80001e2 <msloop>
 80001ec:	491b      	ldr	r1, [pc, #108]	; (800025c <endfiniloop+0x12>)
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <endfiniloop+0x6>)

080001f0 <psloop>:
 80001f0:	4291      	cmp	r1, r2
 80001f2:	bf3c      	itt	cc
 80001f4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f8:	e7fa      	bcc.n	80001f0 <psloop>
 80001fa:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x16>)
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <endfiniloop+0x1a>)
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x1e>)

08000200 <dloop>:
 8000200:	429a      	cmp	r2, r3
 8000202:	bf3e      	ittt	cc
 8000204:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000208:	f842 0b04 	strcc.w	r0, [r2], #4
 800020c:	e7f8      	bcc.n	8000200 <dloop>
 800020e:	2000      	movs	r0, #0
 8000210:	4916      	ldr	r1, [pc, #88]	; (800026c <endfiniloop+0x22>)
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x26>)

08000214 <bloop>:
 8000214:	4291      	cmp	r1, r2
 8000216:	bf3c      	itt	cc
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
 800021c:	e7fa      	bcc.n	8000214 <bloop>
 800021e:	f001 fb47 	bl	80018b0 <__init_ram_areas>
 8000222:	f001 fb85 	bl	8001930 <__late_init>
 8000226:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2a>)
 8000228:	4d13      	ldr	r5, [pc, #76]	; (8000278 <endfiniloop+0x2e>)

0800022a <initloop>:
 800022a:	42ac      	cmp	r4, r5
 800022c:	da03      	bge.n	8000236 <endinitloop>
 800022e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000232:	4788      	blx	r1
 8000234:	e7f9      	b.n	800022a <initloop>

08000236 <endinitloop>:
 8000236:	f000 f9b3 	bl	80005a0 <main>
 800023a:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x32>)
 800023c:	4d10      	ldr	r5, [pc, #64]	; (8000280 <endfiniloop+0x36>)

0800023e <finiloop>:
 800023e:	42ac      	cmp	r4, r5
 8000240:	da03      	bge.n	800024a <endfiniloop>
 8000242:	f854 1b04 	ldr.w	r1, [r4], #4
 8000246:	4788      	blx	r1
 8000248:	e7f9      	b.n	800023e <finiloop>

0800024a <endfiniloop>:
 800024a:	f001 bb69 	b.w	8001920 <__default_exit>
 800024e:	0000      	.short	0x0000
 8000250:	20000800 	.word	0x20000800
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	08002040 	.word	0x08002040
 8000264:	20000800 	.word	0x20000800
 8000268:	20000834 	.word	0x20000834
 800026c:	20000838 	.word	0x20000838
 8000270:	20000b2c 	.word	0x20000b2c
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f001 fad0 	bl	8001850 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f001 f87e 	bl	80013b0 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 80002c0:	4a02      	ldr	r2, [pc, #8]	; (80002cc <notify1+0xc>)
 80002c2:	68d3      	ldr	r3, [r2, #12]
 80002c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c8:	60d3      	str	r3, [r2, #12]
 80002ca:	4770      	bx	lr
 80002cc:	40011000 	.word	0x40011000

080002d0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <notify2+0xc>)
 80002d2:	68d3      	ldr	r3, [r2, #12]
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	60d3      	str	r3, [r2, #12]
 80002da:	4770      	bx	lr
 80002dc:	40004400 	.word	0x40004400

080002e0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 80002e0:	b538      	push	{r3, r4, r5, lr}

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80002e2:	4d07      	ldr	r5, [pc, #28]	; (8000300 <sd_lld_init+0x20>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80002e4:	4c07      	ldr	r4, [pc, #28]	; (8000304 <sd_lld_init+0x24>)
  sdObjectInit(&SD1, NULL, notify1);
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <sd_lld_init+0x28>)
 80002e8:	4628      	mov	r0, r5
 80002ea:	f001 fbb9 	bl	8001a60 <sdObjectInit.constprop.13>
  SD1.usart = USART1;
 80002ee:	4b07      	ldr	r3, [pc, #28]	; (800030c <sd_lld_init+0x2c>)
  sdObjectInit(&SD2, NULL, notify2);
 80002f0:	4907      	ldr	r1, [pc, #28]	; (8000310 <sd_lld_init+0x30>)
  SD1.usart = USART1;
 80002f2:	676b      	str	r3, [r5, #116]	; 0x74
  sdObjectInit(&SD2, NULL, notify2);
 80002f4:	4620      	mov	r0, r4
 80002f6:	f001 fbb3 	bl	8001a60 <sdObjectInit.constprop.13>
  SD2.usart = USART2;
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <sd_lld_init+0x34>)
 80002fc:	6763      	str	r3, [r4, #116]	; 0x74
 80002fe:	bd38      	pop	{r3, r4, r5, pc}
 8000300:	20000a8c 	.word	0x20000a8c
 8000304:	20000838 	.word	0x20000838
 8000308:	080002c1 	.word	0x080002c1
 800030c:	40011000 	.word	0x40011000
 8000310:	080002d1 	.word	0x080002d1
 8000314:	40004400 	.word	0x40004400
	...

08000320 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000320:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000322:	4d17      	ldr	r5, [pc, #92]	; (8000380 <VectorA4+0x60>)
 8000324:	69ab      	ldr	r3, [r5, #24]
 8000326:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000328:	68da      	ldr	r2, [r3, #12]
 800032a:	4014      	ands	r4, r2
 800032c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800032e:	43d2      	mvns	r2, r2
 8000330:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000332:	07a3      	lsls	r3, r4, #30
 8000334:	d504      	bpl.n	8000340 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8000336:	686b      	ldr	r3, [r5, #4]
 8000338:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800033a:	b10b      	cbz	r3, 8000340 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 800033c:	4628      	mov	r0, r5
 800033e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000340:	0760      	lsls	r0, r4, #29
 8000342:	d504      	bpl.n	800034e <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8000344:	686b      	ldr	r3, [r5, #4]
 8000346:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000348:	b10b      	cbz	r3, 800034e <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 800034a:	480d      	ldr	r0, [pc, #52]	; (8000380 <VectorA4+0x60>)
 800034c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800034e:	0721      	lsls	r1, r4, #28
 8000350:	d504      	bpl.n	800035c <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8000352:	686b      	ldr	r3, [r5, #4]
 8000354:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000356:	b10b      	cbz	r3, 800035c <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 8000358:	4809      	ldr	r0, [pc, #36]	; (8000380 <VectorA4+0x60>)
 800035a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800035c:	06e2      	lsls	r2, r4, #27
 800035e:	d504      	bpl.n	800036a <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8000360:	686b      	ldr	r3, [r5, #4]
 8000362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000364:	b10b      	cbz	r3, 800036a <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 8000366:	4806      	ldr	r0, [pc, #24]	; (8000380 <VectorA4+0x60>)
 8000368:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800036a:	07e3      	lsls	r3, r4, #31
 800036c:	d504      	bpl.n	8000378 <VectorA4+0x58>
 800036e:	686b      	ldr	r3, [r5, #4]
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	b10b      	cbz	r3, 8000378 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 8000374:	4802      	ldr	r0, [pc, #8]	; (8000380 <VectorA4+0x60>)
 8000376:	4798      	blx	r3
}
 8000378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800037c:	f000 bf38 	b.w	80011f0 <_port_irq_epilogue>
 8000380:	20000a70 	.word	0x20000a70
	...

08000390 <VectorAC>:
 8000390:	f7ff bfc6 	b.w	8000320 <VectorA4>
	...

080003a0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80003a4:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80003a6:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 80003aa:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80003ac:	05da      	lsls	r2, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 80003ae:	b082      	sub	sp, #8
 80003b0:	4605      	mov	r5, r0
  uint16_t sr = u->SR;
 80003b2:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80003b4:	f100 8082 	bmi.w	80004bc <serve_interrupt+0x11c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003b8:	2320      	movs	r3, #32
 80003ba:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80003be:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80003c2:	d04a      	beq.n	800045a <serve_interrupt+0xba>
  chnAddFlagsI(sdp, sts);
 80003c4:	f105 0804 	add.w	r8, r5, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 80003c8:	f105 070c 	add.w	r7, r5, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80003cc:	f04f 0900 	mov.w	r9, #0
 80003d0:	e007      	b.n	80003e2 <serve_interrupt+0x42>
    if (sr & USART_SR_RXNE)
 80003d2:	06a0      	lsls	r0, r4, #26
    b = u->DR;
 80003d4:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 80003d6:	d41d      	bmi.n	8000414 <serve_interrupt+0x74>
    sr = u->SR;
 80003d8:	6834      	ldr	r4, [r6, #0]
 80003da:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80003dc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80003e0:	d03b      	beq.n	800045a <serve_interrupt+0xba>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80003e2:	0723      	lsls	r3, r4, #28
 80003e4:	d0f5      	beq.n	80003d2 <serve_interrupt+0x32>
    sts |= SD_OVERRUN_ERROR;
 80003e6:	f014 0f08 	tst.w	r4, #8
 80003ea:	bf0c      	ite	eq
 80003ec:	2100      	moveq	r1, #0
 80003ee:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 80003f0:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 80003f2:	bf48      	it	mi
 80003f4:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80003f8:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80003fa:	bf48      	it	mi
 80003fc:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000400:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000402:	bf48      	it	mi
 8000404:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000408:	4640      	mov	r0, r8
 800040a:	f001 f9f1 	bl	80017f0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800040e:	06a0      	lsls	r0, r4, #26
    b = u->DR;
 8000410:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000412:	d5e1      	bpl.n	80003d8 <serve_interrupt+0x38>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000414:	696a      	ldr	r2, [r5, #20]
  if (iqIsEmptyI(&sdp->iqueue))
 8000416:	2a00      	cmp	r2, #0
 8000418:	d03e      	beq.n	8000498 <serve_interrupt+0xf8>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800041a:	6a2a      	ldr	r2, [r5, #32]
 800041c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800041e:	428a      	cmp	r2, r1
 8000420:	d044      	beq.n	80004ac <serve_interrupt+0x10c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000422:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000424:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 8000426:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8000428:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 800042a:	6169      	str	r1, [r5, #20]
    b = u->DR;
 800042c:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 800042e:	6a2a      	ldr	r2, [r5, #32]
 8000430:	69eb      	ldr	r3, [r5, #28]
 8000432:	429a      	cmp	r2, r3
 8000434:	d301      	bcc.n	800043a <serve_interrupt+0x9a>
    iqp->q_wrptr = iqp->q_buffer;
 8000436:	69ab      	ldr	r3, [r5, #24]
 8000438:	622b      	str	r3, [r5, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800043a:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800043c:	429f      	cmp	r7, r3
 800043e:	d0cb      	beq.n	80003d8 <serve_interrupt+0x38>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 8000444:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000446:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 8000448:	f8c3 9020 	str.w	r9, [r3, #32]
  (void) chSchReadyI(tp);
 800044c:	f001 f9b8 	bl	80017c0 <chSchReadyI>
    sr = u->SR;
 8000450:	6834      	ldr	r4, [r6, #0]
 8000452:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000454:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000458:	d1c3      	bne.n	80003e2 <serve_interrupt+0x42>
 800045a:	2300      	movs	r3, #0
 800045c:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000460:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8000464:	d001      	beq.n	800046a <serve_interrupt+0xca>
 8000466:	0622      	lsls	r2, r4, #24
 8000468:	d437      	bmi.n	80004da <serve_interrupt+0x13a>
  if (sr & USART_SR_TC) {
 800046a:	0663      	lsls	r3, r4, #25
 800046c:	d511      	bpl.n	8000492 <serve_interrupt+0xf2>
 800046e:	2320      	movs	r3, #32
 8000470:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000474:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000476:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000478:	429a      	cmp	r2, r3
 800047a:	d054      	beq.n	8000526 <serve_interrupt+0x186>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800047c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000480:	ea0a 0303 	and.w	r3, sl, r3
    u->SR = ~USART_SR_TC;
 8000484:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000488:	60f3      	str	r3, [r6, #12]
 800048a:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 800048c:	6032      	str	r2, [r6, #0]
 800048e:	f383 8811 	msr	BASEPRI, r3
}
 8000492:	b002      	add	sp, #8
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	2104      	movs	r1, #4
 800049a:	4640      	mov	r0, r8
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	f001 f9a7 	bl	80017f0 <chEvtBroadcastFlagsI>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80004a2:	6a2a      	ldr	r2, [r5, #32]
 80004a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80004a6:	9b01      	ldr	r3, [sp, #4]
 80004a8:	428a      	cmp	r2, r1
 80004aa:	d1ba      	bne.n	8000422 <serve_interrupt+0x82>
 80004ac:	6969      	ldr	r1, [r5, #20]
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d0b7      	beq.n	8000422 <serve_interrupt+0x82>
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4640      	mov	r0, r8
 80004b6:	f001 f99b 	bl	80017f0 <chEvtBroadcastFlagsI>
 80004ba:	e78d      	b.n	80003d8 <serve_interrupt+0x38>
 80004bc:	2320      	movs	r3, #32
 80004be:	f383 8811 	msr	BASEPRI, r3
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	3004      	adds	r0, #4
 80004c8:	f001 f992 	bl	80017f0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80004cc:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80004d0:	6033      	str	r3, [r6, #0]
 80004d2:	2300      	movs	r3, #0
 80004d4:	f383 8811 	msr	BASEPRI, r3
 80004d8:	e76e      	b.n	80003b8 <serve_interrupt+0x18>
 80004da:	2320      	movs	r3, #32
 80004dc:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80004e0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80004e2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80004e4:	429a      	cmp	r2, r3
    b = oqGetI(&sdp->oqueue);
 80004e6:	f105 0730 	add.w	r7, r5, #48	; 0x30
 80004ea:	d024      	beq.n	8000536 <serve_interrupt+0x196>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80004ec:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 80004ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 80004f0:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 80004f2:	3201      	adds	r2, #1
 80004f4:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80004f6:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 80004f8:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 80004fa:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 80004fe:	d301      	bcc.n	8000504 <serve_interrupt+0x164>
    oqp->q_rdptr = oqp->q_buffer;
 8000500:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000502:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000504:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000506:	429f      	cmp	r7, r3
 8000508:	d007      	beq.n	800051a <serve_interrupt+0x17a>
  tqp->p_next = tp->p_next;
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	632a      	str	r2, [r5, #48]	; 0x30
  tp->p_u.rdymsg = msg;
 800050e:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000510:	6057      	str	r7, [r2, #4]
  (void) chSchReadyI(tp);
 8000512:	4618      	mov	r0, r3
  tp->p_u.rdymsg = msg;
 8000514:	6219      	str	r1, [r3, #32]
  (void) chSchReadyI(tp);
 8000516:	f001 f953 	bl	80017c0 <chSchReadyI>
      u->DR = b;
 800051a:	f8c6 8004 	str.w	r8, [r6, #4]
 800051e:	2300      	movs	r3, #0
 8000520:	f383 8811 	msr	BASEPRI, r3
 8000524:	e7a1      	b.n	800046a <serve_interrupt+0xca>
 8000526:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0a7      	beq.n	800047c <serve_interrupt+0xdc>
 800052c:	1d28      	adds	r0, r5, #4
 800052e:	2110      	movs	r1, #16
 8000530:	f001 f95e 	bl	80017f0 <chEvtBroadcastFlagsI>
 8000534:	e7a2      	b.n	800047c <serve_interrupt+0xdc>
 8000536:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000538:	2a00      	cmp	r2, #0
 800053a:	d0d7      	beq.n	80004ec <serve_interrupt+0x14c>
 800053c:	2108      	movs	r1, #8
 800053e:	1d28      	adds	r0, r5, #4
 8000540:	f001 f956 	bl	80017f0 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000544:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000548:	ea0a 0303 	and.w	r3, sl, r3
 800054c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000550:	60f3      	str	r3, [r6, #12]
 8000552:	e7e4      	b.n	800051e <serve_interrupt+0x17e>
	...

08000560 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000560:	b508      	push	{r3, lr}
  serve_interrupt(&SD2);
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <VectorD8+0x10>)
 8000564:	f7ff ff1c 	bl	80003a0 <serve_interrupt>
}
 8000568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800056c:	f000 be40 	b.w	80011f0 <_port_irq_epilogue>
 8000570:	20000838 	.word	0x20000838
	...

08000580 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8000580:	b508      	push	{r3, lr}
  serve_interrupt(&SD1);
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <VectorD4+0x10>)
 8000584:	f7ff ff0c 	bl	80003a0 <serve_interrupt>
}
 8000588:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800058c:	f000 be30 	b.w	80011f0 <_port_irq_epilogue>
 8000590:	20000a8c 	.word	0x20000a8c
	...

080005a0 <main>:

    // Kicker Solenoid
}

void board_init() {
    palSetPad(GPIOA,2);
 80005a0:	4ab8      	ldr	r2, [pc, #736]	; (8000884 <main+0x2e4>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 80005a2:	4bb9      	ldr	r3, [pc, #740]	; (8000888 <main+0x2e8>)
  PWR->CR |= PWR_CR_DBP;
 80005a4:	4cb9      	ldr	r4, [pc, #740]	; (800088c <main+0x2ec>)
 80005a6:	2104      	movs	r1, #4
#include "hal.h"
#include "config.h"
#include "motor.h"
#include "/home/adam/ChibiOS_16.1.9/os/hal/lib/streams/chprintf.h"

int main(void) {
 80005a8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80005ac:	8311      	strh	r1, [r2, #24]
  rccResetAHB1(~0);
 80005ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005b2:	2200      	movs	r2, #0
 80005b4:	6918      	ldr	r0, [r3, #16]
 80005b6:	6119      	str	r1, [r3, #16]
 80005b8:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80005ba:	6958      	ldr	r0, [r3, #20]
 80005bc:	6159      	str	r1, [r3, #20]
 80005be:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80005c0:	6a18      	ldr	r0, [r3, #32]
 80005c2:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 80005c6:	6218      	str	r0, [r3, #32]
 80005c8:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80005ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80005cc:	6259      	str	r1, [r3, #36]	; 0x24
 80005ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80005d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005d2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80005d6:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 80005d8:	6821      	ldr	r1, [r4, #0]
 80005da:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80005de:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80005e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80005e2:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80005e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	d003      	beq.n	80005f6 <main+0x56>
    RCC->BDCR = RCC_BDCR_BDRST;
 80005ee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80005f2:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80005f4:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 80005f6:	4ea5      	ldr	r6, [pc, #660]	; (800088c <main+0x2ec>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80005f8:	f8df 928c 	ldr.w	r9, [pc, #652]	; 8000888 <main+0x2e8>
 80005fc:	6873      	ldr	r3, [r6, #4]
  gpiop->OTYPER  = config->otyper;
 80005fe:	4da1      	ldr	r5, [pc, #644]	; (8000884 <main+0x2e4>)
  gpiop->PUPDR   = config->pupdr;
 8000600:	f8df c2e0 	ldr.w	ip, [pc, #736]	; 80008e4 <main+0x344>
  gpiop->OTYPER  = config->otyper;
 8000604:	4ca2      	ldr	r4, [pc, #648]	; (8000890 <main+0x2f0>)
  gpiop->MODER   = config->moder;
 8000606:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 80008e8 <main+0x348>
  gpiop->OTYPER  = config->otyper;
 800060a:	48a2      	ldr	r0, [pc, #648]	; (8000894 <main+0x2f4>)
 800060c:	49a2      	ldr	r1, [pc, #648]	; (8000898 <main+0x2f8>)
 800060e:	4aa3      	ldr	r2, [pc, #652]	; (800089c <main+0x2fc>)
 8000610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000614:	6073      	str	r3, [r6, #4]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8000616:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800061a:	f043 039f 	orr.w	r3, r3, #159	; 0x9f
 800061e:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000622:	f8d9 7050 	ldr.w	r7, [r9, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8000626:	4b9e      	ldr	r3, [pc, #632]	; (80008a0 <main+0x300>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000628:	f047 079f 	orr.w	r7, r7, #159	; 0x9f
  gpiop->OTYPER  = config->otyper;
 800062c:	2600      	movs	r6, #0
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800062e:	f8c9 7050 	str.w	r7, [r9, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8000632:	f46f 678a 	mvn.w	r7, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8000636:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000638:	60af      	str	r7, [r5, #8]
  gpiop->ODR     = config->odr;
 800063a:	f64f 77df 	movw	r7, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 800063e:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
 8000642:	616f      	str	r7, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8000644:	f44f 4cee 	mov.w	ip, #30464	; 0x7700
  gpiop->AFRH    = config->afrh;
 8000648:	f44f 272a 	mov.w	r7, #696320	; 0xaa000
  gpiop->AFRL    = config->afrl;
 800064c:	f8c5 c020 	str.w	ip, [r5, #32]
  gpiop->OSPEEDR = config->ospeedr;
 8000650:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  gpiop->AFRH    = config->afrh;
 8000654:	626f      	str	r7, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000656:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800065a:	f8c5 e000 	str.w	lr, [r5]
  gpiop->PUPDR   = config->pupdr;
 800065e:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8000662:	f64f 75ff 	movw	r5, #65535	; 0xffff
  gpiop->OTYPER  = config->otyper;
 8000666:	6066      	str	r6, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000668:	f8c4 8008 	str.w	r8, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800066c:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 800066e:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8000670:	6226      	str	r6, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8000672:	6266      	str	r6, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000674:	f8c4 a000 	str.w	sl, [r4]
  gpiop->PUPDR   = config->pupdr;
 8000678:	4c8a      	ldr	r4, [pc, #552]	; (80008a4 <main+0x304>)
  gpiop->OTYPER  = config->otyper;
 800067a:	6046      	str	r6, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800067c:	f8c0 8008 	str.w	r8, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000680:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8000682:	6145      	str	r5, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8000684:	6206      	str	r6, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8000686:	6246      	str	r6, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000688:	6006      	str	r6, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 800068a:	4887      	ldr	r0, [pc, #540]	; (80008a8 <main+0x308>)
  gpiop->OTYPER  = config->otyper;
 800068c:	604e      	str	r6, [r1, #4]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 800068e:	4c87      	ldr	r4, [pc, #540]	; (80008ac <main+0x30c>)
  gpiop->OSPEEDR = config->ospeedr;
 8000690:	f8c1 8008 	str.w	r8, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8000694:	60cf      	str	r7, [r1, #12]
  gpiop->ODR     = config->odr;
 8000696:	614d      	str	r5, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8000698:	620e      	str	r6, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800069a:	624e      	str	r6, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800069c:	600e      	str	r6, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 800069e:	6056      	str	r6, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80006a0:	f8c2 8008 	str.w	r8, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80006a4:	60d7      	str	r7, [r2, #12]
  gpiop->ODR     = config->odr;
 80006a6:	6155      	str	r5, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80006a8:	6216      	str	r6, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80006aa:	6256      	str	r6, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80006ac:	6016      	str	r6, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 80006ae:	605e      	str	r6, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80006b0:	f8c3 8008 	str.w	r8, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80006b4:	60d8      	str	r0, [r3, #12]
  gpiop->ODR     = config->odr;
 80006b6:	615d      	str	r5, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80006b8:	621e      	str	r6, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80006ba:	625e      	str	r6, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80006bc:	601e      	str	r6, [r3, #0]
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 80006be:	f000 fcf7 	bl	80010b0 <icu_lld_init>
 80006c2:	2701      	movs	r7, #1
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80006c4:	2204      	movs	r2, #4
  PWMD1.tim = STM32_TIM1;
 80006c6:	4b7a      	ldr	r3, [pc, #488]	; (80008b0 <main+0x310>)
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80006c8:	7422      	strb	r2, [r4, #16]
  PWMD1.tim = STM32_TIM1;
 80006ca:	61a3      	str	r3, [r4, #24]
  pwmp->config   = NULL;
 80006cc:	6066      	str	r6, [r4, #4]
  pwmp->enabled  = 0;
 80006ce:	60e6      	str	r6, [r4, #12]
  pwmp->state    = PWM_STOP;
 80006d0:	7027      	strb	r7, [r4, #0]
  sd_lld_init();
 80006d2:	f7ff fe05 	bl	80002e0 <sd_lld_init>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80006d6:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80006da:	f8df e210 	ldr.w	lr, [pc, #528]	; 80008ec <main+0x34c>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80006de:	4b75      	ldr	r3, [pc, #468]	; (80008b4 <main+0x314>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80006e0:	4975      	ldr	r1, [pc, #468]	; (80008b8 <main+0x318>)
  ST_ENABLE_CLOCK();
 80006e2:	f042 0204 	orr.w	r2, r2, #4
 80006e6:	f8c9 2040 	str.w	r2, [r9, #64]	; 0x40
  ST_ENABLE_STOP();
 80006ea:	f8de 0008 	ldr.w	r0, [lr, #8]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80006ee:	4a73      	ldr	r2, [pc, #460]	; (80008bc <main+0x31c>)
 80006f0:	f040 0004 	orr.w	r0, r0, #4
 80006f4:	f8ce 0008 	str.w	r0, [lr, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80006f8:	f242 507f 	movw	r0, #9599	; 0x257f
 80006fc:	6298      	str	r0, [r3, #40]	; 0x28
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80006fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000702:	62dd      	str	r5, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8000704:	619e      	str	r6, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8000706:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8000708:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800070a:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800070c:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800070e:	601f      	str	r7, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000710:	f881 a31e 	strb.w	sl, [r1, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000714:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000718:	6008      	str	r0, [r1, #0]
 800071a:	6096      	str	r6, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800071e:	4b68      	ldr	r3, [pc, #416]	; (80008c0 <main+0x320>)
  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000720:	4868      	ldr	r0, [pc, #416]	; (80008c4 <main+0x324>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000722:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 8000726:	4029      	ands	r1, r5
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000728:	f5ae 3e4c 	sub.w	lr, lr, #208896	; 0x33000
 800072c:	f5ae 7e04 	sub.w	lr, lr, #528	; 0x210
  reg_value  =  (reg_value                                   |
 8000730:	430b      	orrs	r3, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000732:	60d3      	str	r3, [r2, #12]
 8000734:	f8de 300c 	ldr.w	r3, [lr, #12]
  tqp->p_next = (thread_t *)tqp;
 8000738:	4d63      	ldr	r5, [pc, #396]	; (80008c8 <main+0x328>)
 800073a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800073e:	f8ce 300c 	str.w	r3, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000742:	6803      	ldr	r3, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000744:	606d      	str	r5, [r5, #4]
 8000746:	433b      	orrs	r3, r7
 8000748:	6003      	str	r3, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	2110      	movs	r1, #16
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800074c:	f105 031c 	add.w	r3, r5, #28
 8000750:	f04f 0920 	mov.w	r9, #32
 8000754:	77d1      	strb	r1, [r2, #31]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000756:	a802      	add	r0, sp, #8
 8000758:	f882 9022 	strb.w	r9, [r2, #34]	; 0x22

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800075c:	2200      	movs	r2, #0
 800075e:	61eb      	str	r3, [r5, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000760:	622b      	str	r3, [r5, #32]
 8000762:	2300      	movs	r3, #0
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000764:	60ae      	str	r6, [r5, #8]
  tqp->p_next = (thread_t *)tqp;
 8000766:	602d      	str	r5, [r5, #0]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8000768:	612d      	str	r5, [r5, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800076a:	616d      	str	r5, [r5, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
 800076c:	f8a5 8024 	strh.w	r8, [r5, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000770:	84ee      	strh	r6, [r5, #38]	; 0x26
 8000772:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tmp->best       = (rtcnt_t)-1;
 8000776:	f8cd 8008 	str.w	r8, [sp, #8]
  ch.tm.offset = (rtcnt_t)0;
 800077a:	672e      	str	r6, [r5, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
 800077c:	9603      	str	r6, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 800077e:	9604      	str	r6, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8000780:	9605      	str	r6, [sp, #20]
  chTMStartMeasurementX(&tm);
 8000782:	f001 f965 	bl	8001a50 <chTMStartMeasurementX.constprop.19>
  chTMStopMeasurementX(&tm);
 8000786:	a802      	add	r0, sp, #8
 8000788:	f000 fdea 	bl	8001360 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800078c:	4b4f      	ldr	r3, [pc, #316]	; (80008cc <main+0x32c>)
  REG_INSERT(tp);
 800078e:	f8d5 e014 	ldr.w	lr, [r5, #20]
  ch.tm.offset = tm.last;
 8000792:	9904      	ldr	r1, [sp, #16]
 8000794:	6729      	str	r1, [r5, #112]	; 0x70
 8000796:	f103 0c10 	add.w	ip, r3, #16
 800079a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 800079e:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80007a2:	f8c3 c014 	str.w	ip, [r3, #20]
  tp->p_prio = prio;
 80007a6:	f04f 0c40 	mov.w	ip, #64	; 0x40
  REG_INSERT(tp);
 80007aa:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80007ae:	619e      	str	r6, [r3, #24]
  tp->p_prio = prio;
 80007b0:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
  tp->p_realprio = prio;
 80007b4:	f8c5 c068 	str.w	ip, [r5, #104]	; 0x68
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80007b8:	f885 6049 	strb.w	r6, [r5, #73]	; 0x49
  tp->p_mtxlist = NULL;
 80007bc:	666e      	str	r6, [r5, #100]	; 0x64
  tp->p_epending = (eventmask_t)0;
 80007be:	662e      	str	r6, [r5, #96]	; 0x60
  tp->p_refs = (trefs_t)1;
 80007c0:	f885 704a 	strb.w	r7, [r5, #74]	; 0x4a
  tp->p_name = NULL;
 80007c4:	646e      	str	r6, [r5, #68]	; 0x44
  REG_INSERT(tp);
 80007c6:	63ed      	str	r5, [r5, #60]	; 0x3c
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80007c8:	4841      	ldr	r0, [pc, #260]	; (80008d0 <main+0x330>)
 80007ca:	f8ce 1010 	str.w	r1, [lr, #16]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80007ce:	4a41      	ldr	r2, [pc, #260]	; (80008d4 <main+0x334>)
 80007d0:	6169      	str	r1, [r5, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80007d2:	61a9      	str	r1, [r5, #24]
  tlp->p_next = (thread_t *)tlp;
 80007d4:	f105 0150 	add.w	r1, r5, #80	; 0x50
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80007d8:	f8df c114 	ldr.w	ip, [pc, #276]	; 80008f0 <main+0x350>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80007dc:	f8df e114 	ldr.w	lr, [pc, #276]	; 80008f4 <main+0x354>
 80007e0:	6529      	str	r1, [r5, #80]	; 0x50
 80007e2:	493d      	ldr	r1, [pc, #244]	; (80008d8 <main+0x338>)
  default_heap.h_free.h.u.next = NULL;
 80007e4:	609e      	str	r6, [r3, #8]
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80007e6:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80007ea:	f022 0207 	bic.w	r2, r2, #7
  default_heap.h_free.h.size = 0;
 80007ee:	60de      	str	r6, [r3, #12]
  default_heap.h_provider = chCoreAlloc;
 80007f0:	6019      	str	r1, [r3, #0]
  tqp->p_next = (thread_t *)tqp;
 80007f2:	f105 0354 	add.w	r3, r5, #84	; 0x54
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80007f6:	f885 7048 	strb.w	r7, [r5, #72]	; 0x48
 80007fa:	656b      	str	r3, [r5, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 80007fc:	65ab      	str	r3, [r5, #88]	; 0x58
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80007fe:	f8cc 0000 	str.w	r0, [ip]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000802:	f8ce 2000 	str.w	r2, [lr]
 8000806:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 800080a:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800080c:	69ab      	ldr	r3, [r5, #24]
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <main+0x33c>)
 8000810:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000812:	f389 8811 	msr	BASEPRI, r9
 8000816:	696b      	ldr	r3, [r5, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000818:	4831      	ldr	r0, [pc, #196]	; (80008e0 <main+0x340>)
 800081a:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 80008f8 <main+0x358>
  tp->p_prio = prio;
 800081e:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
  tp->p_state = CH_STATE_WTSTART;
 8000822:	2102      	movs	r1, #2
  REG_INSERT(tp);
 8000824:	f105 0278 	add.w	r2, r5, #120	; 0x78
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000828:	f505 7c96 	add.w	ip, r5, #300	; 0x12c
  tp->p_realprio = prio;
 800082c:	f8c5 70b4 	str.w	r7, [r5, #180]	; 0xb4
  tp->p_refs = (trefs_t)1;
 8000830:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000834:	f885 6095 	strb.w	r6, [r5, #149]	; 0x95
  tp->p_epending = (eventmask_t)0;
 8000838:	f8c5 60ac 	str.w	r6, [r5, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800083c:	f8c5 014c 	str.w	r0, [r5, #332]	; 0x14c
  tp->p_state = CH_STATE_WTSTART;
 8000840:	f885 1094 	strb.w	r1, [r5, #148]	; 0x94
  REG_INSERT(tp);
 8000844:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000848:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
  tp->p_mtxlist = NULL;
 800084c:	f8c5 60b0 	str.w	r6, [r5, #176]	; 0xb0
  tp->p_name = NULL;
 8000850:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
  REG_INSERT(tp);
 8000854:	f8c5 5088 	str.w	r5, [r5, #136]	; 0x88
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000858:	f8c5 c084 	str.w	ip, [r5, #132]	; 0x84
 800085c:	f8c5 e12c 	str.w	lr, [r5, #300]	; 0x12c
  REG_INSERT(tp);
 8000860:	611a      	str	r2, [r3, #16]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000862:	69ab      	ldr	r3, [r5, #24]
  ntp->p_u.rdymsg = msg;
 8000864:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
  if (ntp->p_prio <= currp->p_prio) {
 8000868:	6899      	ldr	r1, [r3, #8]
 800086a:	616a      	str	r2, [r5, #20]
  tqp->p_next = (thread_t *)tqp;
 800086c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
  tlp->p_next = (thread_t *)tlp;
 8000870:	f105 079c 	add.w	r7, r5, #156	; 0x9c
 8000874:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
  tqp->p_next = (thread_t *)tqp;
 8000878:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 800087c:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
 8000880:	e03c      	b.n	80008fc <main+0x35c>
 8000882:	bf00      	nop
 8000884:	40020000 	.word	0x40020000
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000
 8000890:	40020400 	.word	0x40020400
 8000894:	40020800 	.word	0x40020800
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40021000 	.word	0x40021000
 80008a0:	40021c00 	.word	0x40021c00
 80008a4:	51555555 	.word	0x51555555
 80008a8:	55555550 	.word	0x55555550
 80008ac:	20000a70 	.word	0x20000a70
 80008b0:	40010000 	.word	0x40010000
 80008b4:	40000800 	.word	0x40000800
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00
 80008c0:	05fa0300 	.word	0x05fa0300
 80008c4:	e0001000 	.word	0xe0001000
 80008c8:	200008b0 	.word	0x200008b0
 80008cc:	20000a00 	.word	0x20000a00
 80008d0:	20000b37 	.word	0x20000b37
 80008d4:	20020000 	.word	0x20020000
 80008d8:	08000e41 	.word	0x08000e41
 80008dc:	08001ef0 	.word	0x08001ef0
 80008e0:	080002a1 	.word	0x080002a1
 80008e4:	64155105 	.word	0x64155105
 80008e8:	2a8004a0 	.word	0x2a8004a0
 80008ec:	e0042000 	.word	0xe0042000
 80008f0:	20000a24 	.word	0x20000a24
 80008f4:	20000a20 	.word	0x20000a20
 80008f8:	08000ef1 	.word	0x08000ef1
 80008fc:	2900      	cmp	r1, #0
 80008fe:	f000 8190 	beq.w	8000c22 <main+0x682>
  tp->p_state = CH_STATE_READY;
 8000902:	f885 6094 	strb.w	r6, [r5, #148]	; 0x94
  cp = (thread_t *)&ch.rlist.r_queue;
 8000906:	462b      	mov	r3, r5
    cp = cp->p_next;
 8000908:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800090a:	6899      	ldr	r1, [r3, #8]
 800090c:	2900      	cmp	r1, #0
 800090e:	d1fb      	bne.n	8000908 <main+0x368>
  tp->p_next = cp;
 8000910:	67ab      	str	r3, [r5, #120]	; 0x78
  tp->p_prev = cp->p_prev;
 8000912:	6858      	ldr	r0, [r3, #4]
 8000914:	67e8      	str	r0, [r5, #124]	; 0x7c
  tp->p_prev->p_next = tp;
 8000916:	6002      	str	r2, [r0, #0]
  cp->p_prev = tp;
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	f381 8811 	msr	BASEPRI, r1
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800091e:	4bc2      	ldr	r3, [pc, #776]	; (8000c28 <main+0x688>)
 8000920:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000924:	f7ff fcdc 	bl	80002e0 <sd_lld_init>
 8000928:	2220      	movs	r2, #32
 800092a:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800092e:	49bf      	ldr	r1, [pc, #764]	; (8000c2c <main+0x68c>)
 8000930:	7a0b      	ldrb	r3, [r1, #8]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d10b      	bne.n	800094e <main+0x3ae>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8000936:	4dbe      	ldr	r5, [pc, #760]	; (8000c30 <main+0x690>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000938:	4bbe      	ldr	r3, [pc, #760]	; (8000c34 <main+0x694>)
 800093a:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800093c:	26c0      	movs	r6, #192	; 0xc0
 800093e:	f040 0010 	orr.w	r0, r0, #16
 8000942:	6468      	str	r0, [r5, #68]	; 0x44
 8000944:	f883 6325 	strb.w	r6, [r3, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000948:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800094c:	605a      	str	r2, [r3, #4]
  USART_TypeDef *u = sdp->usart;
 800094e:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8000950:	4bb9      	ldr	r3, [pc, #740]	; (8000c38 <main+0x698>)
 8000952:	429a      	cmp	r2, r3
 8000954:	f000 81b6 	beq.w	8000cc4 <main+0x724>
 8000958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800095c:	429a      	cmp	r2, r3
 800095e:	f000 81b1 	beq.w	8000cc4 <main+0x724>
    u->BRR = STM32_PCLK1 / config->speed;
 8000962:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8000966:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000968:	2540      	movs	r5, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800096a:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800096c:	f242 162c 	movw	r6, #8492	; 0x212c
  u->SR = 0;
 8000970:	2300      	movs	r3, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000972:	6115      	str	r5, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8000974:	6150      	str	r0, [r2, #20]
  sdp->state = SD_READY;
 8000976:	2502      	movs	r5, #2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8000978:	60d6      	str	r6, [r2, #12]
  u->SR = 0;
 800097a:	6013      	str	r3, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800097c:	6816      	ldr	r6, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800097e:	6852      	ldr	r2, [r2, #4]
 8000980:	720d      	strb	r5, [r1, #8]
 8000982:	f383 8811 	msr	BASEPRI, r3
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8000986:	2104      	movs	r1, #4
  PWMD1.tim = STM32_TIM1;
 8000988:	4aac      	ldr	r2, [pc, #688]	; (8000c3c <main+0x69c>)
 800098a:	61a2      	str	r2, [r4, #24]
 800098c:	7020      	strb	r0, [r4, #0]
  pwmp->config   = NULL;
 800098e:	6063      	str	r3, [r4, #4]
  pwmp->enabled  = 0;
 8000990:	60e3      	str	r3, [r4, #12]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8000992:	7421      	strb	r1, [r4, #16]
 8000994:	2220      	movs	r2, #32
 8000996:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 800099a:	49a9      	ldr	r1, [pc, #676]	; (8000c40 <main+0x6a0>)
  if (pwmp->state == PWM_STOP) {
 800099c:	7822      	ldrb	r2, [r4, #0]
  pwmp->period = config->period;
 800099e:	684f      	ldr	r7, [r1, #4]
  pwmp->config = config;
 80009a0:	6061      	str	r1, [r4, #4]
 80009a2:	4282      	cmp	r2, r0
  pwmp->period = config->period;
 80009a4:	60a7      	str	r7, [r4, #8]
 80009a6:	f000 8169 	beq.w	8000c7c <main+0x6dc>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80009aa:	69a2      	ldr	r2, [r4, #24]
 80009ac:	6960      	ldr	r0, [r4, #20]
 80009ae:	6013      	str	r3, [r2, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80009b0:	6353      	str	r3, [r2, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80009b2:	6393      	str	r3, [r2, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 80009b4:	63d3      	str	r3, [r2, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80009b8:	6253      	str	r3, [r2, #36]	; 0x24
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80009ba:	68cb      	ldr	r3, [r1, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80009bc:	680d      	ldr	r5, [r1, #0]
 80009be:	fbb0 f0f5 	udiv	r0, r0, r5
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80009c2:	f003 030f 	and.w	r3, r3, #15
  pwmp->tim->CR2  = pwmp->config->cr2;
 80009c6:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pwmp->tim->ARR  = pwmp->period - 1;
 80009c8:	3f01      	subs	r7, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80009ca:	3801      	subs	r0, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80009cc:	2b01      	cmp	r3, #1
  pwmp->tim->PSC  = psc;
 80009ce:	6290      	str	r0, [r2, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 80009d0:	62d7      	str	r7, [r2, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 80009d2:	6055      	str	r5, [r2, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80009d4:	d003      	beq.n	80009de <main+0x43e>
  ccer = 0;
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	bf0c      	ite	eq
 80009da:	2303      	moveq	r3, #3
 80009dc:	2300      	movne	r3, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 80009de:	6948      	ldr	r0, [r1, #20]
 80009e0:	f000 000f 	and.w	r0, r0, #15
 80009e4:	2801      	cmp	r0, #1
 80009e6:	d003      	beq.n	80009f0 <main+0x450>
 80009e8:	2802      	cmp	r0, #2
 80009ea:	d103      	bne.n	80009f4 <main+0x454>
    ccer |= STM32_TIM_CCER_CC2P;
 80009ec:	f043 0320 	orr.w	r3, r3, #32
    ccer |= STM32_TIM_CCER_CC2E;
 80009f0:	f043 0310 	orr.w	r3, r3, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 80009f4:	69c8      	ldr	r0, [r1, #28]
 80009f6:	f000 000f 	and.w	r0, r0, #15
 80009fa:	2801      	cmp	r0, #1
 80009fc:	d003      	beq.n	8000a06 <main+0x466>
 80009fe:	2802      	cmp	r0, #2
 8000a00:	d103      	bne.n	8000a0a <main+0x46a>
    ccer |= STM32_TIM_CCER_CC3P;
 8000a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8000a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8000a0a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000a0c:	f000 000f 	and.w	r0, r0, #15
 8000a10:	2801      	cmp	r0, #1
 8000a12:	d003      	beq.n	8000a1c <main+0x47c>
 8000a14:	2802      	cmp	r0, #2
 8000a16:	d103      	bne.n	8000a20 <main+0x480>
    ccer |= STM32_TIM_CCER_CC4P;
 8000a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8000a1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8000a20:	6b09      	ldr	r1, [r1, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 8000a22:	6213      	str	r3, [r2, #32]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8000a24:	2500      	movs	r5, #0
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8000a26:	f021 03ff 	bic.w	r3, r1, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8000a2a:	2701      	movs	r7, #1
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8000a2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8000a30:	2185      	movs	r1, #133	; 0x85
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8000a32:	f04f 0902 	mov.w	r9, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8000a36:	6157      	str	r7, [r2, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8000a38:	6115      	str	r5, [r2, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8000a3a:	60d3      	str	r3, [r2, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8000a3c:	6450      	str	r0, [r2, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8000a3e:	6011      	str	r1, [r2, #0]
  pwmp->enabled = 0;
 8000a40:	60e5      	str	r5, [r4, #12]
  pwmp->state = PWM_READY;
 8000a42:	f884 9000 	strb.w	r9, [r4]
 8000a46:	f385 8811 	msr	BASEPRI, r5
 8000a4a:	f000 fb31 	bl	80010b0 <icu_lld_init>
 8000a4e:	2620      	movs	r6, #32
 8000a50:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 8000a54:	f8df b210 	ldr.w	fp, [pc, #528]	; 8000c68 <main+0x6c8>
 8000a58:	4b7a      	ldr	r3, [pc, #488]	; (8000c44 <main+0x6a4>)
 8000a5a:	f8cb 3004 	str.w	r3, [fp, #4]
  icu_lld_start(icup);
 8000a5e:	4658      	mov	r0, fp
 8000a60:	f000 fa86 	bl	8000f70 <icu_lld_start>
  icup->state = ICU_READY;
 8000a64:	f88b 9000 	strb.w	r9, [fp]
 8000a68:	f385 8811 	msr	BASEPRI, r5
 8000a6c:	f386 8811 	msr	BASEPRI, r6
  icup->config = config;
 8000a70:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8000c6c <main+0x6cc>
 8000a74:	4b74      	ldr	r3, [pc, #464]	; (8000c48 <main+0x6a8>)
 8000a76:	f8ca 3004 	str.w	r3, [sl, #4]
  icu_lld_start(icup);
 8000a7a:	4650      	mov	r0, sl
 8000a7c:	f000 fa78 	bl	8000f70 <icu_lld_start>
  icup->state = ICU_READY;
 8000a80:	f88a 9000 	strb.w	r9, [sl]
 8000a84:	f385 8811 	msr	BASEPRI, r5
 8000a88:	f386 8811 	msr	BASEPRI, r6
  icup->config = config;
 8000a8c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000c70 <main+0x6d0>
 8000a90:	4b6e      	ldr	r3, [pc, #440]	; (8000c4c <main+0x6ac>)
 8000a92:	f8c8 3004 	str.w	r3, [r8, #4]
  icu_lld_start(icup);
 8000a96:	4640      	mov	r0, r8
 8000a98:	f000 fa6a 	bl	8000f70 <icu_lld_start>
  icup->state = ICU_READY;
 8000a9c:	f888 9000 	strb.w	r9, [r8]
 8000aa0:	f385 8811 	msr	BASEPRI, r5
    
    icuStart(&ICUD2, &icucfgA);
    icuStart(&ICUD5, &icucfgB);
    icuStart(&ICUD3, &icucfgC);
    
    icuStartCapture(&ICUD2);
 8000aa4:	4658      	mov	r0, fp
 8000aa6:	f000 fb8b 	bl	80011c0 <icuStartCapture>
    icuStartCapture(&ICUD5);
 8000aaa:	4650      	mov	r0, sl
 8000aac:	f000 fb88 	bl	80011c0 <icuStartCapture>
    icuStartCapture(&ICUD3);
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	f000 fb85 	bl	80011c0 <icuStartCapture>
 8000ab6:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 8000aba:	4658      	mov	r0, fp
 8000abc:	f000 fa38 	bl	8000f30 <icu_lld_enable_notifications>
 8000ac0:	f385 8811 	msr	BASEPRI, r5
 8000ac4:	f386 8811 	msr	BASEPRI, r6
 8000ac8:	4650      	mov	r0, sl
 8000aca:	f000 fa31 	bl	8000f30 <icu_lld_enable_notifications>
 8000ace:	f385 8811 	msr	BASEPRI, r5
 8000ad2:	f386 8811 	msr	BASEPRI, r6
 8000ad6:	4640      	mov	r0, r8
 8000ad8:	f000 fa2a 	bl	8000f30 <icu_lld_enable_notifications>
 8000adc:	f385 8811 	msr	BASEPRI, r5
    palSetPadMode(GPIOA,9,PAL_MODE_ALTERNATE(7));
 8000ae0:	f240 3282 	movw	r2, #898	; 0x382
 8000ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae8:	4859      	ldr	r0, [pc, #356]	; (8000c50 <main+0x6b0>)
 8000aea:	f8df b188 	ldr.w	fp, [pc, #392]	; 8000c74 <main+0x6d4>
 8000aee:	4d59      	ldr	r5, [pc, #356]	; (8000c54 <main+0x6b4>)
 8000af0:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000c78 <main+0x6d8>
 8000af4:	f000 fafc 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,10,PAL_MODE_ALTERNATE(7));
 8000af8:	f240 3282 	movw	r2, #898	; 0x382
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	4853      	ldr	r0, [pc, #332]	; (8000c50 <main+0x6b0>)
 8000b02:	f000 faf5 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,10,PAL_MODE_OUTPUT_PUSHPULL);
 8000b06:	463a      	mov	r2, r7
 8000b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0c:	4852      	ldr	r0, [pc, #328]	; (8000c58 <main+0x6b8>)
 8000b0e:	f000 faef 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,12,PAL_MODE_OUTPUT_PUSHPULL);
 8000b12:	463a      	mov	r2, r7
 8000b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b18:	484f      	ldr	r0, [pc, #316]	; (8000c58 <main+0x6b8>)
 8000b1a:	f000 fae9 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,8,PAL_MODE_ALTERNATE(1));
 8000b1e:	2282      	movs	r2, #130	; 0x82
 8000b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b24:	484a      	ldr	r0, [pc, #296]	; (8000c50 <main+0x6b0>)
 8000b26:	f000 fae3 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,8,PAL_MODE_OUTPUT_PUSHPULL);
 8000b2a:	463a      	mov	r2, r7
 8000b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b30:	4849      	ldr	r0, [pc, #292]	; (8000c58 <main+0x6b8>)
 8000b32:	f000 fadd 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,9,PAL_MODE_OUTPUT_PUSHPULL);
 8000b36:	463a      	mov	r2, r7
 8000b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3c:	4846      	ldr	r0, [pc, #280]	; (8000c58 <main+0x6b8>)
 8000b3e:	f000 fad7 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,0,PAL_MODE_ALTERNATE(1));
 8000b42:	4639      	mov	r1, r7
 8000b44:	2282      	movs	r2, #130	; 0x82
 8000b46:	4845      	ldr	r0, [pc, #276]	; (8000c5c <main+0x6bc>)
 8000b48:	f000 fad2 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,5,PAL_MODE_OUTPUT_PUSHPULL);
 8000b4c:	463a      	mov	r2, r7
 8000b4e:	4631      	mov	r1, r6
 8000b50:	4841      	ldr	r0, [pc, #260]	; (8000c58 <main+0x6b8>)
 8000b52:	f000 facd 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,6,PAL_MODE_OUTPUT_PUSHPULL);
 8000b56:	463a      	mov	r2, r7
 8000b58:	2140      	movs	r1, #64	; 0x40
 8000b5a:	483f      	ldr	r0, [pc, #252]	; (8000c58 <main+0x6b8>)
 8000b5c:	f000 fac8 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,1,PAL_MODE_ALTERNATE(1));
 8000b60:	4649      	mov	r1, r9
 8000b62:	2282      	movs	r2, #130	; 0x82
 8000b64:	483d      	ldr	r0, [pc, #244]	; (8000c5c <main+0x6bc>)
 8000b66:	f000 fac3 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,0,PAL_MODE_ALTERNATE(1));
 8000b6a:	4639      	mov	r1, r7
 8000b6c:	2282      	movs	r2, #130	; 0x82
 8000b6e:	4838      	ldr	r0, [pc, #224]	; (8000c50 <main+0x6b0>)
 8000b70:	4f3b      	ldr	r7, [pc, #236]	; (8000c60 <main+0x6c0>)
 8000b72:	f000 fabd 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,1,PAL_MODE_ALTERNATE(2));
 8000b76:	4649      	mov	r1, r9
 8000b78:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000b7c:	4834      	ldr	r0, [pc, #208]	; (8000c50 <main+0x6b0>)
        case 0:
            palClearPad(GPIOC, pinA);
            palClearPad(GPIOC, pinB);
            break;
        case 1:
            palSetPad(GPIOC, pinA);
 8000b7e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8000c58 <main+0x6b8>
 8000b82:	f000 fab5 	bl	80010f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,4,PAL_MODE_ALTERNATE(2));
 8000b86:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4833      	ldr	r0, [pc, #204]	; (8000c5c <main+0x6bc>)
 8000b8e:	f000 faaf 	bl	80010f0 <_pal_lld_setgroupmode>
 8000b92:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 8000b96:	e013      	b.n	8000bc0 <main+0x620>
 8000b98:	f386 8811 	msr	BASEPRI, r6
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000b9c:	2132      	movs	r1, #50	; 0x32
 8000b9e:	2008      	movs	r0, #8
 8000ba0:	f000 fc26 	bl	80013f0 <chSchGoSleepTimeoutS>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f383 8811 	msr	BASEPRI, r3
          }*/
            move_motor(0,1000);
            chThdSleepMilliseconds(5);
			int16_t per[3];
      read_motors_period(per);
      chprintf(&SD1,"%d %d %d \r\n", per[0], per[1], per[2]);
 8000baa:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8000bae:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8000bb2:	f9b8 2000 	ldrsh.w	r2, [r8]
 8000bb6:	481d      	ldr	r0, [pc, #116]	; (8000c2c <main+0x68c>)
 8000bb8:	9100      	str	r1, [sp, #0]
 8000bba:	492a      	ldr	r1, [pc, #168]	; (8000c64 <main+0x6c4>)
 8000bbc:	f000 ff80 	bl	8001ac0 <chprintf.constprop.1>
            palClearPad(GPIOC, pinB);
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
            palSetPad(GPIOC, pinA);
 8000bc4:	f8a9 a018 	strh.w	sl, [r9, #24]
            palClearPad(GPIOC, pinB);
 8000bc8:	f8a9 301a 	strh.w	r3, [r9, #26]
    if (motor_actual_speeds[motor_number] == 0) {
 8000bcc:	f9b5 2000 	ldrsh.w	r2, [r5]
    motor_freqs[motor_number] = abs(speed); 
 8000bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd4:	f8cb 3000 	str.w	r3, [fp]
    if (motor_actual_speeds[motor_number] == 0) {
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d1dd      	bne.n	8000b98 <main+0x5f8>
 8000bdc:	f386 8811 	msr	BASEPRI, r6

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8000be0:	68e1      	ldr	r1, [r4, #12]
  pwmp->tim->CCR[channel] = width;
 8000be2:	69a0      	ldr	r0, [r4, #24]
 8000be4:	f041 0101 	orr.w	r1, r1, #1
 8000be8:	60e1      	str	r1, [r4, #12]
 8000bea:	6343      	str	r3, [r0, #52]	; 0x34
 8000bec:	f382 8811 	msr	BASEPRI, r2
    if(!i_occured[motor_number] && motor_actual_speeds[motor_number] != 0) {
 8000bf0:	7838      	ldrb	r0, [r7, #0]
        motor_actual_speeds[motor_number] = abs(speed);
 8000bf2:	802b      	strh	r3, [r5, #0]
    if(!i_occured[motor_number] && motor_actual_speeds[motor_number] != 0) {
 8000bf4:	b120      	cbz	r0, 8000c00 <main+0x660>
 8000bf6:	e7cf      	b.n	8000b98 <main+0x5f8>
 8000bf8:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0cb      	beq.n	8000b98 <main+0x5f8>
    pwmEnableChannel(&PWMD1, motor_number, ++motor_actual_speeds[motor_number]);
 8000c00:	3301      	adds	r3, #1
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	802b      	strh	r3, [r5, #0]
 8000c06:	f386 8811 	msr	BASEPRI, r6
 8000c0a:	68e2      	ldr	r2, [r4, #12]
 8000c0c:	69a1      	ldr	r1, [r4, #24]
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	60e2      	str	r2, [r4, #12]
 8000c14:	634b      	str	r3, [r1, #52]	; 0x34
 8000c16:	f380 8811 	msr	BASEPRI, r0
    if(!i_occured[motor_number] && motor_actual_speeds[motor_number] != 0) {
 8000c1a:	783b      	ldrb	r3, [r7, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0eb      	beq.n	8000bf8 <main+0x658>
 8000c20:	e7ba      	b.n	8000b98 <main+0x5f8>
  tp->p_state = CH_STATE_READY;
 8000c22:	7719      	strb	r1, [r3, #28]
 8000c24:	e7fe      	b.n	8000c24 <main+0x684>
 8000c26:	bf00      	nop
 8000c28:	08001f70 	.word	0x08001f70
 8000c2c:	20000a8c 	.word	0x20000a8c
 8000c30:	40023800 	.word	0x40023800
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	20000800 	.word	0x20000800
 8000c44:	08001f10 	.word	0x08001f10
 8000c48:	08001f30 	.word	0x08001f30
 8000c4c:	08001f50 	.word	0x08001f50
 8000c50:	40020000 	.word	0x40020000
 8000c54:	20000b08 	.word	0x20000b08
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	20000b04 	.word	0x20000b04
 8000c64:	08001f78 	.word	0x08001f78
 8000c68:	20000a28 	.word	0x20000a28
 8000c6c:	20000a58 	.word	0x20000a58
 8000c70:	20000a40 	.word	0x20000a40
 8000c74:	20000b10 	.word	0x20000b10
 8000c78:	20000b1c 	.word	0x20000b1c
      rccEnableTIM1(FALSE);
 8000c7c:	4e13      	ldr	r6, [pc, #76]	; (8000ccc <main+0x72c>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8000c7e:	69a2      	ldr	r2, [r4, #24]
      rccEnableTIM1(FALSE);
 8000c80:	6c70      	ldr	r0, [r6, #68]	; 0x44
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000c82:	4d13      	ldr	r5, [pc, #76]	; (8000cd0 <main+0x730>)
 8000c84:	f040 0001 	orr.w	r0, r0, #1
 8000c88:	6470      	str	r0, [r6, #68]	; 0x44
      rccResetTIM1();
 8000c8a:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
      pwmp->clock = STM32_TIMCLK2;
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <main+0x734>)
 8000c90:	6160      	str	r0, [r4, #20]
      rccResetTIM1();
 8000c92:	f04e 0e01 	orr.w	lr, lr, #1
 8000c96:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
 8000c9a:	6273      	str	r3, [r6, #36]	; 0x24
 8000c9c:	2370      	movs	r3, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000c9e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000ca2:	f885 3319 	strb.w	r3, [r5, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000ca6:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000caa:	602e      	str	r6, [r5, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000cac:	f885 331b 	strb.w	r3, [r5, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000cb0:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8000cb4:	f646 0368 	movw	r3, #26728	; 0x6868
 8000cb8:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000cbc:	602e      	str	r6, [r5, #0]
 8000cbe:	6193      	str	r3, [r2, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	e67a      	b.n	80009ba <main+0x41a>
    u->BRR = STM32_PCLK2 / config->speed;
 8000cc4:	f240 3341 	movw	r3, #833	; 0x341
 8000cc8:	6093      	str	r3, [r2, #8]
 8000cca:	e64d      	b.n	8000968 <main+0x3c8>
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	05b8d800 	.word	0x05b8d800
	...

08000ce0 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000ce0:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <__early_init+0x9c>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <__early_init+0xa0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000ce4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8000ce8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000cec:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8000cee:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000cf0:	6813      	ldr	r3, [r2, #0]
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	0798      	lsls	r0, r3, #30
 8000cfc:	d5fc      	bpl.n	8000cf8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000cfe:	6893      	ldr	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000d00:	491e      	ldr	r1, [pc, #120]	; (8000d7c <__early_init+0x9c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000d02:	f023 0303 	bic.w	r3, r3, #3
 8000d06:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000d08:	6893      	ldr	r3, [r2, #8]
 8000d0a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000d0c:	688b      	ldr	r3, [r1, #8]
 8000d0e:	f013 030c 	ands.w	r3, r3, #12
 8000d12:	d1fb      	bne.n	8000d0c <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000d14:	6808      	ldr	r0, [r1, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <__early_init+0x9c>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000d18:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8000d1c:	6008      	str	r0, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000d1e:	608b      	str	r3, [r1, #8]
  RCC->CSR |= RCC_CSR_LSION;
 8000d20:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000d28:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000d2a:	0799      	lsls	r1, r3, #30
 8000d2c:	d5fc      	bpl.n	8000d28 <__early_init+0x48>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <__early_init+0xa4>)
 8000d30:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000d32:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000d34:	4912      	ldr	r1, [pc, #72]	; (8000d80 <__early_init+0xa0>)
  RCC->CR |= RCC_CR_PLLON;
 8000d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d3a:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000d3c:	684b      	ldr	r3, [r1, #4]
 8000d3e:	045a      	lsls	r2, r3, #17
 8000d40:	d5fc      	bpl.n	8000d3c <__early_init+0x5c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <__early_init+0x9c>)
 8000d44:	680b      	ldr	r3, [r1, #0]
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	d5fc      	bpl.n	8000d44 <__early_init+0x64>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <__early_init+0xa8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <__early_init+0xac>)
 8000d4e:	608a      	str	r2, [r1, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000d50:	f240 7203 	movw	r2, #1795	; 0x703
 8000d54:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000d56:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <__early_init+0x9c>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000d60:	6893      	ldr	r3, [r2, #8]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d1fa      	bne.n	8000d60 <__early_init+0x80>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000d6a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6653      	str	r3, [r2, #100]	; 0x64
 8000d7a:	4770      	bx	lr
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40007000 	.word	0x40007000
 8000d84:	08016010 	.word	0x08016010
 8000d88:	40023c00 	.word	0x40023c00
 8000d8c:	38881000 	.word	0x38881000

08000d90 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8000d90:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 8000d92:	68c3      	ldr	r3, [r0, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000d94:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
 8000d96:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	4014      	ands	r4, r2
 8000d9c:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 8000d9e:	43d2      	mvns	r2, r2
 8000da0:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000da2:	7d0b      	ldrb	r3, [r1, #20]
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8000da4:	4605      	mov	r5, r0
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000da6:	b94b      	cbnz	r3, 8000dbc <icu_lld_serve_interrupt+0x2c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000da8:	0763      	lsls	r3, r4, #29
 8000daa:	d52b      	bpl.n	8000e04 <icu_lld_serve_interrupt+0x74>
      _icu_isr_invoke_width_cb(icup);
 8000dac:	7803      	ldrb	r3, [r0, #0]
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d025      	beq.n	8000dfe <icu_lld_serve_interrupt+0x6e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000db2:	07a1      	lsls	r1, r4, #30
 8000db4:	d409      	bmi.n	8000dca <icu_lld_serve_interrupt+0x3a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8000db6:	07e4      	lsls	r4, r4, #31
 8000db8:	d40b      	bmi.n	8000dd2 <icu_lld_serve_interrupt+0x42>
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000dbc:	07a2      	lsls	r2, r4, #30
 8000dbe:	d512      	bpl.n	8000de6 <icu_lld_serve_interrupt+0x56>
      _icu_isr_invoke_width_cb(icup);
 8000dc0:	7803      	ldrb	r3, [r0, #0]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d00c      	beq.n	8000de0 <icu_lld_serve_interrupt+0x50>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000dc6:	0763      	lsls	r3, r4, #29
 8000dc8:	d5f5      	bpl.n	8000db6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8000dca:	2304      	movs	r3, #4
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8000dcc:	07e4      	lsls	r4, r4, #31
      _icu_isr_invoke_period_cb(icup);
 8000dce:	702b      	strb	r3, [r5, #0]
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8000dd0:	d5f3      	bpl.n	8000dba <icu_lld_serve_interrupt+0x2a>
    _icu_isr_invoke_overflow_cb(icup);
 8000dd2:	686b      	ldr	r3, [r5, #4]
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	4798      	blx	r3
 8000dda:	2303      	movs	r3, #3
 8000ddc:	702b      	strb	r3, [r5, #0]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
      _icu_isr_invoke_width_cb(icup);
 8000de0:	688b      	ldr	r3, [r1, #8]
 8000de2:	b1c3      	cbz	r3, 8000e16 <icu_lld_serve_interrupt+0x86>
 8000de4:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000de6:	0763      	lsls	r3, r4, #29
 8000de8:	d5e5      	bpl.n	8000db6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8000dea:	782b      	ldrb	r3, [r5, #0]
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d1ec      	bne.n	8000dca <icu_lld_serve_interrupt+0x3a>
 8000df0:	6869      	ldr	r1, [r5, #4]
 8000df2:	68cb      	ldr	r3, [r1, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0e8      	beq.n	8000dca <icu_lld_serve_interrupt+0x3a>
 8000df8:	4628      	mov	r0, r5
 8000dfa:	4798      	blx	r3
 8000dfc:	e7e5      	b.n	8000dca <icu_lld_serve_interrupt+0x3a>
      _icu_isr_invoke_width_cb(icup);
 8000dfe:	688b      	ldr	r3, [r1, #8]
 8000e00:	b133      	cbz	r3, 8000e10 <icu_lld_serve_interrupt+0x80>
 8000e02:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000e04:	07a1      	lsls	r1, r4, #30
 8000e06:	d5d6      	bpl.n	8000db6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8000e08:	782b      	ldrb	r3, [r5, #0]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d1dd      	bne.n	8000dca <icu_lld_serve_interrupt+0x3a>
 8000e0e:	e7ef      	b.n	8000df0 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000e10:	07a0      	lsls	r0, r4, #30
 8000e12:	d4ee      	bmi.n	8000df2 <icu_lld_serve_interrupt+0x62>
 8000e14:	e7cf      	b.n	8000db6 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000e16:	0762      	lsls	r2, r4, #29
 8000e18:	d4eb      	bmi.n	8000df2 <icu_lld_serve_interrupt+0x62>
 8000e1a:	e7cc      	b.n	8000db6 <icu_lld_serve_interrupt+0x26>
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000e24:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000e28:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000e2a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000e40:	b410      	push	{r4}
 8000e42:	2320      	movs	r3, #32
 8000e44:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000e48:	4c09      	ldr	r4, [pc, #36]	; (8000e70 <chCoreAlloc+0x30>)
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <chCoreAlloc+0x34>)
 8000e4c:	6822      	ldr	r2, [r4, #0]
 8000e4e:	6819      	ldr	r1, [r3, #0]
  size = MEM_ALIGN_NEXT(size);
 8000e50:	1dc3      	adds	r3, r0, #7
 8000e52:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000e56:	1a89      	subs	r1, r1, r2
 8000e58:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000e5a:	bf9d      	ittte	ls
 8000e5c:	189b      	addls	r3, r3, r2
 8000e5e:	6023      	strls	r3, [r4, #0]

  return p;
 8000e60:	4610      	movls	r0, r2
    return NULL;
 8000e62:	2000      	movhi	r0, #0
 8000e64:	2300      	movs	r3, #0
 8000e66:	f383 8811 	msr	BASEPRI, r3
}
 8000e6a:	bc10      	pop	{r4}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000a24 	.word	0x20000a24
 8000e74:	20000a20 	.word	0x20000a20
	...

08000e80 <wakeup>:
 8000e80:	2320      	movs	r3, #32
 8000e82:	f383 8811 	msr	BASEPRI, r3
  switch (tp->p_state) {
 8000e86:	7f03      	ldrb	r3, [r0, #28]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	d80e      	bhi.n	8000eaa <wakeup+0x2a>
 8000e8c:	e8df f003 	tbb	[pc, r3]
 8000e90:	230d0d27 	.word	0x230d0d27
 8000e94:	080d0408 	.word	0x080d0408
    chSemFastSignalI(tp->p_u.wtsemp);
 8000e98:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000e9a:	6893      	ldr	r3, [r2, #8]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000ea0:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000ea4:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000ea6:	6802      	ldr	r2, [r0, #0]
 8000ea8:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 8000eaa:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 8000eac:	2200      	movs	r2, #0
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000eae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000eb2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <wakeup+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000eb6:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 8000eb8:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 8000eba:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	d2fb      	bcs.n	8000eba <wakeup+0x3a>
  tp->p_prev = cp->p_prev;
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	6042      	str	r2, [r0, #4]
  tp->p_next = cp;
 8000ec6:	6003      	str	r3, [r0, #0]
 8000ec8:	2100      	movs	r1, #0
  tp->p_prev->p_next = tp;
 8000eca:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8000ecc:	6058      	str	r0, [r3, #4]
 8000ece:	f381 8811 	msr	BASEPRI, r1
}
 8000ed2:	bc10      	pop	{r4}
 8000ed4:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 8000ed6:	6a03      	ldr	r3, [r0, #32]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e7e5      	b.n	8000eaa <wakeup+0x2a>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f383 8811 	msr	BASEPRI, r3
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200008b0 	.word	0x200008b0
 8000eec:	00000000 	.word	0x00000000

08000ef0 <_idle_thread.lto_priv.32>:
static void _idle_thread(void *p) {
 8000ef0:	e7fe      	b.n	8000ef0 <_idle_thread.lto_priv.32>
 8000ef2:	bf00      	nop
	...

08000f00 <chSchGoSleepS>:
  otp = currp;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <chSchGoSleepS+0x20>)
 8000f02:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8000f04:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000f06:	b410      	push	{r4}
  otp->p_state = newstate;
 8000f08:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 8000f0a:	6810      	ldr	r0, [r2, #0]
 8000f0c:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 8000f0e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f10:	6043      	str	r3, [r0, #4]
 8000f12:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000f14:	4610      	mov	r0, r2
}
 8000f16:	bc10      	pop	{r4}
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000f18:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000f1a:	f7ff b9b9 	b.w	8000290 <_port_switch>
 8000f1e:	bf00      	nop
 8000f20:	200008b0 	.word	0x200008b0
	...

08000f30 <icu_lld_enable_notifications>:
  uint32_t dier = icup->tim->DIER;
 8000f30:	68c2      	ldr	r2, [r0, #12]
 8000f32:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
 8000f34:	b410      	push	{r4}
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8000f36:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000f3a:	d10c      	bne.n	8000f56 <icu_lld_enable_notifications+0x26>
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000f3c:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
 8000f3e:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000f40:	7d08      	ldrb	r0, [r1, #20]
 8000f42:	b150      	cbz	r0, 8000f5a <icu_lld_enable_notifications+0x2a>
      if (icup->config->width_cb != NULL)
 8000f44:	6888      	ldr	r0, [r1, #8]
 8000f46:	b170      	cbz	r0, 8000f66 <icu_lld_enable_notifications+0x36>
        dier |= STM32_TIM_DIER_CC1IE;
 8000f48:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
 8000f4c:	6909      	ldr	r1, [r1, #16]
 8000f4e:	b109      	cbz	r1, 8000f54 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8000f50:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
 8000f54:	60d3      	str	r3, [r2, #12]
}
 8000f56:	bc10      	pop	{r4}
 8000f58:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 8000f5a:	6888      	ldr	r0, [r1, #8]
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d1f3      	bne.n	8000f48 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC1IE;
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	e7f2      	b.n	8000f4c <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC2IE;
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	e7ef      	b.n	8000f4c <icu_lld_enable_notifications+0x1c>
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
 8000f70:	7803      	ldrb	r3, [r0, #0]
 8000f72:	2b01      	cmp	r3, #1
void icu_lld_start(ICUDriver *icup) {
 8000f74:	b4f0      	push	{r4, r5, r6, r7}
  if (icup->state == ICU_STOP) {
 8000f76:	d03c      	beq.n	8000ff2 <icu_lld_start+0x82>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 8000f78:	68c3      	ldr	r3, [r0, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8000f80:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000f84:	6841      	ldr	r1, [r0, #4]
  psc = (icup->clock / icup->config->frequency) - 1;
 8000f86:	6882      	ldr	r2, [r0, #8]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000f88:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
 8000f8a:	684d      	ldr	r5, [r1, #4]
 8000f8c:	fbb2 f2f5 	udiv	r2, r2, r5
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000f90:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
 8000f94:	3a01      	subs	r2, #1
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8000f96:	2600      	movs	r6, #0
  icup->tim->ARR  = 0xFFFF;
 8000f98:	f64f 75ff 	movw	r5, #65535	; 0xffff
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8000f9c:	611e      	str	r6, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000f9e:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 8000fa2:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000fa4:	7d0a      	ldrb	r2, [r1, #20]
 8000fa6:	b972      	cbnz	r2, 8000fc6 <icu_lld_start+0x56>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8000fa8:	2254      	movs	r2, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8000faa:	f240 2401 	movw	r4, #513	; 0x201
 8000fae:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8000fb0:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8000fb2:	780a      	ldrb	r2, [r1, #0]
 8000fb4:	b1d2      	cbz	r2, 8000fec <icu_lld_start+0x7c>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8000fb6:	2213      	movs	r2, #19
 8000fb8:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 8000fba:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 8000fbe:	3334      	adds	r3, #52	; 0x34
    icup->wccrp = &icup->tim->CCR[1];
 8000fc0:	6102      	str	r2, [r0, #16]
    icup->pccrp = &icup->tim->CCR[0];
 8000fc2:	6143      	str	r3, [r0, #20]
 8000fc4:	e00d      	b.n	8000fe2 <icu_lld_start+0x72>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8000fc6:	2264      	movs	r2, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8000fc8:	f44f 7481 	mov.w	r4, #258	; 0x102
 8000fcc:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8000fce:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8000fd0:	780a      	ldrb	r2, [r1, #0]
 8000fd2:	b142      	cbz	r2, 8000fe6 <icu_lld_start+0x76>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8000fd4:	2231      	movs	r2, #49	; 0x31
 8000fd6:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 8000fd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 8000fdc:	3338      	adds	r3, #56	; 0x38
    icup->wccrp = &icup->tim->CCR[0];
 8000fde:	6102      	str	r2, [r0, #16]
    icup->pccrp = &icup->tim->CCR[1];
 8000fe0:	6143      	str	r3, [r0, #20]
}
 8000fe2:	bcf0      	pop	{r4, r5, r6, r7}
 8000fe4:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8000fe6:	2213      	movs	r2, #19
 8000fe8:	621a      	str	r2, [r3, #32]
 8000fea:	e7f5      	b.n	8000fd8 <icu_lld_start+0x68>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8000fec:	2231      	movs	r2, #49	; 0x31
 8000fee:	621a      	str	r2, [r3, #32]
 8000ff0:	e7e3      	b.n	8000fba <icu_lld_start+0x4a>
    if (&ICUD2 == icup) {
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <icu_lld_start+0x124>)
 8000ff4:	4298      	cmp	r0, r3
 8000ff6:	d007      	beq.n	8001008 <icu_lld_start+0x98>
    if (&ICUD3 == icup) {
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <icu_lld_start+0x128>)
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d01b      	beq.n	8001036 <icu_lld_start+0xc6>
    if (&ICUD5 == icup) {
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <icu_lld_start+0x12c>)
 8001000:	4298      	cmp	r0, r3
 8001002:	d02f      	beq.n	8001064 <icu_lld_start+0xf4>
 8001004:	68c3      	ldr	r3, [r0, #12]
 8001006:	e7bd      	b.n	8000f84 <icu_lld_start+0x14>
      rccEnableTIM2(FALSE);
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <icu_lld_start+0x130>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800100a:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <icu_lld_start+0x134>)
 800100c:	6c19      	ldr	r1, [r3, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 800100e:	4d26      	ldr	r5, [pc, #152]	; (80010a8 <icu_lld_start+0x138>)
      rccEnableTIM2(FALSE);
 8001010:	f041 0101 	orr.w	r1, r1, #1
 8001014:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM2();
 8001016:	6a19      	ldr	r1, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001018:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 800101c:	2700      	movs	r7, #0
 800101e:	f041 0101 	orr.w	r1, r1, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001022:	2670      	movs	r6, #112	; 0x70
 8001024:	6219      	str	r1, [r3, #32]
 8001026:	621f      	str	r7, [r3, #32]
 8001028:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800102c:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001030:	6014      	str	r4, [r2, #0]
      icup->clock = STM32_TIMCLK1;
 8001032:	6085      	str	r5, [r0, #8]
 8001034:	e7e0      	b.n	8000ff8 <icu_lld_start+0x88>
      rccEnableTIM3(FALSE);
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <icu_lld_start+0x130>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001038:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <icu_lld_start+0x134>)
 800103a:	6c19      	ldr	r1, [r3, #64]	; 0x40
     icup->clock = STM32_TIMCLK1;
 800103c:	4d1a      	ldr	r5, [pc, #104]	; (80010a8 <icu_lld_start+0x138>)
      rccEnableTIM3(FALSE);
 800103e:	f041 0102 	orr.w	r1, r1, #2
 8001042:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 8001044:	6a19      	ldr	r1, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001046:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 800104a:	2700      	movs	r7, #0
 800104c:	f041 0102 	orr.w	r1, r1, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001050:	2670      	movs	r6, #112	; 0x70
 8001052:	6219      	str	r1, [r3, #32]
 8001054:	621f      	str	r7, [r3, #32]
 8001056:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800105a:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800105e:	6014      	str	r4, [r2, #0]
     icup->clock = STM32_TIMCLK1;
 8001060:	6085      	str	r5, [r0, #8]
 8001062:	e7cc      	b.n	8000ffe <icu_lld_start+0x8e>
      rccEnableTIM5(FALSE);
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <icu_lld_start+0x130>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <icu_lld_start+0x134>)
 8001068:	6c19      	ldr	r1, [r3, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 800106a:	4c0f      	ldr	r4, [pc, #60]	; (80010a8 <icu_lld_start+0x138>)
      rccEnableTIM5(FALSE);
 800106c:	f041 0108 	orr.w	r1, r1, #8
 8001070:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM5();
 8001072:	6a19      	ldr	r1, [r3, #32]
 8001074:	2600      	movs	r6, #0
 8001076:	f041 0108 	orr.w	r1, r1, #8
 800107a:	2570      	movs	r5, #112	; 0x70
 800107c:	6219      	str	r1, [r3, #32]
 800107e:	621e      	str	r6, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001080:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001084:	f882 5332 	strb.w	r5, [r2, #818]	; 0x332
 8001088:	68c3      	ldr	r3, [r0, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800108a:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800108e:	6051      	str	r1, [r2, #4]
      icup->clock = STM32_TIMCLK1;
 8001090:	6084      	str	r4, [r0, #8]
 8001092:	e777      	b.n	8000f84 <icu_lld_start+0x14>
 8001094:	20000a28 	.word	0x20000a28
 8001098:	20000a40 	.word	0x20000a40
 800109c:	20000a58 	.word	0x20000a58
 80010a0:	40023800 	.word	0x40023800
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	05b8d800 	.word	0x05b8d800
 80010ac:	00000000 	.word	0x00000000

080010b0 <icu_lld_init>:
void icu_lld_init(void) {
 80010b0:	b470      	push	{r4, r5, r6}
  icup->state  = ICU_STOP;
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <icu_lld_init+0x2c>)
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <icu_lld_init+0x30>)
 80010b6:	4c0b      	ldr	r4, [pc, #44]	; (80010e4 <icu_lld_init+0x34>)
  ICUD3.tim = STM32_TIM3;
 80010b8:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <icu_lld_init+0x38>)
  ICUD5.tim = STM32_TIM5;
 80010ba:	4d0c      	ldr	r5, [pc, #48]	; (80010ec <icu_lld_init+0x3c>)
  ICUD3.tim = STM32_TIM3;
 80010bc:	60c2      	str	r2, [r0, #12]
 80010be:	2101      	movs	r1, #1
  icup->config = NULL;
 80010c0:	2200      	movs	r2, #0
  ICUD2.tim = STM32_TIM2;
 80010c2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  icup->state  = ICU_STOP;
 80010c6:	7001      	strb	r1, [r0, #0]
 80010c8:	7019      	strb	r1, [r3, #0]
 80010ca:	60e6      	str	r6, [r4, #12]
 80010cc:	7021      	strb	r1, [r4, #0]
  icup->config = NULL;
 80010ce:	6062      	str	r2, [r4, #4]
  ICUD5.tim = STM32_TIM5;
 80010d0:	60dd      	str	r5, [r3, #12]
 80010d2:	6042      	str	r2, [r0, #4]
 80010d4:	605a      	str	r2, [r3, #4]
}
 80010d6:	bc70      	pop	{r4, r5, r6}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000a40 	.word	0x20000a40
 80010e0:	20000a58 	.word	0x20000a58
 80010e4:	20000a28 	.word	0x20000a28
 80010e8:	40000400 	.word	0x40000400
 80010ec:	40000c00 	.word	0x40000c00

080010f0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80010f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80010f4:	f002 0a03 	and.w	sl, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80010f8:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80010fc:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8001100:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001104:	46d1      	mov	r9, sl
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001106:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 800110a:	2700      	movs	r7, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800110c:	f04f 0b0f 	mov.w	fp, #15
 8001110:	e00f      	b.n	8001132 <_pal_lld_setgroupmode+0x42>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001112:	6a03      	ldr	r3, [r0, #32]
 8001114:	ea23 0404 	bic.w	r4, r3, r4
 8001118:	4325      	orrs	r5, r4
 800111a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800111c:	0849      	lsrs	r1, r1, #1
 800111e:	d039      	beq.n	8001194 <_pal_lld_setgroupmode+0xa4>
      return;
    otyper <<= 1;
 8001120:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 8001124:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 8001128:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 800112c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bit++;
 8001130:	3701      	adds	r7, #1
    if ((mask & 1) != 0) {
 8001132:	07cb      	lsls	r3, r1, #31
 8001134:	d5f2      	bpl.n	800111c <_pal_lld_setgroupmode+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001136:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8001138:	2401      	movs	r4, #1
 800113a:	40bc      	lsls	r4, r7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800113c:	ea23 0304 	bic.w	r3, r3, r4
 8001140:	ea43 0308 	orr.w	r3, r3, r8
 8001144:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 8001146:	2503      	movs	r5, #3
 8001148:	007b      	lsls	r3, r7, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800114a:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 800114c:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001150:	43db      	mvns	r3, r3
 8001152:	401c      	ands	r4, r3
 8001154:	ea44 040c 	orr.w	r4, r4, ip
 8001158:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800115a:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800115c:	f007 0407 	and.w	r4, r7, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001160:	401d      	ands	r5, r3
 8001162:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 8001166:	00a4      	lsls	r4, r4, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001168:	f1ba 0f02 	cmp.w	sl, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800116c:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800116e:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
 8001172:	fa0b f404 	lsl.w	r4, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001176:	d00f      	beq.n	8001198 <_pal_lld_setgroupmode+0xa8>
        port->MODER   = (port->MODER & ~m2) | moder;
 8001178:	6806      	ldr	r6, [r0, #0]
 800117a:	4033      	ands	r3, r6
 800117c:	ea43 0309 	orr.w	r3, r3, r9
        if (bit < 8)
 8001180:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8001182:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8001184:	d9c5      	bls.n	8001112 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001186:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001188:	ea23 0404 	bic.w	r4, r3, r4
 800118c:	4325      	orrs	r5, r4
    if (!mask)
 800118e:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001190:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
 8001192:	d1c5      	bne.n	8001120 <_pal_lld_setgroupmode+0x30>
 8001194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
 8001198:	2f07      	cmp	r7, #7
 800119a:	d80a      	bhi.n	80011b2 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800119c:	6a06      	ldr	r6, [r0, #32]
 800119e:	ea26 0404 	bic.w	r4, r6, r4
 80011a2:	4325      	orrs	r5, r4
 80011a4:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80011a6:	6804      	ldr	r4, [r0, #0]
 80011a8:	4023      	ands	r3, r4
 80011aa:	ea43 0309 	orr.w	r3, r3, r9
 80011ae:	6003      	str	r3, [r0, #0]
 80011b0:	e7b4      	b.n	800111c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80011b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80011b4:	ea26 0404 	bic.w	r4, r6, r4
 80011b8:	4325      	orrs	r5, r4
 80011ba:	6245      	str	r5, [r0, #36]	; 0x24
 80011bc:	e7f3      	b.n	80011a6 <_pal_lld_setgroupmode+0xb6>
 80011be:	bf00      	nop

080011c0 <icuStartCapture>:
void icuStartCapture(ICUDriver *icup) {
 80011c0:	b430      	push	{r4, r5}
 80011c2:	2320      	movs	r3, #32
 80011c4:	f383 8811 	msr	BASEPRI, r3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80011c8:	68c3      	ldr	r3, [r0, #12]
 80011ca:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 80011cc:	2100      	movs	r1, #0
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80011ce:	f042 0201 	orr.w	r2, r2, #1
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80011d2:	2505      	movs	r5, #5
  icuStartCaptureI(icup);
 80011d4:	2403      	movs	r4, #3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80011d6:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 80011d8:	6119      	str	r1, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80011da:	601d      	str	r5, [r3, #0]
 80011dc:	7004      	strb	r4, [r0, #0]
 80011de:	f381 8811 	msr	BASEPRI, r1
}
 80011e2:	bc30      	pop	{r4, r5}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
	...

080011f0 <_port_irq_epilogue>:
 80011f0:	2320      	movs	r3, #32
 80011f2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <_port_irq_epilogue+0x4c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80011fe:	d102      	bne.n	8001206 <_port_irq_epilogue+0x16>
 8001200:	f383 8811 	msr	BASEPRI, r3
 8001204:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800120a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800120e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001212:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8001216:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800121a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <_port_irq_epilogue+0x50>)
 8001220:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8001222:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001224:	6889      	ldr	r1, [r1, #8]
 8001226:	6892      	ldr	r2, [r2, #8]
 8001228:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800122a:	bf8c      	ite	hi
 800122c:	4a05      	ldrhi	r2, [pc, #20]	; (8001244 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800122e:	4a06      	ldrls	r2, [pc, #24]	; (8001248 <_port_irq_epilogue+0x58>)
 8001230:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	200008b0 	.word	0x200008b0
 8001244:	080002b1 	.word	0x080002b1
 8001248:	080002b4 	.word	0x080002b4
 800124c:	00000000 	.word	0x00000000

08001250 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8001250:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD5);
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <Vector108+0x10>)
 8001254:	f7ff fd9c 	bl	8000d90 <icu_lld_serve_interrupt>
}
 8001258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800125c:	f7ff bfc8 	b.w	80011f0 <_port_irq_epilogue>
 8001260:	20000a58 	.word	0x20000a58
	...

08001270 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8001270:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD3);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <VectorB4+0x10>)
 8001274:	f7ff fd8c 	bl	8000d90 <icu_lld_serve_interrupt>
}
 8001278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800127c:	f7ff bfb8 	b.w	80011f0 <_port_irq_epilogue>
 8001280:	20000a40 	.word	0x20000a40
	...

08001290 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8001290:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD2);
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <VectorB0+0x10>)
 8001294:	f7ff fd7c 	bl	8000d90 <icu_lld_serve_interrupt>
}
 8001298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800129c:	f7ff bfa8 	b.w	80011f0 <_port_irq_epilogue>
 80012a0:	20000a28 	.word	0x20000a28
	...

080012b0 <VectorB8>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80012b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80012b4:	4c25      	ldr	r4, [pc, #148]	; (800134c <VectorB8+0x9c>)
 80012b6:	6923      	ldr	r3, [r4, #16]
 80012b8:	079b      	lsls	r3, r3, #30
 80012ba:	d403      	bmi.n	80012c4 <VectorB8+0x14>
}
 80012bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80012c0:	f7ff bf96 	b.w	80011f0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 80012c4:	2700      	movs	r7, #0
 80012c6:	6127      	str	r7, [r4, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80012c8:	2520      	movs	r5, #32
 80012ca:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80012ce:	4e20      	ldr	r6, [pc, #128]	; (8001350 <VectorB8+0xa0>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80012d0:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80012d2:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
  vtp = ch.vtlist.vt_next;
 80012d6:	69f3      	ldr	r3, [r6, #28]
 80012d8:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80012da:	eba0 010e 	sub.w	r1, r0, lr
 80012de:	891a      	ldrh	r2, [r3, #8]
 80012e0:	b289      	uxth	r1, r1
 80012e2:	4291      	cmp	r1, r2
 80012e4:	f106 081c 	add.w	r8, r6, #28
 80012e8:	d31c      	bcc.n	8001324 <VectorB8+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80012ea:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80012ec:	f8d3 900c 	ldr.w	r9, [r3, #12]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80012f0:	4472      	add	r2, lr
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80012f2:	4541      	cmp	r1, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80012f4:	84f2      	strh	r2, [r6, #38]	; 0x26
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80012f6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80012fa:	61f1      	str	r1, [r6, #28]
    vtp->vt_func = NULL;
 80012fc:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80012fe:	bf08      	it	eq
 8001300:	60e7      	streq	r7, [r4, #12]
 8001302:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8001306:	6918      	ldr	r0, [r3, #16]
 8001308:	47c8      	blx	r9
 800130a:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 800130e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001310:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8001314:	69f3      	ldr	r3, [r6, #28]
 8001316:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001318:	eba0 010e 	sub.w	r1, r0, lr
 800131c:	891a      	ldrh	r2, [r3, #8]
 800131e:	b289      	uxth	r1, r1
 8001320:	428a      	cmp	r2, r1
 8001322:	d9e2      	bls.n	80012ea <VectorB8+0x3a>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8001324:	4543      	cmp	r3, r8
 8001326:	d009      	beq.n	800133c <VectorB8+0x8c>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8001328:	4472      	add	r2, lr
 800132a:	1a12      	subs	r2, r2, r0
 800132c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 800132e:	2a02      	cmp	r2, #2
 8001330:	bf2c      	ite	cs
 8001332:	1882      	addcs	r2, r0, r2
 8001334:	1c82      	addcc	r2, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <VectorB8+0x9c>)
 8001338:	b292      	uxth	r2, r2
 800133a:	635a      	str	r2, [r3, #52]	; 0x34
 800133c:	2300      	movs	r3, #0
 800133e:	f383 8811 	msr	BASEPRI, r3
}
 8001342:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8001346:	f7ff bf53 	b.w	80011f0 <_port_irq_epilogue>
 800134a:	bf00      	nop
 800134c:	40000800 	.word	0x40000800
 8001350:	200008b0 	.word	0x200008b0
	...

08001360 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <chTMStopMeasurementX+0x40>)
 8001364:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8001366:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001368:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800136a:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800136c:	6f16      	ldr	r6, [r2, #112]	; 0x70
  if (tmp->last > tmp->worst) {
 800136e:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 8001370:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8001374:	1bdb      	subs	r3, r3, r7
 8001376:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8001378:	18e4      	adds	r4, r4, r3
 800137a:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800137e:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8001380:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8001382:	bf88      	it	hi
 8001384:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8001386:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8001388:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800138a:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800138e:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001390:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 8001392:	bf38      	it	cc
 8001394:	6003      	strcc	r3, [r0, #0]
}
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e0001000 	.word	0xe0001000
 80013a0:	200008b0 	.word	0x200008b0
	...

080013b0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 80013b2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80013b4:	b470      	push	{r4, r5, r6}
  tqp->p_next = tp->p_next;
 80013b6:	6803      	ldr	r3, [r0, #0]
  otp = currp;
 80013b8:	6994      	ldr	r4, [r2, #24]
 80013ba:	6013      	str	r3, [r2, #0]
  currp->p_state = CH_STATE_CURRENT;
 80013bc:	2601      	movs	r6, #1
  otp->p_state = CH_STATE_READY;
 80013be:	2500      	movs	r5, #0
  if (otp->p_prio == IDLEPRIO) {
 80013c0:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80013c2:	605a      	str	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 80013c4:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80013c6:	6190      	str	r0, [r2, #24]
  otp->p_state = CH_STATE_READY;
 80013c8:	7725      	strb	r5, [r4, #28]
 80013ca:	e000      	b.n	80013ce <chSchDoReschedule+0x1e>
 80013cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	4291      	cmp	r1, r2
 80013d2:	d3fb      	bcc.n	80013cc <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	6062      	str	r2, [r4, #4]
  otp->p_next = cp;
 80013d8:	6023      	str	r3, [r4, #0]
  chSysSwitch(currp, otp);
 80013da:	4621      	mov	r1, r4
  otp->p_prev->p_next = otp;
 80013dc:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80013de:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 80013e0:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 80013e2:	f7fe bf55 	b.w	8000290 <_port_switch>
 80013e6:	bf00      	nop
 80013e8:	200008b0 	.word	0x200008b0
 80013ec:	00000000 	.word	0x00000000

080013f0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80013f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (TIME_INFINITE != time) {
 80013f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f8:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80013fa:	b086      	sub	sp, #24
  if (TIME_INFINITE != time) {
 80013fc:	d059      	beq.n	80014b2 <chSchGoSleepTimeoutS+0xc2>
    chVTDoSetI(&vt, time, wakeup, currp);
 80013fe:	4c4f      	ldr	r4, [pc, #316]	; (800153c <chSchGoSleepTimeoutS+0x14c>)
  return (systime_t)STM32_ST_TIM->CNT;
 8001400:	f8df e140 	ldr.w	lr, [pc, #320]	; 8001544 <chSchGoSleepTimeoutS+0x154>

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001404:	4b4e      	ldr	r3, [pc, #312]	; (8001540 <chSchGoSleepTimeoutS+0x150>)
 8001406:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 800140a:	9304      	str	r3, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800140c:	4625      	mov	r5, r4
 800140e:	4607      	mov	r7, r0
  vtp->vt_par = par;
 8001410:	69a0      	ldr	r0, [r4, #24]
 8001412:	9005      	str	r0, [sp, #20]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001414:	f855 0f1c 	ldr.w	r0, [r5, #28]!
 8001418:	2902      	cmp	r1, #2
 800141a:	bf38      	it	cc
 800141c:	2102      	movcc	r1, #2
 800141e:	42a8      	cmp	r0, r5
 8001420:	b296      	uxth	r6, r2
 8001422:	d072      	beq.n	800150a <chSchGoSleepTimeoutS+0x11a>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8001424:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
 8001428:	eba6 060c 	sub.w	r6, r6, ip

    if (delta < now - ch.vtlist.vt_lasttime) {
 800142c:	b292      	uxth	r2, r2
    delta = now - ch.vtlist.vt_lasttime + delay;
 800142e:	198b      	adds	r3, r1, r6
    if (delta < now - ch.vtlist.vt_lasttime) {
 8001430:	eba2 020c 	sub.w	r2, r2, ip
    delta = now - ch.vtlist.vt_lasttime + delay;
 8001434:	b29b      	uxth	r3, r3
    if (delta < now - ch.vtlist.vt_lasttime) {
 8001436:	4293      	cmp	r3, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8001438:	8902      	ldrh	r2, [r0, #8]
    if (delta < now - ch.vtlist.vt_lasttime) {
 800143a:	db35      	blt.n	80014a8 <chSchGoSleepTimeoutS+0xb8>
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 800143c:	4293      	cmp	r3, r2
 800143e:	d340      	bcc.n	80014c2 <chSchGoSleepTimeoutS+0xd2>
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8001440:	4293      	cmp	r3, r2
 8001442:	d905      	bls.n	8001450 <chSchGoSleepTimeoutS+0x60>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001444:	6800      	ldr	r0, [r0, #0]
    delta -= p->vt_delta;
 8001446:	1a9b      	subs	r3, r3, r2
  while (p->vt_delta < delta) {
 8001448:	8902      	ldrh	r2, [r0, #8]
    delta -= p->vt_delta;
 800144a:	b29b      	uxth	r3, r3
  while (p->vt_delta < delta) {
 800144c:	429a      	cmp	r2, r3
 800144e:	d3f9      	bcc.n	8001444 <chSchGoSleepTimeoutS+0x54>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001450:	6842      	ldr	r2, [r0, #4]
 8001452:	9202      	str	r2, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8001454:	f10d 0804 	add.w	r8, sp, #4
  vtp->vt_next = p;
 8001458:	9001      	str	r0, [sp, #4]
  vtp->vt_prev->vt_next = vtp;
 800145a:	f8c2 8000 	str.w	r8, [r2]
  p->vt_prev = vtp;
 800145e:	f8c0 8004 	str.w	r8, [r0, #4]
  vtp->vt_delta = delta
 8001462:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001466:	8902      	ldrh	r2, [r0, #8]
 8001468:	1ad3      	subs	r3, r2, r3
  ch.vtlist.vt_delta = (systime_t)-1;
 800146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  p->vt_delta -= delta;
 800146e:	8103      	strh	r3, [r0, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001470:	84a2      	strh	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001472:	4638      	mov	r0, r7
 8001474:	f7ff fd44 	bl	8000f00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001478:	9b04      	ldr	r3, [sp, #16]
 800147a:	b183      	cbz	r3, 800149e <chSchGoSleepTimeoutS+0xae>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 800147c:	69e3      	ldr	r3, [r4, #28]
 800147e:	4543      	cmp	r3, r8
 8001480:	d025      	beq.n	80014ce <chSchGoSleepTimeoutS+0xde>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001482:	9a02      	ldr	r2, [sp, #8]
 8001484:	9b01      	ldr	r3, [sp, #4]
 8001486:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001488:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 800148a:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800148c:	42ab      	cmp	r3, r5
    vtp->vt_next->vt_prev = vtp->vt_prev;
 800148e:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8001490:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001492:	d004      	beq.n	800149e <chSchGoSleepTimeoutS+0xae>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8001494:	891a      	ldrh	r2, [r3, #8]
 8001496:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800149a:	440a      	add	r2, r1
 800149c:	811a      	strh	r2, [r3, #8]
  return currp->p_u.rdymsg;
 800149e:	69a3      	ldr	r3, [r4, #24]
}
 80014a0:	6a18      	ldr	r0, [r3, #32]
 80014a2:	b006      	add	sp, #24
 80014a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = p->vt_next;
 80014a8:	6800      	ldr	r0, [r0, #0]
      delta -= p->vt_delta;
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	8902      	ldrh	r2, [r0, #8]
 80014b0:	e7c6      	b.n	8001440 <chSchGoSleepTimeoutS+0x50>
 80014b2:	4c22      	ldr	r4, [pc, #136]	; (800153c <chSchGoSleepTimeoutS+0x14c>)
    chSchGoSleepS(newstate);
 80014b4:	f7ff fd24 	bl	8000f00 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 80014b8:	69a3      	ldr	r3, [r4, #24]
}
 80014ba:	6a18      	ldr	r0, [r3, #32]
 80014bc:	b006      	add	sp, #24
 80014be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 80014c2:	eb0c 0103 	add.w	r1, ip, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80014c6:	b289      	uxth	r1, r1
 80014c8:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
 80014cc:	e7b8      	b.n	8001440 <chSchGoSleepTimeoutS+0x50>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 80014ce:	9e01      	ldr	r6, [sp, #4]
 80014d0:	61e6      	str	r6, [r4, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 80014d2:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80014d4:	42ae      	cmp	r6, r5
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80014d6:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 80014d8:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80014da:	d02c      	beq.n	8001536 <chSchGoSleepTimeoutS+0x146>
  return (systime_t)STM32_ST_TIM->CNT;
 80014dc:	4819      	ldr	r0, [pc, #100]	; (8001544 <chSchGoSleepTimeoutS+0x154>)
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80014de:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80014e0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80014e2:	8933      	ldrh	r3, [r6, #8]
 80014e4:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 80014e8:	b292      	uxth	r2, r2
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80014ea:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80014ec:	442b      	add	r3, r5
 80014ee:	b29b      	uxth	r3, r3
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80014f0:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80014f2:	428b      	cmp	r3, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80014f4:	8133      	strh	r3, [r6, #8]
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80014f6:	d9d2      	bls.n	800149e <chSchGoSleepTimeoutS+0xae>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 80014f8:	1a5b      	subs	r3, r3, r1
 80014fa:	b29b      	uxth	r3, r3
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	bf2c      	ite	cs
 8001500:	18d3      	addcs	r3, r2, r3
 8001502:	1c93      	addcc	r3, r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001504:	b29b      	uxth	r3, r3
 8001506:	6343      	str	r3, [r0, #52]	; 0x34
 8001508:	e7c9      	b.n	800149e <chSchGoSleepTimeoutS+0xae>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800150a:	198b      	adds	r3, r1, r6
      ch.vtlist.vt_next = vtp;
 800150c:	f10d 0804 	add.w	r8, sp, #4
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001510:	b29b      	uxth	r3, r3
  STM32_ST_TIM->SR     = 0;
 8001512:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001514:	2202      	movs	r2, #2
      ch.vtlist.vt_lasttime = now;
 8001516:	84e6      	strh	r6, [r4, #38]	; 0x26
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8001518:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800151a:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 800151c:	f8ad 100c 	strh.w	r1, [sp, #12]
      ch.vtlist.vt_next = vtp;
 8001520:	f8c4 801c 	str.w	r8, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 8001524:	f8c4 8020 	str.w	r8, [r4, #32]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001528:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800152c:	f8ce 0010 	str.w	r0, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001530:	f8ce 200c 	str.w	r2, [lr, #12]
 8001534:	e79d      	b.n	8001472 <chSchGoSleepTimeoutS+0x82>
  STM32_ST_TIM->DIER = 0;
 8001536:	4a03      	ldr	r2, [pc, #12]	; (8001544 <chSchGoSleepTimeoutS+0x154>)
 8001538:	60d3      	str	r3, [r2, #12]
 800153a:	e7b0      	b.n	800149e <chSchGoSleepTimeoutS+0xae>
 800153c:	200008b0 	.word	0x200008b0
 8001540:	08000e81 	.word	0x08000e81
 8001544:	40000800 	.word	0x40000800
	...

08001550 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001550:	b161      	cbz	r1, 800156c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <chThdEnqueueTimeoutS+0x24>)
 8001554:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001556:	b410      	push	{r4}
  tp->p_next = (thread_t *)tqp;
 8001558:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 800155a:	6844      	ldr	r4, [r0, #4]
 800155c:	605c      	str	r4, [r3, #4]
 800155e:	4602      	mov	r2, r0
  tp->p_prev->p_next = tp;
 8001560:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001562:	2004      	movs	r0, #4
  tqp->p_prev = tp;
 8001564:	6053      	str	r3, [r2, #4]
}
 8001566:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001568:	f7ff bf42 	b.w	80013f0 <chSchGoSleepTimeoutS>
}
 800156c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200008b0 	.word	0x200008b0
	...

08001580 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001584:	b083      	sub	sp, #12
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
 800158a:	4616      	mov	r6, r2
 800158c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800158e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001592:	f04f 0920 	mov.w	r9, #32
 8001596:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800159a:	2700      	movs	r7, #0
 800159c:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800159e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80015a0:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80015a4:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 80015a6:	b303      	cbz	r3, 80015ea <chOQWriteTimeout+0x6a>
    *oqp->q_wrptr++ = *bp++;
 80015a8:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 80015aa:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80015ac:	1c4a      	adds	r2, r1, #1
    oqp->q_counter--;
 80015ae:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 80015b0:	6162      	str	r2, [r4, #20]
    oqp->q_counter--;
 80015b2:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80015b4:	782b      	ldrb	r3, [r5, #0]
 80015b6:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80015b8:	6923      	ldr	r3, [r4, #16]
 80015ba:	6961      	ldr	r1, [r4, #20]
 80015bc:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 80015be:	bf24      	itt	cs
 80015c0:	68e3      	ldrcs	r3, [r4, #12]
 80015c2:	6163      	strcs	r3, [r4, #20]
    if (nfy != NULL) {
 80015c4:	f1b8 0f00 	cmp.w	r8, #0
 80015c8:	d000      	beq.n	80015cc <chOQWriteTimeout+0x4c>
      nfy(oqp);
 80015ca:	47c0      	blx	r8
 80015cc:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80015d0:	3e01      	subs	r6, #1
    w++;
 80015d2:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80015d6:	d012      	beq.n	80015fe <chOQWriteTimeout+0x7e>
 80015d8:	f389 8811 	msr	BASEPRI, r9
 80015dc:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80015de:	465d      	mov	r5, fp
 80015e0:	f105 0b01 	add.w	fp, r5, #1
      nfy(oqp);
 80015e4:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1de      	bne.n	80015a8 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80015ea:	9901      	ldr	r1, [sp, #4]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff ffae 	bl	8001550 <chThdEnqueueTimeoutS>
 80015f4:	9b00      	ldr	r3, [sp, #0]
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d0d1      	beq.n	800159e <chOQWriteTimeout+0x1e>
 80015fa:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 80015fe:	4638      	mov	r0, r7
 8001600:	b003      	add	sp, #12
 8001602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001606:	bf00      	nop
	...

08001610 <writet.lto_priv.30>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001610:	3030      	adds	r0, #48	; 0x30
 8001612:	f7ff bfb5 	b.w	8001580 <chOQWriteTimeout>
 8001616:	bf00      	nop
	...

08001620 <write.lto_priv.24>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001620:	3030      	adds	r0, #48	; 0x30
 8001622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001626:	f7ff bfab 	b.w	8001580 <chOQWriteTimeout>
 800162a:	bf00      	nop
 800162c:	0000      	movs	r0, r0
	...

08001630 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	4604      	mov	r4, r0
 8001634:	460f      	mov	r7, r1
 8001636:	4616      	mov	r6, r2
 8001638:	2320      	movs	r3, #32
 800163a:	f383 8811 	msr	BASEPRI, r3
 800163e:	e003      	b.n	8001648 <chOQPutTimeout+0x18>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001640:	f7ff ff86 	bl	8001550 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001644:	2800      	cmp	r0, #0
 8001646:	db19      	blt.n	800167c <chOQPutTimeout+0x4c>
 8001648:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800164a:	4631      	mov	r1, r6
 800164c:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 800164e:	2d00      	cmp	r5, #0
 8001650:	d0f6      	beq.n	8001640 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8001652:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001654:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001656:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001658:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800165a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800165c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800165e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001660:	6923      	ldr	r3, [r4, #16]
 8001662:	6962      	ldr	r2, [r4, #20]
 8001664:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001666:	bf24      	itt	cs
 8001668:	68e3      	ldrcs	r3, [r4, #12]
 800166a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800166c:	69e3      	ldr	r3, [r4, #28]
 800166e:	b10b      	cbz	r3, 8001674 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001670:	4620      	mov	r0, r4
 8001672:	4798      	blx	r3
 8001674:	2000      	movs	r0, #0
 8001676:	f380 8811 	msr	BASEPRI, r0
}
 800167a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800167c:	f385 8811 	msr	BASEPRI, r5
 8001680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001682:	bf00      	nop
	...

08001690 <putt.lto_priv.28>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001690:	3030      	adds	r0, #48	; 0x30
 8001692:	f7ff bfcd 	b.w	8001630 <chOQPutTimeout>
 8001696:	bf00      	nop
	...

080016a0 <put.lto_priv.26>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80016a0:	3030      	adds	r0, #48	; 0x30
 80016a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a6:	f7ff bfc3 	b.w	8001630 <chOQPutTimeout>
 80016aa:	bf00      	nop
 80016ac:	0000      	movs	r0, r0
	...

080016b0 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 80016b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b4:	4604      	mov	r4, r0
 80016b6:	b083      	sub	sp, #12
 80016b8:	4689      	mov	r9, r1
 80016ba:	4693      	mov	fp, r2
 80016bc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80016be:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80016c2:	2720      	movs	r7, #32
 80016c4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80016c8:	2600      	movs	r6, #0
 80016ca:	9701      	str	r7, [sp, #4]
 80016cc:	46b2      	mov	sl, r6
    if (nfy != NULL) {
 80016ce:	f1b8 0f00 	cmp.w	r8, #0
 80016d2:	d005      	beq.n	80016e0 <chIQReadTimeout+0x30>
      nfy(iqp);
 80016d4:	4620      	mov	r0, r4
 80016d6:	47c0      	blx	r8
 80016d8:	e002      	b.n	80016e0 <chIQReadTimeout+0x30>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 80016da:	f7ff ff39 	bl	8001550 <chThdEnqueueTimeoutS>
 80016de:	b9e0      	cbnz	r0, 800171a <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 80016e0:	68a7      	ldr	r7, [r4, #8]
 80016e2:	4629      	mov	r1, r5
 80016e4:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 80016e6:	2f00      	cmp	r7, #0
 80016e8:	d0f7      	beq.n	80016da <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 80016ea:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 80016ec:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80016ee:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 80016f0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 80016f2:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 80016f4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80016f6:	7813      	ldrb	r3, [r2, #0]
 80016f8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 80016fc:	6923      	ldr	r3, [r4, #16]
 80016fe:	69a2      	ldr	r2, [r4, #24]
 8001700:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001702:	bf24      	itt	cs
 8001704:	68e3      	ldrcs	r3, [r4, #12]
 8001706:	61a3      	strcs	r3, [r4, #24]
 8001708:	f38a 8811 	msr	BASEPRI, sl
    r++;
 800170c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800170e:	45b3      	cmp	fp, r6
 8001710:	d005      	beq.n	800171e <chIQReadTimeout+0x6e>
 8001712:	9b01      	ldr	r3, [sp, #4]
 8001714:	f383 8811 	msr	BASEPRI, r3
 8001718:	e7d9      	b.n	80016ce <chIQReadTimeout+0x1e>
 800171a:	f387 8811 	msr	BASEPRI, r7
}
 800171e:	4630      	mov	r0, r6
 8001720:	b003      	add	sp, #12
 8001722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001726:	bf00      	nop
	...

08001730 <readt.lto_priv.31>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001730:	300c      	adds	r0, #12
 8001732:	f7ff bfbd 	b.w	80016b0 <chIQReadTimeout>
 8001736:	bf00      	nop
	...

08001740 <read.lto_priv.25>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001740:	300c      	adds	r0, #12
 8001742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001746:	f7ff bfb3 	b.w	80016b0 <chIQReadTimeout>
 800174a:	bf00      	nop
 800174c:	0000      	movs	r0, r0
	...

08001750 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	2320      	movs	r3, #32
 8001754:	460e      	mov	r6, r1
 8001756:	4604      	mov	r4, r0
 8001758:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 800175c:	69c3      	ldr	r3, [r0, #28]
 800175e:	b12b      	cbz	r3, 800176c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8001760:	4798      	blx	r3
 8001762:	e003      	b.n	800176c <chIQGetTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001764:	f7ff fef4 	bl	8001550 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001768:	2800      	cmp	r0, #0
 800176a:	db15      	blt.n	8001798 <chIQGetTimeout+0x48>
 800176c:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800176e:	4631      	mov	r1, r6
 8001770:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 8001772:	2d00      	cmp	r5, #0
 8001774:	d0f6      	beq.n	8001764 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8001776:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001778:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800177a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800177c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800177e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001780:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 8001782:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001784:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001786:	bf28      	it	cs
 8001788:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800178a:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800178c:	bf28      	it	cs
 800178e:	61a3      	strcs	r3, [r4, #24]
 8001790:	2300      	movs	r3, #0
 8001792:	f383 8811 	msr	BASEPRI, r3
}
 8001796:	bd70      	pop	{r4, r5, r6, pc}
 8001798:	f385 8811 	msr	BASEPRI, r5
 800179c:	bd70      	pop	{r4, r5, r6, pc}
 800179e:	bf00      	nop

080017a0 <gett.lto_priv.29>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80017a0:	300c      	adds	r0, #12
 80017a2:	f7ff bfd5 	b.w	8001750 <chIQGetTimeout>
 80017a6:	bf00      	nop
	...

080017b0 <get.lto_priv.27>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80017b0:	300c      	adds	r0, #12
 80017b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017b6:	f7ff bfcb 	b.w	8001750 <chIQGetTimeout>
 80017ba:	bf00      	nop
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 80017c0:	2200      	movs	r2, #0
 80017c2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <chSchReadyI+0x24>)
thread_t *chSchReadyI(thread_t *tp) {
 80017c6:	b410      	push	{r4}
 80017c8:	4604      	mov	r4, r0
  tp->p_state = CH_STATE_READY;
 80017ca:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 80017cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	428a      	cmp	r2, r1
 80017d2:	d2fb      	bcs.n	80017cc <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 80017d8:	6023      	str	r3, [r4, #0]
}
 80017da:	4620      	mov	r0, r4
  tp->p_prev->p_next = tp;
 80017dc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80017de:	605c      	str	r4, [r3, #4]
}
 80017e0:	bc10      	pop	{r4}
 80017e2:	4770      	bx	lr
 80017e4:	200008b0 	.word	0x200008b0
	...

080017f0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80017f2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80017f4:	42a0      	cmp	r0, r4
 80017f6:	d021      	beq.n	800183c <chEvtBroadcastFlagsI+0x4c>
 80017f8:	460d      	mov	r5, r1
 80017fa:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80017fc:	2600      	movs	r6, #0
 80017fe:	e002      	b.n	8001806 <chEvtBroadcastFlagsI+0x16>
    elp = elp->el_next;
 8001800:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001802:	42a7      	cmp	r7, r4
 8001804:	d01a      	beq.n	800183c <chEvtBroadcastFlagsI+0x4c>
    elp->el_flags |= flags;
 8001806:	68e3      	ldr	r3, [r4, #12]
 8001808:	432b      	orrs	r3, r5
 800180a:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800180c:	b115      	cbz	r5, 8001814 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800180e:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001810:	4213      	tst	r3, r2
 8001812:	d0f5      	beq.n	8001800 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8001814:	6860      	ldr	r0, [r4, #4]
  tp->p_epending |= events;
 8001816:	68a3      	ldr	r3, [r4, #8]
 8001818:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800181a:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 800181c:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800181e:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 8001820:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001822:	d00c      	beq.n	800183e <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001824:	2a0b      	cmp	r2, #11
 8001826:	d1eb      	bne.n	8001800 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001828:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800182a:	ea32 0303 	bics.w	r3, r2, r3
 800182e:	d1e7      	bne.n	8001800 <chEvtBroadcastFlagsI+0x10>
    tp->p_u.rdymsg = MSG_OK;
 8001830:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8001832:	f7ff ffc5 	bl	80017c0 <chSchReadyI>
    elp = elp->el_next;
 8001836:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001838:	42a7      	cmp	r7, r4
 800183a:	d1e4      	bne.n	8001806 <chEvtBroadcastFlagsI+0x16>
 800183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800183e:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001840:	4213      	tst	r3, r2
 8001842:	d0dd      	beq.n	8001800 <chEvtBroadcastFlagsI+0x10>
    tp->p_u.rdymsg = MSG_OK;
 8001844:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8001846:	f7ff ffbb 	bl	80017c0 <chSchReadyI>
 800184a:	e7f4      	b.n	8001836 <chEvtBroadcastFlagsI+0x46>
 800184c:	0000      	movs	r0, r0
	...

08001850 <chThdExit>:
void chThdExit(msg_t msg) {
 8001850:	b538      	push	{r3, r4, r5, lr}
 8001852:	2220      	movs	r2, #32
 8001854:	4603      	mov	r3, r0
 8001856:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <chThdExit+0x44>)
 800185c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800185e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
 8001860:	6223      	str	r3, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 8001862:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001866:	4285      	cmp	r5, r0
 8001868:	d006      	beq.n	8001878 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 800186a:	6803      	ldr	r3, [r0, #0]
 800186c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800186e:	f7ff ffa7 	bl	80017c0 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001872:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 8001874:	42a8      	cmp	r0, r5
 8001876:	d1f8      	bne.n	800186a <chThdExit+0x1a>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001878:	7f63      	ldrb	r3, [r4, #29]
 800187a:	079b      	lsls	r3, r3, #30
 800187c:	d104      	bne.n	8001888 <chThdExit+0x38>
    REG_REMOVE(tp);
 800187e:	6963      	ldr	r3, [r4, #20]
 8001880:	6922      	ldr	r2, [r4, #16]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	6922      	ldr	r2, [r4, #16]
 8001886:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001888:	200f      	movs	r0, #15
}
 800188a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800188e:	f7ff bb37 	b.w	8000f00 <chSchGoSleepS>
 8001892:	bf00      	nop
 8001894:	200008b0 	.word	0x200008b0
	...

080018a0 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 80018a0:	e7fe      	b.n	80018a0 <BusFault_Handler>
 80018a2:	bf00      	nop
	...

080018b0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	4f13      	ldr	r7, [pc, #76]	; (8001900 <__init_ram_areas+0x50>)
 80018b4:	4d13      	ldr	r5, [pc, #76]	; (8001904 <__init_ram_areas+0x54>)
 80018b6:	4c14      	ldr	r4, [pc, #80]	; (8001908 <__init_ram_areas+0x58>)
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <__init_ram_areas+0x5c>)
 80018ba:	4915      	ldr	r1, [pc, #84]	; (8001910 <__init_ram_areas+0x60>)
 80018bc:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80018c0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80018c2:	429c      	cmp	r4, r3
 80018c4:	d911      	bls.n	80018ea <__init_ram_areas+0x3a>
 80018c6:	3904      	subs	r1, #4
 80018c8:	461a      	mov	r2, r3
      *p = *tp;
 80018ca:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80018ce:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80018d2:	4294      	cmp	r4, r2
 80018d4:	d8f9      	bhi.n	80018ca <__init_ram_areas+0x1a>
 80018d6:	43da      	mvns	r2, r3
 80018d8:	4414      	add	r4, r2
 80018da:	f024 0403 	bic.w	r4, r4, #3
 80018de:	3404      	adds	r4, #4
 80018e0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80018e2:	429d      	cmp	r5, r3
 80018e4:	d903      	bls.n	80018ee <__init_ram_areas+0x3e>
      *p = 0;
 80018e6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80018ea:	429d      	cmp	r5, r3
 80018ec:	d8fb      	bhi.n	80018e6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80018ee:	4577      	cmp	r7, lr
 80018f0:	d004      	beq.n	80018fc <__init_ram_areas+0x4c>
 80018f2:	f107 0110 	add.w	r1, r7, #16
 80018f6:	c93a      	ldmia	r1, {r1, r3, r4, r5}
 80018f8:	3710      	adds	r7, #16
 80018fa:	e7e2      	b.n	80018c2 <__init_ram_areas+0x12>
 80018fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fe:	bf00      	nop
 8001900:	08001f90 	.word	0x08001f90
 8001904:	20000b2c 	.word	0x20000b2c
 8001908:	20000b2c 	.word	0x20000b2c
 800190c:	20000b2c 	.word	0x20000b2c
 8001910:	08002074 	.word	0x08002074
	...

08001920 <__default_exit>:
void __default_exit(void) {
 8001920:	e7fe      	b.n	8001920 <__default_exit>
 8001922:	bf00      	nop
	...

08001930 <__late_init>:
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
	...

08001940 <__core_init>:
void __core_init(void) {
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
	...

08001950 <encoder_pulse_captured>:
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001950:	6942      	ldr	r2, [r0, #20]
    if (icup == &ICUD2) {
 8001952:	4933      	ldr	r1, [pc, #204]	; (8001a20 <encoder_pulse_captured+0xd0>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <encoder_pulse_captured+0xd4>)
    if (icup == &ICUD2) {
 8001958:	4288      	cmp	r0, r1
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 800195a:	f102 0201 	add.w	r2, r2, #1
 800195e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001962:	b21b      	sxth	r3, r3
    if (icup == &ICUD2) {
 8001964:	d010      	beq.n	8001988 <encoder_pulse_captured+0x38>
    } else if (icup == &ICUD5) {
 8001966:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <encoder_pulse_captured+0xd8>)
 8001968:	4290      	cmp	r0, r2
 800196a:	d03d      	beq.n	80019e8 <encoder_pulse_captured+0x98>
    } else if (icup == &ICUD3) {
 800196c:	4a2f      	ldr	r2, [pc, #188]	; (8001a2c <encoder_pulse_captured+0xdc>)
 800196e:	4290      	cmp	r0, r2
 8001970:	d000      	beq.n	8001974 <encoder_pulse_captured+0x24>
}
 8001972:	4770      	bx	lr
        rotations_per_sec[2] = 1000 / (period_width * 24);
 8001974:	492e      	ldr	r1, [pc, #184]	; (8001a30 <encoder_pulse_captured+0xe0>)
 8001976:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001980:	fb92 f3f3 	sdiv	r3, r2, r3
 8001984:	808b      	strh	r3, [r1, #4]
 8001986:	4770      	bx	lr
        period[0] = motor_freqs[0];
 8001988:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <encoder_pulse_captured+0xe4>)
    int16_t period_calc = (1848*period_width-281984)/1667;
 800198a:	492b      	ldr	r1, [pc, #172]	; (8001a38 <encoder_pulse_captured+0xe8>)
        period[2] = motor_actual_speeds[0]; 
 800198c:	482b      	ldr	r0, [pc, #172]	; (8001a3c <encoder_pulse_captured+0xec>)
void encoder_pulse_captured(ICUDriver *icup) {
 800198e:	b4f0      	push	{r4, r5, r6, r7}
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001990:	4e2b      	ldr	r6, [pc, #172]	; (8001a40 <encoder_pulse_captured+0xf0>)
        period[0] = motor_freqs[0];
 8001992:	6815      	ldr	r5, [r2, #0]
 8001994:	4c2b      	ldr	r4, [pc, #172]	; (8001a44 <encoder_pulse_captured+0xf4>)
        i_occured[0] = true;
 8001996:	4f2c      	ldr	r7, [pc, #176]	; (8001a48 <encoder_pulse_captured+0xf8>)
        period[0] = motor_freqs[0];
 8001998:	8025      	strh	r5, [r4, #0]
    int16_t period_calc = (1848*period_width-281984)/1667;
 800199a:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800199e:	fb13 6202 	smlabb	r2, r3, r2, r6
 80019a2:	fb81 6102 	smull	r6, r1, r1, r2
 80019a6:	4411      	add	r1, r2
 80019a8:	17d2      	asrs	r2, r2, #31
 80019aa:	ebc2 22a1 	rsb	r2, r2, r1, asr #10
 80019ae:	b212      	sxth	r2, r2
        rotations_per_sec[0] = period_width;
 80019b0:	4e1f      	ldr	r6, [pc, #124]	; (8001a30 <encoder_pulse_captured+0xe0>)
        period[2] = motor_actual_speeds[0]; 
 80019b2:	f9b0 1000 	ldrsh.w	r1, [r0]
 80019b6:	80a1      	strh	r1, [r4, #4]
        period[1] = period_calc;
 80019b8:	8062      	strh	r2, [r4, #2]
        if(period_calc < motor_freqs[0]) {
 80019ba:	4295      	cmp	r5, r2
        i_occured[0] = true;
 80019bc:	f04f 0401 	mov.w	r4, #1
 80019c0:	703c      	strb	r4, [r7, #0]
        rotations_per_sec[0] = period_width;
 80019c2:	8033      	strh	r3, [r6, #0]
        if(period_calc < motor_freqs[0]) {
 80019c4:	dd1a      	ble.n	80019fc <encoder_pulse_captured+0xac>
            pwmEnableChannel(&PWMD1, 0, ++motor_actual_speeds[0]);
 80019c6:	4421      	add	r1, r4
 80019c8:	b209      	sxth	r1, r1
 80019ca:	8001      	strh	r1, [r0, #0]
 80019cc:	2320      	movs	r3, #32
 80019ce:	f383 8811 	msr	BASEPRI, r3
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <encoder_pulse_captured+0xfc>)
 80019d4:	68da      	ldr	r2, [r3, #12]
  pwmp->tim->CCR[channel] = width;
 80019d6:	6998      	ldr	r0, [r3, #24]
 80019d8:	4322      	orrs	r2, r4
 80019da:	6341      	str	r1, [r0, #52]	; 0x34
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	2300      	movs	r3, #0
 80019e0:	f383 8811 	msr	BASEPRI, r3
}
 80019e4:	bcf0      	pop	{r4, r5, r6, r7}
 80019e6:	4770      	bx	lr
        rotations_per_sec[1] = 1000 / (period_width * 24);
 80019e8:	4911      	ldr	r1, [pc, #68]	; (8001a30 <encoder_pulse_captured+0xe0>)
 80019ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019ee:	00da      	lsls	r2, r3, #3
 80019f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80019f8:	804b      	strh	r3, [r1, #2]
 80019fa:	4770      	bx	lr
            pwmEnableChannel(&PWMD1, 0, --motor_actual_speeds[0]);
 80019fc:	3901      	subs	r1, #1
 80019fe:	b209      	sxth	r1, r1
 8001a00:	8001      	strh	r1, [r0, #0]
 8001a02:	2320      	movs	r3, #32
 8001a04:	f383 8811 	msr	BASEPRI, r3
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <encoder_pulse_captured+0xfc>)
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	6998      	ldr	r0, [r3, #24]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	6341      	str	r1, [r0, #52]	; 0x34
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	2300      	movs	r3, #0
 8001a18:	f383 8811 	msr	BASEPRI, r3
 8001a1c:	e7e2      	b.n	80019e4 <encoder_pulse_captured+0x94>
 8001a1e:	bf00      	nop
 8001a20:	20000a28 	.word	0x20000a28
 8001a24:	000f4240 	.word	0x000f4240
 8001a28:	20000a58 	.word	0x20000a58
 8001a2c:	20000a40 	.word	0x20000a40
 8001a30:	20000b24 	.word	0x20000b24
 8001a34:	20000b10 	.word	0x20000b10
 8001a38:	9d414457 	.word	0x9d414457
 8001a3c:	20000b08 	.word	0x20000b08
 8001a40:	fffbb280 	.word	0xfffbb280
 8001a44:	20000b1c 	.word	0x20000b1c
 8001a48:	20000b04 	.word	0x20000b04
 8001a4c:	20000a70 	.word	0x20000a70

08001a50 <chTMStartMeasurementX.constprop.19>:
 8001a50:	4b01      	ldr	r3, [pc, #4]	; (8001a58 <chTMStartMeasurementX.constprop.19+0x8>)
 8001a52:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001a54:	6083      	str	r3, [r0, #8]
 8001a56:	4770      	bx	lr
 8001a58:	e0001000 	.word	0xe0001000
 8001a5c:	00000000 	.word	0x00000000

08001a60 <sdObjectInit.constprop.13>:
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  sdp->vmt = &vmt;
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <sdObjectInit.constprop.13+0x54>)
 8001a66:	f843 2b04 	str.w	r2, [r3], #4
  iqp->q_counter = 0;
 8001a6a:	2500      	movs	r5, #0
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001a6c:	f100 0254 	add.w	r2, r0, #84	; 0x54
 8001a70:	f100 040c 	add.w	r4, r0, #12
  sdp->state = SD_STOP;
 8001a74:	f04f 0e01 	mov.w	lr, #1
  oqp->q_counter = size;
 8001a78:	2710      	movs	r7, #16
  oqp->q_top     = bp + size;
 8001a7a:	f100 0674 	add.w	r6, r0, #116	; 0x74
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8001a7e:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 8001a80:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;
 8001a82:	f100 0364 	add.w	r3, r0, #100	; 0x64
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8001a86:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqp->q_counter = 0;
 8001a8a:	6145      	str	r5, [r0, #20]
  iqp->q_link    = link;
 8001a8c:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8001a8e:	6500      	str	r0, [r0, #80]	; 0x50
  sdp->state = SD_STOP;
 8001a90:	f880 e008 	strb.w	lr, [r0, #8]
  iqp->q_notify  = infy;
 8001a94:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8001a96:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8001a98:	6406      	str	r6, [r0, #64]	; 0x40
  tqp->p_next = (thread_t *)tqp;
 8001a9a:	60c4      	str	r4, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 8001a9c:	6104      	str	r4, [r0, #16]
  iqp->q_buffer  = bp;
 8001a9e:	6182      	str	r2, [r0, #24]
  iqp->q_rdptr   = bp;
 8001aa0:	6242      	str	r2, [r0, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001aa2:	6202      	str	r2, [r0, #32]
  iqp->q_top     = bp + size;
 8001aa4:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 8001aa6:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8001aa8:	6483      	str	r3, [r0, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001aaa:	6443      	str	r3, [r0, #68]	; 0x44
  tqp->p_next = (thread_t *)tqp;
 8001aac:	6301      	str	r1, [r0, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8001aae:	6341      	str	r1, [r0, #52]	; 0x34
 8001ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	08002020 	.word	0x08002020
	...

08001ac0 <chprintf.constprop.1>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001ac0:	b40e      	push	{r1, r2, r3}
 8001ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac6:	b086      	sub	sp, #24
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001ac8:	ab10      	add	r3, sp, #64	; 0x40
    c = *fmt++;
 8001aca:	4f70      	ldr	r7, [pc, #448]	; (8001c8c <chprintf.constprop.1+0x1cc>)
  va_start(ap, fmt);
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	469a      	mov	sl, r3
 8001ad0:	4d6f      	ldr	r5, [pc, #444]	; (8001c90 <chprintf.constprop.1+0x1d0>)
  int n = 0;
 8001ad2:	2300      	movs	r3, #0
  va_start(ap, fmt);
 8001ad4:	1e7e      	subs	r6, r7, #1
  int n = 0;
 8001ad6:	9300      	str	r3, [sp, #0]
    if (*fmt == '-') {
 8001ad8:	7873      	ldrb	r3, [r6, #1]
 8001ada:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8001adc:	bf04      	itt	eq
 8001ade:	1cb7      	addeq	r7, r6, #2
      left_align = TRUE;
 8001ae0:	f04f 0c01 	moveq.w	ip, #1
    if (*fmt == '0') {
 8001ae4:	783a      	ldrb	r2, [r7, #0]
    left_align = FALSE;
 8001ae6:	bf18      	it	ne
 8001ae8:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8001aec:	2a30      	cmp	r2, #48	; 0x30
 8001aee:	bf03      	ittte	eq
 8001af0:	787a      	ldrbeq	r2, [r7, #1]
      fmt++;
 8001af2:	3701      	addeq	r7, #1
      filler = '0';
 8001af4:	f04f 0830 	moveq.w	r8, #48	; 0x30
    filler = ' ';
 8001af8:	f04f 0820 	movne.w	r8, #32
 8001afc:	1c79      	adds	r1, r7, #1
    width = 0;
 8001afe:	2400      	movs	r4, #0
 8001b00:	e007      	b.n	8001b12 <chprintf.constprop.1+0x52>
        c = va_arg(ap, int);
 8001b02:	f89a 3000 	ldrb.w	r3, [sl]
 8001b06:	f10a 0a04 	add.w	sl, sl, #4
 8001b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
      width = width * 10 + c;
 8001b0e:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8001b12:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b09      	cmp	r3, #9
      c = *fmt++;
 8001b1a:	460e      	mov	r6, r1
      width = width * 10 + c;
 8001b1c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8001b20:	d9f3      	bls.n	8001b0a <chprintf.constprop.1+0x4a>
      else if (c == '*')
 8001b22:	2a2a      	cmp	r2, #42	; 0x2a
 8001b24:	d0ed      	beq.n	8001b02 <chprintf.constprop.1+0x42>
    if (c == '.') {
 8001b26:	2a2e      	cmp	r2, #46	; 0x2e
 8001b28:	f04f 0100 	mov.w	r1, #0
 8001b2c:	d045      	beq.n	8001bba <chprintf.constprop.1+0xfa>
    if (c == 'l' || c == 'L') {
 8001b2e:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001b32:	2b4c      	cmp	r3, #76	; 0x4c
 8001b34:	d050      	beq.n	8001bd8 <chprintf.constprop.1+0x118>
    switch (c) {
 8001b36:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8001b3a:	2834      	cmp	r0, #52	; 0x34
 8001b3c:	f200 8153 	bhi.w	8001de6 <chprintf.constprop.1+0x326>
 8001b40:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001b44:	01510121 	.word	0x01510121
 8001b48:	01510151 	.word	0x01510151
 8001b4c:	01210151 	.word	0x01210151
 8001b50:	01510151 	.word	0x01510151
 8001b54:	01510151 	.word	0x01510151
 8001b58:	01910151 	.word	0x01910151
 8001b5c:	01510151 	.word	0x01510151
 8001b60:	01510151 	.word	0x01510151
 8001b64:	01620151 	.word	0x01620151
 8001b68:	01510151 	.word	0x01510151
 8001b6c:	01510194 	.word	0x01510194
 8001b70:	01510151 	.word	0x01510151
 8001b74:	01510151 	.word	0x01510151
 8001b78:	01510151 	.word	0x01510151
 8001b7c:	01510151 	.word	0x01510151
 8001b80:	010a0151 	.word	0x010a0151
 8001b84:	01510121 	.word	0x01510121
 8001b88:	01510151 	.word	0x01510151
 8001b8c:	01210151 	.word	0x01210151
 8001b90:	01510151 	.word	0x01510151
 8001b94:	01510151 	.word	0x01510151
 8001b98:	01910151 	.word	0x01910151
 8001b9c:	01510151 	.word	0x01510151
 8001ba0:	008f0151 	.word	0x008f0151
 8001ba4:	01620151 	.word	0x01620151
 8001ba8:	01510151 	.word	0x01510151
 8001bac:	0194      	.short	0x0194
          c = va_arg(ap, int);
 8001bae:	f89a 3000 	ldrb.w	r3, [sl]
 8001bb2:	f10a 0a04 	add.w	sl, sl, #4
        precision += c;
 8001bb6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
        c = *fmt++;
 8001bba:	f816 2b01 	ldrb.w	r2, [r6], #1
        if (c >= '0' && c <= '9')
 8001bbe:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b09      	cmp	r3, #9
        precision *= 10;
 8001bc6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9')
 8001bca:	d9f4      	bls.n	8001bb6 <chprintf.constprop.1+0xf6>
        else if (c == '*')
 8001bcc:	2a2a      	cmp	r2, #42	; 0x2a
 8001bce:	d0ee      	beq.n	8001bae <chprintf.constprop.1+0xee>
    if (c == 'l' || c == 'L') {
 8001bd0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001bd4:	2b4c      	cmp	r3, #76	; 0x4c
 8001bd6:	d1ae      	bne.n	8001b36 <chprintf.constprop.1+0x76>
      if (*fmt)
 8001bd8:	f896 9000 	ldrb.w	r9, [r6]
 8001bdc:	f1b9 0f00 	cmp.w	r9, #0
 8001be0:	d003      	beq.n	8001bea <chprintf.constprop.1+0x12a>
        c = *fmt++;
 8001be2:	464a      	mov	r2, r9
 8001be4:	3601      	adds	r6, #1
 8001be6:	f896 9000 	ldrb.w	r9, [r6]
    switch (c) {
 8001bea:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8001bee:	2b34      	cmp	r3, #52	; 0x34
 8001bf0:	f200 80fb 	bhi.w	8001dea <chprintf.constprop.1+0x32a>
 8001bf4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001bf8:	00f900c9 	.word	0x00f900c9
 8001bfc:	00f900f9 	.word	0x00f900f9
 8001c00:	00c900f9 	.word	0x00c900f9
 8001c04:	00f900f9 	.word	0x00f900f9
 8001c08:	00f900f9 	.word	0x00f900f9
 8001c0c:	013d00f9 	.word	0x013d00f9
 8001c10:	00f900f9 	.word	0x00f900f9
 8001c14:	00f900f9 	.word	0x00f900f9
 8001c18:	014300f9 	.word	0x014300f9
 8001c1c:	00f900f9 	.word	0x00f900f9
 8001c20:	00f90140 	.word	0x00f90140
 8001c24:	00f900f9 	.word	0x00f900f9
 8001c28:	00f900f9 	.word	0x00f900f9
 8001c2c:	00f900f9 	.word	0x00f900f9
 8001c30:	00f900f9 	.word	0x00f900f9
 8001c34:	00b200f9 	.word	0x00b200f9
 8001c38:	00f900c9 	.word	0x00f900c9
 8001c3c:	00f900f9 	.word	0x00f900f9
 8001c40:	00c900f9 	.word	0x00c900f9
 8001c44:	00f900f9 	.word	0x00f900f9
 8001c48:	00f900f9 	.word	0x00f900f9
 8001c4c:	013d00f9 	.word	0x013d00f9
 8001c50:	00f900f9 	.word	0x00f900f9
 8001c54:	003700f9 	.word	0x003700f9
 8001c58:	014300f9 	.word	0x014300f9
 8001c5c:	00f900f9 	.word	0x00f900f9
 8001c60:	0140      	.short	0x0140
 8001c62:	f896 9000 	ldrb.w	r9, [r6]
      if ((s = va_arg(ap, char *)) == 0)
 8001c66:	f8da 7000 	ldr.w	r7, [sl]
 8001c6a:	f10a 0a04 	add.w	sl, sl, #4
 8001c6e:	2f00      	cmp	r7, #0
 8001c70:	f000 812c 	beq.w	8001ecc <chprintf.constprop.1+0x40c>
      for (p = s; *p && (--precision >= 0); p++)
 8001c74:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
 8001c76:	2900      	cmp	r1, #0
 8001c78:	f040 8104 	bne.w	8001e84 <chprintf.constprop.1+0x3c4>
      for (p = s; *p && (--precision >= 0); p++)
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8106 	beq.w	8001e8e <chprintf.constprop.1+0x3ce>
 8001c82:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8001c86:	463a      	mov	r2, r7
 8001c88:	e006      	b.n	8001c98 <chprintf.constprop.1+0x1d8>
 8001c8a:	bf00      	nop
 8001c8c:	08001f79 	.word	0x08001f79
 8001c90:	20000a8c 	.word	0x20000a8c
 8001c94:	3b01      	subs	r3, #1
 8001c96:	d403      	bmi.n	8001ca0 <chprintf.constprop.1+0x1e0>
 8001c98:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001c9c:	2900      	cmp	r1, #0
 8001c9e:	d1f9      	bne.n	8001c94 <chprintf.constprop.1+0x1d4>
 8001ca0:	1bd2      	subs	r2, r2, r7
 8001ca2:	1e53      	subs	r3, r2, #1
    if ((width -= i) < 0)
 8001ca4:	1aa4      	subs	r4, r4, r2
 8001ca6:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8001ca8:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
 8001cac:	d464      	bmi.n	8001d78 <chprintf.constprop.1+0x2b8>
    if (left_align == FALSE)
 8001cae:	f1bc 0f00 	cmp.w	ip, #0
 8001cb2:	f040 80a4 	bne.w	8001dfe <chprintf.constprop.1+0x33e>
 8001cb6:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
 8001cba:	2c00      	cmp	r4, #0
 8001cbc:	f000 809e 	beq.w	8001dfc <chprintf.constprop.1+0x33c>
      if (*s == '-' && filler == '0') {
 8001cc0:	7839      	ldrb	r1, [r7, #0]
 8001cc2:	292d      	cmp	r1, #45	; 0x2d
 8001cc4:	f000 80e9 	beq.w	8001e9a <chprintf.constprop.1+0x3da>
        streamPut(chp, (uint8_t)filler);
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	4641      	mov	r1, r8
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4628      	mov	r0, r5
 8001cd0:	4798      	blx	r3
      } while (++width != 0);
 8001cd2:	f11b 0b01 	adds.w	fp, fp, #1
 8001cd6:	d1f7      	bne.n	8001cc8 <chprintf.constprop.1+0x208>
 8001cd8:	9b00      	ldr	r3, [sp, #0]
 8001cda:	4423      	add	r3, r4
 8001cdc:	9300      	str	r3, [sp, #0]
    while (--i >= 0) {
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bfa8      	it	ge
 8001ce4:	465c      	movge	r4, fp
 8001ce6:	db4c      	blt.n	8001d82 <chprintf.constprop.1+0x2c2>
 8001ce8:	f8dd b004 	ldr.w	fp, [sp, #4]
      streamPut(chp, (uint8_t)*s++);
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001cf2:	689b      	ldr	r3, [r3, #8]
    while (--i >= 0) {
 8001cf4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	4798      	blx	r3
    while (--i >= 0) {
 8001cfc:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8001d00:	d1f4      	bne.n	8001cec <chprintf.constprop.1+0x22c>
 8001d02:	9b00      	ldr	r3, [sp, #0]
 8001d04:	9a01      	ldr	r2, [sp, #4]
 8001d06:	3301      	adds	r3, #1
 8001d08:	441a      	add	r2, r3
 8001d0a:	9200      	str	r2, [sp, #0]
    while (width) {
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d038      	beq.n	8001d82 <chprintf.constprop.1+0x2c2>
 8001d10:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	4641      	mov	r1, r8
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4628      	mov	r0, r5
 8001d1a:	4798      	blx	r3
    while (width) {
 8001d1c:	3f01      	subs	r7, #1
 8001d1e:	d1f8      	bne.n	8001d12 <chprintf.constprop.1+0x252>
 8001d20:	9b00      	ldr	r3, [sp, #0]
 8001d22:	441c      	add	r4, r3
 8001d24:	1ba4      	subs	r4, r4, r6
 8001d26:	464b      	mov	r3, r9
      streamPut(chp, (uint8_t)c);
 8001d28:	4619      	mov	r1, r3
 8001d2a:	486b      	ldr	r0, [pc, #428]	; (8001ed8 <chprintf.constprop.1+0x418>)
 8001d2c:	1932      	adds	r2, r6, r4
    c = *fmt++;
 8001d2e:	1c77      	adds	r7, r6, #1
    if (c == 0)
 8001d30:	b163      	cbz	r3, 8001d4c <chprintf.constprop.1+0x28c>
    if (c != '%') {
 8001d32:	2b25      	cmp	r3, #37	; 0x25
 8001d34:	d060      	beq.n	8001df8 <chprintf.constprop.1+0x338>
      streamPut(chp, (uint8_t)c);
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4798      	blx	r3
 8001d3c:	783b      	ldrb	r3, [r7, #0]
 8001d3e:	4866      	ldr	r0, [pc, #408]	; (8001ed8 <chprintf.constprop.1+0x418>)
 8001d40:	463e      	mov	r6, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	1932      	adds	r2, r6, r4
    c = *fmt++;
 8001d46:	1c77      	adds	r7, r6, #1
    if (c == 0)
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f2      	bne.n	8001d32 <chprintf.constprop.1+0x272>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	b006      	add	sp, #24
 8001d50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d54:	b003      	add	sp, #12
 8001d56:	4770      	bx	lr
 8001d58:	f896 9000 	ldrb.w	r9, [r6]
      *p++ = va_arg(ap, int);
 8001d5c:	f8da 3000 	ldr.w	r3, [sl]
 8001d60:	af06      	add	r7, sp, #24
 8001d62:	f10a 0a04 	add.w	sl, sl, #4
 8001d66:	f807 3d0c 	strb.w	r3, [r7, #-12]!
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2201      	movs	r2, #1
      filler = ' ';
 8001d70:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
 8001d74:	1aa4      	subs	r4, r4, r2
 8001d76:	d59a      	bpl.n	8001cae <chprintf.constprop.1+0x1ee>
    while (--i >= 0) {
 8001d78:	9b01      	ldr	r3, [sp, #4]
 8001d7a:	2b00      	cmp	r3, #0
      width = 0;
 8001d7c:	bfa8      	it	ge
 8001d7e:	2400      	movge	r4, #0
    while (--i >= 0) {
 8001d80:	dab2      	bge.n	8001ce8 <chprintf.constprop.1+0x228>
    while (width) {
 8001d82:	9c00      	ldr	r4, [sp, #0]
 8001d84:	e7ce      	b.n	8001d24 <chprintf.constprop.1+0x264>
 8001d86:	f896 9000 	ldrb.w	r9, [r6]
        l = va_arg(ap, int);
 8001d8a:	f8da 1000 	ldr.w	r1, [sl]
      if (l < 0) {
 8001d8e:	2900      	cmp	r1, #0
        l = va_arg(ap, int);
 8001d90:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 8001d94:	f2c0 8091 	blt.w	8001eba <chprintf.constprop.1+0x3fa>
    p = tmpbuf;
 8001d98:	f10d 0b0c 	add.w	fp, sp, #12
 8001d9c:	465a      	mov	r2, fp
  q = p + MAX_FILLER;
 8001d9e:	f102 030b 	add.w	r3, r2, #11
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	4618      	mov	r0, r3
    i = (int)(l % radix);
 8001da6:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <chprintf.constprop.1+0x41c>)
 8001da8:	fba3 7301 	umull	r7, r3, r3, r1
 8001dac:	08db      	lsrs	r3, r3, #3
 8001dae:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8001db2:	461f      	mov	r7, r3
 8001db4:	eba1 034e 	sub.w	r3, r1, lr, lsl #1
    i += '0';
 8001db8:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 8001dc0:	4639      	mov	r1, r7
 8001dc2:	2f00      	cmp	r7, #0
 8001dc4:	d1ef      	bne.n	8001da6 <chprintf.constprop.1+0x2e6>
  i = (int)(p + MAX_FILLER - q);
 8001dc6:	9901      	ldr	r1, [sp, #4]
 8001dc8:	1a09      	subs	r1, r1, r0
 8001dca:	4411      	add	r1, r2
 8001dcc:	e001      	b.n	8001dd2 <chprintf.constprop.1+0x312>
 8001dce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 8001dd2:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8001dd6:	428a      	cmp	r2, r1
 8001dd8:	d1f9      	bne.n	8001dce <chprintf.constprop.1+0x30e>
 8001dda:	eba2 020b 	sub.w	r2, r2, fp
 8001dde:	1e53      	subs	r3, r2, #1
    s = tmpbuf;
 8001de0:	465f      	mov	r7, fp
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	e7c6      	b.n	8001d74 <chprintf.constprop.1+0x2b4>
 8001de6:	f896 9000 	ldrb.w	r9, [r6]
      *p++ = c;
 8001dea:	af06      	add	r7, sp, #24
 8001dec:	2300      	movs	r3, #0
 8001dee:	f807 2d0c 	strb.w	r2, [r7, #-12]!
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	e7bd      	b.n	8001d74 <chprintf.constprop.1+0x2b4>
 8001df8:	9200      	str	r2, [sp, #0]
 8001dfa:	e66d      	b.n	8001ad8 <chprintf.constprop.1+0x18>
    if (width < 0) {
 8001dfc:	465c      	mov	r4, fp
    while (--i >= 0) {
 8001dfe:	9b01      	ldr	r3, [sp, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f6bf af71 	bge.w	8001ce8 <chprintf.constprop.1+0x228>
 8001e06:	e781      	b.n	8001d0c <chprintf.constprop.1+0x24c>
    switch (c) {
 8001e08:	f04f 0e0a 	mov.w	lr, #10
 8001e0c:	f896 9000 	ldrb.w	r9, [r6]
        l = va_arg(ap, unsigned int);
 8001e10:	f8da 2000 	ldr.w	r2, [sl]
  q = p + MAX_FILLER;
 8001e14:	f10d 0117 	add.w	r1, sp, #23
        l = va_arg(ap, unsigned int);
 8001e18:	f10a 0a04 	add.w	sl, sl, #4
 8001e1c:	e000      	b.n	8001e20 <chprintf.constprop.1+0x360>
  } while ((ll /= radix) != 0);
 8001e1e:	4601      	mov	r1, r0
    i = (int)(l % radix);
 8001e20:	fbb2 f7fe 	udiv	r7, r2, lr
 8001e24:	fb0e 2217 	mls	r2, lr, r7, r2
    i += '0';
 8001e28:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8001e2c:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8001e2e:	bfc8      	it	gt
 8001e30:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f801 3c01 	strb.w	r3, [r1, #-1]
 8001e3a:	1e48      	subs	r0, r1, #1
    l /= radix;
 8001e3c:	463a      	mov	r2, r7
  } while ((ll /= radix) != 0);
 8001e3e:	2f00      	cmp	r7, #0
 8001e40:	d1ed      	bne.n	8001e1e <chprintf.constprop.1+0x35e>
  i = (int)(p + MAX_FILLER - q);
 8001e42:	f10d 0217 	add.w	r2, sp, #23
 8001e46:	f10d 0b0c 	add.w	fp, sp, #12
 8001e4a:	1a12      	subs	r2, r2, r0
 8001e4c:	465f      	mov	r7, fp
 8001e4e:	4410      	add	r0, r2
 8001e50:	e001      	b.n	8001e56 <chprintf.constprop.1+0x396>
 8001e52:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 8001e56:	f807 3b01 	strb.w	r3, [r7], #1
  while (--i);
 8001e5a:	4288      	cmp	r0, r1
 8001e5c:	d1f9      	bne.n	8001e52 <chprintf.constprop.1+0x392>
 8001e5e:	1e53      	subs	r3, r2, #1
    s = tmpbuf;
 8001e60:	465f      	mov	r7, fp
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	e786      	b.n	8001d74 <chprintf.constprop.1+0x2b4>
    switch (c) {
 8001e66:	f04f 0e08 	mov.w	lr, #8
 8001e6a:	e7cf      	b.n	8001e0c <chprintf.constprop.1+0x34c>
 8001e6c:	f04f 0e10 	mov.w	lr, #16
 8001e70:	e7cc      	b.n	8001e0c <chprintf.constprop.1+0x34c>
 8001e72:	f04f 0e08 	mov.w	lr, #8
 8001e76:	e7cb      	b.n	8001e10 <chprintf.constprop.1+0x350>
 8001e78:	f04f 0e10 	mov.w	lr, #16
 8001e7c:	e7c8      	b.n	8001e10 <chprintf.constprop.1+0x350>
 8001e7e:	f04f 0e0a 	mov.w	lr, #10
 8001e82:	e7c5      	b.n	8001e10 <chprintf.constprop.1+0x350>
      for (p = s; *p && (--precision >= 0); p++)
 8001e84:	b11b      	cbz	r3, 8001e8e <chprintf.constprop.1+0x3ce>
 8001e86:	1e4b      	subs	r3, r1, #1
 8001e88:	2900      	cmp	r1, #0
 8001e8a:	f47f aefc 	bne.w	8001c86 <chprintf.constprop.1+0x1c6>
    s = tmpbuf;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	f04f 0820 	mov.w	r8, #32
 8001e98:	e709      	b.n	8001cae <chprintf.constprop.1+0x1ee>
      if (*s == '-' && filler == '0') {
 8001e9a:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8001e9e:	f47f af13 	bne.w	8001cc8 <chprintf.constprop.1+0x208>
        streamPut(chp, (uint8_t)*s++);
 8001ea2:	682a      	ldr	r2, [r5, #0]
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <chprintf.constprop.1+0x418>)
 8001ea6:	6892      	ldr	r2, [r2, #8]
 8001ea8:	4790      	blx	r2
        n++;
 8001eaa:	9b00      	ldr	r3, [sp, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	9b01      	ldr	r3, [sp, #4]
 8001eb2:	3b01      	subs	r3, #1
        streamPut(chp, (uint8_t)*s++);
 8001eb4:	3701      	adds	r7, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	e706      	b.n	8001cc8 <chprintf.constprop.1+0x208>
        *p++ = '-';
 8001eba:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8001ebc:	4249      	negs	r1, r1
        *p++ = '-';
 8001ebe:	f88d 300c 	strb.w	r3, [sp, #12]
 8001ec2:	f10d 020d 	add.w	r2, sp, #13
 8001ec6:	f10d 0b0c 	add.w	fp, sp, #12
 8001eca:	e768      	b.n	8001d9e <chprintf.constprop.1+0x2de>
      if (precision == 0)
 8001ecc:	4f04      	ldr	r7, [pc, #16]	; (8001ee0 <chprintf.constprop.1+0x420>)
 8001ece:	2900      	cmp	r1, #0
 8001ed0:	f43f aed7 	beq.w	8001c82 <chprintf.constprop.1+0x1c2>
 8001ed4:	e7d7      	b.n	8001e86 <chprintf.constprop.1+0x3c6>
 8001ed6:	bf00      	nop
 8001ed8:	20000a8c 	.word	0x20000a8c
 8001edc:	cccccccd 	.word	0xcccccccd
 8001ee0:	08002010 	.word	0x08002010
	...

08001ef0 <ch_debug>:
 8001ef0:	6e69616d 18811600 08440204 1814100c     main......D.....
 8001f00:	1e1d1c00 00000000 00000000 00000000     ................

08001f10 <icucfgA>:
 8001f10:	00000000 000f4240 08001951 00000000     ....@B..Q.......
	...

08001f30 <icucfgB>:
 8001f30:	00000000 000f4240 00000000 08001951     ....@B......Q...
 8001f40:	00000000 00000001 00000000 00000000     ................

08001f50 <icucfgC>:
 8001f50:	00000000 000f4240 00000000 08001951     ....@B......Q...
	...
 8001f70:	656c6469 00000000 25206425 64252064     idle....%d %d %d
 8001f80:	000a0d20 00000000 00000000 00000000      ...............

08001f90 <ram_areas>:
 8001f90:	08002074 20000b2c 20000b2c 20000b2c     t ..,.. ,.. ,.. 
 8001fa0:	08002074 00000000 00000000 00000000     t ..............
 8001fb0:	08002074 00000000 00000000 00000000     t ..............
 8001fc0:	08002074 00000000 00000000 00000000     t ..............
 8001fd0:	08002074 00000000 00000000 00000000     t ..............
 8001fe0:	08002074 00000000 00000000 00000000     t ..............
 8001ff0:	08002074 00000000 00000000 00000000     t ..............
 8002000:	08002074 00000000 00000000 00000000     t ..............
 8002010:	6c756e28 0000296c 00000000 00000000     (null)..........

08002020 <vmt>:
 8002020:	08001621 08001741 080016a1 080017b1     !...A...........
 8002030:	08001691 080017a1 08001611 08001731     ............1...
