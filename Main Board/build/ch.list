
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4823      	ldr	r0, [pc, #140]	; (8000250 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f001 f8bd 	bl	8001350 <__core_init>
 80001d6:	f001 fe2b 	bl	8001e30 <__early_init>
 80001da:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001de:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xa>)
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <endfiniloop+0xe>)

080001e2 <msloop>:
 80001e2:	4291      	cmp	r1, r2
 80001e4:	bf3c      	itt	cc
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ea:	e7fa      	bcc.n	80001e2 <msloop>
 80001ec:	491b      	ldr	r1, [pc, #108]	; (800025c <endfiniloop+0x12>)
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <endfiniloop+0x6>)

080001f0 <psloop>:
 80001f0:	4291      	cmp	r1, r2
 80001f2:	bf3c      	itt	cc
 80001f4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f8:	e7fa      	bcc.n	80001f0 <psloop>
 80001fa:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x16>)
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <endfiniloop+0x1a>)
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x1e>)

08000200 <dloop>:
 8000200:	429a      	cmp	r2, r3
 8000202:	bf3e      	ittt	cc
 8000204:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000208:	f842 0b04 	strcc.w	r0, [r2], #4
 800020c:	e7f8      	bcc.n	8000200 <dloop>
 800020e:	2000      	movs	r0, #0
 8000210:	4916      	ldr	r1, [pc, #88]	; (800026c <endfiniloop+0x22>)
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x26>)

08000214 <bloop>:
 8000214:	4291      	cmp	r1, r2
 8000216:	bf3c      	itt	cc
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
 800021c:	e7fa      	bcc.n	8000214 <bloop>
 800021e:	f001 f84f 	bl	80012c0 <__init_ram_areas>
 8000222:	f001 f88d 	bl	8001340 <__late_init>
 8000226:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2a>)
 8000228:	4d13      	ldr	r5, [pc, #76]	; (8000278 <endfiniloop+0x2e>)

0800022a <initloop>:
 800022a:	42ac      	cmp	r4, r5
 800022c:	da03      	bge.n	8000236 <endinitloop>
 800022e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000232:	4788      	blx	r1
 8000234:	e7f9      	b.n	800022a <initloop>

08000236 <endinitloop>:
 8000236:	f001 f97b 	bl	8001530 <main>
 800023a:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x32>)
 800023c:	4d10      	ldr	r5, [pc, #64]	; (8000280 <endfiniloop+0x36>)

0800023e <finiloop>:
 800023e:	42ac      	cmp	r4, r5
 8000240:	da03      	bge.n	800024a <endfiniloop>
 8000242:	f854 1b04 	ldr.w	r1, [r4], #4
 8000246:	4788      	blx	r1
 8000248:	e7f9      	b.n	800023e <finiloop>

0800024a <endfiniloop>:
 800024a:	f001 b871 	b.w	8001330 <__default_exit>
 800024e:	0000      	.short	0x0000
 8000250:	20000800 	.word	0x20000800
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	08002830 	.word	0x08002830
 8000264:	20000800 	.word	0x20000800
 8000268:	20000838 	.word	0x20000838
 800026c:	20000838 	.word	0x20000838
 8000270:	20000e20 	.word	0x20000e20
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 ffd8 	bl	8001260 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f000 fcb6 	bl	8000c20 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 80002c0:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 80002c2:	68c3      	ldr	r3, [r0, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 80002c4:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
 80002c6:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80002c8:	68da      	ldr	r2, [r3, #12]
 80002ca:	4014      	ands	r4, r2
 80002cc:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80002d2:	7d0b      	ldrb	r3, [r1, #20]
void icu_lld_serve_interrupt(ICUDriver *icup) {
 80002d4:	4605      	mov	r5, r0
  if (icup->config->channel == ICU_CHANNEL_1) {
 80002d6:	b94b      	cbnz	r3, 80002ec <icu_lld_serve_interrupt+0x2c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80002d8:	0763      	lsls	r3, r4, #29
 80002da:	d52b      	bpl.n	8000334 <icu_lld_serve_interrupt+0x74>
      _icu_isr_invoke_width_cb(icup);
 80002dc:	7803      	ldrb	r3, [r0, #0]
 80002de:	2b04      	cmp	r3, #4
 80002e0:	d025      	beq.n	800032e <icu_lld_serve_interrupt+0x6e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80002e2:	07a1      	lsls	r1, r4, #30
 80002e4:	d409      	bmi.n	80002fa <icu_lld_serve_interrupt+0x3a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80002e6:	07e4      	lsls	r4, r4, #31
 80002e8:	d40b      	bmi.n	8000302 <icu_lld_serve_interrupt+0x42>
 80002ea:	bd38      	pop	{r3, r4, r5, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80002ec:	07a2      	lsls	r2, r4, #30
 80002ee:	d512      	bpl.n	8000316 <icu_lld_serve_interrupt+0x56>
      _icu_isr_invoke_width_cb(icup);
 80002f0:	7803      	ldrb	r3, [r0, #0]
 80002f2:	2b04      	cmp	r3, #4
 80002f4:	d00c      	beq.n	8000310 <icu_lld_serve_interrupt+0x50>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80002f6:	0763      	lsls	r3, r4, #29
 80002f8:	d5f5      	bpl.n	80002e6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 80002fa:	2304      	movs	r3, #4
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80002fc:	07e4      	lsls	r4, r4, #31
      _icu_isr_invoke_period_cb(icup);
 80002fe:	702b      	strb	r3, [r5, #0]
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8000300:	d5f3      	bpl.n	80002ea <icu_lld_serve_interrupt+0x2a>
    _icu_isr_invoke_overflow_cb(icup);
 8000302:	686b      	ldr	r3, [r5, #4]
 8000304:	4628      	mov	r0, r5
 8000306:	691b      	ldr	r3, [r3, #16]
 8000308:	4798      	blx	r3
 800030a:	2303      	movs	r3, #3
 800030c:	702b      	strb	r3, [r5, #0]
 800030e:	bd38      	pop	{r3, r4, r5, pc}
      _icu_isr_invoke_width_cb(icup);
 8000310:	688b      	ldr	r3, [r1, #8]
 8000312:	b1c3      	cbz	r3, 8000346 <icu_lld_serve_interrupt+0x86>
 8000314:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000316:	0763      	lsls	r3, r4, #29
 8000318:	d5e5      	bpl.n	80002e6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 800031a:	782b      	ldrb	r3, [r5, #0]
 800031c:	2b04      	cmp	r3, #4
 800031e:	d1ec      	bne.n	80002fa <icu_lld_serve_interrupt+0x3a>
 8000320:	6869      	ldr	r1, [r5, #4]
 8000322:	68cb      	ldr	r3, [r1, #12]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0e8      	beq.n	80002fa <icu_lld_serve_interrupt+0x3a>
 8000328:	4628      	mov	r0, r5
 800032a:	4798      	blx	r3
 800032c:	e7e5      	b.n	80002fa <icu_lld_serve_interrupt+0x3a>
      _icu_isr_invoke_width_cb(icup);
 800032e:	688b      	ldr	r3, [r1, #8]
 8000330:	b133      	cbz	r3, 8000340 <icu_lld_serve_interrupt+0x80>
 8000332:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000334:	07a1      	lsls	r1, r4, #30
 8000336:	d5d6      	bpl.n	80002e6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8000338:	782b      	ldrb	r3, [r5, #0]
 800033a:	2b04      	cmp	r3, #4
 800033c:	d1dd      	bne.n	80002fa <icu_lld_serve_interrupt+0x3a>
 800033e:	e7ef      	b.n	8000320 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000340:	07a0      	lsls	r0, r4, #30
 8000342:	d4ee      	bmi.n	8000322 <icu_lld_serve_interrupt+0x62>
 8000344:	e7cf      	b.n	80002e6 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000346:	0762      	lsls	r2, r4, #29
 8000348:	d4eb      	bmi.n	8000322 <icu_lld_serve_interrupt+0x62>
 800034a:	e7cc      	b.n	80002e6 <icu_lld_serve_interrupt+0x26>
 800034c:	0000      	movs	r0, r0
	...

08000350 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000354:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000358:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800035a:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800035e:	2300      	movs	r3, #0
 8000360:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	0000      	movs	r0, r0
	...

08000370 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000370:	b410      	push	{r4}
 8000372:	2320      	movs	r3, #32
 8000374:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000378:	4c09      	ldr	r4, [pc, #36]	; (80003a0 <chCoreAlloc+0x30>)
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <chCoreAlloc+0x34>)
 800037c:	6822      	ldr	r2, [r4, #0]
 800037e:	6819      	ldr	r1, [r3, #0]
  size = MEM_ALIGN_NEXT(size);
 8000380:	1dc3      	adds	r3, r0, #7
 8000382:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000386:	1a89      	subs	r1, r1, r2
 8000388:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800038a:	bf9d      	ittte	ls
 800038c:	189b      	addls	r3, r3, r2
 800038e:	6023      	strls	r3, [r4, #0]

  return p;
 8000390:	4610      	movls	r0, r2
    return NULL;
 8000392:	2000      	movhi	r0, #0
 8000394:	2300      	movs	r3, #0
 8000396:	f383 8811 	msr	BASEPRI, r3
}
 800039a:	bc10      	pop	{r4}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	200008e0 	.word	0x200008e0
 80003a4:	200008dc 	.word	0x200008dc
	...

080003b0 <wakeup>:
 80003b0:	2320      	movs	r3, #32
 80003b2:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80003b6:	7f03      	ldrb	r3, [r0, #28]
 80003b8:	2b07      	cmp	r3, #7
 80003ba:	d80e      	bhi.n	80003da <wakeup+0x2a>
 80003bc:	e8df f003 	tbb	[pc, r3]
 80003c0:	230d0d27 	.word	0x230d0d27
 80003c4:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80003c8:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80003ca:	6893      	ldr	r3, [r2, #8]
 80003cc:	3301      	adds	r3, #1
 80003ce:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80003d0:	e890 000c 	ldmia.w	r0, {r2, r3}
 80003d4:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80003d6:	6802      	ldr	r2, [r0, #0]
 80003d8:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 80003da:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 80003dc:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80003de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80003e2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <wakeup+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80003e6:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 80003e8:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 80003ea:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80003ec:	689a      	ldr	r2, [r3, #8]
 80003ee:	428a      	cmp	r2, r1
 80003f0:	d2fb      	bcs.n	80003ea <wakeup+0x3a>
  tp->p_prev = cp->p_prev;
 80003f2:	685a      	ldr	r2, [r3, #4]
 80003f4:	6042      	str	r2, [r0, #4]
  tp->p_next = cp;
 80003f6:	6003      	str	r3, [r0, #0]
 80003f8:	2100      	movs	r1, #0
  tp->p_prev->p_next = tp;
 80003fa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80003fc:	6058      	str	r0, [r3, #4]
 80003fe:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000402:	bc10      	pop	{r4}
 8000404:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 8000406:	6a03      	ldr	r3, [r0, #32]
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	e7e5      	b.n	80003da <wakeup+0x2a>
 800040e:	2300      	movs	r3, #0
 8000410:	f383 8811 	msr	BASEPRI, r3
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000cc0 	.word	0x20000cc0
 800041c:	00000000 	.word	0x00000000

08000420 <_idle_thread.lto_priv.45>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000420:	e7fe      	b.n	8000420 <_idle_thread.lto_priv.45>
 8000422:	bf00      	nop
	...

08000430 <icu_lld_enable_notifications>:
  uint32_t dier = icup->tim->DIER;
 8000430:	68c2      	ldr	r2, [r0, #12]
 8000432:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
 8000434:	b410      	push	{r4}
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8000436:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800043a:	d10c      	bne.n	8000456 <icu_lld_enable_notifications+0x26>
    if (icup->config->channel == ICU_CHANNEL_1) {
 800043c:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
 800043e:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000440:	7d08      	ldrb	r0, [r1, #20]
 8000442:	b150      	cbz	r0, 800045a <icu_lld_enable_notifications+0x2a>
      if (icup->config->width_cb != NULL)
 8000444:	6888      	ldr	r0, [r1, #8]
 8000446:	b170      	cbz	r0, 8000466 <icu_lld_enable_notifications+0x36>
        dier |= STM32_TIM_DIER_CC1IE;
 8000448:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
 800044c:	6909      	ldr	r1, [r1, #16]
 800044e:	b109      	cbz	r1, 8000454 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8000450:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
 8000454:	60d3      	str	r3, [r2, #12]
}
 8000456:	bc10      	pop	{r4}
 8000458:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 800045a:	6888      	ldr	r0, [r1, #8]
 800045c:	2800      	cmp	r0, #0
 800045e:	d1f3      	bne.n	8000448 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC1IE;
 8000460:	f043 0302 	orr.w	r3, r3, #2
 8000464:	e7f2      	b.n	800044c <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC2IE;
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	e7ef      	b.n	800044c <icu_lld_enable_notifications+0x1c>
 800046c:	0000      	movs	r0, r0
	...

08000470 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
 8000470:	7803      	ldrb	r3, [r0, #0]
 8000472:	2b01      	cmp	r3, #1
void icu_lld_start(ICUDriver *icup) {
 8000474:	b4f0      	push	{r4, r5, r6, r7}
  if (icup->state == ICU_STOP) {
 8000476:	d03c      	beq.n	80004f2 <icu_lld_start+0x82>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 8000478:	68c3      	ldr	r3, [r0, #12]
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800047e:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8000480:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 8000482:	625a      	str	r2, [r3, #36]	; 0x24
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000484:	6841      	ldr	r1, [r0, #4]
  psc = (icup->clock / icup->config->frequency) - 1;
 8000486:	6882      	ldr	r2, [r0, #8]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000488:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
 800048a:	684d      	ldr	r5, [r1, #4]
 800048c:	fbb2 f2f5 	udiv	r2, r2, r5
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000490:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
 8000494:	3a01      	subs	r2, #1
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8000496:	2600      	movs	r6, #0
  icup->tim->ARR  = 0xFFFF;
 8000498:	f64f 75ff 	movw	r5, #65535	; 0xffff
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 800049c:	611e      	str	r6, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800049e:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 80004a2:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 80004a4:	7d0a      	ldrb	r2, [r1, #20]
 80004a6:	b972      	cbnz	r2, 80004c6 <icu_lld_start+0x56>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 80004a8:	2254      	movs	r2, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 80004aa:	f240 2401 	movw	r4, #513	; 0x201
 80004ae:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 80004b0:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80004b2:	780a      	ldrb	r2, [r1, #0]
 80004b4:	b1d2      	cbz	r2, 80004ec <icu_lld_start+0x7c>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 80004b6:	2213      	movs	r2, #19
 80004b8:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 80004ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 80004be:	3334      	adds	r3, #52	; 0x34
    icup->wccrp = &icup->tim->CCR[1];
 80004c0:	6102      	str	r2, [r0, #16]
    icup->pccrp = &icup->tim->CCR[0];
 80004c2:	6143      	str	r3, [r0, #20]
 80004c4:	e00d      	b.n	80004e2 <icu_lld_start+0x72>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 80004c6:	2264      	movs	r2, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 80004c8:	f44f 7481 	mov.w	r4, #258	; 0x102
 80004cc:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 80004ce:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80004d0:	780a      	ldrb	r2, [r1, #0]
 80004d2:	b142      	cbz	r2, 80004e6 <icu_lld_start+0x76>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80004d4:	2231      	movs	r2, #49	; 0x31
 80004d6:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 80004d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 80004dc:	3338      	adds	r3, #56	; 0x38
    icup->wccrp = &icup->tim->CCR[0];
 80004de:	6102      	str	r2, [r0, #16]
    icup->pccrp = &icup->tim->CCR[1];
 80004e0:	6143      	str	r3, [r0, #20]
}
 80004e2:	bcf0      	pop	{r4, r5, r6, r7}
 80004e4:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 80004e6:	2213      	movs	r2, #19
 80004e8:	621a      	str	r2, [r3, #32]
 80004ea:	e7f5      	b.n	80004d8 <icu_lld_start+0x68>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80004ec:	2231      	movs	r2, #49	; 0x31
 80004ee:	621a      	str	r2, [r3, #32]
 80004f0:	e7e3      	b.n	80004ba <icu_lld_start+0x4a>
    if (&ICUD2 == icup) {
 80004f2:	4b28      	ldr	r3, [pc, #160]	; (8000594 <icu_lld_start+0x124>)
 80004f4:	4298      	cmp	r0, r3
 80004f6:	d007      	beq.n	8000508 <icu_lld_start+0x98>
    if (&ICUD3 == icup) {
 80004f8:	4b27      	ldr	r3, [pc, #156]	; (8000598 <icu_lld_start+0x128>)
 80004fa:	4298      	cmp	r0, r3
 80004fc:	d01b      	beq.n	8000536 <icu_lld_start+0xc6>
    if (&ICUD5 == icup) {
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <icu_lld_start+0x12c>)
 8000500:	4298      	cmp	r0, r3
 8000502:	d02f      	beq.n	8000564 <icu_lld_start+0xf4>
 8000504:	68c3      	ldr	r3, [r0, #12]
 8000506:	e7bd      	b.n	8000484 <icu_lld_start+0x14>
      rccEnableTIM2(FALSE);
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <icu_lld_start+0x130>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800050a:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <icu_lld_start+0x134>)
 800050c:	6c19      	ldr	r1, [r3, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 800050e:	4d26      	ldr	r5, [pc, #152]	; (80005a8 <icu_lld_start+0x138>)
      rccEnableTIM2(FALSE);
 8000510:	f041 0101 	orr.w	r1, r1, #1
 8000514:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM2();
 8000516:	6a19      	ldr	r1, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000518:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 800051c:	2700      	movs	r7, #0
 800051e:	f041 0101 	orr.w	r1, r1, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000522:	2670      	movs	r6, #112	; 0x70
 8000524:	6219      	str	r1, [r3, #32]
 8000526:	621f      	str	r7, [r3, #32]
 8000528:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800052c:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000530:	6014      	str	r4, [r2, #0]
      icup->clock = STM32_TIMCLK1;
 8000532:	6085      	str	r5, [r0, #8]
 8000534:	e7e0      	b.n	80004f8 <icu_lld_start+0x88>
      rccEnableTIM3(FALSE);
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <icu_lld_start+0x130>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000538:	4a1a      	ldr	r2, [pc, #104]	; (80005a4 <icu_lld_start+0x134>)
 800053a:	6c19      	ldr	r1, [r3, #64]	; 0x40
     icup->clock = STM32_TIMCLK1;
 800053c:	4d1a      	ldr	r5, [pc, #104]	; (80005a8 <icu_lld_start+0x138>)
      rccEnableTIM3(FALSE);
 800053e:	f041 0102 	orr.w	r1, r1, #2
 8000542:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 8000544:	6a19      	ldr	r1, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000546:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 800054a:	2700      	movs	r7, #0
 800054c:	f041 0102 	orr.w	r1, r1, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000550:	2670      	movs	r6, #112	; 0x70
 8000552:	6219      	str	r1, [r3, #32]
 8000554:	621f      	str	r7, [r3, #32]
 8000556:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800055a:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800055e:	6014      	str	r4, [r2, #0]
     icup->clock = STM32_TIMCLK1;
 8000560:	6085      	str	r5, [r0, #8]
 8000562:	e7cc      	b.n	80004fe <icu_lld_start+0x8e>
      rccEnableTIM5(FALSE);
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <icu_lld_start+0x130>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000566:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <icu_lld_start+0x134>)
 8000568:	6c19      	ldr	r1, [r3, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 800056a:	4c0f      	ldr	r4, [pc, #60]	; (80005a8 <icu_lld_start+0x138>)
      rccEnableTIM5(FALSE);
 800056c:	f041 0108 	orr.w	r1, r1, #8
 8000570:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM5();
 8000572:	6a19      	ldr	r1, [r3, #32]
 8000574:	2600      	movs	r6, #0
 8000576:	f041 0108 	orr.w	r1, r1, #8
 800057a:	2570      	movs	r5, #112	; 0x70
 800057c:	6219      	str	r1, [r3, #32]
 800057e:	621e      	str	r6, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000580:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000584:	f882 5332 	strb.w	r5, [r2, #818]	; 0x332
 8000588:	68c3      	ldr	r3, [r0, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800058a:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800058e:	6051      	str	r1, [r2, #4]
      icup->clock = STM32_TIMCLK1;
 8000590:	6084      	str	r4, [r0, #8]
 8000592:	e777      	b.n	8000484 <icu_lld_start+0x14>
 8000594:	20000be4 	.word	0x20000be4
 8000598:	20000bfc 	.word	0x20000bfc
 800059c:	20000c14 	.word	0x20000c14
 80005a0:	40023800 	.word	0x40023800
 80005a4:	e000e100 	.word	0xe000e100
 80005a8:	05b8d800 	.word	0x05b8d800
 80005ac:	00000000 	.word	0x00000000

080005b0 <icu_lld_init>:
void icu_lld_init(void) {
 80005b0:	b470      	push	{r4, r5, r6}
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <icu_lld_init+0x2c>)
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <icu_lld_init+0x30>)
 80005b6:	4c0b      	ldr	r4, [pc, #44]	; (80005e4 <icu_lld_init+0x34>)
  ICUD3.tim = STM32_TIM3;
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <icu_lld_init+0x38>)
  ICUD5.tim = STM32_TIM5;
 80005ba:	4d0c      	ldr	r5, [pc, #48]	; (80005ec <icu_lld_init+0x3c>)
  ICUD3.tim = STM32_TIM3;
 80005bc:	60c2      	str	r2, [r0, #12]
 80005be:	2101      	movs	r1, #1
  icup->config = NULL;
 80005c0:	2200      	movs	r2, #0
  ICUD2.tim = STM32_TIM2;
 80005c2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  icup->state  = ICU_STOP;
 80005c6:	7001      	strb	r1, [r0, #0]
 80005c8:	7019      	strb	r1, [r3, #0]
 80005ca:	60e6      	str	r6, [r4, #12]
 80005cc:	7021      	strb	r1, [r4, #0]
  icup->config = NULL;
 80005ce:	6062      	str	r2, [r4, #4]
  ICUD5.tim = STM32_TIM5;
 80005d0:	60dd      	str	r5, [r3, #12]
 80005d2:	6042      	str	r2, [r0, #4]
 80005d4:	605a      	str	r2, [r3, #4]
}
 80005d6:	bc70      	pop	{r4, r5, r6}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000bfc 	.word	0x20000bfc
 80005e0:	20000c14 	.word	0x20000c14
 80005e4:	20000be4 	.word	0x20000be4
 80005e8:	40000400 	.word	0x40000400
 80005ec:	40000c00 	.word	0x40000c00

080005f0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80005f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80005f4:	f002 0a03 	and.w	sl, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80005f8:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80005fc:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8000600:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000604:	46d1      	mov	r9, sl
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000606:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 800060a:	2700      	movs	r7, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800060c:	f04f 0b0f 	mov.w	fp, #15
 8000610:	e00f      	b.n	8000632 <_pal_lld_setgroupmode+0x42>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000612:	6a03      	ldr	r3, [r0, #32]
 8000614:	ea23 0404 	bic.w	r4, r3, r4
 8000618:	4325      	orrs	r5, r4
 800061a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800061c:	0849      	lsrs	r1, r1, #1
 800061e:	d039      	beq.n	8000694 <_pal_lld_setgroupmode+0xa4>
      return;
    otyper <<= 1;
 8000620:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 8000624:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 8000628:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 800062c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bit++;
 8000630:	3701      	adds	r7, #1
    if ((mask & 1) != 0) {
 8000632:	07cb      	lsls	r3, r1, #31
 8000634:	d5f2      	bpl.n	800061c <_pal_lld_setgroupmode+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000636:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000638:	2401      	movs	r4, #1
 800063a:	40bc      	lsls	r4, r7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800063c:	ea23 0304 	bic.w	r3, r3, r4
 8000640:	ea43 0308 	orr.w	r3, r3, r8
 8000644:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 8000646:	2503      	movs	r5, #3
 8000648:	007b      	lsls	r3, r7, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800064a:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 800064c:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000650:	43db      	mvns	r3, r3
 8000652:	401c      	ands	r4, r3
 8000654:	ea44 040c 	orr.w	r4, r4, ip
 8000658:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800065a:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800065c:	f007 0407 	and.w	r4, r7, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000660:	401d      	ands	r5, r3
 8000662:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 8000666:	00a4      	lsls	r4, r4, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000668:	f1ba 0f02 	cmp.w	sl, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800066c:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800066e:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
 8000672:	fa0b f404 	lsl.w	r4, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000676:	d00f      	beq.n	8000698 <_pal_lld_setgroupmode+0xa8>
        port->MODER   = (port->MODER & ~m2) | moder;
 8000678:	6806      	ldr	r6, [r0, #0]
 800067a:	4033      	ands	r3, r6
 800067c:	ea43 0309 	orr.w	r3, r3, r9
        if (bit < 8)
 8000680:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000682:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000684:	d9c5      	bls.n	8000612 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000686:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000688:	ea23 0404 	bic.w	r4, r3, r4
 800068c:	4325      	orrs	r5, r4
    if (!mask)
 800068e:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000690:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
 8000692:	d1c5      	bne.n	8000620 <_pal_lld_setgroupmode+0x30>
 8000694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
 8000698:	2f07      	cmp	r7, #7
 800069a:	d80a      	bhi.n	80006b2 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800069c:	6a06      	ldr	r6, [r0, #32]
 800069e:	ea26 0404 	bic.w	r4, r6, r4
 80006a2:	4325      	orrs	r5, r4
 80006a4:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80006a6:	6804      	ldr	r4, [r0, #0]
 80006a8:	4023      	ands	r3, r4
 80006aa:	ea43 0309 	orr.w	r3, r3, r9
 80006ae:	6003      	str	r3, [r0, #0]
 80006b0:	e7b4      	b.n	800061c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80006b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80006b4:	ea26 0404 	bic.w	r4, r6, r4
 80006b8:	4325      	orrs	r5, r4
 80006ba:	6245      	str	r5, [r0, #36]	; 0x24
 80006bc:	e7f3      	b.n	80006a6 <_pal_lld_setgroupmode+0xb6>
 80006be:	bf00      	nop

080006c0 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 80006c0:	b430      	push	{r4, r5}
 80006c2:	2320      	movs	r3, #32
 80006c4:	f383 8811 	msr	BASEPRI, r3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80006c8:	68c3      	ldr	r3, [r0, #12]
 80006ca:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 80006cc:	2100      	movs	r1, #0
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80006ce:	f042 0201 	orr.w	r2, r2, #1
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80006d2:	2505      	movs	r5, #5

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 80006d4:	2403      	movs	r4, #3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80006d6:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 80006d8:	6119      	str	r1, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80006da:	601d      	str	r5, [r3, #0]
 80006dc:	7004      	strb	r4, [r0, #0]
 80006de:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 80006e2:	bc30      	pop	{r4, r5}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
	...

080006f0 <_port_irq_epilogue>:
 80006f0:	2320      	movs	r3, #32
 80006f2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <_port_irq_epilogue+0x4c>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80006fe:	d102      	bne.n	8000706 <_port_irq_epilogue+0x16>
 8000700:	f383 8811 	msr	BASEPRI, r3
 8000704:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800070a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800070e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000712:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8000716:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800071a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <_port_irq_epilogue+0x50>)
 8000720:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000722:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000724:	6889      	ldr	r1, [r1, #8]
 8000726:	6892      	ldr	r2, [r2, #8]
 8000728:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800072a:	bf8c      	ite	hi
 800072c:	4a05      	ldrhi	r2, [pc, #20]	; (8000744 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800072e:	4a06      	ldrls	r2, [pc, #24]	; (8000748 <_port_irq_epilogue+0x58>)
 8000730:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	20000cc0 	.word	0x20000cc0
 8000744:	080002b1 	.word	0x080002b1
 8000748:	080002b4 	.word	0x080002b4
 800074c:	00000000 	.word	0x00000000

08000750 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000750:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000752:	4d17      	ldr	r5, [pc, #92]	; (80007b0 <VectorA4+0x60>)
 8000754:	69ab      	ldr	r3, [r5, #24]
 8000756:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	4014      	ands	r4, r2
 800075c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800075e:	43d2      	mvns	r2, r2
 8000760:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000762:	07a3      	lsls	r3, r4, #30
 8000764:	d504      	bpl.n	8000770 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8000766:	686b      	ldr	r3, [r5, #4]
 8000768:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800076a:	b10b      	cbz	r3, 8000770 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 800076c:	4628      	mov	r0, r5
 800076e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000770:	0760      	lsls	r0, r4, #29
 8000772:	d504      	bpl.n	800077e <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8000774:	686b      	ldr	r3, [r5, #4]
 8000776:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000778:	b10b      	cbz	r3, 800077e <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <VectorA4+0x60>)
 800077c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800077e:	0721      	lsls	r1, r4, #28
 8000780:	d504      	bpl.n	800078c <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8000782:	686b      	ldr	r3, [r5, #4]
 8000784:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000786:	b10b      	cbz	r3, 800078c <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <VectorA4+0x60>)
 800078a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800078c:	06e2      	lsls	r2, r4, #27
 800078e:	d504      	bpl.n	800079a <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8000790:	686b      	ldr	r3, [r5, #4]
 8000792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000794:	b10b      	cbz	r3, 800079a <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <VectorA4+0x60>)
 8000798:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800079a:	07e3      	lsls	r3, r4, #31
 800079c:	d504      	bpl.n	80007a8 <VectorA4+0x58>
 800079e:	686b      	ldr	r3, [r5, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	b10b      	cbz	r3, 80007a8 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <VectorA4+0x60>)
 80007a6:	4798      	blx	r3
}
 80007a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80007ac:	f7ff bfa0 	b.w	80006f0 <_port_irq_epilogue>
 80007b0:	20000c2c 	.word	0x20000c2c
	...

080007c0 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 80007c0:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD5);
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <Vector108+0x10>)
 80007c4:	f7ff fd7c 	bl	80002c0 <icu_lld_serve_interrupt>
}
 80007c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80007cc:	f7ff bf90 	b.w	80006f0 <_port_irq_epilogue>
 80007d0:	20000c14 	.word	0x20000c14
	...

080007e0 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80007e0:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD3);
 80007e2:	4803      	ldr	r0, [pc, #12]	; (80007f0 <VectorB4+0x10>)
 80007e4:	f7ff fd6c 	bl	80002c0 <icu_lld_serve_interrupt>
}
 80007e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80007ec:	f7ff bf80 	b.w	80006f0 <_port_irq_epilogue>
 80007f0:	20000bfc 	.word	0x20000bfc
	...

08000800 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8000800:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD2);
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <VectorB0+0x10>)
 8000804:	f7ff fd5c 	bl	80002c0 <icu_lld_serve_interrupt>
}
 8000808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800080c:	f7ff bf70 	b.w	80006f0 <_port_irq_epilogue>
 8000810:	20000be4 	.word	0x20000be4
	...

08000820 <VectorB8>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000824:	4c25      	ldr	r4, [pc, #148]	; (80008bc <VectorB8+0x9c>)
 8000826:	6923      	ldr	r3, [r4, #16]
 8000828:	079b      	lsls	r3, r3, #30
 800082a:	d403      	bmi.n	8000834 <VectorB8+0x14>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800082c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000830:	f7ff bf5e 	b.w	80006f0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8000834:	2700      	movs	r7, #0
 8000836:	6127      	str	r7, [r4, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000838:	2520      	movs	r5, #32
 800083a:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 800083e:	4e20      	ldr	r6, [pc, #128]	; (80008c0 <VectorB8+0xa0>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000840:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000842:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
  vtp = ch.vtlist.vt_next;
 8000846:	69f3      	ldr	r3, [r6, #28]
 8000848:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800084a:	eba0 010e 	sub.w	r1, r0, lr
 800084e:	891a      	ldrh	r2, [r3, #8]
 8000850:	b289      	uxth	r1, r1
 8000852:	4291      	cmp	r1, r2
 8000854:	f106 081c 	add.w	r8, r6, #28
 8000858:	d31c      	bcc.n	8000894 <VectorB8+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800085a:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 800085c:	f8d3 900c 	ldr.w	r9, [r3, #12]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000860:	4472      	add	r2, lr
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000862:	4541      	cmp	r1, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000864:	84f2      	strh	r2, [r6, #38]	; 0x26
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000866:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800086a:	61f1      	str	r1, [r6, #28]
    vtp->vt_func = NULL;
 800086c:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800086e:	bf08      	it	eq
 8000870:	60e7      	streq	r7, [r4, #12]
 8000872:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000876:	6918      	ldr	r0, [r3, #16]
 8000878:	47c8      	blx	r9
 800087a:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 800087e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000880:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000884:	69f3      	ldr	r3, [r6, #28]
 8000886:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000888:	eba0 010e 	sub.w	r1, r0, lr
 800088c:	891a      	ldrh	r2, [r3, #8]
 800088e:	b289      	uxth	r1, r1
 8000890:	428a      	cmp	r2, r1
 8000892:	d9e2      	bls.n	800085a <VectorB8+0x3a>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000894:	4543      	cmp	r3, r8
 8000896:	d009      	beq.n	80008ac <VectorB8+0x8c>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000898:	4472      	add	r2, lr
 800089a:	1a12      	subs	r2, r2, r0
 800089c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 800089e:	2a02      	cmp	r2, #2
 80008a0:	bf2c      	ite	cs
 80008a2:	1882      	addcs	r2, r0, r2
 80008a4:	1c82      	addcc	r2, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <VectorB8+0x9c>)
 80008a8:	b292      	uxth	r2, r2
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
 80008ac:	2300      	movs	r3, #0
 80008ae:	f383 8811 	msr	BASEPRI, r3
}
 80008b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80008b6:	f7ff bf1b 	b.w	80006f0 <_port_irq_epilogue>
 80008ba:	bf00      	nop
 80008bc:	40000800 	.word	0x40000800
 80008c0:	20000cc0 	.word	0x20000cc0
	...

080008d0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80008d4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 80008d6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80008d8:	0d89      	lsrs	r1, r1, #22
 80008da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 80008de:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 80008e0:	058c      	lsls	r4, r1, #22
 80008e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 80008e4:	b10a      	cbz	r2, 80008ea <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80008e6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80008e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80008ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80008ee:	f7ff beff 	b.w	80006f0 <_port_irq_epilogue>
 80008f2:	bf00      	nop
 80008f4:	40026400 	.word	0x40026400
 80008f8:	20000858 	.word	0x20000858
 80008fc:	00000000 	.word	0x00000000

08000900 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000904:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8000906:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000908:	0c09      	lsrs	r1, r1, #16
 800090a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800090e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8000910:	040c      	lsls	r4, r1, #16
 8000912:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8000914:	b10a      	cbz	r2, 800091a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8000916:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8000918:	4790      	blx	r2
}
 800091a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800091e:	f7ff bee7 	b.w	80006f0 <_port_irq_epilogue>
 8000922:	bf00      	nop
 8000924:	40026400 	.word	0x40026400
 8000928:	20000858 	.word	0x20000858
 800092c:	00000000 	.word	0x00000000

08000930 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
 8000932:	4809      	ldr	r0, [pc, #36]	; (8000958 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000934:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 8000936:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000938:	0989      	lsrs	r1, r1, #6
 800093a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800093e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8000940:	018c      	lsls	r4, r1, #6
 8000942:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8000944:	b10a      	cbz	r2, 800094a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8000946:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8000948:	4790      	blx	r2
}
 800094a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800094e:	f7ff becf 	b.w	80006f0 <_port_irq_epilogue>
 8000952:	bf00      	nop
 8000954:	40026400 	.word	0x40026400
 8000958:	20000858 	.word	0x20000858
 800095c:	00000000 	.word	0x00000000

08000960 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8000960:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000966:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 8000968:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800096a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800096e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8000970:	b10a      	cbz	r2, 8000976 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8000972:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000974:	4790      	blx	r2
}
 8000976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800097a:	f7ff beb9 	b.w	80006f0 <_port_irq_epilogue>
 800097e:	bf00      	nop
 8000980:	40026400 	.word	0x40026400
 8000984:	20000858 	.word	0x20000858
	...

08000990 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000994:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8000996:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000998:	0d89      	lsrs	r1, r1, #22
 800099a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800099e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 80009a0:	058c      	lsls	r4, r1, #22
 80009a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 80009a4:	b10a      	cbz	r2, 80009aa <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 80009a6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80009a8:	4790      	blx	r2
}
 80009aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80009ae:	f7ff be9f 	b.w	80006f0 <_port_irq_epilogue>
 80009b2:	bf00      	nop
 80009b4:	40026400 	.word	0x40026400
 80009b8:	20000858 	.word	0x20000858
 80009bc:	00000000 	.word	0x00000000

080009c0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80009c4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 80009c6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80009c8:	0c09      	lsrs	r1, r1, #16
 80009ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80009ce:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 80009d0:	040c      	lsls	r4, r1, #16
 80009d2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 80009d4:	b10a      	cbz	r2, 80009da <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 80009d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80009d8:	4790      	blx	r2
}
 80009da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80009de:	f7ff be87 	b.w	80006f0 <_port_irq_epilogue>
 80009e2:	bf00      	nop
 80009e4:	40026400 	.word	0x40026400
 80009e8:	20000858 	.word	0x20000858
 80009ec:	00000000 	.word	0x00000000

080009f0 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80009f4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 80009f6:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80009f8:	0989      	lsrs	r1, r1, #6
 80009fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80009fe:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8000a00:	018c      	lsls	r4, r1, #6
 8000a02:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8000a04:	b10a      	cbz	r2, 8000a0a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8000a06:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8000a08:	4790      	blx	r2
}
 8000a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000a0e:	f7ff be6f 	b.w	80006f0 <_port_irq_epilogue>
 8000a12:	bf00      	nop
 8000a14:	40026400 	.word	0x40026400
 8000a18:	20000858 	.word	0x20000858
 8000a1c:	00000000 	.word	0x00000000

08000a20 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8000a20:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000a26:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 8000a28:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000a2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8000a2e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8000a30:	b10a      	cbz	r2, 8000a36 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8000a32:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000a34:	4790      	blx	r2
}
 8000a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000a3a:	f7ff be59 	b.w	80006f0 <_port_irq_epilogue>
 8000a3e:	bf00      	nop
 8000a40:	40026400 	.word	0x40026400
 8000a44:	20000858 	.word	0x20000858
	...

08000a50 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000a54:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 8000a56:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000a58:	0d89      	lsrs	r1, r1, #22
 8000a5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8000a5e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8000a60:	058c      	lsls	r4, r1, #22
 8000a62:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8000a64:	b10a      	cbz	r2, 8000a6a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8000a66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000a68:	4790      	blx	r2
}
 8000a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000a6e:	f7ff be3f 	b.w	80006f0 <_port_irq_epilogue>
 8000a72:	bf00      	nop
 8000a74:	40026000 	.word	0x40026000
 8000a78:	20000858 	.word	0x20000858
 8000a7c:	00000000 	.word	0x00000000

08000a80 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000a84:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8000a86:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000a88:	0c09      	lsrs	r1, r1, #16
 8000a8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000a8e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8000a90:	040c      	lsls	r4, r1, #16
 8000a92:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8000a94:	b10a      	cbz	r2, 8000a9a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000a96:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000a98:	4790      	blx	r2
}
 8000a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000a9e:	f7ff be27 	b.w	80006f0 <_port_irq_epilogue>
 8000aa2:	bf00      	nop
 8000aa4:	40026000 	.word	0x40026000
 8000aa8:	20000858 	.word	0x20000858
 8000aac:	00000000 	.word	0x00000000

08000ab0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ab4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8000ab6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ab8:	0989      	lsrs	r1, r1, #6
 8000aba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000abe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8000ac0:	018c      	lsls	r4, r1, #6
 8000ac2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8000ac4:	b10a      	cbz	r2, 8000aca <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000ac6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000ac8:	4790      	blx	r2
}
 8000aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000ace:	f7ff be0f 	b.w	80006f0 <_port_irq_epilogue>
 8000ad2:	bf00      	nop
 8000ad4:	40026000 	.word	0x40026000
 8000ad8:	20000858 	.word	0x20000858
 8000adc:	00000000 	.word	0x00000000

08000ae0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000ae0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000ae6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8000ae8:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000aea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8000aee:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8000af0:	b10a      	cbz	r2, 8000af6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8000af2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000af4:	4790      	blx	r2
}
 8000af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000afa:	f7ff bdf9 	b.w	80006f0 <_port_irq_epilogue>
 8000afe:	bf00      	nop
 8000b00:	40026000 	.word	0x40026000
 8000b04:	20000858 	.word	0x20000858
	...

08000b10 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
 8000b12:	4809      	ldr	r0, [pc, #36]	; (8000b38 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b14:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 8000b16:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b18:	0d89      	lsrs	r1, r1, #22
 8000b1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8000b1e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8000b20:	058c      	lsls	r4, r1, #22
 8000b22:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8000b24:	b10a      	cbz	r2, 8000b2a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8000b26:	69c0      	ldr	r0, [r0, #28]
 8000b28:	4790      	blx	r2
}
 8000b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000b2e:	f7ff bddf 	b.w	80006f0 <_port_irq_epilogue>
 8000b32:	bf00      	nop
 8000b34:	40026000 	.word	0x40026000
 8000b38:	20000858 	.word	0x20000858
 8000b3c:	00000000 	.word	0x00000000

08000b40 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
 8000b42:	4809      	ldr	r0, [pc, #36]	; (8000b68 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000b44:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 8000b46:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000b48:	0c09      	lsrs	r1, r1, #16
 8000b4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000b4e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8000b50:	040c      	lsls	r4, r1, #16
 8000b52:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8000b54:	b10a      	cbz	r2, 8000b5a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8000b56:	6940      	ldr	r0, [r0, #20]
 8000b58:	4790      	blx	r2
}
 8000b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000b5e:	f7ff bdc7 	b.w	80006f0 <_port_irq_epilogue>
 8000b62:	bf00      	nop
 8000b64:	40026000 	.word	0x40026000
 8000b68:	20000858 	.word	0x20000858
 8000b6c:	00000000 	.word	0x00000000

08000b70 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000b74:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 8000b76:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000b78:	0989      	lsrs	r1, r1, #6
 8000b7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8000b7e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8000b80:	018c      	lsls	r4, r1, #6
 8000b82:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8000b84:	b10a      	cbz	r2, 8000b8a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8000b86:	68c0      	ldr	r0, [r0, #12]
 8000b88:	4790      	blx	r2
}
 8000b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000b8e:	f7ff bdaf 	b.w	80006f0 <_port_irq_epilogue>
 8000b92:	bf00      	nop
 8000b94:	40026000 	.word	0x40026000
 8000b98:	20000858 	.word	0x20000858
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8000ba0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8000bac:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8000bae:	6813      	ldr	r3, [r2, #0]
 8000bb0:	b10b      	cbz	r3, 8000bb6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8000bb2:	6850      	ldr	r0, [r2, #4]
 8000bb4:	4798      	blx	r3
}
 8000bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000bba:	f7ff bd99 	b.w	80006f0 <_port_irq_epilogue>
 8000bbe:	bf00      	nop
 8000bc0:	40026000 	.word	0x40026000
 8000bc4:	20000858 	.word	0x20000858
	...

08000bd0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <chTMStopMeasurementX+0x40>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8000bd6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000bd8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 8000bda:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000bdc:	6f16      	ldr	r6, [r2, #112]	; 0x70
  if (tmp->last > tmp->worst) {
 8000bde:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 8000be0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000be8:	18e4      	adds	r4, r4, r3
 8000bea:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000bee:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000bf0:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000bf2:	bf88      	it	hi
 8000bf4:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000bf6:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000bf8:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000bfa:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 8000bfe:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000c00:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 8000c02:	bf38      	it	cc
 8000c04:	6003      	strcc	r3, [r0, #0]
}
 8000c06:	bcf0      	pop	{r4, r5, r6, r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e0001000 	.word	0xe0001000
 8000c10:	20000cc0 	.word	0x20000cc0
	...

08000c20 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 8000c22:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8000c24:	b470      	push	{r4, r5, r6}
  tqp->p_next = tp->p_next;
 8000c26:	6803      	ldr	r3, [r0, #0]
  otp = currp;
 8000c28:	6994      	ldr	r4, [r2, #24]
 8000c2a:	6013      	str	r3, [r2, #0]
  currp->p_state = CH_STATE_CURRENT;
 8000c2c:	2601      	movs	r6, #1
  otp->p_state = CH_STATE_READY;
 8000c2e:	2500      	movs	r5, #0
  if (otp->p_prio == IDLEPRIO) {
 8000c30:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000c32:	605a      	str	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 8000c34:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000c36:	6190      	str	r0, [r2, #24]
  otp->p_state = CH_STATE_READY;
 8000c38:	7725      	strb	r5, [r4, #28]
 8000c3a:	e000      	b.n	8000c3e <chSchDoReschedule+0x1e>
 8000c3c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	4291      	cmp	r1, r2
 8000c42:	d3fb      	bcc.n	8000c3c <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	6062      	str	r2, [r4, #4]
  otp->p_next = cp;
 8000c48:	6023      	str	r3, [r4, #0]
  chSysSwitch(currp, otp);
 8000c4a:	4621      	mov	r1, r4
  otp->p_prev->p_next = otp;
 8000c4c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000c4e:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8000c50:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 8000c52:	f7ff bb1d 	b.w	8000290 <_port_switch>
 8000c56:	bf00      	nop
 8000c58:	20000cc0 	.word	0x20000cc0
 8000c5c:	00000000 	.word	0x00000000

08000c60 <chSchGoSleepS>:
  otp = currp;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <chSchGoSleepS+0x20>)
 8000c62:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8000c64:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000c66:	b410      	push	{r4}
  otp->p_state = newstate;
 8000c68:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 8000c6a:	6810      	ldr	r0, [r2, #0]
 8000c6c:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 8000c6e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000c70:	6043      	str	r3, [r0, #4]
 8000c72:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000c74:	4610      	mov	r0, r2
}
 8000c76:	bc10      	pop	{r4}
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000c78:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000c7a:	f7ff bb09 	b.w	8000290 <_port_switch>
 8000c7e:	bf00      	nop
 8000c80:	20000cc0 	.word	0x20000cc0
	...

08000c90 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (TIME_INFINITE != time) {
 8000c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c98:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000c9a:	b086      	sub	sp, #24
  if (TIME_INFINITE != time) {
 8000c9c:	d059      	beq.n	8000d52 <chSchGoSleepTimeoutS+0xc2>
    chVTDoSetI(&vt, time, wakeup, currp);
 8000c9e:	4c4f      	ldr	r4, [pc, #316]	; (8000ddc <chSchGoSleepTimeoutS+0x14c>)
  return (systime_t)STM32_ST_TIM->CNT;
 8000ca0:	f8df e140 	ldr.w	lr, [pc, #320]	; 8000de4 <chSchGoSleepTimeoutS+0x154>

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8000ca4:	4b4e      	ldr	r3, [pc, #312]	; (8000de0 <chSchGoSleepTimeoutS+0x150>)
 8000ca6:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 8000caa:	9304      	str	r3, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000cac:	4625      	mov	r5, r4
 8000cae:	4607      	mov	r7, r0
  vtp->vt_par = par;
 8000cb0:	69a0      	ldr	r0, [r4, #24]
 8000cb2:	9005      	str	r0, [sp, #20]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000cb4:	f855 0f1c 	ldr.w	r0, [r5, #28]!
 8000cb8:	2902      	cmp	r1, #2
 8000cba:	bf38      	it	cc
 8000cbc:	2102      	movcc	r1, #2
 8000cbe:	42a8      	cmp	r0, r5
 8000cc0:	b296      	uxth	r6, r2
 8000cc2:	d072      	beq.n	8000daa <chSchGoSleepTimeoutS+0x11a>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000cc4:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
 8000cc8:	eba6 060c 	sub.w	r6, r6, ip

    if (delta < now - ch.vtlist.vt_lasttime) {
 8000ccc:	b292      	uxth	r2, r2
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000cce:	198b      	adds	r3, r1, r6
    if (delta < now - ch.vtlist.vt_lasttime) {
 8000cd0:	eba2 020c 	sub.w	r2, r2, ip
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000cd4:	b29b      	uxth	r3, r3
    if (delta < now - ch.vtlist.vt_lasttime) {
 8000cd6:	4293      	cmp	r3, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000cd8:	8902      	ldrh	r2, [r0, #8]
    if (delta < now - ch.vtlist.vt_lasttime) {
 8000cda:	db35      	blt.n	8000d48 <chSchGoSleepTimeoutS+0xb8>
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d340      	bcc.n	8000d62 <chSchGoSleepTimeoutS+0xd2>
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d905      	bls.n	8000cf0 <chSchGoSleepTimeoutS+0x60>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000ce4:	6800      	ldr	r0, [r0, #0]
    delta -= p->vt_delta;
 8000ce6:	1a9b      	subs	r3, r3, r2
  while (p->vt_delta < delta) {
 8000ce8:	8902      	ldrh	r2, [r0, #8]
    delta -= p->vt_delta;
 8000cea:	b29b      	uxth	r3, r3
  while (p->vt_delta < delta) {
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3f9      	bcc.n	8000ce4 <chSchGoSleepTimeoutS+0x54>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000cf0:	6842      	ldr	r2, [r0, #4]
 8000cf2:	9202      	str	r2, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8000cf4:	f10d 0804 	add.w	r8, sp, #4
  vtp->vt_next = p;
 8000cf8:	9001      	str	r0, [sp, #4]
  vtp->vt_prev->vt_next = vtp;
 8000cfa:	f8c2 8000 	str.w	r8, [r2]
  p->vt_prev = vtp;
 8000cfe:	f8c0 8004 	str.w	r8, [r0, #4]
  vtp->vt_delta = delta
 8000d02:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000d06:	8902      	ldrh	r2, [r0, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
  ch.vtlist.vt_delta = (systime_t)-1;
 8000d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  p->vt_delta -= delta;
 8000d0e:	8103      	strh	r3, [r0, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000d10:	84a2      	strh	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000d12:	4638      	mov	r0, r7
 8000d14:	f7ff ffa4 	bl	8000c60 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000d18:	9b04      	ldr	r3, [sp, #16]
 8000d1a:	b183      	cbz	r3, 8000d3e <chSchGoSleepTimeoutS+0xae>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000d1c:	69e3      	ldr	r3, [r4, #28]
 8000d1e:	4543      	cmp	r3, r8
 8000d20:	d025      	beq.n	8000d6e <chSchGoSleepTimeoutS+0xde>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000d22:	9a02      	ldr	r2, [sp, #8]
 8000d24:	9b01      	ldr	r3, [sp, #4]
 8000d26:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000d28:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 8000d2a:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000d2c:	42ab      	cmp	r3, r5
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000d2e:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8000d30:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000d32:	d004      	beq.n	8000d3e <chSchGoSleepTimeoutS+0xae>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000d34:	891a      	ldrh	r2, [r3, #8]
 8000d36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000d3a:	440a      	add	r2, r1
 8000d3c:	811a      	strh	r2, [r3, #8]
  return currp->p_u.rdymsg;
 8000d3e:	69a3      	ldr	r3, [r4, #24]
}
 8000d40:	6a18      	ldr	r0, [r3, #32]
 8000d42:	b006      	add	sp, #24
 8000d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p = p->vt_next;
 8000d48:	6800      	ldr	r0, [r0, #0]
      delta -= p->vt_delta;
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	8902      	ldrh	r2, [r0, #8]
 8000d50:	e7c6      	b.n	8000ce0 <chSchGoSleepTimeoutS+0x50>
 8000d52:	4c22      	ldr	r4, [pc, #136]	; (8000ddc <chSchGoSleepTimeoutS+0x14c>)
    chSchGoSleepS(newstate);
 8000d54:	f7ff ff84 	bl	8000c60 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 8000d58:	69a3      	ldr	r3, [r4, #24]
}
 8000d5a:	6a18      	ldr	r0, [r3, #32]
 8000d5c:	b006      	add	sp, #24
 8000d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8000d62:	eb0c 0103 	add.w	r1, ip, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d66:	b289      	uxth	r1, r1
 8000d68:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
 8000d6c:	e7b8      	b.n	8000ce0 <chSchGoSleepTimeoutS+0x50>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000d6e:	9e01      	ldr	r6, [sp, #4]
 8000d70:	61e6      	str	r6, [r4, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000d72:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d74:	42ae      	cmp	r6, r5
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000d76:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 8000d78:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000d7a:	d02c      	beq.n	8000dd6 <chSchGoSleepTimeoutS+0x146>
  return (systime_t)STM32_ST_TIM->CNT;
 8000d7c:	4819      	ldr	r0, [pc, #100]	; (8000de4 <chSchGoSleepTimeoutS+0x154>)
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000d7e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8000d80:	6a42      	ldr	r2, [r0, #36]	; 0x24
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000d82:	8933      	ldrh	r3, [r6, #8]
 8000d84:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8000d88:	b292      	uxth	r2, r2
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000d8a:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000d8c:	442b      	add	r3, r5
 8000d8e:	b29b      	uxth	r3, r3
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000d90:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000d92:	428b      	cmp	r3, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000d94:	8133      	strh	r3, [r6, #8]
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000d96:	d9d2      	bls.n	8000d3e <chSchGoSleepTimeoutS+0xae>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b29b      	uxth	r3, r3
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	bf2c      	ite	cs
 8000da0:	18d3      	addcs	r3, r2, r3
 8000da2:	1c93      	addcc	r3, r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	6343      	str	r3, [r0, #52]	; 0x34
 8000da8:	e7c9      	b.n	8000d3e <chSchGoSleepTimeoutS+0xae>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8000daa:	198b      	adds	r3, r1, r6
      ch.vtlist.vt_next = vtp;
 8000dac:	f10d 0804 	add.w	r8, sp, #4
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000db0:	b29b      	uxth	r3, r3
  STM32_ST_TIM->SR     = 0;
 8000db2:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000db4:	2202      	movs	r2, #2
      ch.vtlist.vt_lasttime = now;
 8000db6:	84e6      	strh	r6, [r4, #38]	; 0x26
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000db8:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000dba:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 8000dbc:	f8ad 100c 	strh.w	r1, [sp, #12]
      ch.vtlist.vt_next = vtp;
 8000dc0:	f8c4 801c 	str.w	r8, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 8000dc4:	f8c4 8020 	str.w	r8, [r4, #32]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000dc8:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000dcc:	f8ce 0010 	str.w	r0, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000dd0:	f8ce 200c 	str.w	r2, [lr, #12]
 8000dd4:	e79d      	b.n	8000d12 <chSchGoSleepTimeoutS+0x82>
  STM32_ST_TIM->DIER = 0;
 8000dd6:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <chSchGoSleepTimeoutS+0x154>)
 8000dd8:	60d3      	str	r3, [r2, #12]
 8000dda:	e7b0      	b.n	8000d3e <chSchGoSleepTimeoutS+0xae>
 8000ddc:	20000cc0 	.word	0x20000cc0
 8000de0:	080003b1 	.word	0x080003b1
 8000de4:	40000800 	.word	0x40000800
	...

08000df0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000df0:	b161      	cbz	r1, 8000e0c <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <chThdEnqueueTimeoutS+0x24>)
 8000df4:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000df6:	b410      	push	{r4}
  tp->p_next = (thread_t *)tqp;
 8000df8:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 8000dfa:	6844      	ldr	r4, [r0, #4]
 8000dfc:	605c      	str	r4, [r3, #4]
 8000dfe:	4602      	mov	r2, r0
  tp->p_prev->p_next = tp;
 8000e00:	6023      	str	r3, [r4, #0]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000e02:	2004      	movs	r0, #4
  tqp->p_prev = tp;
 8000e04:	6053      	str	r3, [r2, #4]
}
 8000e06:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000e08:	f7ff bf42 	b.w	8000c90 <chSchGoSleepTimeoutS>
}
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000cc0 	.word	0x20000cc0
	...

08000e20 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e24:	b083      	sub	sp, #12
 8000e26:	4604      	mov	r4, r0
 8000e28:	460d      	mov	r5, r1
 8000e2a:	4616      	mov	r6, r2
 8000e2c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8000e2e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000e32:	f04f 0920 	mov.w	r9, #32
 8000e36:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 8000e3a:	2700      	movs	r7, #0
 8000e3c:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8000e3e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000e40:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8000e44:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8000e46:	b303      	cbz	r3, 8000e8a <chOQWriteTimeout+0x6a>
    *oqp->q_wrptr++ = *bp++;
 8000e48:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 8000e4a:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000e4c:	1c4a      	adds	r2, r1, #1
    oqp->q_counter--;
 8000e4e:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8000e50:	6162      	str	r2, [r4, #20]
    oqp->q_counter--;
 8000e52:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000e54:	782b      	ldrb	r3, [r5, #0]
 8000e56:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000e58:	6923      	ldr	r3, [r4, #16]
 8000e5a:	6961      	ldr	r1, [r4, #20]
 8000e5c:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 8000e5e:	bf24      	itt	cs
 8000e60:	68e3      	ldrcs	r3, [r4, #12]
 8000e62:	6163      	strcs	r3, [r4, #20]
    if (nfy != NULL) {
 8000e64:	f1b8 0f00 	cmp.w	r8, #0
 8000e68:	d000      	beq.n	8000e6c <chOQWriteTimeout+0x4c>
      nfy(oqp);
 8000e6a:	47c0      	blx	r8
 8000e6c:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8000e70:	3e01      	subs	r6, #1
    w++;
 8000e72:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8000e76:	d012      	beq.n	8000e9e <chOQWriteTimeout+0x7e>
 8000e78:	f389 8811 	msr	BASEPRI, r9
 8000e7c:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000e7e:	465d      	mov	r5, fp
 8000e80:	f105 0b01 	add.w	fp, r5, #1
      nfy(oqp);
 8000e84:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1de      	bne.n	8000e48 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8000e8a:	9901      	ldr	r1, [sp, #4]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff ffae 	bl	8000df0 <chThdEnqueueTimeoutS>
 8000e94:	9b00      	ldr	r3, [sp, #0]
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d0d1      	beq.n	8000e3e <chOQWriteTimeout+0x1e>
 8000e9a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	b003      	add	sp, #12
 8000ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ea6:	bf00      	nop
	...

08000eb0 <writet.lto_priv.42>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000eb0:	3030      	adds	r0, #48	; 0x30
 8000eb2:	f7ff bfb5 	b.w	8000e20 <chOQWriteTimeout>
 8000eb6:	bf00      	nop
	...

08000ec0 <write.lto_priv.36>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000ec0:	3030      	adds	r0, #48	; 0x30
 8000ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec6:	f7ff bfab 	b.w	8000e20 <chOQWriteTimeout>
 8000eca:	bf00      	nop
 8000ecc:	0000      	movs	r0, r0
	...

08000ed0 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	460f      	mov	r7, r1
 8000ed6:	4616      	mov	r6, r2
 8000ed8:	2320      	movs	r3, #32
 8000eda:	f383 8811 	msr	BASEPRI, r3
 8000ede:	e003      	b.n	8000ee8 <chOQPutTimeout+0x18>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000ee0:	f7ff ff86 	bl	8000df0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	db19      	blt.n	8000f1c <chOQPutTimeout+0x4c>
 8000ee8:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000eea:	4631      	mov	r1, r6
 8000eec:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0f6      	beq.n	8000ee0 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8000ef2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000ef4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000ef6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000ef8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000efa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000efc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000efe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000f00:	6923      	ldr	r3, [r4, #16]
 8000f02:	6962      	ldr	r2, [r4, #20]
 8000f04:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000f06:	bf24      	itt	cs
 8000f08:	68e3      	ldrcs	r3, [r4, #12]
 8000f0a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8000f0c:	69e3      	ldr	r3, [r4, #28]
 8000f0e:	b10b      	cbz	r3, 8000f14 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8000f10:	4620      	mov	r0, r4
 8000f12:	4798      	blx	r3
 8000f14:	2000      	movs	r0, #0
 8000f16:	f380 8811 	msr	BASEPRI, r0
}
 8000f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f1c:	f385 8811 	msr	BASEPRI, r5
 8000f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f22:	bf00      	nop
	...

08000f30 <putt.lto_priv.40>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000f30:	3030      	adds	r0, #48	; 0x30
 8000f32:	f7ff bfcd 	b.w	8000ed0 <chOQPutTimeout>
 8000f36:	bf00      	nop
	...

08000f40 <put.lto_priv.38>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000f40:	3030      	adds	r0, #48	; 0x30
 8000f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f46:	f7ff bfc3 	b.w	8000ed0 <chOQPutTimeout>
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 8000f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f54:	4604      	mov	r4, r0
 8000f56:	b083      	sub	sp, #12
 8000f58:	4689      	mov	r9, r1
 8000f5a:	4693      	mov	fp, r2
 8000f5c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8000f5e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000f62:	2720      	movs	r7, #32
 8000f64:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8000f68:	2600      	movs	r6, #0
 8000f6a:	9701      	str	r7, [sp, #4]
 8000f6c:	46b2      	mov	sl, r6
    if (nfy != NULL) {
 8000f6e:	f1b8 0f00 	cmp.w	r8, #0
 8000f72:	d005      	beq.n	8000f80 <chIQReadTimeout+0x30>
      nfy(iqp);
 8000f74:	4620      	mov	r0, r4
 8000f76:	47c0      	blx	r8
 8000f78:	e002      	b.n	8000f80 <chIQReadTimeout+0x30>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8000f7a:	f7ff ff39 	bl	8000df0 <chThdEnqueueTimeoutS>
 8000f7e:	b9e0      	cbnz	r0, 8000fba <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 8000f80:	68a7      	ldr	r7, [r4, #8]
 8000f82:	4629      	mov	r1, r5
 8000f84:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 8000f86:	2f00      	cmp	r7, #0
 8000f88:	d0f7      	beq.n	8000f7a <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 8000f8a:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 8000f8c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000f8e:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8000f90:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8000f92:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 8000f94:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000f96:	7813      	ldrb	r3, [r2, #0]
 8000f98:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8000f9c:	6923      	ldr	r3, [r4, #16]
 8000f9e:	69a2      	ldr	r2, [r4, #24]
 8000fa0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000fa2:	bf24      	itt	cs
 8000fa4:	68e3      	ldrcs	r3, [r4, #12]
 8000fa6:	61a3      	strcs	r3, [r4, #24]
 8000fa8:	f38a 8811 	msr	BASEPRI, sl
    r++;
 8000fac:	3601      	adds	r6, #1
    if (--n == 0U) {
 8000fae:	45b3      	cmp	fp, r6
 8000fb0:	d005      	beq.n	8000fbe <chIQReadTimeout+0x6e>
 8000fb2:	9b01      	ldr	r3, [sp, #4]
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	e7d9      	b.n	8000f6e <chIQReadTimeout+0x1e>
 8000fba:	f387 8811 	msr	BASEPRI, r7
}
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	b003      	add	sp, #12
 8000fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fc6:	bf00      	nop
	...

08000fd0 <readt.lto_priv.43>:
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000fd0:	300c      	adds	r0, #12
 8000fd2:	f7ff bfbd 	b.w	8000f50 <chIQReadTimeout>
 8000fd6:	bf00      	nop
	...

08000fe0 <read.lto_priv.37>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000fe0:	300c      	adds	r0, #12
 8000fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe6:	f7ff bfb3 	b.w	8000f50 <chIQReadTimeout>
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000ff0:	b570      	push	{r4, r5, r6, lr}
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	460e      	mov	r6, r1
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 8000ffc:	69c3      	ldr	r3, [r0, #28]
 8000ffe:	b12b      	cbz	r3, 800100c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8001000:	4798      	blx	r3
 8001002:	e003      	b.n	800100c <chIQGetTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001004:	f7ff fef4 	bl	8000df0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001008:	2800      	cmp	r0, #0
 800100a:	db15      	blt.n	8001038 <chIQGetTimeout+0x48>
 800100c:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800100e:	4631      	mov	r1, r6
 8001010:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 8001012:	2d00      	cmp	r5, #0
 8001014:	d0f6      	beq.n	8001004 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8001016:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001018:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800101a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800101c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800101e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001020:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 8001022:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001024:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001026:	bf28      	it	cs
 8001028:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800102a:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800102c:	bf28      	it	cs
 800102e:	61a3      	strcs	r3, [r4, #24]
 8001030:	2300      	movs	r3, #0
 8001032:	f383 8811 	msr	BASEPRI, r3
}
 8001036:	bd70      	pop	{r4, r5, r6, pc}
 8001038:	f385 8811 	msr	BASEPRI, r5
 800103c:	bd70      	pop	{r4, r5, r6, pc}
 800103e:	bf00      	nop

08001040 <gett.lto_priv.41>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001040:	300c      	adds	r0, #12
 8001042:	f7ff bfd5 	b.w	8000ff0 <chIQGetTimeout>
 8001046:	bf00      	nop
	...

08001050 <get.lto_priv.39>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001050:	300c      	adds	r0, #12
 8001052:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001056:	f7ff bfcb 	b.w	8000ff0 <chIQGetTimeout>
 800105a:	bf00      	nop
 800105c:	0000      	movs	r0, r0
	...

08001060 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 8001060:	2200      	movs	r2, #0
 8001062:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <chSchReadyI+0x24>)
thread_t *chSchReadyI(thread_t *tp) {
 8001066:	b410      	push	{r4}
 8001068:	4604      	mov	r4, r0
  tp->p_state = CH_STATE_READY;
 800106a:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 800106c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	428a      	cmp	r2, r1
 8001072:	d2fb      	bcs.n	800106c <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 8001078:	6023      	str	r3, [r4, #0]
}
 800107a:	4620      	mov	r0, r4
  tp->p_prev->p_next = tp;
 800107c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800107e:	605c      	str	r4, [r3, #4]
}
 8001080:	bc10      	pop	{r4}
 8001082:	4770      	bx	lr
 8001084:	20000cc0 	.word	0x20000cc0
	...

08001090 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <Vector88+0x8c>)
 8001094:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8001096:	2100      	movs	r1, #0
 8001098:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800109a:	0693      	lsls	r3, r2, #26
 800109c:	d536      	bpl.n	800110c <Vector88+0x7c>
 800109e:	4c20      	ldr	r4, [pc, #128]	; (8001120 <Vector88+0x90>)
 80010a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80010a2:	680a      	ldr	r2, [r1, #0]
 80010a4:	6853      	ldr	r3, [r2, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d030      	beq.n	800110c <Vector88+0x7c>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 80010aa:	6925      	ldr	r5, [r4, #16]
 80010ac:	2d00      	cmp	r5, #0
 80010ae:	d02d      	beq.n	800110c <Vector88+0x7c>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f023 031f 	bic.w	r3, r3, #31
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	f013 0301 	ands.w	r3, r3, #1
 80010be:	d1fb      	bne.n	80010b8 <Vector88+0x28>
 80010c0:	7a0f      	ldrb	r7, [r1, #8]
 80010c2:	684e      	ldr	r6, [r1, #4]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80010c4:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 80010c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 80010c8:	203d      	movs	r0, #61	; 0x3d
 80010ca:	40b8      	lsls	r0, r7
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 80010cc:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
 80010ce:	6030      	str	r0, [r6, #0]
  adcp->adc->CR1 = 0;
 80010d0:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 80010d2:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80010d4:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 80010d6:	b1ed      	cbz	r5, 8001114 <Vector88+0x84>
 80010d8:	2305      	movs	r3, #5
 80010da:	7023      	strb	r3, [r4, #0]
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <Vector88+0x90>)
 80010de:	47a8      	blx	r5
 80010e0:	7823      	ldrb	r3, [r4, #0]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	bf04      	itt	eq
 80010e6:	2302      	moveq	r3, #2
 80010e8:	7023      	strbeq	r3, [r4, #0]
 80010ea:	2300      	movs	r3, #0
 80010ec:	6123      	str	r3, [r4, #16]
 80010ee:	2320      	movs	r3, #32
 80010f0:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80010f4:	6960      	ldr	r0, [r4, #20]
 80010f6:	b130      	cbz	r0, 8001106 <Vector88+0x76>
    tp->p_u.rdymsg = msg;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fc:	6203      	str	r3, [r0, #32]
    *trp = NULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	6163      	str	r3, [r4, #20]
    (void) chSchReadyI(tp);
 8001102:	f7ff ffad 	bl	8001060 <chSchReadyI>
 8001106:	2300      	movs	r3, #0
 8001108:	f383 8811 	msr	BASEPRI, r3
}
 800110c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001110:	f7ff baee 	b.w	80006f0 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001114:	2302      	movs	r3, #2
 8001116:	6125      	str	r5, [r4, #16]
 8001118:	7023      	strb	r3, [r4, #0]
 800111a:	e7e8      	b.n	80010ee <Vector88+0x5e>
 800111c:	40012000 	.word	0x40012000
 8001120:	20000bb0 	.word	0x20000bb0
	...

08001130 <adc_lld_serve_rx_interrupt.lto_priv.44>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001130:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001138:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800113a:	d034      	beq.n	80011a6 <adc_lld_serve_rx_interrupt.lto_priv.44+0x76>
  dmaStreamDisable(adcp->dmastp);
 800113c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800113e:	6803      	ldr	r3, [r0, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	f022 021f 	bic.w	r2, r2, #31
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	f011 0101 	ands.w	r1, r1, #1
 800114e:	d1fb      	bne.n	8001148 <adc_lld_serve_rx_interrupt.lto_priv.44+0x18>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001150:	6922      	ldr	r2, [r4, #16]
  dmaStreamDisable(adcp->dmastp);
 8001152:	7a07      	ldrb	r7, [r0, #8]
 8001154:	6846      	ldr	r6, [r0, #4]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001156:	6895      	ldr	r5, [r2, #8]
  adcp->adc->CR1 = 0;
 8001158:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800115a:	223d      	movs	r2, #61	; 0x3d
 800115c:	40ba      	lsls	r2, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 800115e:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001160:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8001162:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8001164:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001166:	6098      	str	r0, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001168:	2d00      	cmp	r5, #0
 800116a:	d034      	beq.n	80011d6 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa6>
 800116c:	2305      	movs	r3, #5
 800116e:	7023      	strb	r3, [r4, #0]
 8001170:	4620      	mov	r0, r4
 8001172:	47a8      	blx	r5
 8001174:	7823      	ldrb	r3, [r4, #0]
 8001176:	2b05      	cmp	r3, #5
 8001178:	bf04      	itt	eq
 800117a:	2302      	moveq	r3, #2
 800117c:	7023      	strbeq	r3, [r4, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	6123      	str	r3, [r4, #16]
 8001182:	2320      	movs	r3, #32
 8001184:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001188:	6963      	ldr	r3, [r4, #20]
 800118a:	b13b      	cbz	r3, 800119c <adc_lld_serve_rx_interrupt.lto_priv.44+0x6c>
    *trp = NULL;
 800118c:	2100      	movs	r1, #0
    tp->p_u.rdymsg = msg;
 800118e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    *trp = NULL;
 8001192:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8001194:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001196:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001198:	f7ff ff62 	bl	8001060 <chSchReadyI>
 800119c:	2300      	movs	r3, #0
 800119e:	f383 8811 	msr	BASEPRI, r3
 80011a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (adcp->grpp != NULL) {
 80011a6:	6905      	ldr	r5, [r0, #16]
 80011a8:	b19d      	cbz	r5, 80011d2 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa2>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 80011aa:	068a      	lsls	r2, r1, #26
 80011ac:	d50f      	bpl.n	80011ce <adc_lld_serve_rx_interrupt.lto_priv.44+0x9e>
        _adc_isr_full_code(adcp);
 80011ae:	782b      	ldrb	r3, [r5, #0]
 80011b0:	b1f3      	cbz	r3, 80011f0 <adc_lld_serve_rx_interrupt.lto_priv.44+0xc0>
 80011b2:	686b      	ldr	r3, [r5, #4]
 80011b4:	b16b      	cbz	r3, 80011d2 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa2>
 80011b6:	68c2      	ldr	r2, [r0, #12]
 80011b8:	2a01      	cmp	r2, #1
 80011ba:	d94a      	bls.n	8001252 <adc_lld_serve_rx_interrupt.lto_priv.44+0x122>
 80011bc:	886d      	ldrh	r5, [r5, #2]
 80011be:	6884      	ldr	r4, [r0, #8]
 80011c0:	0852      	lsrs	r2, r2, #1
 80011c2:	0051      	lsls	r1, r2, #1
 80011c4:	fb05 4101 	mla	r1, r5, r1, r4
}
 80011c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 80011cc:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 80011ce:	06cb      	lsls	r3, r1, #27
 80011d0:	d405      	bmi.n	80011de <adc_lld_serve_rx_interrupt.lto_priv.44+0xae>
 80011d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80011d6:	2302      	movs	r3, #2
 80011d8:	6125      	str	r5, [r4, #16]
 80011da:	7023      	strb	r3, [r4, #0]
 80011dc:	e7d1      	b.n	8001182 <adc_lld_serve_rx_interrupt.lto_priv.44+0x52>
        _adc_isr_half_code(adcp);
 80011de:	686b      	ldr	r3, [r5, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f6      	beq.n	80011d2 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa2>
 80011e4:	68c2      	ldr	r2, [r0, #12]
 80011e6:	6881      	ldr	r1, [r0, #8]
 80011e8:	0852      	lsrs	r2, r2, #1
}
 80011ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_half_code(adcp);
 80011ee:	4718      	bx	r3
  dmaStreamDisable(adcp->dmastp);
 80011f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80011f2:	6802      	ldr	r2, [r0, #0]
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	f023 031f 	bic.w	r3, r3, #31
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	6813      	ldr	r3, [r2, #0]
 80011fe:	f013 0301 	ands.w	r3, r3, #1
 8001202:	d1fb      	bne.n	80011fc <adc_lld_serve_rx_interrupt.lto_priv.44+0xcc>
 8001204:	7a07      	ldrb	r7, [r0, #8]
 8001206:	6846      	ldr	r6, [r0, #4]
        _adc_isr_full_code(adcp);
 8001208:	686d      	ldr	r5, [r5, #4]
  adcp->adc->CR1 = 0;
 800120a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800120c:	213d      	movs	r1, #61	; 0x3d
 800120e:	40b9      	lsls	r1, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001210:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001212:	6031      	str	r1, [r6, #0]
  adcp->adc->CR1 = 0;
 8001214:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001216:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001218:	6090      	str	r0, [r2, #8]
        _adc_isr_full_code(adcp);
 800121a:	b1ad      	cbz	r5, 8001248 <adc_lld_serve_rx_interrupt.lto_priv.44+0x118>
 800121c:	2304      	movs	r3, #4
 800121e:	7023      	strb	r3, [r4, #0]
 8001220:	68e2      	ldr	r2, [r4, #12]
 8001222:	68a1      	ldr	r1, [r4, #8]
 8001224:	4620      	mov	r0, r4
 8001226:	47a8      	blx	r5
 8001228:	7823      	ldrb	r3, [r4, #0]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00c      	beq.n	8001248 <adc_lld_serve_rx_interrupt.lto_priv.44+0x118>
 800122e:	2320      	movs	r3, #32
 8001230:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001234:	6963      	ldr	r3, [r4, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0b0      	beq.n	800119c <adc_lld_serve_rx_interrupt.lto_priv.44+0x6c>
    *trp = NULL;
 800123a:	2200      	movs	r2, #0
 800123c:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
 800123e:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001240:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001242:	f7ff ff0d 	bl	8001060 <chSchReadyI>
 8001246:	e7a9      	b.n	800119c <adc_lld_serve_rx_interrupt.lto_priv.44+0x6c>
 8001248:	2202      	movs	r2, #2
 800124a:	2300      	movs	r3, #0
 800124c:	7022      	strb	r2, [r4, #0]
 800124e:	6123      	str	r3, [r4, #16]
 8001250:	e7ed      	b.n	800122e <adc_lld_serve_rx_interrupt.lto_priv.44+0xfe>
 8001252:	6881      	ldr	r1, [r0, #8]
}
 8001254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 8001258:	4718      	bx	r3
 800125a:	bf00      	nop
 800125c:	0000      	movs	r0, r0
	...

08001260 <chThdExit>:
void chThdExit(msg_t msg) {
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	2220      	movs	r2, #32
 8001264:	4603      	mov	r3, r0
 8001266:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <chThdExit+0x44>)
 800126c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800126e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
 8001270:	6223      	str	r3, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 8001272:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001276:	4285      	cmp	r5, r0
 8001278:	d006      	beq.n	8001288 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 800127a:	6803      	ldr	r3, [r0, #0]
 800127c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800127e:	f7ff feef 	bl	8001060 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001282:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 8001284:	42a8      	cmp	r0, r5
 8001286:	d1f8      	bne.n	800127a <chThdExit+0x1a>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001288:	7f63      	ldrb	r3, [r4, #29]
 800128a:	079b      	lsls	r3, r3, #30
 800128c:	d104      	bne.n	8001298 <chThdExit+0x38>
    REG_REMOVE(tp);
 800128e:	6963      	ldr	r3, [r4, #20]
 8001290:	6922      	ldr	r2, [r4, #16]
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	6922      	ldr	r2, [r4, #16]
 8001296:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001298:	200f      	movs	r0, #15
}
 800129a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800129e:	f7ff bcdf 	b.w	8000c60 <chSchGoSleepS>
 80012a2:	bf00      	nop
 80012a4:	20000cc0 	.word	0x20000cc0
	...

080012b0 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 80012b0:	e7fe      	b.n	80012b0 <BusFault_Handler>
 80012b2:	bf00      	nop
	...

080012c0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c2:	4f13      	ldr	r7, [pc, #76]	; (8001310 <__init_ram_areas+0x50>)
 80012c4:	4d13      	ldr	r5, [pc, #76]	; (8001314 <__init_ram_areas+0x54>)
 80012c6:	4c14      	ldr	r4, [pc, #80]	; (8001318 <__init_ram_areas+0x58>)
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <__init_ram_areas+0x5c>)
 80012ca:	4915      	ldr	r1, [pc, #84]	; (8001320 <__init_ram_areas+0x60>)
 80012cc:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80012d0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80012d2:	429c      	cmp	r4, r3
 80012d4:	d911      	bls.n	80012fa <__init_ram_areas+0x3a>
 80012d6:	3904      	subs	r1, #4
 80012d8:	461a      	mov	r2, r3
      *p = *tp;
 80012da:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80012de:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80012e2:	4294      	cmp	r4, r2
 80012e4:	d8f9      	bhi.n	80012da <__init_ram_areas+0x1a>
 80012e6:	43da      	mvns	r2, r3
 80012e8:	4414      	add	r4, r2
 80012ea:	f024 0403 	bic.w	r4, r4, #3
 80012ee:	3404      	adds	r4, #4
 80012f0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80012f2:	429d      	cmp	r5, r3
 80012f4:	d903      	bls.n	80012fe <__init_ram_areas+0x3e>
      *p = 0;
 80012f6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80012fa:	429d      	cmp	r5, r3
 80012fc:	d8fb      	bhi.n	80012f6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80012fe:	4577      	cmp	r7, lr
 8001300:	d004      	beq.n	800130c <__init_ram_areas+0x4c>
 8001302:	f107 0110 	add.w	r1, r7, #16
 8001306:	c93a      	ldmia	r1, {r1, r3, r4, r5}
 8001308:	3710      	adds	r7, #16
 800130a:	e7e2      	b.n	80012d2 <__init_ram_areas+0x12>
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130e:	bf00      	nop
 8001310:	080025f0 	.word	0x080025f0
 8001314:	20000e20 	.word	0x20000e20
 8001318:	20000e20 	.word	0x20000e20
 800131c:	20000e20 	.word	0x20000e20
 8001320:	08002868 	.word	0x08002868
	...

08001330 <__default_exit>:
void __default_exit(void) {
 8001330:	e7fe      	b.n	8001330 <__default_exit>
 8001332:	bf00      	nop
	...

08001340 <__late_init>:
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
	...

08001350 <__core_init>:
void __core_init(void) {
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
	...

08001360 <notify1.lto_priv.35>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8001360:	4a02      	ldr	r2, [pc, #8]	; (800136c <notify1.lto_priv.35+0xc>)
 8001362:	68d3      	ldr	r3, [r2, #12]
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	60d3      	str	r3, [r2, #12]
 800136a:	4770      	bx	lr
 800136c:	40011000 	.word	0x40011000

08001370 <VectorAC>:
 8001370:	f7ff b9ee 	b.w	8000750 <VectorA4>
	...

08001380 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 8001384:	4d67      	ldr	r5, [pc, #412]	; (8001524 <VectorD4+0x1a4>)
 8001386:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8001388:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 800138c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 800138e:	05da      	lsls	r2, r3, #23
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001390:	b083      	sub	sp, #12
  uint16_t sr = u->SR;
 8001392:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8001394:	d47d      	bmi.n	8001492 <VectorD4+0x112>
 8001396:	2320      	movs	r3, #32
 8001398:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800139c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80013a0:	d046      	beq.n	8001430 <VectorD4+0xb0>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80013a2:	4f61      	ldr	r7, [pc, #388]	; (8001528 <VectorD4+0x1a8>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80013a4:	f04f 0800 	mov.w	r8, #0
 80013a8:	e007      	b.n	80013ba <VectorD4+0x3a>
    if (sr & USART_SR_RXNE)
 80013aa:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 80013ac:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 80013ae:	d41c      	bmi.n	80013ea <VectorD4+0x6a>
    sr = u->SR;
 80013b0:	6834      	ldr	r4, [r6, #0]
 80013b2:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80013b4:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80013b8:	d03a      	beq.n	8001430 <VectorD4+0xb0>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80013ba:	0723      	lsls	r3, r4, #28
 80013bc:	d0f5      	beq.n	80013aa <VectorD4+0x2a>
    sts |= SD_OVERRUN_ERROR;
 80013be:	f014 0f08 	tst.w	r4, #8
 80013c2:	bf0c      	ite	eq
 80013c4:	2000      	moveq	r0, #0
 80013c6:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 80013c8:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 80013ca:	bf48      	it	mi
 80013cc:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 80013d0:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80013d2:	bf48      	it	mi
 80013d4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 80013d8:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 80013da:	bf48      	it	mi
 80013dc:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80013e0:	f001 f89e 	bl	8002520 <chEvtBroadcastFlagsI.constprop.28>
    if (sr & USART_SR_RXNE)
 80013e4:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 80013e6:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 80013e8:	d5e2      	bpl.n	80013b0 <VectorD4+0x30>
 80013ea:	696a      	ldr	r2, [r5, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80013ec:	2a00      	cmp	r2, #0
 80013ee:	d040      	beq.n	8001472 <VectorD4+0xf2>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80013f0:	6a2a      	ldr	r2, [r5, #32]
 80013f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80013f4:	428a      	cmp	r2, r1
 80013f6:	d045      	beq.n	8001484 <VectorD4+0x104>
  iqp->q_counter++;
 80013f8:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 80013fa:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 80013fc:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 80013fe:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 8001400:	6169      	str	r1, [r5, #20]
    b = u->DR;
 8001402:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001404:	6a2a      	ldr	r2, [r5, #32]
 8001406:	69eb      	ldr	r3, [r5, #28]
 8001408:	429a      	cmp	r2, r3
 800140a:	d301      	bcc.n	8001410 <VectorD4+0x90>
    iqp->q_wrptr = iqp->q_buffer;
 800140c:	69ab      	ldr	r3, [r5, #24]
 800140e:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001410:	68eb      	ldr	r3, [r5, #12]
 8001412:	42bb      	cmp	r3, r7
 8001414:	d0cc      	beq.n	80013b0 <VectorD4+0x30>
  tqp->p_next = tp->p_next;
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 800141a:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800141c:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 800141e:	f8c3 8020 	str.w	r8, [r3, #32]
  (void) chSchReadyI(tp);
 8001422:	f7ff fe1d 	bl	8001060 <chSchReadyI>
    sr = u->SR;
 8001426:	6834      	ldr	r4, [r6, #0]
 8001428:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800142a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800142e:	d1c4      	bne.n	80013ba <VectorD4+0x3a>
 8001430:	2300      	movs	r3, #0
 8001432:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001436:	f019 0f80 	tst.w	r9, #128	; 0x80
 800143a:	d001      	beq.n	8001440 <VectorD4+0xc0>
 800143c:	0622      	lsls	r2, r4, #24
 800143e:	d436      	bmi.n	80014ae <VectorD4+0x12e>
  if (sr & USART_SR_TC) {
 8001440:	0663      	lsls	r3, r4, #25
 8001442:	d511      	bpl.n	8001468 <VectorD4+0xe8>
 8001444:	2320      	movs	r3, #32
 8001446:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800144a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800144c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800144e:	429a      	cmp	r2, r3
 8001450:	d052      	beq.n	80014f8 <VectorD4+0x178>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001452:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8001456:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 800145a:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800145e:	60f3      	str	r3, [r6, #12]
 8001460:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8001462:	6032      	str	r2, [r6, #0]
 8001464:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 8001468:	b003      	add	sp, #12
 800146a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800146e:	f7ff b93f 	b.w	80006f0 <_port_irq_epilogue>
 8001472:	2004      	movs	r0, #4
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f001 f853 	bl	8002520 <chEvtBroadcastFlagsI.constprop.28>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800147a:	6a2a      	ldr	r2, [r5, #32]
 800147c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800147e:	9b01      	ldr	r3, [sp, #4]
 8001480:	428a      	cmp	r2, r1
 8001482:	d1b9      	bne.n	80013f8 <VectorD4+0x78>
 8001484:	6969      	ldr	r1, [r5, #20]
 8001486:	2900      	cmp	r1, #0
 8001488:	d0b6      	beq.n	80013f8 <VectorD4+0x78>
 800148a:	2080      	movs	r0, #128	; 0x80
 800148c:	f001 f848 	bl	8002520 <chEvtBroadcastFlagsI.constprop.28>
 8001490:	e78e      	b.n	80013b0 <VectorD4+0x30>
 8001492:	2320      	movs	r3, #32
 8001494:	f383 8811 	msr	BASEPRI, r3
 8001498:	f44f 7000 	mov.w	r0, #512	; 0x200
 800149c:	f001 f840 	bl	8002520 <chEvtBroadcastFlagsI.constprop.28>
    u->SR = ~USART_SR_LBD;
 80014a0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80014a4:	6033      	str	r3, [r6, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	e773      	b.n	8001396 <VectorD4+0x16>
 80014ae:	2320      	movs	r3, #32
 80014b0:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80014b4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80014b6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d024      	beq.n	8001506 <VectorD4+0x186>
  oqp->q_counter++;
 80014bc:	6baa      	ldr	r2, [r5, #56]	; 0x38
  if (oqp->q_rdptr >= oqp->q_top) {
 80014be:	6c29      	ldr	r1, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 80014c0:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 80014c2:	3201      	adds	r2, #1
 80014c4:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80014c6:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 80014c8:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 80014ca:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80014cc:	d301      	bcc.n	80014d2 <VectorD4+0x152>
    oqp->q_rdptr = oqp->q_buffer;
 80014ce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80014d0:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80014d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80014d4:	4a15      	ldr	r2, [pc, #84]	; (800152c <VectorD4+0x1ac>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d009      	beq.n	80014ee <VectorD4+0x16e>
  tqp->p_next = tp->p_next;
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	6329      	str	r1, [r5, #48]	; 0x30
  tp->p_u.rdymsg = msg;
 80014de:	f04f 0e00 	mov.w	lr, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80014e2:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 80014e4:	4618      	mov	r0, r3
  tp->p_u.rdymsg = msg;
 80014e6:	f8c3 e020 	str.w	lr, [r3, #32]
  (void) chSchReadyI(tp);
 80014ea:	f7ff fdb9 	bl	8001060 <chSchReadyI>
      u->DR = b;
 80014ee:	6077      	str	r7, [r6, #4]
 80014f0:	2300      	movs	r3, #0
 80014f2:	f383 8811 	msr	BASEPRI, r3
 80014f6:	e7a3      	b.n	8001440 <VectorD4+0xc0>
 80014f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0a9      	beq.n	8001452 <VectorD4+0xd2>
 80014fe:	2010      	movs	r0, #16
 8001500:	f001 f80e 	bl	8002520 <chEvtBroadcastFlagsI.constprop.28>
 8001504:	e7a5      	b.n	8001452 <VectorD4+0xd2>
 8001506:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001508:	2a00      	cmp	r2, #0
 800150a:	d0d7      	beq.n	80014bc <VectorD4+0x13c>
 800150c:	2008      	movs	r0, #8
 800150e:	f001 f807 	bl	8002520 <chEvtBroadcastFlagsI.constprop.28>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001512:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001516:	ea09 0303 	and.w	r3, r9, r3
 800151a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151e:	60f3      	str	r3, [r6, #12]
 8001520:	e7e6      	b.n	80014f0 <VectorD4+0x170>
 8001522:	bf00      	nop
 8001524:	20000c48 	.word	0x20000c48
 8001528:	20000c54 	.word	0x20000c54
 800152c:	20000c78 	.word	0x20000c78

08001530 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <main+0x6c>)
  PWR->CR |= PWR_CR_DBP;
 8001532:	4c1b      	ldr	r4, [pc, #108]	; (80015a0 <main+0x70>)
  rccResetAHB1(~0);
 8001534:	691a      	ldr	r2, [r3, #16]
 8001536:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800153a:	2200      	movs	r2, #0
#include "motor.h"
#include "analog.h"
#include "includes/chprintf.h"
///home/adam/ChibiOS_16.1.9/os/hal/lib/streams/

int main(void) {
 800153c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001540:	6119      	str	r1, [r3, #16]
 8001542:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001544:	6958      	ldr	r0, [r3, #20]
 8001546:	6159      	str	r1, [r3, #20]
 8001548:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800154a:	6a18      	ldr	r0, [r3, #32]
 800154c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8001550:	6218      	str	r0, [r3, #32]
 8001552:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001554:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001556:	6259      	str	r1, [r3, #36]	; 0x24
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800155a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800155c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001560:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8001562:	6821      	ldr	r1, [r4, #0]
 8001564:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001568:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800156a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800156c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001570:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001574:	b08b      	sub	sp, #44	; 0x2c
 8001576:	d003      	beq.n	8001580 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001578:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800157c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800157e:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <main+0x70>)
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <main+0x74>)
 8001584:	6843      	ldr	r3, [r0, #4]
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8001586:	4c08      	ldr	r4, [pc, #32]	; (80015a8 <main+0x78>)
 8001588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800158c:	6043      	str	r3, [r0, #4]
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <main+0x7c>)
 8001590:	2100      	movs	r1, #0
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001592:	468b      	mov	fp, r1
    _stm32_dma_streams[i].stream->CR = 0U;
 8001594:	460d      	mov	r5, r1
  dma_streams_mask = 0U;
 8001596:	6019      	str	r1, [r3, #0]
 8001598:	e00c      	b.n	80015b4 <main+0x84>
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000
 80015a4:	0800267c 	.word	0x0800267c
 80015a8:	40026010 	.word	0x40026010
 80015ac:	200008d8 	.word	0x200008d8
 80015b0:	f852 4c0c 	ldr.w	r4, [r2, #-12]
    dma_isr_redir[i].dma_func = NULL;
 80015b4:	4bc3      	ldr	r3, [pc, #780]	; (80018c4 <main+0x394>)
    _stm32_dma_streams[i].stream->CR = 0U;
 80015b6:	6025      	str	r5, [r4, #0]
    dma_isr_redir[i].dma_func = NULL;
 80015b8:	f843 503b 	str.w	r5, [r3, fp, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80015bc:	f10b 0b01 	add.w	fp, fp, #1
 80015c0:	f1bb 0f10 	cmp.w	fp, #16
 80015c4:	f102 020c 	add.w	r2, r2, #12
 80015c8:	d1f2      	bne.n	80015b0 <main+0x80>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 80015ca:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8001924 <main+0x3f4>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 80015ce:	f8df c358 	ldr.w	ip, [pc, #856]	; 8001928 <main+0x3f8>
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80015d2:	f8df a358 	ldr.w	sl, [pc, #856]	; 800192c <main+0x3fc>
  gpiop->OTYPER  = config->otyper;
 80015d6:	4cbc      	ldr	r4, [pc, #752]	; (80018c8 <main+0x398>)
  gpiop->PUPDR   = config->pupdr;
 80015d8:	4abc      	ldr	r2, [pc, #752]	; (80018cc <main+0x39c>)
  gpiop->OTYPER  = config->otyper;
 80015da:	f8df e354 	ldr.w	lr, [pc, #852]	; 8001930 <main+0x400>
 80015de:	4fbc      	ldr	r7, [pc, #752]	; (80018d0 <main+0x3a0>)
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80015e0:	4ebc      	ldr	r6, [pc, #752]	; (80018d4 <main+0x3a4>)
 80015e2:	48bd      	ldr	r0, [pc, #756]	; (80018d8 <main+0x3a8>)
 80015e4:	49bd      	ldr	r1, [pc, #756]	; (80018dc <main+0x3ac>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80015e6:	f8df 834c 	ldr.w	r8, [pc, #844]	; 8001934 <main+0x404>
  DMA1->LIFCR = 0xFFFFFFFFU;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ee:	f8c9 3008 	str.w	r3, [r9, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 80015f2:	f8c9 300c 	str.w	r3, [r9, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80015f6:	f8cc 3008 	str.w	r3, [ip, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 80015fa:	f8cc 300c 	str.w	r3, [ip, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80015fe:	f8da c030 	ldr.w	ip, [sl, #48]	; 0x30
  gpiop->MODER   = config->moder;
 8001602:	f8df 9334 	ldr.w	r9, [pc, #820]	; 8001938 <main+0x408>
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001606:	f04c 0c9f 	orr.w	ip, ip, #159	; 0x9f
 800160a:	f8ca c030 	str.w	ip, [sl, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800160e:	f8da c050 	ldr.w	ip, [sl, #80]	; 0x50
 8001612:	f04c 0c9f 	orr.w	ip, ip, #159	; 0x9f
 8001616:	f8ca c050 	str.w	ip, [sl, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 800161a:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 800161e:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001620:	f8c4 c008 	str.w	ip, [r4, #8]
  gpiop->ODR     = config->odr;
 8001624:	f64f 7cdf 	movw	ip, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 8001628:	60e2      	str	r2, [r4, #12]
  gpiop->ODR     = config->odr;
 800162a:	f8c4 c014 	str.w	ip, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800162e:	f44f 4cee 	mov.w	ip, #30464	; 0x7700
 8001632:	f8c4 c020 	str.w	ip, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001636:	f44f 2c2a 	mov.w	ip, #696320	; 0xaa000
 800163a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	f8c4 9000 	str.w	r9, [r4]
  gpiop->PUPDR   = config->pupdr;
 8001644:	f04f 3c55 	mov.w	ip, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8001648:	f64f 74ff 	movw	r4, #65535	; 0xffff
  gpiop->OTYPER  = config->otyper;
 800164c:	f8ce 5004 	str.w	r5, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001650:	f8ce 3008 	str.w	r3, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8001654:	f8ce c00c 	str.w	ip, [lr, #12]
  gpiop->ODR     = config->odr;
 8001658:	f8ce 4014 	str.w	r4, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800165c:	f8ce 5020 	str.w	r5, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8001660:	f8ce 5024 	str.w	r5, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001664:	f8ce 2000 	str.w	r2, [lr]
  gpiop->PUPDR   = config->pupdr;
 8001668:	4a9d      	ldr	r2, [pc, #628]	; (80018e0 <main+0x3b0>)
  gpiop->OTYPER  = config->otyper;
 800166a:	607d      	str	r5, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800166c:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 800166e:	60fa      	str	r2, [r7, #12]
  gpiop->OTYPER  = config->otyper;
 8001670:	4a9c      	ldr	r2, [pc, #624]	; (80018e4 <main+0x3b4>)
  gpiop->ODR     = config->odr;
 8001672:	617c      	str	r4, [r7, #20]
 8001674:	f04f 0901 	mov.w	r9, #1
  gpiop->AFRL    = config->afrl;
 8001678:	623d      	str	r5, [r7, #32]
  gpiop->PUPDR   = config->pupdr;
 800167a:	f8df e2c0 	ldr.w	lr, [pc, #704]	; 800193c <main+0x40c>
  gpiop->AFRH    = config->afrh;
 800167e:	627d      	str	r5, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001680:	603d      	str	r5, [r7, #0]
 8001682:	2760      	movs	r7, #96	; 0x60
  gpiop->OTYPER  = config->otyper;
 8001684:	6045      	str	r5, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001686:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001688:	f8c0 c00c 	str.w	ip, [r0, #12]
  gpiop->ODR     = config->odr;
 800168c:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800168e:	6205      	str	r5, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001690:	6245      	str	r5, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001692:	6005      	str	r5, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8001694:	604d      	str	r5, [r1, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001696:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  gpiop->OSPEEDR = config->ospeedr;
 800169a:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800169c:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 80016a0:	614c      	str	r4, [r1, #20]
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80016a2:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8001940 <main+0x410>
  gpiop->AFRL    = config->afrl;
 80016a6:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80016a8:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80016aa:	600d      	str	r5, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 80016ac:	6055      	str	r5, [r2, #4]
  ADCD1.adc = ADC1;
 80016ae:	f5a1 4170 	sub.w	r1, r1, #61440	; 0xf000
  gpiop->OSPEEDR = config->ospeedr;
 80016b2:	6093      	str	r3, [r2, #8]
 80016b4:	9303      	str	r3, [sp, #12]
  gpiop->PUPDR   = config->pupdr;
 80016b6:	f8c2 e00c 	str.w	lr, [r2, #12]
  gpiop->ODR     = config->odr;
 80016ba:	6154      	str	r4, [r2, #20]
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 80016bc:	f8df e284 	ldr.w	lr, [pc, #644]	; 8001944 <main+0x414>
  gpiop->AFRL    = config->afrl;
 80016c0:	6215      	str	r5, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80016c2:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80016c4:	6015      	str	r5, [r2, #0]
 80016c6:	f886 9000 	strb.w	r9, [r6]
  tqp->p_next = (thread_t *)tqp;
 80016ca:	f106 0218 	add.w	r2, r6, #24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80016ce:	f888 7312 	strb.w	r7, [r8, #786]	; 0x312
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 80016d2:	4f85      	ldr	r7, [pc, #532]	; (80018e8 <main+0x3b8>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016d4:	f8c8 0180 	str.w	r0, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80016d8:	f8c8 0000 	str.w	r0, [r8]
 80016dc:	f8c6 e02c 	str.w	lr, [r6, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80016e0:	f8c6 c030 	str.w	ip, [r6, #48]	; 0x30
  ADCD1.adc = ADC1;
 80016e4:	62b1      	str	r1, [r6, #40]	; 0x28
 80016e6:	61b2      	str	r2, [r6, #24]
  adcp->config   = NULL;
 80016e8:	6075      	str	r5, [r6, #4]
  adcp->samples  = NULL;
 80016ea:	60b5      	str	r5, [r6, #8]
  adcp->depth    = 0;
 80016ec:	60f5      	str	r5, [r6, #12]
  adcp->grpp     = NULL;
 80016ee:	6135      	str	r5, [r6, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80016f0:	6175      	str	r5, [r6, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80016f2:	6235      	str	r5, [r6, #32]
  tqp->p_prev = (thread_t *)tqp;
 80016f4:	61f2      	str	r2, [r6, #28]
  icu_lld_init();
 80016f6:	f7fe ff5b 	bl	80005b0 <icu_lld_init>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80016fa:	2104      	movs	r1, #4
  PWMD1.tim = STM32_TIM1;
 80016fc:	4a7b      	ldr	r2, [pc, #492]	; (80018ec <main+0x3bc>)
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80016fe:	7439      	strb	r1, [r7, #16]
  PWMD1.tim = STM32_TIM1;
 8001700:	61ba      	str	r2, [r7, #24]
 8001702:	f887 9000 	strb.w	r9, [r7]
  pwmp->config   = NULL;
 8001706:	607d      	str	r5, [r7, #4]
  pwmp->enabled  = 0;
 8001708:	60fd      	str	r5, [r7, #12]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 800170a:	f000 ff41 	bl	8002590 <sdObjectInit.constprop.23>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800170e:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001712:	4877      	ldr	r0, [pc, #476]	; (80018f0 <main+0x3c0>)

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001714:	4a77      	ldr	r2, [pc, #476]	; (80018f4 <main+0x3c4>)
  SCB->VTOR = CORTEX_VTOR_INIT;
 8001716:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001948 <main+0x418>
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800171a:	f8df c230 	ldr.w	ip, [pc, #560]	; 800194c <main+0x41c>
  ST_ENABLE_CLOCK();
 800171e:	f041 0104 	orr.w	r1, r1, #4
 8001722:	f8ca 1040 	str.w	r1, [sl, #64]	; 0x40
  ST_ENABLE_STOP();
 8001726:	6881      	ldr	r1, [r0, #8]
 8001728:	f041 0104 	orr.w	r1, r1, #4
 800172c:	6081      	str	r1, [r0, #8]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800172e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001732:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001736:	f242 507f 	movw	r0, #9599	; 0x257f
 800173a:	6290      	str	r0, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800173c:	62d4      	str	r4, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800173e:	6195      	str	r5, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001740:	6355      	str	r5, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001742:	60d5      	str	r5, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8001744:	6055      	str	r5, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001746:	f8c2 9014 	str.w	r9, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800174a:	f8c2 9000 	str.w	r9, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800174e:	f888 331e 	strb.w	r3, [r8, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001752:	f8c8 1180 	str.w	r1, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001756:	f8c8 1000 	str.w	r1, [r8]
 800175a:	f8ce 5008 	str.w	r5, [lr, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175e:	f8de 200c 	ldr.w	r2, [lr, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001762:	4865      	ldr	r0, [pc, #404]	; (80018f8 <main+0x3c8>)
  tqp->p_next = (thread_t *)tqp;
 8001764:	4c65      	ldr	r4, [pc, #404]	; (80018fc <main+0x3cc>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001766:	4966      	ldr	r1, [pc, #408]	; (8001900 <main+0x3d0>)
  SD1.usart = USART1;
 8001768:	4b66      	ldr	r3, [pc, #408]	; (8001904 <main+0x3d4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 800176a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800176e:	0412      	lsls	r2, r2, #16
 8001770:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 8001772:	ea42 0c0c 	orr.w	ip, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001776:	f8ce c00c 	str.w	ip, [lr, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800177a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  tqp->p_prev = (thread_t *)tqp;
 800177e:	6064      	str	r4, [r4, #4]
 8001780:	f04c 7c80 	orr.w	ip, ip, #16777216	; 0x1000000
 8001784:	f8c0 c00c 	str.w	ip, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001788:	6808      	ldr	r0, [r1, #0]
 800178a:	4a5f      	ldr	r2, [pc, #380]	; (8001908 <main+0x3d8>)
  ch.rlist.r_prio = NOPRIO;
 800178c:	60a5      	str	r5, [r4, #8]
 800178e:	ea40 0009 	orr.w	r0, r0, r9
 8001792:	6008      	str	r0, [r1, #0]
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001794:	f104 0c1c 	add.w	ip, r4, #28
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	2120      	movs	r1, #32
 800179a:	f88e b01f 	strb.w	fp, [lr, #31]
  chTMStartMeasurementX(&tm);
 800179e:	a804      	add	r0, sp, #16
 80017a0:	f88e 1022 	strb.w	r1, [lr, #34]	; 0x22
  tmp->cumulative = (rttime_t)0;
 80017a4:	f04f 0b00 	mov.w	fp, #0
 80017a8:	9101      	str	r1, [sp, #4]
 80017aa:	f8c4 c01c 	str.w	ip, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 80017ae:	f8c4 c020 	str.w	ip, [r4, #32]
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80017b2:	6124      	str	r4, [r4, #16]
 80017b4:	f04f 0c00 	mov.w	ip, #0
  tqp->p_next = (thread_t *)tqp;
 80017b8:	6024      	str	r4, [r4, #0]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80017ba:	6164      	str	r4, [r4, #20]
 80017bc:	6753      	str	r3, [r2, #116]	; 0x74
  ch.vtlist.vt_delta = (systime_t)-1;
 80017be:	9b03      	ldr	r3, [sp, #12]
 80017c0:	9202      	str	r2, [sp, #8]
 80017c2:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80017c6:	84a3      	strh	r3, [r4, #36]	; 0x24
  tmp->best       = (rtcnt_t)-1;
 80017c8:	9304      	str	r3, [sp, #16]
  ch.vtlist.vt_lasttime = (systime_t)0;
 80017ca:	84e5      	strh	r5, [r4, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
 80017cc:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
 80017ce:	9505      	str	r5, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 80017d0:	9506      	str	r5, [sp, #24]
  tmp->n          = (ucnt_t)0;
 80017d2:	9507      	str	r5, [sp, #28]
  chTMStartMeasurementX(&tm);
 80017d4:	f000 fe9c 	bl	8002510 <chTMStartMeasurementX.constprop.31>
  chTMStopMeasurementX(&tm);
 80017d8:	a804      	add	r0, sp, #16
 80017da:	f7ff f9f9 	bl	8000bd0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80017de:	4b4b      	ldr	r3, [pc, #300]	; (800190c <main+0x3dc>)
  ch.tm.offset = tm.last;
 80017e0:	9906      	ldr	r1, [sp, #24]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80017e2:	484b      	ldr	r0, [pc, #300]	; (8001910 <main+0x3e0>)
 80017e4:	6721      	str	r1, [r4, #112]	; 0x70
  REG_INSERT(tp);
 80017e6:	6961      	ldr	r1, [r4, #20]
 80017e8:	619d      	str	r5, [r3, #24]
 80017ea:	f103 0c10 	add.w	ip, r3, #16
 80017ee:	f020 0207 	bic.w	r2, r0, #7
  tp->p_prio = prio;
 80017f2:	f04f 0e40 	mov.w	lr, #64	; 0x40
  REG_INSERT(tp);
 80017f6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80017fa:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80017fe:	f8c3 c014 	str.w	ip, [r3, #20]
  tp->p_prio = prio;
 8001802:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
  tp->p_realprio = prio;
 8001806:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800180a:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
  tp->p_mtxlist = NULL;
 800180e:	6665      	str	r5, [r4, #100]	; 0x64
  tp->p_epending = (eventmask_t)0;
 8001810:	6625      	str	r5, [r4, #96]	; 0x60
  tp->p_refs = (trefs_t)1;
 8001812:	f884 904a 	strb.w	r9, [r4, #74]	; 0x4a
  tp->p_name = NULL;
 8001816:	6465      	str	r5, [r4, #68]	; 0x44
  REG_INSERT(tp);
 8001818:	63e4      	str	r4, [r4, #60]	; 0x3c
 800181a:	6421      	str	r1, [r4, #64]	; 0x40
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800181c:	f8df b130 	ldr.w	fp, [pc, #304]	; 8001950 <main+0x420>
 8001820:	6108      	str	r0, [r1, #16]
 8001822:	6160      	str	r0, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8001824:	61a0      	str	r0, [r4, #24]
  tlp->p_next = (thread_t *)tlp;
 8001826:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800182a:	f8df e128 	ldr.w	lr, [pc, #296]	; 8001954 <main+0x424>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800182e:	f8df c128 	ldr.w	ip, [pc, #296]	; 8001958 <main+0x428>
 8001832:	6520      	str	r0, [r4, #80]	; 0x50
 8001834:	4837      	ldr	r0, [pc, #220]	; (8001914 <main+0x3e4>)
  default_heap.h_free.h.u.next = NULL;
 8001836:	609d      	str	r5, [r3, #8]
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001838:	f02b 0b07 	bic.w	fp, fp, #7
  default_heap.h_free.h.size = 0;
 800183c:	60dd      	str	r5, [r3, #12]
  default_heap.h_provider = chCoreAlloc;
 800183e:	6018      	str	r0, [r3, #0]
  tqp->p_next = (thread_t *)tqp;
 8001840:	f104 0354 	add.w	r3, r4, #84	; 0x54
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8001844:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
 8001848:	6563      	str	r3, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 800184a:	65a3      	str	r3, [r4, #88]	; 0x58
 800184c:	f8ce b000 	str.w	fp, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001850:	f8cc 2000 	str.w	r2, [ip]
 8001854:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8001858:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800185a:	69a3      	ldr	r3, [r4, #24]
 800185c:	482e      	ldr	r0, [pc, #184]	; (8001918 <main+0x3e8>)
 800185e:	6198      	str	r0, [r3, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001860:	9901      	ldr	r1, [sp, #4]
 8001862:	f381 8811 	msr	BASEPRI, r1
  tp->p_state = CH_STATE_WTSTART;
 8001866:	f04f 0c02 	mov.w	ip, #2
  REG_INSERT(tp);
 800186a:	f8d4 b014 	ldr.w	fp, [r4, #20]
  tp->p_state = CH_STATE_WTSTART;
 800186e:	f884 c094 	strb.w	ip, [r4, #148]	; 0x94
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001872:	f504 7e96 	add.w	lr, r4, #300	; 0x12c
  REG_INSERT(tp);
 8001876:	f104 0378 	add.w	r3, r4, #120	; 0x78
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800187a:	f8c4 e084 	str.w	lr, [r4, #132]	; 0x84
 800187e:	4a27      	ldr	r2, [pc, #156]	; (800191c <main+0x3ec>)
 8001880:	4827      	ldr	r0, [pc, #156]	; (8001920 <main+0x3f0>)
 8001882:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
  tqp->p_next = (thread_t *)tqp;
 8001886:	f104 0ea0 	add.w	lr, r4, #160	; 0xa0
  tlp->p_next = (thread_t *)tlp;
 800188a:	f104 0c9c 	add.w	ip, r4, #156	; 0x9c
 800188e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
  tp->p_prio = prio;
 8001892:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001896:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
  tp->p_realprio = prio;
 800189a:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
  tp->p_mtxlist = NULL;
 800189e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  tp->p_epending = (eventmask_t)0;
 80018a2:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  tp->p_refs = (trefs_t)1;
 80018a6:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
  tp->p_name = NULL;
 80018aa:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  REG_INSERT(tp);
 80018ae:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80018b2:	f8c4 b08c 	str.w	fp, [r4, #140]	; 0x8c
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80018b6:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
  chSchWakeupS(tp, MSG_OK);
 80018ba:	4618      	mov	r0, r3
  REG_INSERT(tp);
 80018bc:	f8cb 3010 	str.w	r3, [fp, #16]
 80018c0:	e04c      	b.n	800195c <main+0x42c>
 80018c2:	bf00      	nop
 80018c4:	20000858 	.word	0x20000858
 80018c8:	40020000 	.word	0x40020000
 80018cc:	64155105 	.word	0x64155105
 80018d0:	40020800 	.word	0x40020800
 80018d4:	20000bb0 	.word	0x20000bb0
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	51555555 	.word	0x51555555
 80018e4:	40021c00 	.word	0x40021c00
 80018e8:	20000c2c 	.word	0x20000c2c
 80018ec:	40010000 	.word	0x40010000
 80018f0:	e0042000 	.word	0xe0042000
 80018f4:	40000800 	.word	0x40000800
 80018f8:	e000edf0 	.word	0xe000edf0
 80018fc:	20000cc0 	.word	0x20000cc0
 8001900:	e0001000 	.word	0xe0001000
 8001904:	40011000 	.word	0x40011000
 8001908:	20000c48 	.word	0x20000c48
 800190c:	20000838 	.word	0x20000838
 8001910:	20020000 	.word	0x20020000
 8001914:	08000371 	.word	0x08000371
 8001918:	08002730 	.word	0x08002730
 800191c:	080002a1 	.word	0x080002a1
 8001920:	08000421 	.word	0x08000421
 8001924:	40026000 	.word	0x40026000
 8001928:	40026400 	.word	0x40026400
 800192c:	40023800 	.word	0x40023800
 8001930:	40020400 	.word	0x40020400
 8001934:	e000e100 	.word	0xe000e100
 8001938:	2a8004a0 	.word	0x2a8004a0
 800193c:	55555550 	.word	0x55555550
 8001940:	00022c16 	.word	0x00022c16
 8001944:	08002700 	.word	0x08002700
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	05fa0300 	.word	0x05fa0300
 8001950:	20000e27 	.word	0x20000e27
 8001954:	200008e0 	.word	0x200008e0
 8001958:	200008dc 	.word	0x200008dc
 800195c:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
  tqp->p_next = (thread_t *)tqp;
 8001960:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 8001964:	f8c4 e0a4 	str.w	lr, [r4, #164]	; 0xa4
 8001968:	9101      	str	r1, [sp, #4]
 800196a:	6163      	str	r3, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 800196c:	f000 fda0 	bl	80024b0 <chSchWakeupS.constprop.34>
 8001970:	f385 8811 	msr	BASEPRI, r5
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8001974:	4bc7      	ldr	r3, [pc, #796]	; (8001c94 <main+0x764>)
 8001976:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  sdObjectInit(&SD1, NULL, notify1);
 800197a:	f000 fe09 	bl	8002590 <sdObjectInit.constprop.23>
  SD1.usart = USART1;
 800197e:	9a02      	ldr	r2, [sp, #8]
 8001980:	4bc5      	ldr	r3, [pc, #788]	; (8001c98 <main+0x768>)
 8001982:	6753      	str	r3, [r2, #116]	; 0x74
 8001984:	9901      	ldr	r1, [sp, #4]
 8001986:	f381 8811 	msr	BASEPRI, r1
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800198a:	7a13      	ldrb	r3, [r2, #8]
 800198c:	454b      	cmp	r3, r9
 800198e:	f000 822b 	beq.w	8001de8 <main+0x8b8>
  USART_TypeDef *u = sdp->usart;
 8001992:	6f53      	ldr	r3, [r2, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8001994:	49c0      	ldr	r1, [pc, #768]	; (8001c98 <main+0x768>)
 8001996:	428b      	cmp	r3, r1
 8001998:	f000 8222 	beq.w	8001de0 <main+0x8b0>
 800199c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80019a0:	428b      	cmp	r3, r1
 80019a2:	f000 821d 	beq.w	8001de0 <main+0x8b0>
    u->BRR = STM32_PCLK1 / config->speed;
 80019a6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80019aa:	6099      	str	r1, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80019ac:	2540      	movs	r5, #64	; 0x40
 80019ae:	611d      	str	r5, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80019b0:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80019b2:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 80019b6:	2500      	movs	r5, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80019b8:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80019ba:	60d8      	str	r0, [r3, #12]
  u->SR = 0;
 80019bc:	601d      	str	r5, [r3, #0]
  sdp->state = SD_READY;
 80019be:	2002      	movs	r0, #2
  (void)u->SR;  /* SR reset step 1.*/
 80019c0:	f8d3 e000 	ldr.w	lr, [r3]
  (void)u->DR;  /* SR reset step 2.*/
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	7210      	strb	r0, [r2, #8]
 80019c8:	f385 8811 	msr	BASEPRI, r5
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80019cc:	2204      	movs	r2, #4
  PWMD1.tim = STM32_TIM1;
 80019ce:	4bb3      	ldr	r3, [pc, #716]	; (8001c9c <main+0x76c>)
 80019d0:	61bb      	str	r3, [r7, #24]
  pwmp->state    = PWM_STOP;
 80019d2:	7039      	strb	r1, [r7, #0]
  pwmp->config   = NULL;
 80019d4:	607d      	str	r5, [r7, #4]
  pwmp->enabled  = 0;
 80019d6:	60fd      	str	r5, [r7, #12]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80019d8:	743a      	strb	r2, [r7, #16]
 80019da:	2320      	movs	r3, #32
 80019dc:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 80019e0:	48af      	ldr	r0, [pc, #700]	; (8001ca0 <main+0x770>)
  if (pwmp->state == PWM_STOP) {
 80019e2:	783b      	ldrb	r3, [r7, #0]
  pwmp->period = config->period;
 80019e4:	f8d0 e004 	ldr.w	lr, [r0, #4]
  pwmp->config = config;
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	428b      	cmp	r3, r1
  pwmp->period = config->period;
 80019ec:	f8c7 e008 	str.w	lr, [r7, #8]
 80019f0:	f000 8170 	beq.w	8001cd4 <main+0x7a4>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	f8d7 c014 	ldr.w	ip, [r7, #20]
 80019fa:	600d      	str	r5, [r1, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80019fc:	634d      	str	r5, [r1, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80019fe:	638d      	str	r5, [r1, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8001a00:	63cd      	str	r5, [r1, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8001a02:	640d      	str	r5, [r1, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8001a04:	624d      	str	r5, [r1, #36]	; 0x24
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001a06:	68c3      	ldr	r3, [r0, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001a08:	6802      	ldr	r2, [r0, #0]
 8001a0a:	fbbc f2f2 	udiv	r2, ip, r2
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001a0e:	f003 030f 	and.w	r3, r3, #15
  pwmp->tim->ARR  = pwmp->period - 1;
 8001a12:	f10e 35ff 	add.w	r5, lr, #4294967295	; 0xffffffff
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001a16:	3a01      	subs	r2, #1
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001a18:	f8d0 e02c 	ldr.w	lr, [r0, #44]	; 0x2c
  pwmp->tim->PSC  = psc;
 8001a1c:	628a      	str	r2, [r1, #40]	; 0x28
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001a1e:	2b01      	cmp	r3, #1
  pwmp->tim->ARR  = pwmp->period - 1;
 8001a20:	62cd      	str	r5, [r1, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001a22:	f8c1 e004 	str.w	lr, [r1, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001a26:	d003      	beq.n	8001a30 <main+0x500>
  ccer = 0;
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2303      	moveq	r3, #3
 8001a2e:	2300      	movne	r3, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001a30:	6942      	ldr	r2, [r0, #20]
 8001a32:	f002 020f 	and.w	r2, r2, #15
 8001a36:	2a01      	cmp	r2, #1
 8001a38:	d003      	beq.n	8001a42 <main+0x512>
 8001a3a:	2a02      	cmp	r2, #2
 8001a3c:	d103      	bne.n	8001a46 <main+0x516>
    ccer |= STM32_TIM_CCER_CC2P;
 8001a3e:	f043 0320 	orr.w	r3, r3, #32
    ccer |= STM32_TIM_CCER_CC2E;
 8001a42:	f043 0310 	orr.w	r3, r3, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8001a46:	69c2      	ldr	r2, [r0, #28]
 8001a48:	f002 020f 	and.w	r2, r2, #15
 8001a4c:	2a01      	cmp	r2, #1
 8001a4e:	d003      	beq.n	8001a58 <main+0x528>
 8001a50:	2a02      	cmp	r2, #2
 8001a52:	d103      	bne.n	8001a5c <main+0x52c>
    ccer |= STM32_TIM_CCER_CC3P;
 8001a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8001a5c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001a5e:	f002 020f 	and.w	r2, r2, #15
 8001a62:	2a01      	cmp	r2, #1
 8001a64:	d003      	beq.n	8001a6e <main+0x53e>
 8001a66:	2a02      	cmp	r2, #2
 8001a68:	d103      	bne.n	8001a72 <main+0x542>
    ccer |= STM32_TIM_CCER_CC4P;
 8001a6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8001a6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001a72:	6b02      	ldr	r2, [r0, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 8001a74:	620b      	str	r3, [r1, #32]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001a76:	f04f 0800 	mov.w	r8, #0
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001a7a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001a7e:	f04f 0e01 	mov.w	lr, #1
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8001a82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001a86:	2285      	movs	r2, #133	; 0x85
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8001a88:	2502      	movs	r5, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001a8a:	f8c1 e014 	str.w	lr, [r1, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001a8e:	f8c1 8010 	str.w	r8, [r1, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001a92:	60cb      	str	r3, [r1, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8001a94:	6448      	str	r0, [r1, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001a96:	600a      	str	r2, [r1, #0]
  pwmp->enabled = 0;
 8001a98:	f8c7 800c 	str.w	r8, [r7, #12]
  pwmp->state = PWM_READY;
 8001a9c:	703d      	strb	r5, [r7, #0]
 8001a9e:	f388 8811 	msr	BASEPRI, r8
 8001aa2:	f7fe fd85 	bl	80005b0 <icu_lld_init>
 8001aa6:	2720      	movs	r7, #32
 8001aa8:	f387 8811 	msr	BASEPRI, r7
  icup->config = config;
 8001aac:	f8df b200 	ldr.w	fp, [pc, #512]	; 8001cb0 <main+0x780>
 8001ab0:	4a7c      	ldr	r2, [pc, #496]	; (8001ca4 <main+0x774>)
 8001ab2:	f8cb 2004 	str.w	r2, [fp, #4]
  icu_lld_start(icup);
 8001ab6:	4658      	mov	r0, fp
 8001ab8:	f7fe fcda 	bl	8000470 <icu_lld_start>
  icup->state = ICU_READY;
 8001abc:	f88b 5000 	strb.w	r5, [fp]
 8001ac0:	f388 8811 	msr	BASEPRI, r8
 8001ac4:	f387 8811 	msr	BASEPRI, r7
  icup->config = config;
 8001ac8:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8001cb4 <main+0x784>
 8001acc:	4a76      	ldr	r2, [pc, #472]	; (8001ca8 <main+0x778>)
 8001ace:	f8ca 2004 	str.w	r2, [sl, #4]
  icu_lld_start(icup);
 8001ad2:	4650      	mov	r0, sl
 8001ad4:	f7fe fccc 	bl	8000470 <icu_lld_start>
  icup->state = ICU_READY;
 8001ad8:	f88a 5000 	strb.w	r5, [sl]
 8001adc:	f388 8811 	msr	BASEPRI, r8
 8001ae0:	f387 8811 	msr	BASEPRI, r7
  icup->config = config;
 8001ae4:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8001cb8 <main+0x788>
 8001ae8:	4a70      	ldr	r2, [pc, #448]	; (8001cac <main+0x77c>)
 8001aea:	f8c9 2004 	str.w	r2, [r9, #4]
  icu_lld_start(icup);
 8001aee:	4648      	mov	r0, r9
 8001af0:	f7fe fcbe 	bl	8000470 <icu_lld_start>
  icup->state = ICU_READY;
 8001af4:	f889 5000 	strb.w	r5, [r9]
 8001af8:	f388 8811 	msr	BASEPRI, r8
    
    icuStart(&ICUD2, &icucfgA);
    icuStart(&ICUD5, &icucfgB);
    icuStart(&ICUD3, &icucfgC);
    
    icuStartCapture(&ICUD2);
 8001afc:	4658      	mov	r0, fp
 8001afe:	f7fe fddf 	bl	80006c0 <icuStartCapture>
    icuStartCapture(&ICUD5);
 8001b02:	4650      	mov	r0, sl
 8001b04:	f7fe fddc 	bl	80006c0 <icuStartCapture>
    icuStartCapture(&ICUD3);
 8001b08:	4648      	mov	r0, r9
 8001b0a:	f7fe fdd9 	bl	80006c0 <icuStartCapture>
 8001b0e:	f387 8811 	msr	BASEPRI, r7
  if (adcp->state == ADC_STOP) {
 8001b12:	7833      	ldrb	r3, [r6, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8001b14:	f8c6 8004 	str.w	r8, [r6, #4]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	f000 8101 	beq.w	8001d20 <main+0x7f0>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 8001b1e:	2702      	movs	r7, #2
 8001b20:	7037      	strb	r7, [r6, #0]
 8001b22:	2600      	movs	r6, #0
 8001b24:	f386 8811 	msr	BASEPRI, r6
 8001b28:	2520      	movs	r5, #32
 8001b2a:	f385 8811 	msr	BASEPRI, r5
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 8001b2e:	4860      	ldr	r0, [pc, #384]	; (8001cb0 <main+0x780>)
 8001b30:	f7fe fc7e 	bl	8000430 <icu_lld_enable_notifications>
 8001b34:	f386 8811 	msr	BASEPRI, r6
 8001b38:	f385 8811 	msr	BASEPRI, r5
 8001b3c:	485d      	ldr	r0, [pc, #372]	; (8001cb4 <main+0x784>)
 8001b3e:	f7fe fc77 	bl	8000430 <icu_lld_enable_notifications>
 8001b42:	f386 8811 	msr	BASEPRI, r6
 8001b46:	f385 8811 	msr	BASEPRI, r5
 8001b4a:	485b      	ldr	r0, [pc, #364]	; (8001cb8 <main+0x788>)
 8001b4c:	f7fe fc70 	bl	8000430 <icu_lld_enable_notifications>
 8001b50:	f386 8811 	msr	BASEPRI, r6
    palSetPadMode(GPIOA,15,PAL_MODE_ALTERNATE(7));
 8001b54:	f240 3282 	movw	r2, #898	; 0x382
 8001b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5c:	4857      	ldr	r0, [pc, #348]	; (8001cbc <main+0x78c>)
 8001b5e:	f7fe fd47 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,3,PAL_MODE_ALTERNATE(7));
 8001b62:	f240 3282 	movw	r2, #898	; 0x382
 8001b66:	2108      	movs	r1, #8
 8001b68:	4855      	ldr	r0, [pc, #340]	; (8001cc0 <main+0x790>)
 8001b6a:	f7fe fd41 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,10,PAL_MODE_OUTPUT_PUSHPULL);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b74:	4853      	ldr	r0, [pc, #332]	; (8001cc4 <main+0x794>)
 8001b76:	f7fe fd3b 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,12,PAL_MODE_OUTPUT_PUSHPULL);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b80:	4850      	ldr	r0, [pc, #320]	; (8001cc4 <main+0x794>)
 8001b82:	f7fe fd35 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,8,PAL_MODE_ALTERNATE(1));
 8001b86:	2282      	movs	r2, #130	; 0x82
 8001b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8c:	484b      	ldr	r0, [pc, #300]	; (8001cbc <main+0x78c>)
 8001b8e:	f7fe fd2f 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,8,PAL_MODE_OUTPUT_PUSHPULL);
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b98:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <main+0x794>)
 8001b9a:	f7fe fd29 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,9,PAL_MODE_OUTPUT_PUSHPULL);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba4:	4847      	ldr	r0, [pc, #284]	; (8001cc4 <main+0x794>)
 8001ba6:	f7fe fd23 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,9,PAL_MODE_ALTERNATE(1));
 8001baa:	2282      	movs	r2, #130	; 0x82
 8001bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb0:	4842      	ldr	r0, [pc, #264]	; (8001cbc <main+0x78c>)
 8001bb2:	f7fe fd1d 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,5,PAL_MODE_OUTPUT_PUSHPULL);
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4842      	ldr	r0, [pc, #264]	; (8001cc4 <main+0x794>)
 8001bbc:	f7fe fd18 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,6,PAL_MODE_OUTPUT_PUSHPULL);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2140      	movs	r1, #64	; 0x40
 8001bc4:	483f      	ldr	r0, [pc, #252]	; (8001cc4 <main+0x794>)
 8001bc6:	f7fe fd13 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,10,PAL_MODE_ALTERNATE(1));
 8001bca:	2282      	movs	r2, #130	; 0x82
 8001bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd0:	483a      	ldr	r0, [pc, #232]	; (8001cbc <main+0x78c>)
 8001bd2:	f7fe fd0d 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,0,PAL_MODE_ALTERNATE(1));
 8001bd6:	2282      	movs	r2, #130	; 0x82
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4838      	ldr	r0, [pc, #224]	; (8001cbc <main+0x78c>)
 8001bdc:	f7fe fd08 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,1,PAL_MODE_ALTERNATE(2));
 8001be0:	4639      	mov	r1, r7
 8001be2:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001be6:	4835      	ldr	r0, [pc, #212]	; (8001cbc <main+0x78c>)
 8001be8:	f7fe fd02 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,4,PAL_MODE_ALTERNATE(2));
 8001bec:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	4833      	ldr	r0, [pc, #204]	; (8001cc0 <main+0x790>)
 8001bf4:	f7fe fcfc 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,6,PAL_MODE_INPUT_ANALOG);
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	2140      	movs	r1, #64	; 0x40
 8001bfc:	482f      	ldr	r0, [pc, #188]	; (8001cbc <main+0x78c>)
 8001bfe:	f7fe fcf7 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,7,PAL_MODE_INPUT_ANALOG);
 8001c02:	2203      	movs	r2, #3
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	482d      	ldr	r0, [pc, #180]	; (8001cbc <main+0x78c>)
 8001c08:	f7fe fcf2 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,5,PAL_MODE_OUTPUT_PUSHPULL);
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	2201      	movs	r2, #1
 8001c10:	482a      	ldr	r0, [pc, #168]	; (8001cbc <main+0x78c>)
 8001c12:	f7fe fced 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,6,PAL_MODE_OUTPUT_PUSHPULL);
 8001c16:	2201      	movs	r2, #1
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	4829      	ldr	r0, [pc, #164]	; (8001cc0 <main+0x790>)
 8001c1c:	f7fe fce8 	bl	80005f0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,7,PAL_MODE_OUTPUT_PUSHPULL);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <main+0x794>)
 8001c26:	f7fe fce3 	bl	80005f0 <_pal_lld_setgroupmode>
 8001c2a:	f385 8811 	msr	BASEPRI, r5
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <main+0x798>)
  REG_INSERT(tp);
 8001c30:	6962      	ldr	r2, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001c32:	4926      	ldr	r1, [pc, #152]	; (8001ccc <main+0x79c>)
 8001c34:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
 8001c38:	f8df e094 	ldr.w	lr, [pc, #148]	; 8001cd0 <main+0x7a0>
  tp->p_state = CH_STATE_WTSTART;
 8001c3c:	771f      	strb	r7, [r3, #28]
  tp->p_prio = prio;
 8001c3e:	2140      	movs	r1, #64	; 0x40
  tp->p_refs = (trefs_t)1;
 8001c40:	2001      	movs	r0, #1
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001c42:	f8c3 e2a4 	str.w	lr, [r3, #676]	; 0x2a4
  tp->p_refs = (trefs_t)1;
 8001c46:	7798      	strb	r0, [r3, #30]
  REG_INSERT(tp);
 8001c48:	615a      	str	r2, [r3, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001c4a:	f8c3 62a8 	str.w	r6, [r3, #680]	; 0x2a8
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001c4e:	775e      	strb	r6, [r3, #29]
  tp->p_mtxlist = NULL;
 8001c50:	639e      	str	r6, [r3, #56]	; 0x38
  tp->p_epending = (eventmask_t)0;
 8001c52:	635e      	str	r6, [r3, #52]	; 0x34
  tp->p_name = NULL;
 8001c54:	619e      	str	r6, [r3, #24]
  REG_INSERT(tp);
 8001c56:	611c      	str	r4, [r3, #16]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001c58:	f503 7e29 	add.w	lr, r3, #676	; 0x2a4
  tp->p_realprio = prio;
 8001c5c:	63d9      	str	r1, [r3, #60]	; 0x3c
  tlp->p_next = (thread_t *)tlp;
 8001c5e:	f103 0724 	add.w	r7, r3, #36	; 0x24
  REG_INSERT(tp);
 8001c62:	6113      	str	r3, [r2, #16]
  tqp->p_next = (thread_t *)tqp;
 8001c64:	f103 0228 	add.w	r2, r3, #40	; 0x28
  chSchWakeupS(tp, MSG_OK);
 8001c68:	4618      	mov	r0, r3
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001c6a:	f8c3 e00c 	str.w	lr, [r3, #12]
  tp->p_prio = prio;
 8001c6e:	6099      	str	r1, [r3, #8]
  tlp->p_next = (thread_t *)tlp;
 8001c70:	625f      	str	r7, [r3, #36]	; 0x24
  tqp->p_next = (thread_t *)tqp;
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
  REG_INSERT(tp);
 8001c76:	6163      	str	r3, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 8001c78:	f000 fc1a 	bl	80024b0 <chSchWakeupS.constprop.34>
 8001c7c:	f386 8811 	msr	BASEPRI, r6
 8001c80:	f385 8811 	msr	BASEPRI, r5
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001c84:	2164      	movs	r1, #100	; 0x64
 8001c86:	2008      	movs	r0, #8
 8001c88:	f7ff f802 	bl	8000c90 <chSchGoSleepTimeoutS>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f383 8811 	msr	BASEPRI, r3
 8001c92:	e7f5      	b.n	8001c80 <main+0x750>
 8001c94:	080027b0 	.word	0x080027b0
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	20000800 	.word	0x20000800
 8001ca4:	08002750 	.word	0x08002750
 8001ca8:	08002770 	.word	0x08002770
 8001cac:	08002790 	.word	0x08002790
 8001cb0:	20000be4 	.word	0x20000be4
 8001cb4:	20000c14 	.word	0x20000c14
 8001cb8:	20000bfc 	.word	0x20000bfc
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	200008e8 	.word	0x200008e8
 8001ccc:	080002a1 	.word	0x080002a1
 8001cd0:	08002381 	.word	0x08002381
      rccEnableTIM1(FALSE);
 8001cd4:	4a4b      	ldr	r2, [pc, #300]	; (8001e04 <main+0x8d4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <main+0x8d8>)
 8001cd8:	6c51      	ldr	r1, [r2, #68]	; 0x44
      pwmp->clock = STM32_TIMCLK2;
 8001cda:	f8df c144 	ldr.w	ip, [pc, #324]	; 8001e20 <main+0x8f0>
      rccEnableTIM1(FALSE);
 8001cde:	f041 0101 	orr.w	r1, r1, #1
 8001ce2:	6451      	str	r1, [r2, #68]	; 0x44
      rccResetTIM1();
 8001ce4:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8001ce8:	69b9      	ldr	r1, [r7, #24]
      pwmp->clock = STM32_TIMCLK2;
 8001cea:	f8c7 c014 	str.w	ip, [r7, #20]
      rccResetTIM1();
 8001cee:	f048 0801 	orr.w	r8, r8, #1
 8001cf2:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
 8001cf6:	6255      	str	r5, [r2, #36]	; 0x24
 8001cf8:	2270      	movs	r2, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001cfa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001cfe:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d02:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d06:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d08:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d14:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8001d16:	f646 0368 	movw	r3, #26728	; 0x6868
 8001d1a:	618b      	str	r3, [r1, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8001d1c:	61cb      	str	r3, [r1, #28]
 8001d1e:	e672      	b.n	8001a06 <main+0x4d6>
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001d20:	4a3a      	ldr	r2, [pc, #232]	; (8001e0c <main+0x8dc>)
      b = dmaStreamAllocate(adcp->dmastp,
 8001d22:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001d24:	6810      	ldr	r0, [r2, #0]
 8001d26:	7a4a      	ldrb	r2, [r1, #9]
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	4203      	tst	r3, r0
 8001d2c:	d142      	bne.n	8001db4 <main+0x884>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001d2e:	4d38      	ldr	r5, [pc, #224]	; (8001e10 <main+0x8e0>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001d30:	4f36      	ldr	r7, [pc, #216]	; (8001e0c <main+0x8dc>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001d32:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001d36:	4303      	orrs	r3, r0
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001d38:	606e      	str	r6, [r5, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001d3a:	4d35      	ldr	r5, [pc, #212]	; (8001e10 <main+0x8e0>)
 8001d3c:	4835      	ldr	r0, [pc, #212]	; (8001e14 <main+0x8e4>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001d3e:	603b      	str	r3, [r7, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001d40:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001d44:	f845 0032 	str.w	r0, [r5, r2, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001d48:	d004      	beq.n	8001d54 <main+0x824>
    rccEnableDMA1(false);
 8001d4a:	482e      	ldr	r0, [pc, #184]	; (8001e04 <main+0x8d4>)
 8001d4c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001d4e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001d52:	6302      	str	r2, [r0, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8001d54:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001d58:	d004      	beq.n	8001d64 <main+0x834>
    rccEnableDMA2(false);
 8001d5a:	4a2a      	ldr	r2, [pc, #168]	; (8001e04 <main+0x8d4>)
 8001d5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001d64:	680a      	ldr	r2, [r1, #0]
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	f023 031f 	bic.w	r3, r3, #31
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	6813      	ldr	r3, [r2, #0]
 8001d70:	f013 0301 	ands.w	r3, r3, #1
 8001d74:	d1fb      	bne.n	8001d6e <main+0x83e>
 8001d76:	7a0f      	ldrb	r7, [r1, #8]
 8001d78:	684d      	ldr	r5, [r1, #4]
 8001d7a:	203d      	movs	r0, #61	; 0x3d
 8001d7c:	40b8      	lsls	r0, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001d7e:	2721      	movs	r7, #33	; 0x21
  dmaStreamDisable(dmastp);
 8001d80:	6028      	str	r0, [r5, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001d82:	6013      	str	r3, [r2, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001d84:	6157      	str	r7, [r2, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 8001d86:	7a89      	ldrb	r1, [r1, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d88:	094b      	lsrs	r3, r1, #5
 8001d8a:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d8c:	f101 4560 	add.w	r5, r1, #3758096384	; 0xe0000000
 8001d90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001d94:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001d98:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d9c:	f001 011f 	and.w	r1, r1, #31
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001da6:	2760      	movs	r7, #96	; 0x60
 8001da8:	f885 7300 	strb.w	r7, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001dac:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001db0:	6019      	str	r1, [r3, #0]
 8001db2:	e000      	b.n	8001db6 <main+0x886>
 8001db4:	680a      	ldr	r2, [r1, #0]
      rccEnableADC1(FALSE);
 8001db6:	4913      	ldr	r1, [pc, #76]	; (8001e04 <main+0x8d4>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <main+0x8e8>)
 8001dba:	6093      	str	r3, [r2, #8]
      rccEnableADC1(FALSE);
 8001dbc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <main+0x8ec>)
    adcp->adc->CR1 = 0;
 8001dc0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
      rccEnableADC1(FALSE);
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	644b      	str	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001dc8:	6843      	ldr	r3, [r0, #4]
 8001dca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    adcp->adc->CR1 = 0;
 8001dce:	2100      	movs	r1, #0
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001dd4:	2501      	movs	r5, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001dd6:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
 8001dd8:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8001dda:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001ddc:	6095      	str	r5, [r2, #8]
 8001dde:	e69e      	b.n	8001b1e <main+0x5ee>
    u->BRR = STM32_PCLK2 / config->speed;
 8001de0:	f240 3141 	movw	r1, #833	; 0x341
 8001de4:	6099      	str	r1, [r3, #8]
 8001de6:	e5e1      	b.n	80019ac <main+0x47c>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8001de8:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001dec:	20c0      	movs	r0, #192	; 0xc0
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
 8001df6:	f888 0325 	strb.w	r0, [r8, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001dfa:	f8c8 1184 	str.w	r1, [r8, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001dfe:	f8c8 1004 	str.w	r1, [r8, #4]
 8001e02:	e5c6      	b.n	8001992 <main+0x462>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	200008d8 	.word	0x200008d8
 8001e10:	20000858 	.word	0x20000858
 8001e14:	08001131 	.word	0x08001131
 8001e18:	4001204c 	.word	0x4001204c
 8001e1c:	40012300 	.word	0x40012300
 8001e20:	05b8d800 	.word	0x05b8d800
	...

08001e30 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <__early_init+0x9c>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <__early_init+0xa0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001e34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8001e38:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001e3c:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8001e3e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001e40:	6813      	ldr	r3, [r2, #0]
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001e48:	6813      	ldr	r3, [r2, #0]
 8001e4a:	0798      	lsls	r0, r3, #30
 8001e4c:	d5fc      	bpl.n	8001e48 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001e4e:	6893      	ldr	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001e50:	491e      	ldr	r1, [pc, #120]	; (8001ecc <__early_init+0x9c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001e58:	6893      	ldr	r3, [r2, #8]
 8001e5a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001e5c:	688b      	ldr	r3, [r1, #8]
 8001e5e:	f013 030c 	ands.w	r3, r3, #12
 8001e62:	d1fb      	bne.n	8001e5c <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001e64:	6808      	ldr	r0, [r1, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001e66:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <__early_init+0x9c>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001e68:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8001e6c:	6008      	str	r0, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001e6e:	608b      	str	r3, [r1, #8]
  RCC->CSR |= RCC_CSR_LSION;
 8001e70:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001e78:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001e7a:	0799      	lsls	r1, r3, #30
 8001e7c:	d5fc      	bpl.n	8001e78 <__early_init+0x48>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <__early_init+0xa4>)
 8001e80:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001e82:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001e84:	4912      	ldr	r1, [pc, #72]	; (8001ed0 <__early_init+0xa0>)
  RCC->CR |= RCC_CR_PLLON;
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001e8c:	684b      	ldr	r3, [r1, #4]
 8001e8e:	045a      	lsls	r2, r3, #17
 8001e90:	d5fc      	bpl.n	8001e8c <__early_init+0x5c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001e92:	490e      	ldr	r1, [pc, #56]	; (8001ecc <__early_init+0x9c>)
 8001e94:	680b      	ldr	r3, [r1, #0]
 8001e96:	019b      	lsls	r3, r3, #6
 8001e98:	d5fc      	bpl.n	8001e94 <__early_init+0x64>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <__early_init+0xa8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <__early_init+0xac>)
 8001e9e:	608a      	str	r2, [r1, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001ea0:	f240 7203 	movw	r2, #1795	; 0x703
 8001ea4:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001ea6:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001ea8:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <__early_init+0x9c>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001eb0:	6893      	ldr	r3, [r2, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d1fa      	bne.n	8001eb0 <__early_init+0x80>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001eba:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	6653      	str	r3, [r2, #100]	; 0x64
 8001eca:	4770      	bx	lr
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	08016010 	.word	0x08016010
 8001ed8:	40023c00 	.word	0x40023c00
 8001edc:	38881000 	.word	0x38881000

08001ee0 <encoder_pulse_captured>:
int32_t motor_freqs[NUM_OF_MOTORS];
int16_t motor_actual_speeds[NUM_OF_MOTORS] = { 0, 0, 0 };
int16_t period[3];

void encoder_pulse_captured(ICUDriver *icup) {
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001ee0:	6943      	ldr	r3, [r0, #20]
 8001ee2:	4927      	ldr	r1, [pc, #156]	; (8001f80 <encoder_pulse_captured+0xa0>)
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001ee4:	4a27      	ldr	r2, [pc, #156]	; (8001f84 <encoder_pulse_captured+0xa4>)
void encoder_pulse_captured(ICUDriver *icup) {
 8001ee6:	b470      	push	{r4, r5, r6}
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001ee8:	681c      	ldr	r4, [r3, #0]
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001eea:	4e27      	ldr	r6, [pc, #156]	; (8001f88 <encoder_pulse_captured+0xa8>)

    //ICUD sender
    int8_t sender = -1;
    if (icup == &ICUD2) {
 8001eec:	4d27      	ldr	r5, [pc, #156]	; (8001f8c <encoder_pulse_captured+0xac>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001eee:	3401      	adds	r4, #1
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001ef0:	f44f 63e7 	mov.w	r3, #1848	; 0x738
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001ef4:	fbb1 f1f4 	udiv	r1, r1, r4
 8001ef8:	b209      	sxth	r1, r1
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001efa:	fb11 6303 	smlabb	r3, r1, r3, r6
 8001efe:	fb82 4203 	smull	r4, r2, r2, r3
 8001f02:	441a      	add	r2, r3
 8001f04:	17db      	asrs	r3, r3, #31
 8001f06:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
    if (icup == &ICUD2) {
 8001f0a:	42a8      	cmp	r0, r5
    int16_t period_calc = (1848*period_width-281984)/1667;
 8001f0c:	b21b      	sxth	r3, r3
    if (icup == &ICUD2) {
 8001f0e:	d007      	beq.n	8001f20 <encoder_pulse_captured+0x40>
        sender = 0;
    } else if (icup == &ICUD5) {
 8001f10:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <encoder_pulse_captured+0xb0>)
 8001f12:	4290      	cmp	r0, r2
 8001f14:	d02d      	beq.n	8001f72 <encoder_pulse_captured+0x92>
        sender = 1;
    } else if (icup == &ICUD3) {
 8001f16:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <encoder_pulse_captured+0xb4>)
 8001f18:	4290      	cmp	r0, r2
 8001f1a:	d02d      	beq.n	8001f78 <encoder_pulse_captured+0x98>
        } else {
            //motor_actual_speeds[0] -= (period_calc - motor_freqs[0])/256 //+ 1;
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
        }
    }
}
 8001f1c:	bc70      	pop	{r4, r5, r6}
 8001f1e:	4770      	bx	lr
    if (icup == &ICUD2) {
 8001f20:	2501      	movs	r5, #1
 8001f22:	2200      	movs	r2, #0
        main_timer[sender] = main_timer[sender] < 0 ? main_timer[sender]++ : 0;
 8001f24:	4c1c      	ldr	r4, [pc, #112]	; (8001f98 <encoder_pulse_captured+0xb8>)
        rotations_per_sec[sender] = period_width;
 8001f26:	4e1d      	ldr	r6, [pc, #116]	; (8001f9c <encoder_pulse_captured+0xbc>)
        main_timer[sender] = main_timer[sender] < 0 ? main_timer[sender]++ : 0;
 8001f28:	56a0      	ldrsb	r0, [r4, r2]
        rotations_per_sec[sender] = period_width;
 8001f2a:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
        if(period_calc < motor_freqs[sender]) {
 8001f2e:	2b00      	cmp	r3, #0
        main_timer[sender] = main_timer[sender] < 0 ? main_timer[sender]++ : 0;
 8001f30:	ea00 71e0 	and.w	r1, r0, r0, asr #31
 8001f34:	54a1      	strb	r1, [r4, r2]
        if(period_calc < motor_freqs[sender]) {
 8001f36:	db17      	blt.n	8001f68 <encoder_pulse_captured+0x88>
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
 8001f38:	4919      	ldr	r1, [pc, #100]	; (8001fa0 <encoder_pulse_captured+0xc0>)
 8001f3a:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8001f46:	2120      	movs	r1, #32
 8001f48:	f381 8811 	msr	BASEPRI, r1

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8001f4c:	4915      	ldr	r1, [pc, #84]	; (8001fa4 <encoder_pulse_captured+0xc4>)
  pwmp->tim->CCR[channel] = width;
 8001f4e:	698c      	ldr	r4, [r1, #24]
 8001f50:	68c8      	ldr	r0, [r1, #12]
 8001f52:	320c      	adds	r2, #12
 8001f54:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001f58:	4305      	orrs	r5, r0
 8001f5a:	6063      	str	r3, [r4, #4]
 8001f5c:	60cd      	str	r5, [r1, #12]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f383 8811 	msr	BASEPRI, r3
}
 8001f64:	bc70      	pop	{r4, r5, r6}
 8001f66:	4770      	bx	lr
            pwmEnableChannel(&PWMD1, sender, ++motor_actual_speeds[sender]);
 8001f68:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <encoder_pulse_captured+0xc0>)
 8001f6a:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	e7e6      	b.n	8001f40 <encoder_pulse_captured+0x60>
    } else if (icup == &ICUD5) {
 8001f72:	2502      	movs	r5, #2
 8001f74:	2201      	movs	r2, #1
 8001f76:	e7d5      	b.n	8001f24 <encoder_pulse_captured+0x44>
    } else if (icup == &ICUD3) {
 8001f78:	2504      	movs	r5, #4
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	e7d2      	b.n	8001f24 <encoder_pulse_captured+0x44>
 8001f7e:	bf00      	nop
 8001f80:	000f4240 	.word	0x000f4240
 8001f84:	9d414457 	.word	0x9d414457
 8001f88:	fffbb280 	.word	0xfffbb280
 8001f8c:	20000be4 	.word	0x20000be4
 8001f90:	20000c14 	.word	0x20000c14
 8001f94:	20000bfc 	.word	0x20000bfc
 8001f98:	20000834 	.word	0x20000834
 8001f9c:	20000e18 	.word	0x20000e18
 8001fa0:	20000e10 	.word	0x20000e10
 8001fa4:	20000c2c 	.word	0x20000c2c
	...

08001fb0 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001fb0:	b40e      	push	{r1, r2, r3}
 8001fb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af0f      	add	r7, sp, #60	; 0x3c
 8001fba:	4d9f      	ldr	r5, [pc, #636]	; (8002238 <chprintf.constprop.0+0x288>)
 8001fbc:	f857 6b04 	ldr.w	r6, [r7], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001fc0:	9702      	str	r7, [sp, #8]
  int n = 0;
 8001fc2:	f04f 0b00 	mov.w	fp, #0
    c = *fmt++;
 8001fc6:	7831      	ldrb	r1, [r6, #0]
 8001fc8:	1c73      	adds	r3, r6, #1
    if (c == 0)
 8001fca:	b161      	cbz	r1, 8001fe6 <chprintf.constprop.0+0x36>
    if (c != '%') {
 8001fcc:	2925      	cmp	r1, #37	; 0x25
 8001fce:	d010      	beq.n	8001ff2 <chprintf.constprop.0+0x42>
      streamPut(chp, (uint8_t)c);
 8001fd0:	682a      	ldr	r2, [r5, #0]
 8001fd2:	4899      	ldr	r0, [pc, #612]	; (8002238 <chprintf.constprop.0+0x288>)
 8001fd4:	6892      	ldr	r2, [r2, #8]
    c = *fmt++;
 8001fd6:	461e      	mov	r6, r3
      streamPut(chp, (uint8_t)c);
 8001fd8:	4790      	blx	r2
    c = *fmt++;
 8001fda:	7831      	ldrb	r1, [r6, #0]
      n++;
 8001fdc:	f10b 0b01 	add.w	fp, fp, #1
    c = *fmt++;
 8001fe0:	1c73      	adds	r3, r6, #1
    if (c == 0)
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d1f2      	bne.n	8001fcc <chprintf.constprop.0+0x1c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001fe6:	4658      	mov	r0, fp
 8001fe8:	b006      	add	sp, #24
 8001fea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fee:	b003      	add	sp, #12
 8001ff0:	4770      	bx	lr
    if (*fmt == '-') {
 8001ff2:	7872      	ldrb	r2, [r6, #1]
 8001ff4:	2a2d      	cmp	r2, #45	; 0x2d
 8001ff6:	bf03      	ittte	eq
 8001ff8:	78b2      	ldrbeq	r2, [r6, #2]
      fmt++;
 8001ffa:	1cb3      	addeq	r3, r6, #2
      left_align = TRUE;
 8001ffc:	f04f 0c01 	moveq.w	ip, #1
    left_align = FALSE;
 8002000:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8002004:	2a30      	cmp	r2, #48	; 0x30
 8002006:	bf03      	ittte	eq
 8002008:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800200a:	3301      	addeq	r3, #1
      filler = '0';
 800200c:	f04f 0930 	moveq.w	r9, #48	; 0x30
    filler = ' ';
 8002010:	f04f 0920 	movne.w	r9, #32
 8002014:	1c59      	adds	r1, r3, #1
    width = 0;
 8002016:	2400      	movs	r4, #0
 8002018:	e005      	b.n	8002026 <chprintf.constprop.0+0x76>
        c = va_arg(ap, int);
 800201a:	783b      	ldrb	r3, [r7, #0]
 800201c:	3704      	adds	r7, #4
 800201e:	f811 2b01 	ldrb.w	r2, [r1], #1
      width = width * 10 + c;
 8002022:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8002026:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b09      	cmp	r3, #9
      c = *fmt++;
 800202e:	460e      	mov	r6, r1
      width = width * 10 + c;
 8002030:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8002034:	d9f3      	bls.n	800201e <chprintf.constprop.0+0x6e>
      else if (c == '*')
 8002036:	2a2a      	cmp	r2, #42	; 0x2a
 8002038:	d0ef      	beq.n	800201a <chprintf.constprop.0+0x6a>
    if (c == '.') {
 800203a:	2a2e      	cmp	r2, #46	; 0x2e
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	d043      	beq.n	80020ca <chprintf.constprop.0+0x11a>
    if (c == 'l' || c == 'L') {
 8002042:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002046:	2b4c      	cmp	r3, #76	; 0x4c
 8002048:	d04e      	beq.n	80020e8 <chprintf.constprop.0+0x138>
    switch (c) {
 800204a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 800204e:	2834      	cmp	r0, #52	; 0x34
 8002050:	f200 8151 	bhi.w	80022f6 <chprintf.constprop.0+0x346>
 8002054:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002058:	014f00fe 	.word	0x014f00fe
 800205c:	014f014f 	.word	0x014f014f
 8002060:	00fe014f 	.word	0x00fe014f
 8002064:	014f014f 	.word	0x014f014f
 8002068:	014f014f 	.word	0x014f014f
 800206c:	00f8014f 	.word	0x00f8014f
 8002070:	014f014f 	.word	0x014f014f
 8002074:	014f014f 	.word	0x014f014f
 8002078:	0088014f 	.word	0x0088014f
 800207c:	014f014f 	.word	0x014f014f
 8002080:	014f00fb 	.word	0x014f00fb
 8002084:	014f014f 	.word	0x014f014f
 8002088:	014f014f 	.word	0x014f014f
 800208c:	014f014f 	.word	0x014f014f
 8002090:	014f014f 	.word	0x014f014f
 8002094:	0143014f 	.word	0x0143014f
 8002098:	014f00fe 	.word	0x014f00fe
 800209c:	014f014f 	.word	0x014f014f
 80020a0:	00fe014f 	.word	0x00fe014f
 80020a4:	014f014f 	.word	0x014f014f
 80020a8:	014f014f 	.word	0x014f014f
 80020ac:	00f8014f 	.word	0x00f8014f
 80020b0:	014f014f 	.word	0x014f014f
 80020b4:	0129014f 	.word	0x0129014f
 80020b8:	0088014f 	.word	0x0088014f
 80020bc:	014f014f 	.word	0x014f014f
 80020c0:	00fb      	.short	0x00fb
          c = va_arg(ap, int);
 80020c2:	783b      	ldrb	r3, [r7, #0]
 80020c4:	3704      	adds	r7, #4
        precision += c;
 80020c6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
        c = *fmt++;
 80020ca:	f816 2b01 	ldrb.w	r2, [r6], #1
        if (c >= '0' && c <= '9')
 80020ce:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b09      	cmp	r3, #9
        precision *= 10;
 80020d6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9')
 80020da:	d9f4      	bls.n	80020c6 <chprintf.constprop.0+0x116>
        else if (c == '*')
 80020dc:	2a2a      	cmp	r2, #42	; 0x2a
 80020de:	d0f0      	beq.n	80020c2 <chprintf.constprop.0+0x112>
    if (c == 'l' || c == 'L') {
 80020e0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80020e4:	2b4c      	cmp	r3, #76	; 0x4c
 80020e6:	d1b0      	bne.n	800204a <chprintf.constprop.0+0x9a>
      if (*fmt)
 80020e8:	7833      	ldrb	r3, [r6, #0]
 80020ea:	b10b      	cbz	r3, 80020f0 <chprintf.constprop.0+0x140>
        c = *fmt++;
 80020ec:	3601      	adds	r6, #1
 80020ee:	461a      	mov	r2, r3
    switch (c) {
 80020f0:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 80020f4:	2b34      	cmp	r3, #52	; 0x34
 80020f6:	f200 80fe 	bhi.w	80022f6 <chprintf.constprop.0+0x346>
 80020fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80020fe:	00ab      	.short	0x00ab
 8002100:	00fc00fc 	.word	0x00fc00fc
 8002104:	00fc00fc 	.word	0x00fc00fc
 8002108:	00fc00ab 	.word	0x00fc00ab
 800210c:	00fc00fc 	.word	0x00fc00fc
 8002110:	00fc00fc 	.word	0x00fc00fc
 8002114:	00fc00a5 	.word	0x00fc00a5
 8002118:	00fc00fc 	.word	0x00fc00fc
 800211c:	00fc00fc 	.word	0x00fc00fc
 8002120:	00fc0035 	.word	0x00fc0035
 8002124:	00a800fc 	.word	0x00a800fc
 8002128:	00fc00fc 	.word	0x00fc00fc
 800212c:	00fc00fc 	.word	0x00fc00fc
 8002130:	00fc00fc 	.word	0x00fc00fc
 8002134:	00fc00fc 	.word	0x00fc00fc
 8002138:	00fc00fc 	.word	0x00fc00fc
 800213c:	00ab00f0 	.word	0x00ab00f0
 8002140:	00fc00fc 	.word	0x00fc00fc
 8002144:	00fc00fc 	.word	0x00fc00fc
 8002148:	00fc00ab 	.word	0x00fc00ab
 800214c:	00fc00fc 	.word	0x00fc00fc
 8002150:	00fc00fc 	.word	0x00fc00fc
 8002154:	00fc00a5 	.word	0x00fc00a5
 8002158:	00fc00fc 	.word	0x00fc00fc
 800215c:	00fc00d6 	.word	0x00fc00d6
 8002160:	00fc0035 	.word	0x00fc0035
 8002164:	00a800fc 	.word	0x00a800fc
 8002168:	f04f 080a 	mov.w	r8, #10
        l = va_arg(ap, unsigned int);
 800216c:	683a      	ldr	r2, [r7, #0]
  q = p + MAX_FILLER;
 800216e:	f10d 0117 	add.w	r1, sp, #23
        l = va_arg(ap, unsigned int);
 8002172:	3704      	adds	r7, #4
 8002174:	e000      	b.n	8002178 <chprintf.constprop.0+0x1c8>
  } while ((ll /= radix) != 0);
 8002176:	4601      	mov	r1, r0
    i = (int)(l % radix);
 8002178:	fbb2 fef8 	udiv	lr, r2, r8
 800217c:	fb08 221e 	mls	r2, r8, lr, r2
    i += '0';
 8002180:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8002184:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8002186:	bfc8      	it	gt
 8002188:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 800218c:	b2db      	uxtb	r3, r3
    l /= radix;
 800218e:	4672      	mov	r2, lr
    *--q = i;
 8002190:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002194:	1e48      	subs	r0, r1, #1
  } while ((ll /= radix) != 0);
 8002196:	2a00      	cmp	r2, #0
 8002198:	d1ed      	bne.n	8002176 <chprintf.constprop.0+0x1c6>
  i = (int)(p + MAX_FILLER - q);
 800219a:	f10d 0217 	add.w	r2, sp, #23
 800219e:	f10d 080c 	add.w	r8, sp, #12
 80021a2:	1a12      	subs	r2, r2, r0
 80021a4:	46c6      	mov	lr, r8
 80021a6:	4410      	add	r0, r2
 80021a8:	e001      	b.n	80021ae <chprintf.constprop.0+0x1fe>
 80021aa:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 80021ae:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
 80021b2:	4288      	cmp	r0, r1
 80021b4:	d1f9      	bne.n	80021aa <chprintf.constprop.0+0x1fa>
 80021b6:	1e53      	subs	r3, r2, #1
 80021b8:	9301      	str	r3, [sp, #4]
    if ((width -= i) < 0)
 80021ba:	1aa4      	subs	r4, r4, r2
 80021bc:	d43e      	bmi.n	800223c <chprintf.constprop.0+0x28c>
    if (left_align == FALSE)
 80021be:	f1bc 0f00 	cmp.w	ip, #0
 80021c2:	f040 80a1 	bne.w	8002308 <chprintf.constprop.0+0x358>
 80021c6:	f1c4 0a00 	rsb	sl, r4, #0
    if (width < 0) {
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	f000 809b 	beq.w	8002306 <chprintf.constprop.0+0x356>
      if (*s == '-' && filler == '0') {
 80021d0:	f898 1000 	ldrb.w	r1, [r8]
 80021d4:	292d      	cmp	r1, #45	; 0x2d
 80021d6:	f000 80a6 	beq.w	8002326 <chprintf.constprop.0+0x376>
        streamPut(chp, (uint8_t)filler);
 80021da:	682b      	ldr	r3, [r5, #0]
 80021dc:	4649      	mov	r1, r9
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4628      	mov	r0, r5
 80021e2:	4798      	blx	r3
      } while (++width != 0);
 80021e4:	f11a 0a01 	adds.w	sl, sl, #1
 80021e8:	d1f7      	bne.n	80021da <chprintf.constprop.0+0x22a>
    while (--i >= 0) {
 80021ea:	9b01      	ldr	r3, [sp, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	44a3      	add	fp, r4
 80021f0:	bfa8      	it	ge
 80021f2:	4654      	movge	r4, sl
 80021f4:	f6ff aee7 	blt.w	8001fc6 <chprintf.constprop.0+0x16>
 80021f8:	f8dd a004 	ldr.w	sl, [sp, #4]
      streamPut(chp, (uint8_t)*s++);
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002202:	689b      	ldr	r3, [r3, #8]
    while (--i >= 0) {
 8002204:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8002208:	4628      	mov	r0, r5
 800220a:	4798      	blx	r3
    while (--i >= 0) {
 800220c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8002210:	d1f4      	bne.n	80021fc <chprintf.constprop.0+0x24c>
 8002212:	9b01      	ldr	r3, [sp, #4]
 8002214:	f10b 0b01 	add.w	fp, fp, #1
 8002218:	449b      	add	fp, r3
    while (width) {
 800221a:	2c00      	cmp	r4, #0
 800221c:	f43f aed3 	beq.w	8001fc6 <chprintf.constprop.0+0x16>
 8002220:	46a0      	mov	r8, r4
      streamPut(chp, (uint8_t)filler);
 8002222:	682b      	ldr	r3, [r5, #0]
 8002224:	4649      	mov	r1, r9
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4628      	mov	r0, r5
 800222a:	4798      	blx	r3
    while (width) {
 800222c:	f1b8 0801 	subs.w	r8, r8, #1
 8002230:	d1f7      	bne.n	8002222 <chprintf.constprop.0+0x272>
 8002232:	44a3      	add	fp, r4
 8002234:	e6c7      	b.n	8001fc6 <chprintf.constprop.0+0x16>
 8002236:	bf00      	nop
 8002238:	20000c48 	.word	0x20000c48
    while (--i >= 0) {
 800223c:	9b01      	ldr	r3, [sp, #4]
 800223e:	2b00      	cmp	r3, #0
      width = 0;
 8002240:	bfa8      	it	ge
 8002242:	2400      	movge	r4, #0
    while (--i >= 0) {
 8002244:	dad8      	bge.n	80021f8 <chprintf.constprop.0+0x248>
 8002246:	e6be      	b.n	8001fc6 <chprintf.constprop.0+0x16>
    switch (c) {
 8002248:	f04f 0808 	mov.w	r8, #8
 800224c:	e78e      	b.n	800216c <chprintf.constprop.0+0x1bc>
 800224e:	f04f 0810 	mov.w	r8, #16
 8002252:	e78b      	b.n	800216c <chprintf.constprop.0+0x1bc>
        l = va_arg(ap, int);
 8002254:	6839      	ldr	r1, [r7, #0]
      if (l < 0) {
 8002256:	2900      	cmp	r1, #0
        l = va_arg(ap, int);
 8002258:	f107 0704 	add.w	r7, r7, #4
      if (l < 0) {
 800225c:	db73      	blt.n	8002346 <chprintf.constprop.0+0x396>
    p = tmpbuf;
 800225e:	f10d 080c 	add.w	r8, sp, #12
 8002262:	4642      	mov	r2, r8
  q = p + MAX_FILLER;
 8002264:	f102 030b 	add.w	r3, r2, #11
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	4618      	mov	r0, r3
    i = (int)(l % radix);
 800226c:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <chprintf.constprop.0+0x3b8>)
 800226e:	fba3 e301 	umull	lr, r3, r3, r1
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	eb03 0a83 	add.w	sl, r3, r3, lsl #2
 8002278:	469e      	mov	lr, r3
 800227a:	eba1 034a 	sub.w	r3, r1, sl, lsl #1
    i += '0';
 800227e:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8002280:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002282:	4671      	mov	r1, lr
    *--q = i;
 8002284:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 8002288:	2900      	cmp	r1, #0
 800228a:	d1ef      	bne.n	800226c <chprintf.constprop.0+0x2bc>
  i = (int)(p + MAX_FILLER - q);
 800228c:	9901      	ldr	r1, [sp, #4]
 800228e:	1a09      	subs	r1, r1, r0
 8002290:	4411      	add	r1, r2
 8002292:	e001      	b.n	8002298 <chprintf.constprop.0+0x2e8>
 8002294:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 8002298:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 800229c:	428a      	cmp	r2, r1
 800229e:	d1f9      	bne.n	8002294 <chprintf.constprop.0+0x2e4>
 80022a0:	eba2 0208 	sub.w	r2, r2, r8
 80022a4:	1e53      	subs	r3, r2, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	e787      	b.n	80021ba <chprintf.constprop.0+0x20a>
      if ((s = va_arg(ap, char *)) == 0)
 80022aa:	f8d7 8000 	ldr.w	r8, [r7]
 80022ae:	3704      	adds	r7, #4
 80022b0:	f1b8 0f00 	cmp.w	r8, #0
 80022b4:	d050      	beq.n	8002358 <chprintf.constprop.0+0x3a8>
      for (p = s; *p && (--precision >= 0); p++)
 80022b6:	f898 3000 	ldrb.w	r3, [r8]
      if (precision == 0)
 80022ba:	b351      	cbz	r1, 8002312 <chprintf.constprop.0+0x362>
      for (p = s; *p && (--precision >= 0); p++)
 80022bc:	b36b      	cbz	r3, 800231a <chprintf.constprop.0+0x36a>
 80022be:	3901      	subs	r1, #1
 80022c0:	4642      	mov	r2, r8
 80022c2:	e001      	b.n	80022c8 <chprintf.constprop.0+0x318>
 80022c4:	3901      	subs	r1, #1
 80022c6:	d403      	bmi.n	80022d0 <chprintf.constprop.0+0x320>
 80022c8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <chprintf.constprop.0+0x314>
 80022d0:	eba2 0208 	sub.w	r2, r2, r8
 80022d4:	1e53      	subs	r3, r2, #1
 80022d6:	9301      	str	r3, [sp, #4]
      filler = ' ';
 80022d8:	f04f 0920 	mov.w	r9, #32
 80022dc:	e76d      	b.n	80021ba <chprintf.constprop.0+0x20a>
      *p++ = va_arg(ap, int);
 80022de:	f10d 0818 	add.w	r8, sp, #24
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f808 3d0c 	strb.w	r3, [r8, #-12]!
 80022e8:	2300      	movs	r3, #0
 80022ea:	3704      	adds	r7, #4
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2201      	movs	r2, #1
      filler = ' ';
 80022f0:	f04f 0920 	mov.w	r9, #32
 80022f4:	e761      	b.n	80021ba <chprintf.constprop.0+0x20a>
      *p++ = c;
 80022f6:	f10d 0818 	add.w	r8, sp, #24
 80022fa:	2300      	movs	r3, #0
 80022fc:	f808 2d0c 	strb.w	r2, [r8, #-12]!
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	e759      	b.n	80021ba <chprintf.constprop.0+0x20a>
    if (width < 0) {
 8002306:	4654      	mov	r4, sl
    while (--i >= 0) {
 8002308:	9b01      	ldr	r3, [sp, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f6bf af74 	bge.w	80021f8 <chprintf.constprop.0+0x248>
 8002310:	e783      	b.n	800221a <chprintf.constprop.0+0x26a>
      for (p = s; *p && (--precision >= 0); p++)
 8002312:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1d2      	bne.n	80022c0 <chprintf.constprop.0+0x310>
 800231a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	f04f 0920 	mov.w	r9, #32
 8002324:	e74b      	b.n	80021be <chprintf.constprop.0+0x20e>
      if (*s == '-' && filler == '0') {
 8002326:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 800232a:	f47f af56 	bne.w	80021da <chprintf.constprop.0+0x22a>
        streamPut(chp, (uint8_t)*s++);
 800232e:	682a      	ldr	r2, [r5, #0]
 8002330:	480e      	ldr	r0, [pc, #56]	; (800236c <chprintf.constprop.0+0x3bc>)
 8002332:	6892      	ldr	r2, [r2, #8]
 8002334:	4790      	blx	r2
 8002336:	9b01      	ldr	r3, [sp, #4]
 8002338:	3b01      	subs	r3, #1
 800233a:	f108 0801 	add.w	r8, r8, #1
        n++;
 800233e:	f10b 0b01 	add.w	fp, fp, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	e749      	b.n	80021da <chprintf.constprop.0+0x22a>
        *p++ = '-';
 8002346:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002348:	4249      	negs	r1, r1
        *p++ = '-';
 800234a:	f88d 300c 	strb.w	r3, [sp, #12]
 800234e:	f10d 020d 	add.w	r2, sp, #13
 8002352:	f10d 080c 	add.w	r8, sp, #12
 8002356:	e785      	b.n	8002264 <chprintf.constprop.0+0x2b4>
        s = "(null)";
 8002358:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8002370 <chprintf.constprop.0+0x3c0>
      if (precision == 0)
 800235c:	2900      	cmp	r1, #0
 800235e:	d1ae      	bne.n	80022be <chprintf.constprop.0+0x30e>
        precision = 32767;
 8002360:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002364:	e7ab      	b.n	80022be <chprintf.constprop.0+0x30e>
 8002366:	bf00      	nop
 8002368:	cccccccd 	.word	0xcccccccd
 800236c:	20000c48 	.word	0x20000c48
 8002370:	080027d0 	.word	0x080027d0
	...

08002380 <SensorThread>:
    0,
    ADC_SQR3_SQ2_N(ADC_CHANNEL_IN7)
};

THD_WORKING_AREA(waSensorThread, 512);
THD_FUNCTION(SensorThread, arg) {
 8002380:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002384:	4c3c      	ldr	r4, [pc, #240]	; (8002478 <SensorThread+0xf8>)
            sensors[i+8] = sensor_value2;
        }
        // output
        for(int8_t i = 0; i < NUM_OF_SENSORS; i++)
        {
            chprintf(&SD1, "%d ", sensors[i]);
 8002386:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800249c <SensorThread+0x11c>
THD_FUNCTION(SensorThread, arg) {
 800238a:	b08d      	sub	sp, #52	; 0x34
 800238c:	f10d 070e 	add.w	r7, sp, #14
        palSetPad(GPIOA,5);
 8002390:	f04f 0920 	mov.w	r9, #32
THD_FUNCTION(SensorThread, arg) {
 8002394:	46ba      	mov	sl, r7
 8002396:	f04f 0b00 	mov.w	fp, #0
 800239a:	9701      	str	r7, [sp, #4]
 800239c:	fa5f f38b 	uxtb.w	r3, fp
        palClearPad(GPIOA,5);
 80023a0:	4a36      	ldr	r2, [pc, #216]	; (800247c <SensorThread+0xfc>)
    if (num & 0b1) {
 80023a2:	07dd      	lsls	r5, r3, #31
        palClearPad(GPIOA,5);
 80023a4:	bf4c      	ite	mi
 80023a6:	f8a2 901a 	strhmi.w	r9, [r2, #26]
        palSetPad(GPIOA,5);
 80023aa:	f8a2 9018 	strhpl.w	r9, [r2, #24]
        palClearPad(GPIOB,6);
 80023ae:	2140      	movs	r1, #64	; 0x40
    if (num & 0b10) {
 80023b0:	0798      	lsls	r0, r3, #30
        palSetPad(GPIOB,6);
 80023b2:	460a      	mov	r2, r1
        palClearPad(GPIOB,6);
 80023b4:	bf4b      	itete	mi
 80023b6:	4a32      	ldrmi	r2, [pc, #200]	; (8002480 <SensorThread+0x100>)
        palSetPad(GPIOB,6);
 80023b8:	4931      	ldrpl	r1, [pc, #196]	; (8002480 <SensorThread+0x100>)
        palClearPad(GPIOB,6);
 80023ba:	8351      	strhmi	r1, [r2, #26]
        palSetPad(GPIOB,6);
 80023bc:	830a      	strhpl	r2, [r1, #24]
    if (num & 0b100) {
 80023be:	f013 0f04 	tst.w	r3, #4
        palClearPad(GPIOC,7);
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <SensorThread+0x104>)
 80023c4:	f04f 0180 	mov.w	r1, #128	; 0x80
 80023c8:	bf14      	ite	ne
 80023ca:	8359      	strhne	r1, [r3, #26]
        palSetPad(GPIOC,7);
 80023cc:	8319      	strheq	r1, [r3, #24]
 80023ce:	f389 8811 	msr	BASEPRI, r9
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 80023d2:	2003      	movs	r0, #3
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80023d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023d6:	7020      	strb	r0, [r4, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
  adcp->grpp     = grpp;
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <SensorThread+0x108>)
  mode = adcp->dmamode;
 80023dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80023de:	6123      	str	r3, [r4, #16]
  adcp->depth    = depth;
 80023e0:	2301      	movs	r3, #1
 80023e2:	60e3      	str	r3, [r4, #12]
  adcp->samples  = samples;
 80023e4:	60a7      	str	r7, [r4, #8]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80023e6:	60d7      	str	r7, [r2, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 80023e8:	6053      	str	r3, [r2, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 80023ea:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
 80023ec:	6811      	ldr	r1, [r2, #0]
  return ch.rlist.r_current;
 80023ee:	4d27      	ldr	r5, [pc, #156]	; (800248c <SensorThread+0x10c>)
  adcp->adc->SR    = 0;
 80023f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023f2:	69ae      	ldr	r6, [r5, #24]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 80023f4:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80024a0 <SensorThread+0x120>
  dmaStreamEnable(adcp->dmastp);
 80023f8:	f041 0101 	orr.w	r1, r1, #1
 80023fc:	6011      	str	r1, [r2, #0]
  adcp->adc->SR    = 0;
 80023fe:	2500      	movs	r5, #0
  adcp->adc->SQR2  = grpp->sqr2;
 8002400:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
  adcp->adc->SR    = 0;
 8002404:	601d      	str	r5, [r3, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
 8002406:	60dd      	str	r5, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8002408:	611d      	str	r5, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 800240a:	62dd      	str	r5, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 800240e:	f240 3203 	movw	r2, #771	; 0x303
  adcp->adc->SQR3  = grpp->sqr3;
 8002412:	635d      	str	r5, [r3, #52]	; 0x34
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8002414:	f8c3 c004 	str.w	ip, [r3, #4]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8002418:	609a      	str	r2, [r3, #8]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 800241a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800241e:	609a      	str	r2, [r3, #8]
  tp->p_u.wttrp = trp;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <SensorThread+0x110>)
 8002422:	6233      	str	r3, [r6, #32]
  *trp = tp;
 8002424:	6166      	str	r6, [r4, #20]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002426:	f7fe fc1b 	bl	8000c60 <chSchGoSleepS>
 800242a:	f385 8811 	msr	BASEPRI, r5
            sensors[i] = sensor_value1;
 800242e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002432:	f82a 3f02 	strh.w	r3, [sl, #2]!
 8002436:	f10b 0b01 	add.w	fp, fp, #1
        for (uint8_t i = 0; i < NUM_OF_SENSORS/2; i++) {
 800243a:	f1bb 0f08 	cmp.w	fp, #8
            sensors[i+8] = sensor_value2;
 800243e:	f8aa 5010 	strh.w	r5, [sl, #16]
        for (uint8_t i = 0; i < NUM_OF_SENSORS/2; i++) {
 8002442:	d1ab      	bne.n	800239c <SensorThread+0x1c>
 8002444:	9e01      	ldr	r6, [sp, #4]
            chprintf(&SD1, "%d ", sensors[i]);
 8002446:	4d13      	ldr	r5, [pc, #76]	; (8002494 <SensorThread+0x114>)
 8002448:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 800244c:	4629      	mov	r1, r5
 800244e:	4640      	mov	r0, r8
 8002450:	f7ff fdae 	bl	8001fb0 <chprintf.constprop.0>
        for(int8_t i = 0; i < NUM_OF_SENSORS; i++)
 8002454:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8002458:	42b3      	cmp	r3, r6
 800245a:	d1f5      	bne.n	8002448 <SensorThread+0xc8>
        }
        chprintf(&SD1, "\n\r");
 800245c:	490e      	ldr	r1, [pc, #56]	; (8002498 <SensorThread+0x118>)
 800245e:	4640      	mov	r0, r8
 8002460:	f7ff fda6 	bl	8001fb0 <chprintf.constprop.0>
 8002464:	f389 8811 	msr	BASEPRI, r9
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8002468:	2101      	movs	r1, #1
 800246a:	2008      	movs	r0, #8
 800246c:	f7fe fc10 	bl	8000c90 <chSchGoSleepTimeoutS>
 8002470:	2300      	movs	r3, #0
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	e78d      	b.n	8002394 <SensorThread+0x14>
 8002478:	20000bb0 	.word	0x20000bb0
 800247c:	40020000 	.word	0x40020000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020800 	.word	0x40020800
 8002488:	080027e0 	.word	0x080027e0
 800248c:	20000cc0 	.word	0x20000cc0
 8002490:	20000bc4 	.word	0x20000bc4
 8002494:	080027c0 	.word	0x080027c0
 8002498:	080027c4 	.word	0x080027c4
 800249c:	20000c48 	.word	0x20000c48
 80024a0:	04000100 	.word	0x04000100
	...

080024b0 <chSchWakeupS.constprop.34>:
  if (ntp->p_prio <= currp->p_prio) {
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <chSchWakeupS.constprop.34+0x54>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80024b2:	b470      	push	{r4, r5, r6}
  ntp->p_u.rdymsg = msg;
 80024b4:	2200      	movs	r2, #0
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80024b6:	4604      	mov	r4, r0
  if (ntp->p_prio <= currp->p_prio) {
 80024b8:	699d      	ldr	r5, [r3, #24]
  ntp->p_u.rdymsg = msg;
 80024ba:	6202      	str	r2, [r0, #32]
  if (ntp->p_prio <= currp->p_prio) {
 80024bc:	68a8      	ldr	r0, [r5, #8]
 80024be:	68a1      	ldr	r1, [r4, #8]
 80024c0:	4281      	cmp	r1, r0
 80024c2:	d80b      	bhi.n	80024dc <chSchWakeupS.constprop.34+0x2c>
  tp->p_state = CH_STATE_READY;
 80024c4:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 80024c6:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	4291      	cmp	r1, r2
 80024cc:	d9fb      	bls.n	80024c6 <chSchWakeupS.constprop.34+0x16>
  tp->p_prev = cp->p_prev;
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 80024d2:	6023      	str	r3, [r4, #0]
  tp->p_prev->p_next = tp;
 80024d4:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80024d6:	605c      	str	r4, [r3, #4]
}
 80024d8:	bc70      	pop	{r4, r5, r6}
 80024da:	4770      	bx	lr
  tp->p_state = CH_STATE_READY;
 80024dc:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80024de:	461a      	mov	r2, r3
    cp = cp->p_next;
 80024e0:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80024e2:	6891      	ldr	r1, [r2, #8]
 80024e4:	4288      	cmp	r0, r1
 80024e6:	d9fb      	bls.n	80024e0 <chSchWakeupS.constprop.34+0x30>
  tp->p_prev = cp->p_prev;
 80024e8:	6850      	ldr	r0, [r2, #4]
 80024ea:	6068      	str	r0, [r5, #4]
    ntp->p_state = CH_STATE_CURRENT;
 80024ec:	2601      	movs	r6, #1
  tp->p_next = cp;
 80024ee:	602a      	str	r2, [r5, #0]
  tp->p_prev->p_next = tp;
 80024f0:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 80024f2:	6055      	str	r5, [r2, #4]
    ntp->p_state = CH_STATE_CURRENT;
 80024f4:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 80024f6:	4629      	mov	r1, r5
 80024f8:	4620      	mov	r0, r4
    setcurrp(ntp);
 80024fa:	619c      	str	r4, [r3, #24]
}
 80024fc:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 80024fe:	f7fd bec7 	b.w	8000290 <_port_switch>
 8002502:	bf00      	nop
 8002504:	20000cc0 	.word	0x20000cc0
	...

08002510 <chTMStartMeasurementX.constprop.31>:
  return DWT->CYCCNT;
 8002510:	4b01      	ldr	r3, [pc, #4]	; (8002518 <chTMStartMeasurementX.constprop.31+0x8>)
 8002512:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8002514:	6083      	str	r3, [r0, #8]
 8002516:	4770      	bx	lr
 8002518:	e0001000 	.word	0xe0001000
 800251c:	00000000 	.word	0x00000000

08002520 <chEvtBroadcastFlagsI.constprop.28>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8002522:	4f17      	ldr	r7, [pc, #92]	; (8002580 <chEvtBroadcastFlagsI.constprop.28+0x60>)
 8002524:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002528:	42bc      	cmp	r4, r7
 800252a:	d020      	beq.n	800256e <chEvtBroadcastFlagsI.constprop.28+0x4e>
 800252c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800252e:	2600      	movs	r6, #0
 8002530:	e002      	b.n	8002538 <chEvtBroadcastFlagsI.constprop.28+0x18>
    elp = elp->el_next;
 8002532:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8002534:	42bc      	cmp	r4, r7
 8002536:	d01a      	beq.n	800256e <chEvtBroadcastFlagsI.constprop.28+0x4e>
    elp->el_flags |= flags;
 8002538:	68e3      	ldr	r3, [r4, #12]
 800253a:	432b      	orrs	r3, r5
 800253c:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800253e:	b115      	cbz	r5, 8002546 <chEvtBroadcastFlagsI.constprop.28+0x26>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8002540:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8002542:	4213      	tst	r3, r2
 8002544:	d0f5      	beq.n	8002532 <chEvtBroadcastFlagsI.constprop.28+0x12>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8002546:	6860      	ldr	r0, [r4, #4]
  tp->p_epending |= events;
 8002548:	68a3      	ldr	r3, [r4, #8]
 800254a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800254c:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 800254e:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002550:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 8002552:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002554:	d00c      	beq.n	8002570 <chEvtBroadcastFlagsI.constprop.28+0x50>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8002556:	2a0b      	cmp	r2, #11
 8002558:	d1eb      	bne.n	8002532 <chEvtBroadcastFlagsI.constprop.28+0x12>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800255a:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800255c:	ea32 0303 	bics.w	r3, r2, r3
 8002560:	d1e7      	bne.n	8002532 <chEvtBroadcastFlagsI.constprop.28+0x12>
    tp->p_u.rdymsg = MSG_OK;
 8002562:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8002564:	f7fe fd7c 	bl	8001060 <chSchReadyI>
    elp = elp->el_next;
 8002568:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800256a:	42bc      	cmp	r4, r7
 800256c:	d1e4      	bne.n	8002538 <chEvtBroadcastFlagsI.constprop.28+0x18>
 800256e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8002570:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002572:	4213      	tst	r3, r2
 8002574:	d0dd      	beq.n	8002532 <chEvtBroadcastFlagsI.constprop.28+0x12>
    tp->p_u.rdymsg = MSG_OK;
 8002576:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8002578:	f7fe fd72 	bl	8001060 <chSchReadyI>
 800257c:	e7f4      	b.n	8002568 <chEvtBroadcastFlagsI.constprop.28+0x48>
 800257e:	bf00      	nop
 8002580:	20000c48 	.word	0x20000c48
	...

08002590 <sdObjectInit.constprop.23>:
  sdp->vmt = &vmt;
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <sdObjectInit.constprop.23+0x54>)
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <sdObjectInit.constprop.23+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002594:	b4f0      	push	{r4, r5, r6, r7}
  sdp->vmt = &vmt;
 8002596:	4618      	mov	r0, r3
  sdp->state = SD_STOP;
 8002598:	2101      	movs	r1, #1
  sdp->vmt = &vmt;
 800259a:	f840 2b04 	str.w	r2, [r0], #4
  oqp->q_counter = size;
 800259e:	2410      	movs	r4, #16
  iqp->q_counter = 0;
 80025a0:	2200      	movs	r2, #0
  tqp->p_next = (thread_t *)tqp;
 80025a2:	f103 050c 	add.w	r5, r3, #12
  oqp->q_notify  = onfy;
 80025a6:	4e11      	ldr	r6, [pc, #68]	; (80025ec <sdObjectInit.constprop.23+0x5c>)
  sdp->state = SD_STOP;
 80025a8:	7219      	strb	r1, [r3, #8]
  oqp->q_top     = bp + size;
 80025aa:	f103 0774 	add.w	r7, r3, #116	; 0x74
  iqp->q_buffer  = bp;
 80025ae:	f103 0154 	add.w	r1, r3, #84	; 0x54
  iqp->q_counter = 0;
 80025b2:	615a      	str	r2, [r3, #20]
  iqp->q_notify  = infy;
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
  oqp->q_counter = size;
 80025b6:	639c      	str	r4, [r3, #56]	; 0x38
  iqp->q_top     = bp + size;
 80025b8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80025bc:	f103 0430 	add.w	r4, r3, #48	; 0x30
  oqp->q_top     = bp + size;
 80025c0:	641f      	str	r7, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 80025c2:	64de      	str	r6, [r3, #76]	; 0x4c
 80025c4:	60dd      	str	r5, [r3, #12]
  tqp->p_prev = (thread_t *)tqp;
 80025c6:	611d      	str	r5, [r3, #16]
  tqp->p_next = (thread_t *)tqp;
 80025c8:	631c      	str	r4, [r3, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 80025ca:	635c      	str	r4, [r3, #52]	; 0x34
  iqp->q_link    = link;
 80025cc:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_link    = link;
 80025ce:	651b      	str	r3, [r3, #80]	; 0x50
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80025d0:	6058      	str	r0, [r3, #4]
  iqp->q_buffer  = bp;
 80025d2:	6199      	str	r1, [r3, #24]
  iqp->q_rdptr   = bp;
 80025d4:	6259      	str	r1, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80025d6:	6219      	str	r1, [r3, #32]
  iqp->q_top     = bp + size;
 80025d8:	61da      	str	r2, [r3, #28]
  oqp->q_buffer  = bp;
 80025da:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80025dc:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
}
 80025e0:	bcf0      	pop	{r4, r5, r6, r7}
 80025e2:	4770      	bx	lr
 80025e4:	20000c48 	.word	0x20000c48
 80025e8:	08002810 	.word	0x08002810
 80025ec:	08001361 	.word	0x08001361

080025f0 <ram_areas>:
 80025f0:	08002868 20000e20 20000e20 20000e20     h(.. ..  ..  .. 
 8002600:	08002868 00000000 00000000 00000000     h(..............
 8002610:	08002868 00000000 00000000 00000000     h(..............
 8002620:	08002868 00000000 00000000 00000000     h(..............
 8002630:	08002868 00000000 00000000 00000000     h(..............
 8002640:	08002868 00000000 00000000 00000000     h(..............
 8002650:	08002868 00000000 00000000 00000000     h(..............
 8002660:	08002868 00000000 00000000 00000000     h(..............

08002670 <_stm32_dma_streams>:
 8002670:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8002680:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8002690:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 80026a0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 80026b0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 80026c0:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 80026d0:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 80026e0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 80026f0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8002700:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8002710:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8002720:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08002730 <ch_debug>:
 8002730:	6e69616d 18811600 08440204 1814100c     main......D.....
 8002740:	1e1d1c00 00000000 00000000 00000000     ................

08002750 <icucfgA>:
 8002750:	00000000 000f4240 08001ee1 00000000     ....@B..........
	...

08002770 <icucfgB>:
 8002770:	00000000 000f4240 00000000 08001ee1     ....@B..........
 8002780:	00000000 00000001 00000000 00000000     ................

08002790 <icucfgC>:
 8002790:	00000000 000f4240 00000000 08001ee1     ....@B..........
	...
 80027b0:	656c6469 00000000 00000000 00000000     idle............
 80027c0:	00206425 00000d0a 00000000 00000000     %d .............
 80027d0:	6c756e28 0000296c 00000000 00000000     (null)..........

080027e0 <line_sensors_cfg1>:
 80027e0:	00010000 00000000 00000000 00000000     ................
 80027f0:	40000000 00000000 00000000 00000000     ...@............
 8002800:	0c000000 00000000 00000000 00000000     ................

08002810 <vmt>:
 8002810:	08000ec1 08000fe1 08000f41 08001051     ........A...Q...
 8002820:	08000f31 08001041 08000eb1 08000fd1     1...A...........
