
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4823      	ldr	r0, [pc, #140]	; (8000250 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f001 fa05 	bl	80015e0 <__core_init>
 80001d6:	f000 fbcb 	bl	8000970 <__early_init>
 80001da:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001de:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xa>)
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <endfiniloop+0xe>)

080001e2 <msloop>:
 80001e2:	4291      	cmp	r1, r2
 80001e4:	bf3c      	itt	cc
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ea:	e7fa      	bcc.n	80001e2 <msloop>
 80001ec:	491b      	ldr	r1, [pc, #108]	; (800025c <endfiniloop+0x12>)
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <endfiniloop+0x6>)

080001f0 <psloop>:
 80001f0:	4291      	cmp	r1, r2
 80001f2:	bf3c      	itt	cc
 80001f4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f8:	e7fa      	bcc.n	80001f0 <psloop>
 80001fa:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x16>)
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <endfiniloop+0x1a>)
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x1e>)

08000200 <dloop>:
 8000200:	429a      	cmp	r2, r3
 8000202:	bf3e      	ittt	cc
 8000204:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000208:	f842 0b04 	strcc.w	r0, [r2], #4
 800020c:	e7f8      	bcc.n	8000200 <dloop>
 800020e:	2000      	movs	r0, #0
 8000210:	4916      	ldr	r1, [pc, #88]	; (800026c <endfiniloop+0x22>)
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x26>)

08000214 <bloop>:
 8000214:	4291      	cmp	r1, r2
 8000216:	bf3c      	itt	cc
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
 800021c:	e7fa      	bcc.n	8000214 <bloop>
 800021e:	f001 f997 	bl	8001550 <__init_ram_areas>
 8000222:	f001 f9d5 	bl	80015d0 <__late_init>
 8000226:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2a>)
 8000228:	4d13      	ldr	r5, [pc, #76]	; (8000278 <endfiniloop+0x2e>)

0800022a <initloop>:
 800022a:	42ac      	cmp	r4, r5
 800022c:	da03      	bge.n	8000236 <endinitloop>
 800022e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000232:	4788      	blx	r1
 8000234:	e7f9      	b.n	800022a <initloop>

08000236 <endinitloop>:
 8000236:	f001 f9db 	bl	80015f0 <main>
 800023a:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x32>)
 800023c:	4d10      	ldr	r5, [pc, #64]	; (8000280 <endfiniloop+0x36>)

0800023e <finiloop>:
 800023e:	42ac      	cmp	r4, r5
 8000240:	da03      	bge.n	800024a <endfiniloop>
 8000242:	f854 1b04 	ldr.w	r1, [r4], #4
 8000246:	4788      	blx	r1
 8000248:	e7f9      	b.n	800023e <finiloop>

0800024a <endfiniloop>:
 800024a:	f001 b9b9 	b.w	80015c0 <__default_exit>
 800024e:	0000      	.short	0x0000
 8000250:	20000800 	.word	0x20000800
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	080027e0 	.word	0x080027e0
 8000264:	20000800 	.word	0x20000800
 8000268:	20000838 	.word	0x20000838
 800026c:	20000838 	.word	0x20000838
 8000270:	20000ba0 	.word	0x20000ba0
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 ff38 	bl	8001120 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f000 fd3e 	bl	8000d30 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <notify1.lto_priv.35>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 80002c0:	4a02      	ldr	r2, [pc, #8]	; (80002cc <notify1.lto_priv.35+0xc>)
 80002c2:	68d3      	ldr	r3, [r2, #12]
 80002c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c8:	60d3      	str	r3, [r2, #12]
 80002ca:	4770      	bx	lr
 80002cc:	40011000 	.word	0x40011000

080002d0 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 80002d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 80002d2:	68c3      	ldr	r3, [r0, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 80002d4:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
 80002d6:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80002d8:	68da      	ldr	r2, [r3, #12]
 80002da:	4014      	ands	r4, r2
 80002dc:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 80002de:	43d2      	mvns	r2, r2
 80002e0:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80002e2:	7d0b      	ldrb	r3, [r1, #20]
void icu_lld_serve_interrupt(ICUDriver *icup) {
 80002e4:	4605      	mov	r5, r0
  if (icup->config->channel == ICU_CHANNEL_1) {
 80002e6:	b94b      	cbnz	r3, 80002fc <icu_lld_serve_interrupt+0x2c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80002e8:	0763      	lsls	r3, r4, #29
 80002ea:	d52b      	bpl.n	8000344 <icu_lld_serve_interrupt+0x74>
      _icu_isr_invoke_width_cb(icup);
 80002ec:	7803      	ldrb	r3, [r0, #0]
 80002ee:	2b04      	cmp	r3, #4
 80002f0:	d025      	beq.n	800033e <icu_lld_serve_interrupt+0x6e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80002f2:	07a1      	lsls	r1, r4, #30
 80002f4:	d409      	bmi.n	800030a <icu_lld_serve_interrupt+0x3a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80002f6:	07e4      	lsls	r4, r4, #31
 80002f8:	d40b      	bmi.n	8000312 <icu_lld_serve_interrupt+0x42>
 80002fa:	bd38      	pop	{r3, r4, r5, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80002fc:	07a2      	lsls	r2, r4, #30
 80002fe:	d512      	bpl.n	8000326 <icu_lld_serve_interrupt+0x56>
      _icu_isr_invoke_width_cb(icup);
 8000300:	7803      	ldrb	r3, [r0, #0]
 8000302:	2b04      	cmp	r3, #4
 8000304:	d00c      	beq.n	8000320 <icu_lld_serve_interrupt+0x50>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000306:	0763      	lsls	r3, r4, #29
 8000308:	d5f5      	bpl.n	80002f6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 800030a:	2304      	movs	r3, #4
  if ((sr & STM32_TIM_SR_UIF) != 0)
 800030c:	07e4      	lsls	r4, r4, #31
      _icu_isr_invoke_period_cb(icup);
 800030e:	702b      	strb	r3, [r5, #0]
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8000310:	d5f3      	bpl.n	80002fa <icu_lld_serve_interrupt+0x2a>
    _icu_isr_invoke_overflow_cb(icup);
 8000312:	686b      	ldr	r3, [r5, #4]
 8000314:	4628      	mov	r0, r5
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	4798      	blx	r3
 800031a:	2303      	movs	r3, #3
 800031c:	702b      	strb	r3, [r5, #0]
 800031e:	bd38      	pop	{r3, r4, r5, pc}
      _icu_isr_invoke_width_cb(icup);
 8000320:	688b      	ldr	r3, [r1, #8]
 8000322:	b1c3      	cbz	r3, 8000356 <icu_lld_serve_interrupt+0x86>
 8000324:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000326:	0763      	lsls	r3, r4, #29
 8000328:	d5e5      	bpl.n	80002f6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 800032a:	782b      	ldrb	r3, [r5, #0]
 800032c:	2b04      	cmp	r3, #4
 800032e:	d1ec      	bne.n	800030a <icu_lld_serve_interrupt+0x3a>
 8000330:	6869      	ldr	r1, [r5, #4]
 8000332:	68cb      	ldr	r3, [r1, #12]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <icu_lld_serve_interrupt+0x3a>
 8000338:	4628      	mov	r0, r5
 800033a:	4798      	blx	r3
 800033c:	e7e5      	b.n	800030a <icu_lld_serve_interrupt+0x3a>
      _icu_isr_invoke_width_cb(icup);
 800033e:	688b      	ldr	r3, [r1, #8]
 8000340:	b133      	cbz	r3, 8000350 <icu_lld_serve_interrupt+0x80>
 8000342:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000344:	07a1      	lsls	r1, r4, #30
 8000346:	d5d6      	bpl.n	80002f6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8000348:	782b      	ldrb	r3, [r5, #0]
 800034a:	2b04      	cmp	r3, #4
 800034c:	d1dd      	bne.n	800030a <icu_lld_serve_interrupt+0x3a>
 800034e:	e7ef      	b.n	8000330 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000350:	07a0      	lsls	r0, r4, #30
 8000352:	d4ee      	bmi.n	8000332 <icu_lld_serve_interrupt+0x62>
 8000354:	e7cf      	b.n	80002f6 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000356:	0762      	lsls	r2, r4, #29
 8000358:	d4eb      	bmi.n	8000332 <icu_lld_serve_interrupt+0x62>
 800035a:	e7cc      	b.n	80002f6 <icu_lld_serve_interrupt+0x26>
 800035c:	0000      	movs	r0, r0
	...

08000360 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000360:	2320      	movs	r3, #32
 8000362:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <_port_irq_epilogue+0x4c>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800036e:	d102      	bne.n	8000376 <_port_irq_epilogue+0x16>
 8000370:	f383 8811 	msr	BASEPRI, r3
 8000374:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800037a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800037e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000382:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8000386:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800038a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800038e:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <_port_irq_epilogue+0x50>)
 8000390:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000392:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000394:	6889      	ldr	r1, [r1, #8]
 8000396:	6892      	ldr	r2, [r2, #8]
 8000398:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800039a:	bf8c      	ite	hi
 800039c:	4a05      	ldrhi	r2, [pc, #20]	; (80003b4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800039e:	4a06      	ldrls	r2, [pc, #24]	; (80003b8 <_port_irq_epilogue+0x58>)
 80003a0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	20000870 	.word	0x20000870
 80003b4:	080002b1 	.word	0x080002b1
 80003b8:	080002b4 	.word	0x080002b4
 80003bc:	00000000 	.word	0x00000000

080003c0 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 80003c0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80003c2:	4d17      	ldr	r5, [pc, #92]	; (8000420 <VectorA4+0x60>)
 80003c4:	69ab      	ldr	r3, [r5, #24]
 80003c6:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80003c8:	68da      	ldr	r2, [r3, #12]
 80003ca:	4014      	ands	r4, r2
 80003cc:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80003ce:	43d2      	mvns	r2, r2
 80003d0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80003d2:	07a3      	lsls	r3, r4, #30
 80003d4:	d504      	bpl.n	80003e0 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80003d6:	686b      	ldr	r3, [r5, #4]
 80003d8:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80003da:	b10b      	cbz	r3, 80003e0 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 80003dc:	4628      	mov	r0, r5
 80003de:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80003e0:	0760      	lsls	r0, r4, #29
 80003e2:	d504      	bpl.n	80003ee <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80003e4:	686b      	ldr	r3, [r5, #4]
 80003e6:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80003e8:	b10b      	cbz	r3, 80003ee <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 80003ea:	480d      	ldr	r0, [pc, #52]	; (8000420 <VectorA4+0x60>)
 80003ec:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80003ee:	0721      	lsls	r1, r4, #28
 80003f0:	d504      	bpl.n	80003fc <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 80003f2:	686b      	ldr	r3, [r5, #4]
 80003f4:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80003f6:	b10b      	cbz	r3, 80003fc <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 80003f8:	4809      	ldr	r0, [pc, #36]	; (8000420 <VectorA4+0x60>)
 80003fa:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80003fc:	06e2      	lsls	r2, r4, #27
 80003fe:	d504      	bpl.n	800040a <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8000400:	686b      	ldr	r3, [r5, #4]
 8000402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000404:	b10b      	cbz	r3, 800040a <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <VectorA4+0x60>)
 8000408:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800040a:	07e3      	lsls	r3, r4, #31
 800040c:	d504      	bpl.n	8000418 <VectorA4+0x58>
 800040e:	686b      	ldr	r3, [r5, #4]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	b10b      	cbz	r3, 8000418 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 8000414:	4802      	ldr	r0, [pc, #8]	; (8000420 <VectorA4+0x60>)
 8000416:	4798      	blx	r3
}
 8000418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800041c:	f7ff bfa0 	b.w	8000360 <_port_irq_epilogue>
 8000420:	20000ab4 	.word	0x20000ab4
	...

08000430 <VectorAC>:
 8000430:	f7ff bfc6 	b.w	80003c0 <VectorA4>
	...

08000440 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8000440:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD5);
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <Vector108+0x10>)
 8000444:	f7ff ff44 	bl	80002d0 <icu_lld_serve_interrupt>
}
 8000448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800044c:	f7ff bf88 	b.w	8000360 <_port_irq_epilogue>
 8000450:	20000a9c 	.word	0x20000a9c
	...

08000460 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8000460:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD3);
 8000462:	4803      	ldr	r0, [pc, #12]	; (8000470 <VectorB4+0x10>)
 8000464:	f7ff ff34 	bl	80002d0 <icu_lld_serve_interrupt>
}
 8000468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800046c:	f7ff bf78 	b.w	8000360 <_port_irq_epilogue>
 8000470:	20000a84 	.word	0x20000a84
	...

08000480 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8000480:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD2);
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <VectorB0+0x10>)
 8000484:	f7ff ff24 	bl	80002d0 <icu_lld_serve_interrupt>
}
 8000488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800048c:	f7ff bf68 	b.w	8000360 <_port_irq_epilogue>
 8000490:	20000a6c 	.word	0x20000a6c
	...

080004a0 <VectorB8>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80004a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80004a4:	4c25      	ldr	r4, [pc, #148]	; (800053c <VectorB8+0x9c>)
 80004a6:	6923      	ldr	r3, [r4, #16]
 80004a8:	079b      	lsls	r3, r3, #30
 80004aa:	d403      	bmi.n	80004b4 <VectorB8+0x14>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80004ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80004b0:	f7ff bf56 	b.w	8000360 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 80004b4:	2700      	movs	r7, #0
 80004b6:	6127      	str	r7, [r4, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004b8:	2520      	movs	r5, #32
 80004ba:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80004be:	4e20      	ldr	r6, [pc, #128]	; (8000540 <VectorB8+0xa0>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80004c0:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80004c2:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
  vtp = ch.vtlist.vt_next;
 80004c6:	69f3      	ldr	r3, [r6, #28]
 80004c8:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80004ca:	eba0 010e 	sub.w	r1, r0, lr
 80004ce:	891a      	ldrh	r2, [r3, #8]
 80004d0:	b289      	uxth	r1, r1
 80004d2:	4291      	cmp	r1, r2
 80004d4:	f106 081c 	add.w	r8, r6, #28
 80004d8:	d31c      	bcc.n	8000514 <VectorB8+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004da:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80004dc:	f8d3 900c 	ldr.w	r9, [r3, #12]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80004e0:	4472      	add	r2, lr
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004e2:	4541      	cmp	r1, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80004e4:	84f2      	strh	r2, [r6, #38]	; 0x26
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004e6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80004ea:	61f1      	str	r1, [r6, #28]
    vtp->vt_func = NULL;
 80004ec:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80004ee:	bf08      	it	eq
 80004f0:	60e7      	streq	r7, [r4, #12]
 80004f2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80004f6:	6918      	ldr	r0, [r3, #16]
 80004f8:	47c8      	blx	r9
 80004fa:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 80004fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000500:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000504:	69f3      	ldr	r3, [r6, #28]
 8000506:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000508:	eba0 010e 	sub.w	r1, r0, lr
 800050c:	891a      	ldrh	r2, [r3, #8]
 800050e:	b289      	uxth	r1, r1
 8000510:	428a      	cmp	r2, r1
 8000512:	d9e2      	bls.n	80004da <VectorB8+0x3a>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000514:	4543      	cmp	r3, r8
 8000516:	d009      	beq.n	800052c <VectorB8+0x8c>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000518:	4472      	add	r2, lr
 800051a:	1a12      	subs	r2, r2, r0
 800051c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 800051e:	2a02      	cmp	r2, #2
 8000520:	bf2c      	ite	cs
 8000522:	1882      	addcs	r2, r0, r2
 8000524:	1c82      	addcc	r2, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <VectorB8+0x9c>)
 8000528:	b292      	uxth	r2, r2
 800052a:	635a      	str	r2, [r3, #52]	; 0x34
 800052c:	2300      	movs	r3, #0
 800052e:	f383 8811 	msr	BASEPRI, r3
}
 8000532:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000536:	f7ff bf13 	b.w	8000360 <_port_irq_epilogue>
 800053a:	bf00      	nop
 800053c:	40000800 	.word	0x40000800
 8000540:	20000870 	.word	0x20000870
	...

08000550 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000554:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8000556:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000558:	0d89      	lsrs	r1, r1, #22
 800055a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800055e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8000560:	058c      	lsls	r4, r1, #22
 8000562:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8000564:	b10a      	cbz	r2, 800056a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8000566:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8000568:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800056a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800056e:	f7ff bef7 	b.w	8000360 <_port_irq_epilogue>
 8000572:	bf00      	nop
 8000574:	40026400 	.word	0x40026400
 8000578:	200009e0 	.word	0x200009e0
 800057c:	00000000 	.word	0x00000000

08000580 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
 8000582:	4809      	ldr	r0, [pc, #36]	; (80005a8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000584:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8000586:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000588:	0c09      	lsrs	r1, r1, #16
 800058a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800058e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8000590:	040c      	lsls	r4, r1, #16
 8000592:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8000594:	b10a      	cbz	r2, 800059a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8000596:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8000598:	4790      	blx	r2
}
 800059a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800059e:	f7ff bedf 	b.w	8000360 <_port_irq_epilogue>
 80005a2:	bf00      	nop
 80005a4:	40026400 	.word	0x40026400
 80005a8:	200009e0 	.word	0x200009e0
 80005ac:	00000000 	.word	0x00000000

080005b0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80005b4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 80005b6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80005b8:	0989      	lsrs	r1, r1, #6
 80005ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80005be:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80005c0:	018c      	lsls	r4, r1, #6
 80005c2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 80005c4:	b10a      	cbz	r2, 80005ca <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 80005c6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80005c8:	4790      	blx	r2
}
 80005ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80005ce:	f7ff bec7 	b.w	8000360 <_port_irq_epilogue>
 80005d2:	bf00      	nop
 80005d4:	40026400 	.word	0x40026400
 80005d8:	200009e0 	.word	0x200009e0
 80005dc:	00000000 	.word	0x00000000

080005e0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80005e0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80005e6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 80005e8:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80005ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80005ee:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 80005f0:	b10a      	cbz	r2, 80005f6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 80005f2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80005f4:	4790      	blx	r2
}
 80005f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80005fa:	f7ff beb1 	b.w	8000360 <_port_irq_epilogue>
 80005fe:	bf00      	nop
 8000600:	40026400 	.word	0x40026400
 8000604:	200009e0 	.word	0x200009e0
	...

08000610 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000614:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8000616:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000618:	0d89      	lsrs	r1, r1, #22
 800061a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800061e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8000620:	058c      	lsls	r4, r1, #22
 8000622:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8000624:	b10a      	cbz	r2, 800062a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8000626:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8000628:	4790      	blx	r2
}
 800062a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800062e:	f7ff be97 	b.w	8000360 <_port_irq_epilogue>
 8000632:	bf00      	nop
 8000634:	40026400 	.word	0x40026400
 8000638:	200009e0 	.word	0x200009e0
 800063c:	00000000 	.word	0x00000000

08000640 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000644:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 8000646:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000648:	0c09      	lsrs	r1, r1, #16
 800064a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800064e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8000650:	040c      	lsls	r4, r1, #16
 8000652:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8000654:	b10a      	cbz	r2, 800065a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8000656:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8000658:	4790      	blx	r2
}
 800065a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800065e:	f7ff be7f 	b.w	8000360 <_port_irq_epilogue>
 8000662:	bf00      	nop
 8000664:	40026400 	.word	0x40026400
 8000668:	200009e0 	.word	0x200009e0
 800066c:	00000000 	.word	0x00000000

08000670 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000674:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 8000676:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000678:	0989      	lsrs	r1, r1, #6
 800067a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800067e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8000680:	018c      	lsls	r4, r1, #6
 8000682:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8000684:	b10a      	cbz	r2, 800068a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8000686:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8000688:	4790      	blx	r2
}
 800068a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800068e:	f7ff be67 	b.w	8000360 <_port_irq_epilogue>
 8000692:	bf00      	nop
 8000694:	40026400 	.word	0x40026400
 8000698:	200009e0 	.word	0x200009e0
 800069c:	00000000 	.word	0x00000000

080006a0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80006a0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
 80006a4:	4807      	ldr	r0, [pc, #28]	; (80006c4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80006a6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 80006a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80006aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80006ae:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 80006b0:	b10a      	cbz	r2, 80006b6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80006b2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80006b4:	4790      	blx	r2
}
 80006b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80006ba:	f7ff be51 	b.w	8000360 <_port_irq_epilogue>
 80006be:	bf00      	nop
 80006c0:	40026400 	.word	0x40026400
 80006c4:	200009e0 	.word	0x200009e0
	...

080006d0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80006d4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 80006d6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80006d8:	0d89      	lsrs	r1, r1, #22
 80006da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80006de:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 80006e0:	058c      	lsls	r4, r1, #22
 80006e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80006e4:	b10a      	cbz	r2, 80006ea <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80006e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80006e8:	4790      	blx	r2
}
 80006ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80006ee:	f7ff be37 	b.w	8000360 <_port_irq_epilogue>
 80006f2:	bf00      	nop
 80006f4:	40026000 	.word	0x40026000
 80006f8:	200009e0 	.word	0x200009e0
 80006fc:	00000000 	.word	0x00000000

08000700 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000704:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8000706:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000708:	0c09      	lsrs	r1, r1, #16
 800070a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800070e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8000710:	040c      	lsls	r4, r1, #16
 8000712:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8000714:	b10a      	cbz	r2, 800071a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000716:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000718:	4790      	blx	r2
}
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800071e:	f7ff be1f 	b.w	8000360 <_port_irq_epilogue>
 8000722:	bf00      	nop
 8000724:	40026000 	.word	0x40026000
 8000728:	200009e0 	.word	0x200009e0
 800072c:	00000000 	.word	0x00000000

08000730 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000734:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8000736:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000738:	0989      	lsrs	r1, r1, #6
 800073a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800073e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8000740:	018c      	lsls	r4, r1, #6
 8000742:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8000744:	b10a      	cbz	r2, 800074a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000746:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000748:	4790      	blx	r2
}
 800074a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800074e:	f7ff be07 	b.w	8000360 <_port_irq_epilogue>
 8000752:	bf00      	nop
 8000754:	40026000 	.word	0x40026000
 8000758:	200009e0 	.word	0x200009e0
 800075c:	00000000 	.word	0x00000000

08000760 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000760:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000766:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8000768:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800076a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800076e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8000770:	b10a      	cbz	r2, 8000776 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8000772:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000774:	4790      	blx	r2
}
 8000776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800077a:	f7ff bdf1 	b.w	8000360 <_port_irq_epilogue>
 800077e:	bf00      	nop
 8000780:	40026000 	.word	0x40026000
 8000784:	200009e0 	.word	0x200009e0
	...

08000790 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
 8000792:	4809      	ldr	r0, [pc, #36]	; (80007b8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000794:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 8000796:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000798:	0d89      	lsrs	r1, r1, #22
 800079a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800079e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 80007a0:	058c      	lsls	r4, r1, #22
 80007a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80007a4:	b10a      	cbz	r2, 80007aa <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80007a6:	69c0      	ldr	r0, [r0, #28]
 80007a8:	4790      	blx	r2
}
 80007aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80007ae:	f7ff bdd7 	b.w	8000360 <_port_irq_epilogue>
 80007b2:	bf00      	nop
 80007b4:	40026000 	.word	0x40026000
 80007b8:	200009e0 	.word	0x200009e0
 80007bc:	00000000 	.word	0x00000000

080007c0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80007c4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 80007c6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80007c8:	0c09      	lsrs	r1, r1, #16
 80007ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80007ce:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80007d0:	040c      	lsls	r4, r1, #16
 80007d2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80007d4:	b10a      	cbz	r2, 80007da <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80007d6:	6940      	ldr	r0, [r0, #20]
 80007d8:	4790      	blx	r2
}
 80007da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80007de:	f7ff bdbf 	b.w	8000360 <_port_irq_epilogue>
 80007e2:	bf00      	nop
 80007e4:	40026000 	.word	0x40026000
 80007e8:	200009e0 	.word	0x200009e0
 80007ec:	00000000 	.word	0x00000000

080007f0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80007f4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 80007f6:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80007f8:	0989      	lsrs	r1, r1, #6
 80007fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80007fe:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8000800:	018c      	lsls	r4, r1, #6
 8000802:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8000804:	b10a      	cbz	r2, 800080a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8000806:	68c0      	ldr	r0, [r0, #12]
 8000808:	4790      	blx	r2
}
 800080a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800080e:	f7ff bda7 	b.w	8000360 <_port_irq_epilogue>
 8000812:	bf00      	nop
 8000814:	40026000 	.word	0x40026000
 8000818:	200009e0 	.word	0x200009e0
 800081c:	00000000 	.word	0x00000000

08000820 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8000820:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800082c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800082e:	6813      	ldr	r3, [r2, #0]
 8000830:	b10b      	cbz	r3, 8000836 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8000832:	6850      	ldr	r0, [r2, #4]
 8000834:	4798      	blx	r3
}
 8000836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800083a:	f7ff bd91 	b.w	8000360 <_port_irq_epilogue>
 800083e:	bf00      	nop
 8000840:	40026000 	.word	0x40026000
 8000844:	200009e0 	.word	0x200009e0
	...

08000850 <SVC_Handler>:
void SVC_Handler(void) {
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000854:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8000858:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800085a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800085e:	2300      	movs	r3, #0
 8000860:	f383 8811 	msr	BASEPRI, r3
}
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	0000      	movs	r0, r0
	...

08000870 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000870:	b410      	push	{r4}
 8000872:	2320      	movs	r3, #32
 8000874:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000878:	4c09      	ldr	r4, [pc, #36]	; (80008a0 <chCoreAlloc+0x30>)
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <chCoreAlloc+0x34>)
 800087c:	6822      	ldr	r2, [r4, #0]
 800087e:	6819      	ldr	r1, [r3, #0]
  size = MEM_ALIGN_NEXT(size);
 8000880:	1dc3      	adds	r3, r0, #7
 8000882:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000886:	1a89      	subs	r1, r1, r2
 8000888:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800088a:	bf9d      	ittte	ls
 800088c:	189b      	addls	r3, r3, r2
 800088e:	6023      	strls	r3, [r4, #0]

  return p;
 8000890:	4610      	movls	r0, r2
    return NULL;
 8000892:	2000      	movhi	r0, #0
 8000894:	2300      	movs	r3, #0
 8000896:	f383 8811 	msr	BASEPRI, r3
}
 800089a:	bc10      	pop	{r4}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000a68 	.word	0x20000a68
 80008a4:	20000a64 	.word	0x20000a64
	...

080008b0 <wakeup>:
 80008b0:	2320      	movs	r3, #32
 80008b2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->p_state) {
 80008b6:	7f03      	ldrb	r3, [r0, #28]
 80008b8:	2b07      	cmp	r3, #7
 80008ba:	d80e      	bhi.n	80008da <wakeup+0x2a>
 80008bc:	e8df f003 	tbb	[pc, r3]
 80008c0:	230d0d27 	.word	0x230d0d27
 80008c4:	080d0408 	.word	0x080d0408
    chSemFastSignalI(tp->p_u.wtsemp);
 80008c8:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80008ca:	6893      	ldr	r3, [r2, #8]
 80008cc:	3301      	adds	r3, #1
 80008ce:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80008d0:	e890 000c 	ldmia.w	r0, {r2, r3}
 80008d4:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80008d6:	6802      	ldr	r2, [r0, #0]
 80008d8:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 80008da:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 80008dc:	2200      	movs	r2, #0
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80008de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80008e2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <wakeup+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80008e6:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 80008e8:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 80008ea:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	428a      	cmp	r2, r1
 80008f0:	d2fb      	bcs.n	80008ea <wakeup+0x3a>
  tp->p_prev = cp->p_prev;
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	6042      	str	r2, [r0, #4]
  tp->p_next = cp;
 80008f6:	6003      	str	r3, [r0, #0]
 80008f8:	2100      	movs	r1, #0
  tp->p_prev->p_next = tp;
 80008fa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80008fc:	6058      	str	r0, [r3, #4]
 80008fe:	f381 8811 	msr	BASEPRI, r1
}
 8000902:	bc10      	pop	{r4}
 8000904:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 8000906:	6a03      	ldr	r3, [r0, #32]
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e7e5      	b.n	80008da <wakeup+0x2a>
 800090e:	2300      	movs	r3, #0
 8000910:	f383 8811 	msr	BASEPRI, r3
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000870 	.word	0x20000870
 800091c:	00000000 	.word	0x00000000

08000920 <_idle_thread.lto_priv.45>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000920:	e7fe      	b.n	8000920 <_idle_thread.lto_priv.45>
 8000922:	bf00      	nop
	...

08000930 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8000930:	e7fe      	b.n	8000930 <BusFault_Handler>
 8000932:	bf00      	nop
	...

08000940 <chSchGoSleepS>:
  otp = currp;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <chSchGoSleepS+0x20>)
 8000942:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8000944:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000946:	b410      	push	{r4}
  otp->p_state = newstate;
 8000948:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 800094a:	6810      	ldr	r0, [r2, #0]
 800094c:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 800094e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000950:	6043      	str	r3, [r0, #4]
 8000952:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000954:	4610      	mov	r0, r2
}
 8000956:	bc10      	pop	{r4}
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000958:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800095a:	f7ff bc99 	b.w	8000290 <_port_switch>
 800095e:	bf00      	nop
 8000960:	20000870 	.word	0x20000870
	...

08000970 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000970:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <__early_init+0x9c>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <__early_init+0xa0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000974:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8000978:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800097c:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800097e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000988:	6813      	ldr	r3, [r2, #0]
 800098a:	0798      	lsls	r0, r3, #30
 800098c:	d5fc      	bpl.n	8000988 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800098e:	6893      	ldr	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000990:	491e      	ldr	r1, [pc, #120]	; (8000a0c <__early_init+0x9c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000992:	f023 0303 	bic.w	r3, r3, #3
 8000996:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000998:	6893      	ldr	r3, [r2, #8]
 800099a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800099c:	688b      	ldr	r3, [r1, #8]
 800099e:	f013 030c 	ands.w	r3, r3, #12
 80009a2:	d1fb      	bne.n	800099c <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80009a4:	6808      	ldr	r0, [r1, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80009a6:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <__early_init+0x9c>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80009a8:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80009ac:	6008      	str	r0, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80009ae:	608b      	str	r3, [r1, #8]
  RCC->CSR |= RCC_CSR_LSION;
 80009b0:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80009b8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80009ba:	0799      	lsls	r1, r3, #30
 80009bc:	d5fc      	bpl.n	80009b8 <__early_init+0x48>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <__early_init+0xa4>)
 80009c0:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80009c2:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80009c4:	4912      	ldr	r1, [pc, #72]	; (8000a10 <__early_init+0xa0>)
  RCC->CR |= RCC_CR_PLLON;
 80009c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ca:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80009cc:	684b      	ldr	r3, [r1, #4]
 80009ce:	045a      	lsls	r2, r3, #17
 80009d0:	d5fc      	bpl.n	80009cc <__early_init+0x5c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <__early_init+0x9c>)
 80009d4:	680b      	ldr	r3, [r1, #0]
 80009d6:	019b      	lsls	r3, r3, #6
 80009d8:	d5fc      	bpl.n	80009d4 <__early_init+0x64>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <__early_init+0xa8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <__early_init+0xac>)
 80009de:	608a      	str	r2, [r1, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80009e0:	f240 7203 	movw	r2, #1795	; 0x703
 80009e4:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80009e6:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <__early_init+0x9c>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80009f0:	6893      	ldr	r3, [r2, #8]
 80009f2:	f003 030c 	and.w	r3, r3, #12
 80009f6:	2b08      	cmp	r3, #8
 80009f8:	d1fa      	bne.n	80009f0 <__early_init+0x80>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80009fa:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6653      	str	r3, [r2, #100]	; 0x64
 8000a0a:	4770      	bx	lr
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000
 8000a14:	08016010 	.word	0x08016010
 8000a18:	40023c00 	.word	0x40023c00
 8000a1c:	38881000 	.word	0x38881000

08000a20 <icu_lld_enable_notifications>:
  uint32_t dier = icup->tim->DIER;
 8000a20:	68c2      	ldr	r2, [r0, #12]
 8000a22:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
 8000a24:	b410      	push	{r4}
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8000a26:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000a2a:	d10c      	bne.n	8000a46 <icu_lld_enable_notifications+0x26>
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000a2c:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
 8000a2e:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000a30:	7d08      	ldrb	r0, [r1, #20]
 8000a32:	b150      	cbz	r0, 8000a4a <icu_lld_enable_notifications+0x2a>
      if (icup->config->width_cb != NULL)
 8000a34:	6888      	ldr	r0, [r1, #8]
 8000a36:	b170      	cbz	r0, 8000a56 <icu_lld_enable_notifications+0x36>
        dier |= STM32_TIM_DIER_CC1IE;
 8000a38:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
 8000a3c:	6909      	ldr	r1, [r1, #16]
 8000a3e:	b109      	cbz	r1, 8000a44 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8000a40:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
 8000a44:	60d3      	str	r3, [r2, #12]
}
 8000a46:	bc10      	pop	{r4}
 8000a48:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 8000a4a:	6888      	ldr	r0, [r1, #8]
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d1f3      	bne.n	8000a38 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC1IE;
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	e7f2      	b.n	8000a3c <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC2IE;
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	e7ef      	b.n	8000a3c <icu_lld_enable_notifications+0x1c>
 8000a5c:	0000      	movs	r0, r0
	...

08000a60 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
 8000a60:	7803      	ldrb	r3, [r0, #0]
 8000a62:	2b01      	cmp	r3, #1
void icu_lld_start(ICUDriver *icup) {
 8000a64:	b4f0      	push	{r4, r5, r6, r7}
  if (icup->state == ICU_STOP) {
 8000a66:	d03c      	beq.n	8000ae2 <icu_lld_start+0x82>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 8000a68:	68c3      	ldr	r3, [r0, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000a74:	6841      	ldr	r1, [r0, #4]
  psc = (icup->clock / icup->config->frequency) - 1;
 8000a76:	6882      	ldr	r2, [r0, #8]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000a78:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
 8000a7a:	684d      	ldr	r5, [r1, #4]
 8000a7c:	fbb2 f2f5 	udiv	r2, r2, r5
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000a80:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
 8000a84:	3a01      	subs	r2, #1
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8000a86:	2600      	movs	r6, #0
  icup->tim->ARR  = 0xFFFF;
 8000a88:	f64f 75ff 	movw	r5, #65535	; 0xffff
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8000a8c:	611e      	str	r6, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8000a8e:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 8000a92:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000a94:	7d0a      	ldrb	r2, [r1, #20]
 8000a96:	b972      	cbnz	r2, 8000ab6 <icu_lld_start+0x56>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8000a98:	2254      	movs	r2, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8000a9a:	f240 2401 	movw	r4, #513	; 0x201
 8000a9e:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8000aa0:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8000aa2:	780a      	ldrb	r2, [r1, #0]
 8000aa4:	b1d2      	cbz	r2, 8000adc <icu_lld_start+0x7c>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8000aa6:	2213      	movs	r2, #19
 8000aa8:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 8000aaa:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 8000aae:	3334      	adds	r3, #52	; 0x34
    icup->wccrp = &icup->tim->CCR[1];
 8000ab0:	6102      	str	r2, [r0, #16]
    icup->pccrp = &icup->tim->CCR[0];
 8000ab2:	6143      	str	r3, [r0, #20]
 8000ab4:	e00d      	b.n	8000ad2 <icu_lld_start+0x72>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8000ab6:	2264      	movs	r2, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8000ab8:	f44f 7481 	mov.w	r4, #258	; 0x102
 8000abc:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8000abe:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8000ac0:	780a      	ldrb	r2, [r1, #0]
 8000ac2:	b142      	cbz	r2, 8000ad6 <icu_lld_start+0x76>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8000ac4:	2231      	movs	r2, #49	; 0x31
 8000ac6:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 8000ac8:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 8000acc:	3338      	adds	r3, #56	; 0x38
    icup->wccrp = &icup->tim->CCR[0];
 8000ace:	6102      	str	r2, [r0, #16]
    icup->pccrp = &icup->tim->CCR[1];
 8000ad0:	6143      	str	r3, [r0, #20]
}
 8000ad2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ad4:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8000ad6:	2213      	movs	r2, #19
 8000ad8:	621a      	str	r2, [r3, #32]
 8000ada:	e7f5      	b.n	8000ac8 <icu_lld_start+0x68>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8000adc:	2231      	movs	r2, #49	; 0x31
 8000ade:	621a      	str	r2, [r3, #32]
 8000ae0:	e7e3      	b.n	8000aaa <icu_lld_start+0x4a>
    if (&ICUD2 == icup) {
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <icu_lld_start+0x124>)
 8000ae4:	4298      	cmp	r0, r3
 8000ae6:	d007      	beq.n	8000af8 <icu_lld_start+0x98>
    if (&ICUD3 == icup) {
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <icu_lld_start+0x128>)
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d01b      	beq.n	8000b26 <icu_lld_start+0xc6>
    if (&ICUD5 == icup) {
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <icu_lld_start+0x12c>)
 8000af0:	4298      	cmp	r0, r3
 8000af2:	d02f      	beq.n	8000b54 <icu_lld_start+0xf4>
 8000af4:	68c3      	ldr	r3, [r0, #12]
 8000af6:	e7bd      	b.n	8000a74 <icu_lld_start+0x14>
      rccEnableTIM2(FALSE);
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <icu_lld_start+0x130>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000afa:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <icu_lld_start+0x134>)
 8000afc:	6c19      	ldr	r1, [r3, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 8000afe:	4d26      	ldr	r5, [pc, #152]	; (8000b98 <icu_lld_start+0x138>)
      rccEnableTIM2(FALSE);
 8000b00:	f041 0101 	orr.w	r1, r1, #1
 8000b04:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM2();
 8000b06:	6a19      	ldr	r1, [r3, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b08:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	f041 0101 	orr.w	r1, r1, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b12:	2670      	movs	r6, #112	; 0x70
 8000b14:	6219      	str	r1, [r3, #32]
 8000b16:	621f      	str	r7, [r3, #32]
 8000b18:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b1c:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000b20:	6014      	str	r4, [r2, #0]
      icup->clock = STM32_TIMCLK1;
 8000b22:	6085      	str	r5, [r0, #8]
 8000b24:	e7e0      	b.n	8000ae8 <icu_lld_start+0x88>
      rccEnableTIM3(FALSE);
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <icu_lld_start+0x130>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b28:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <icu_lld_start+0x134>)
 8000b2a:	6c19      	ldr	r1, [r3, #64]	; 0x40
     icup->clock = STM32_TIMCLK1;
 8000b2c:	4d1a      	ldr	r5, [pc, #104]	; (8000b98 <icu_lld_start+0x138>)
      rccEnableTIM3(FALSE);
 8000b2e:	f041 0102 	orr.w	r1, r1, #2
 8000b32:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM3();
 8000b34:	6a19      	ldr	r1, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b36:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8000b3a:	2700      	movs	r7, #0
 8000b3c:	f041 0102 	orr.w	r1, r1, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b40:	2670      	movs	r6, #112	; 0x70
 8000b42:	6219      	str	r1, [r3, #32]
 8000b44:	621f      	str	r7, [r3, #32]
 8000b46:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b4a:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000b4e:	6014      	str	r4, [r2, #0]
     icup->clock = STM32_TIMCLK1;
 8000b50:	6085      	str	r5, [r0, #8]
 8000b52:	e7cc      	b.n	8000aee <icu_lld_start+0x8e>
      rccEnableTIM5(FALSE);
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <icu_lld_start+0x130>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <icu_lld_start+0x134>)
 8000b58:	6c19      	ldr	r1, [r3, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 8000b5a:	4c0f      	ldr	r4, [pc, #60]	; (8000b98 <icu_lld_start+0x138>)
      rccEnableTIM5(FALSE);
 8000b5c:	f041 0108 	orr.w	r1, r1, #8
 8000b60:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM5();
 8000b62:	6a19      	ldr	r1, [r3, #32]
 8000b64:	2600      	movs	r6, #0
 8000b66:	f041 0108 	orr.w	r1, r1, #8
 8000b6a:	2570      	movs	r5, #112	; 0x70
 8000b6c:	6219      	str	r1, [r3, #32]
 8000b6e:	621e      	str	r6, [r3, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b70:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000b74:	f882 5332 	strb.w	r5, [r2, #818]	; 0x332
 8000b78:	68c3      	ldr	r3, [r0, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000b7a:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000b7e:	6051      	str	r1, [r2, #4]
      icup->clock = STM32_TIMCLK1;
 8000b80:	6084      	str	r4, [r0, #8]
 8000b82:	e777      	b.n	8000a74 <icu_lld_start+0x14>
 8000b84:	20000a6c 	.word	0x20000a6c
 8000b88:	20000a84 	.word	0x20000a84
 8000b8c:	20000a9c 	.word	0x20000a9c
 8000b90:	40023800 	.word	0x40023800
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	05b8d800 	.word	0x05b8d800
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <icu_lld_init>:
void icu_lld_init(void) {
 8000ba0:	b470      	push	{r4, r5, r6}
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8000ba2:	480a      	ldr	r0, [pc, #40]	; (8000bcc <icu_lld_init+0x2c>)
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <icu_lld_init+0x30>)
 8000ba6:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <icu_lld_init+0x34>)
  ICUD3.tim = STM32_TIM3;
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <icu_lld_init+0x38>)
  ICUD5.tim = STM32_TIM5;
 8000baa:	4d0c      	ldr	r5, [pc, #48]	; (8000bdc <icu_lld_init+0x3c>)
  ICUD3.tim = STM32_TIM3;
 8000bac:	60c2      	str	r2, [r0, #12]
 8000bae:	2101      	movs	r1, #1
  icup->config = NULL;
 8000bb0:	2200      	movs	r2, #0
  ICUD2.tim = STM32_TIM2;
 8000bb2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  icup->state  = ICU_STOP;
 8000bb6:	7001      	strb	r1, [r0, #0]
 8000bb8:	7019      	strb	r1, [r3, #0]
 8000bba:	60e6      	str	r6, [r4, #12]
 8000bbc:	7021      	strb	r1, [r4, #0]
  icup->config = NULL;
 8000bbe:	6062      	str	r2, [r4, #4]
  ICUD5.tim = STM32_TIM5;
 8000bc0:	60dd      	str	r5, [r3, #12]
 8000bc2:	6042      	str	r2, [r0, #4]
 8000bc4:	605a      	str	r2, [r3, #4]
}
 8000bc6:	bc70      	pop	{r4, r5, r6}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000a84 	.word	0x20000a84
 8000bd0:	20000a9c 	.word	0x20000a9c
 8000bd4:	20000a6c 	.word	0x20000a6c
 8000bd8:	40000400 	.word	0x40000400
 8000bdc:	40000c00 	.word	0x40000c00

08000be0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000be4:	f002 0a03 	and.w	sl, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000be8:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000bec:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8000bf0:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000bf4:	46d1      	mov	r9, sl
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000bf6:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 8000bfa:	2700      	movs	r7, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000bfc:	f04f 0b0f 	mov.w	fp, #15
 8000c00:	e00f      	b.n	8000c22 <_pal_lld_setgroupmode+0x42>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000c02:	6a03      	ldr	r3, [r0, #32]
 8000c04:	ea23 0404 	bic.w	r4, r3, r4
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000c0c:	0849      	lsrs	r1, r1, #1
 8000c0e:	d039      	beq.n	8000c84 <_pal_lld_setgroupmode+0xa4>
      return;
    otyper <<= 1;
 8000c10:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 8000c14:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 8000c18:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 8000c1c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bit++;
 8000c20:	3701      	adds	r7, #1
    if ((mask & 1) != 0) {
 8000c22:	07cb      	lsls	r3, r1, #31
 8000c24:	d5f2      	bpl.n	8000c0c <_pal_lld_setgroupmode+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000c26:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000c28:	2401      	movs	r4, #1
 8000c2a:	40bc      	lsls	r4, r7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000c2c:	ea23 0304 	bic.w	r3, r3, r4
 8000c30:	ea43 0308 	orr.w	r3, r3, r8
 8000c34:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 8000c36:	2503      	movs	r5, #3
 8000c38:	007b      	lsls	r3, r7, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000c3a:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 8000c3c:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000c40:	43db      	mvns	r3, r3
 8000c42:	401c      	ands	r4, r3
 8000c44:	ea44 040c 	orr.w	r4, r4, ip
 8000c48:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c4a:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000c4c:	f007 0407 	and.w	r4, r7, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c50:	401d      	ands	r5, r3
 8000c52:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 8000c56:	00a4      	lsls	r4, r4, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000c58:	f1ba 0f02 	cmp.w	sl, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c5c:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000c5e:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
 8000c62:	fa0b f404 	lsl.w	r4, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000c66:	d00f      	beq.n	8000c88 <_pal_lld_setgroupmode+0xa8>
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c68:	6806      	ldr	r6, [r0, #0]
 8000c6a:	4033      	ands	r3, r6
 8000c6c:	ea43 0309 	orr.w	r3, r3, r9
        if (bit < 8)
 8000c70:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c72:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000c74:	d9c5      	bls.n	8000c02 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000c76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c78:	ea23 0404 	bic.w	r4, r3, r4
 8000c7c:	4325      	orrs	r5, r4
    if (!mask)
 8000c7e:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000c80:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
 8000c82:	d1c5      	bne.n	8000c10 <_pal_lld_setgroupmode+0x30>
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
 8000c88:	2f07      	cmp	r7, #7
 8000c8a:	d80a      	bhi.n	8000ca2 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000c8c:	6a06      	ldr	r6, [r0, #32]
 8000c8e:	ea26 0404 	bic.w	r4, r6, r4
 8000c92:	4325      	orrs	r5, r4
 8000c94:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c96:	6804      	ldr	r4, [r0, #0]
 8000c98:	4023      	ands	r3, r4
 8000c9a:	ea43 0309 	orr.w	r3, r3, r9
 8000c9e:	6003      	str	r3, [r0, #0]
 8000ca0:	e7b4      	b.n	8000c0c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000ca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000ca4:	ea26 0404 	bic.w	r4, r6, r4
 8000ca8:	4325      	orrs	r5, r4
 8000caa:	6245      	str	r5, [r0, #36]	; 0x24
 8000cac:	e7f3      	b.n	8000c96 <_pal_lld_setgroupmode+0xb6>
 8000cae:	bf00      	nop

08000cb0 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 8000cb0:	b430      	push	{r4, r5}
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	f383 8811 	msr	BASEPRI, r3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8000cb8:	68c3      	ldr	r3, [r0, #12]
 8000cba:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 8000cbc:	2100      	movs	r1, #0
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8000cbe:	f042 0201 	orr.w	r2, r2, #1
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8000cc2:	2505      	movs	r5, #5

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 8000cc4:	2403      	movs	r4, #3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8000cc6:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 8000cc8:	6119      	str	r1, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8000cca:	601d      	str	r5, [r3, #0]
 8000ccc:	7004      	strb	r4, [r0, #0]
 8000cce:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 8000cd2:	bc30      	pop	{r4, r5}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
	...

08000ce0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <chTMStopMeasurementX+0x40>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8000ce6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000ce8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 8000cea:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000cec:	6f16      	ldr	r6, [r2, #112]	; 0x70
  if (tmp->last > tmp->worst) {
 8000cee:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 8000cf0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000cf8:	18e4      	adds	r4, r4, r3
 8000cfa:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000cfe:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000d00:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000d02:	bf88      	it	hi
 8000d04:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000d06:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000d08:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000d0a:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 8000d0e:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000d10:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 8000d12:	bf38      	it	cc
 8000d14:	6003      	strcc	r3, [r0, #0]
}
 8000d16:	bcf0      	pop	{r4, r5, r6, r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e0001000 	.word	0xe0001000
 8000d20:	20000870 	.word	0x20000870
	...

08000d30 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 8000d32:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8000d34:	b470      	push	{r4, r5, r6}
  tqp->p_next = tp->p_next;
 8000d36:	6803      	ldr	r3, [r0, #0]
  otp = currp;
 8000d38:	6994      	ldr	r4, [r2, #24]
 8000d3a:	6013      	str	r3, [r2, #0]
  currp->p_state = CH_STATE_CURRENT;
 8000d3c:	2601      	movs	r6, #1
  otp->p_state = CH_STATE_READY;
 8000d3e:	2500      	movs	r5, #0
  if (otp->p_prio == IDLEPRIO) {
 8000d40:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000d42:	605a      	str	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 8000d44:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000d46:	6190      	str	r0, [r2, #24]
  otp->p_state = CH_STATE_READY;
 8000d48:	7725      	strb	r5, [r4, #28]
 8000d4a:	e000      	b.n	8000d4e <chSchDoReschedule+0x1e>
 8000d4c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	4291      	cmp	r1, r2
 8000d52:	d3fb      	bcc.n	8000d4c <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	6062      	str	r2, [r4, #4]
  otp->p_next = cp;
 8000d58:	6023      	str	r3, [r4, #0]
  chSysSwitch(currp, otp);
 8000d5a:	4621      	mov	r1, r4
  otp->p_prev->p_next = otp;
 8000d5c:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000d5e:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8000d60:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 8000d62:	f7ff ba95 	b.w	8000290 <_port_switch>
 8000d66:	bf00      	nop
 8000d68:	20000870 	.word	0x20000870
 8000d6c:	00000000 	.word	0x00000000

08000d70 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 8000d70:	2200      	movs	r2, #0
 8000d72:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <chSchReadyI+0x24>)
thread_t *chSchReadyI(thread_t *tp) {
 8000d76:	b410      	push	{r4}
 8000d78:	4604      	mov	r4, r0
  tp->p_state = CH_STATE_READY;
 8000d7a:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 8000d7c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	428a      	cmp	r2, r1
 8000d82:	d2fb      	bcs.n	8000d7c <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 8000d88:	6023      	str	r3, [r4, #0]
}
 8000d8a:	4620      	mov	r0, r4
  tp->p_prev->p_next = tp;
 8000d8c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000d8e:	605c      	str	r4, [r3, #4]
}
 8000d90:	bc10      	pop	{r4}
 8000d92:	4770      	bx	lr
 8000d94:	20000870 	.word	0x20000870
	...

08000da0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8000da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 8000da4:	4d67      	ldr	r5, [pc, #412]	; (8000f44 <VectorD4+0x1a4>)
 8000da6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000da8:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8000dac:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8000dae:	05da      	lsls	r2, r3, #23
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8000db0:	b083      	sub	sp, #12
  uint16_t sr = u->SR;
 8000db2:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8000db4:	d47d      	bmi.n	8000eb2 <VectorD4+0x112>
 8000db6:	2320      	movs	r3, #32
 8000db8:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000dbc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000dc0:	d046      	beq.n	8000e50 <VectorD4+0xb0>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000dc2:	4f61      	ldr	r7, [pc, #388]	; (8000f48 <VectorD4+0x1a8>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000dc4:	f04f 0800 	mov.w	r8, #0
 8000dc8:	e007      	b.n	8000dda <VectorD4+0x3a>
    if (sr & USART_SR_RXNE)
 8000dca:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 8000dcc:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000dce:	d41c      	bmi.n	8000e0a <VectorD4+0x6a>
    sr = u->SR;
 8000dd0:	6834      	ldr	r4, [r6, #0]
 8000dd2:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000dd4:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000dd8:	d03a      	beq.n	8000e50 <VectorD4+0xb0>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000dda:	0723      	lsls	r3, r4, #28
 8000ddc:	d0f5      	beq.n	8000dca <VectorD4+0x2a>
    sts |= SD_OVERRUN_ERROR;
 8000dde:	f014 0f08 	tst.w	r4, #8
 8000de2:	bf0c      	ite	eq
 8000de4:	2000      	moveq	r0, #0
 8000de6:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8000de8:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 8000dea:	bf48      	it	mi
 8000dec:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8000df0:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000df2:	bf48      	it	mi
 8000df4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8000df8:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000dfa:	bf48      	it	mi
 8000dfc:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000e00:	f001 f8c6 	bl	8001f90 <chEvtBroadcastFlagsI.constprop.28>
    if (sr & USART_SR_RXNE)
 8000e04:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 8000e06:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000e08:	d5e2      	bpl.n	8000dd0 <VectorD4+0x30>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000e0a:	696a      	ldr	r2, [r5, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d040      	beq.n	8000e92 <VectorD4+0xf2>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000e10:	6a2a      	ldr	r2, [r5, #32]
 8000e12:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e14:	428a      	cmp	r2, r1
 8000e16:	d045      	beq.n	8000ea4 <VectorD4+0x104>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000e18:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000e1a:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 8000e1c:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8000e1e:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 8000e20:	6169      	str	r1, [r5, #20]
    b = u->DR;
 8000e22:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000e24:	6a2a      	ldr	r2, [r5, #32]
 8000e26:	69eb      	ldr	r3, [r5, #28]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d301      	bcc.n	8000e30 <VectorD4+0x90>
    iqp->q_wrptr = iqp->q_buffer;
 8000e2c:	69ab      	ldr	r3, [r5, #24]
 8000e2e:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000e30:	68eb      	ldr	r3, [r5, #12]
 8000e32:	42bb      	cmp	r3, r7
 8000e34:	d0cc      	beq.n	8000dd0 <VectorD4+0x30>
  tqp->p_next = tp->p_next;
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 8000e3a:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000e3c:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 8000e3e:	f8c3 8020 	str.w	r8, [r3, #32]
  (void) chSchReadyI(tp);
 8000e42:	f7ff ff95 	bl	8000d70 <chSchReadyI>
    sr = u->SR;
 8000e46:	6834      	ldr	r4, [r6, #0]
 8000e48:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000e4a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000e4e:	d1c4      	bne.n	8000dda <VectorD4+0x3a>
 8000e50:	2300      	movs	r3, #0
 8000e52:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000e56:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000e5a:	d001      	beq.n	8000e60 <VectorD4+0xc0>
 8000e5c:	0622      	lsls	r2, r4, #24
 8000e5e:	d436      	bmi.n	8000ece <VectorD4+0x12e>
  if (sr & USART_SR_TC) {
 8000e60:	0663      	lsls	r3, r4, #25
 8000e62:	d511      	bpl.n	8000e88 <VectorD4+0xe8>
 8000e64:	2320      	movs	r3, #32
 8000e66:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000e6a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000e6c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d052      	beq.n	8000f18 <VectorD4+0x178>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000e72:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000e76:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 8000e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000e7e:	60f3      	str	r3, [r6, #12]
 8000e80:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8000e82:	6032      	str	r2, [r6, #0]
 8000e84:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 8000e88:	b003      	add	sp, #12
 8000e8a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000e8e:	f7ff ba67 	b.w	8000360 <_port_irq_epilogue>
 8000e92:	2004      	movs	r0, #4
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	f001 f87b 	bl	8001f90 <chEvtBroadcastFlagsI.constprop.28>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000e9a:	6a2a      	ldr	r2, [r5, #32]
 8000e9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e9e:	9b01      	ldr	r3, [sp, #4]
 8000ea0:	428a      	cmp	r2, r1
 8000ea2:	d1b9      	bne.n	8000e18 <VectorD4+0x78>
 8000ea4:	6969      	ldr	r1, [r5, #20]
 8000ea6:	2900      	cmp	r1, #0
 8000ea8:	d0b6      	beq.n	8000e18 <VectorD4+0x78>
 8000eaa:	2080      	movs	r0, #128	; 0x80
 8000eac:	f001 f870 	bl	8001f90 <chEvtBroadcastFlagsI.constprop.28>
 8000eb0:	e78e      	b.n	8000dd0 <VectorD4+0x30>
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	f383 8811 	msr	BASEPRI, r3
 8000eb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ebc:	f001 f868 	bl	8001f90 <chEvtBroadcastFlagsI.constprop.28>
    u->SR = ~USART_SR_LBD;
 8000ec0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000ec4:	6033      	str	r3, [r6, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f383 8811 	msr	BASEPRI, r3
 8000ecc:	e773      	b.n	8000db6 <VectorD4+0x16>
 8000ece:	2320      	movs	r3, #32
 8000ed0:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000ed4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000ed6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d024      	beq.n	8000f26 <VectorD4+0x186>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000edc:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000ede:	6c29      	ldr	r1, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 8000ee0:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 8000ee2:	3201      	adds	r2, #1
 8000ee4:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000ee6:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8000ee8:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 8000eea:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000eec:	d301      	bcc.n	8000ef2 <VectorD4+0x152>
    oqp->q_rdptr = oqp->q_buffer;
 8000eee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000ef0:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000ef2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <VectorD4+0x1ac>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d009      	beq.n	8000f0e <VectorD4+0x16e>
  tqp->p_next = tp->p_next;
 8000efa:	6819      	ldr	r1, [r3, #0]
 8000efc:	6329      	str	r1, [r5, #48]	; 0x30
  tp->p_u.rdymsg = msg;
 8000efe:	f04f 0e00 	mov.w	lr, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f02:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8000f04:	4618      	mov	r0, r3
  tp->p_u.rdymsg = msg;
 8000f06:	f8c3 e020 	str.w	lr, [r3, #32]
  (void) chSchReadyI(tp);
 8000f0a:	f7ff ff31 	bl	8000d70 <chSchReadyI>
      u->DR = b;
 8000f0e:	6077      	str	r7, [r6, #4]
 8000f10:	2300      	movs	r3, #0
 8000f12:	f383 8811 	msr	BASEPRI, r3
 8000f16:	e7a3      	b.n	8000e60 <VectorD4+0xc0>
 8000f18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0a9      	beq.n	8000e72 <VectorD4+0xd2>
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f001 f836 	bl	8001f90 <chEvtBroadcastFlagsI.constprop.28>
 8000f24:	e7a5      	b.n	8000e72 <VectorD4+0xd2>
 8000f26:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	d0d7      	beq.n	8000edc <VectorD4+0x13c>
 8000f2c:	2008      	movs	r0, #8
 8000f2e:	f001 f82f 	bl	8001f90 <chEvtBroadcastFlagsI.constprop.28>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000f32:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000f36:	ea09 0303 	and.w	r3, r9, r3
 8000f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3e:	60f3      	str	r3, [r6, #12]
 8000f40:	e7e6      	b.n	8000f10 <VectorD4+0x170>
 8000f42:	bf00      	nop
 8000f44:	20000ad0 	.word	0x20000ad0
 8000f48:	20000adc 	.word	0x20000adc
 8000f4c:	20000b00 	.word	0x20000b00

08000f50 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <Vector88+0x8c>)
 8000f54:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8000f56:	2100      	movs	r1, #0
 8000f58:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8000f5a:	0693      	lsls	r3, r2, #26
 8000f5c:	d536      	bpl.n	8000fcc <Vector88+0x7c>
 8000f5e:	4c20      	ldr	r4, [pc, #128]	; (8000fe0 <Vector88+0x90>)
 8000f60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f62:	680a      	ldr	r2, [r1, #0]
 8000f64:	6853      	ldr	r3, [r2, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d030      	beq.n	8000fcc <Vector88+0x7c>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 8000f6a:	6925      	ldr	r5, [r4, #16]
 8000f6c:	2d00      	cmp	r5, #0
 8000f6e:	d02d      	beq.n	8000fcc <Vector88+0x7c>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	f023 031f 	bic.w	r3, r3, #31
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	6813      	ldr	r3, [r2, #0]
 8000f7a:	f013 0301 	ands.w	r3, r3, #1
 8000f7e:	d1fb      	bne.n	8000f78 <Vector88+0x28>
 8000f80:	7a0f      	ldrb	r7, [r1, #8]
 8000f82:	684e      	ldr	r6, [r1, #4]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8000f84:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 8000f86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8000f88:	203d      	movs	r0, #61	; 0x3d
 8000f8a:	40b8      	lsls	r0, r7
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000f8c:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
 8000f8e:	6030      	str	r0, [r6, #0]
  adcp->adc->CR1 = 0;
 8000f90:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8000f92:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000f94:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8000f96:	b1ed      	cbz	r5, 8000fd4 <Vector88+0x84>
 8000f98:	2305      	movs	r3, #5
 8000f9a:	7023      	strb	r3, [r4, #0]
 8000f9c:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <Vector88+0x90>)
 8000f9e:	47a8      	blx	r5
 8000fa0:	7823      	ldrb	r3, [r4, #0]
 8000fa2:	2b05      	cmp	r3, #5
 8000fa4:	bf04      	itt	eq
 8000fa6:	2302      	moveq	r3, #2
 8000fa8:	7023      	strbeq	r3, [r4, #0]
 8000faa:	2300      	movs	r3, #0
 8000fac:	6123      	str	r3, [r4, #16]
 8000fae:	2320      	movs	r3, #32
 8000fb0:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8000fb4:	6960      	ldr	r0, [r4, #20]
 8000fb6:	b130      	cbz	r0, 8000fc6 <Vector88+0x76>
    tp->p_u.rdymsg = msg;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fbc:	6203      	str	r3, [r0, #32]
    *trp = NULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	6163      	str	r3, [r4, #20]
    (void) chSchReadyI(tp);
 8000fc2:	f7ff fed5 	bl	8000d70 <chSchReadyI>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f383 8811 	msr	BASEPRI, r3
}
 8000fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8000fd0:	f7ff b9c6 	b.w	8000360 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	6125      	str	r5, [r4, #16]
 8000fd8:	7023      	strb	r3, [r4, #0]
 8000fda:	e7e8      	b.n	8000fae <Vector88+0x5e>
 8000fdc:	40012000 	.word	0x40012000
 8000fe0:	20000838 	.word	0x20000838
	...

08000ff0 <adc_lld_serve_rx_interrupt.lto_priv.44>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000ff0:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8000ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff8:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000ffa:	d034      	beq.n	8001066 <adc_lld_serve_rx_interrupt.lto_priv.44+0x76>
  dmaStreamDisable(adcp->dmastp);
 8000ffc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000ffe:	6803      	ldr	r3, [r0, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	f022 021f 	bic.w	r2, r2, #31
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	f011 0101 	ands.w	r1, r1, #1
 800100e:	d1fb      	bne.n	8001008 <adc_lld_serve_rx_interrupt.lto_priv.44+0x18>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001010:	6922      	ldr	r2, [r4, #16]
  dmaStreamDisable(adcp->dmastp);
 8001012:	7a07      	ldrb	r7, [r0, #8]
 8001014:	6846      	ldr	r6, [r0, #4]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001016:	6895      	ldr	r5, [r2, #8]
  adcp->adc->CR1 = 0;
 8001018:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800101a:	223d      	movs	r2, #61	; 0x3d
 800101c:	40ba      	lsls	r2, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 800101e:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001020:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8001022:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8001024:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001026:	6098      	str	r0, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001028:	2d00      	cmp	r5, #0
 800102a:	d034      	beq.n	8001096 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa6>
 800102c:	2305      	movs	r3, #5
 800102e:	7023      	strb	r3, [r4, #0]
 8001030:	4620      	mov	r0, r4
 8001032:	47a8      	blx	r5
 8001034:	7823      	ldrb	r3, [r4, #0]
 8001036:	2b05      	cmp	r3, #5
 8001038:	bf04      	itt	eq
 800103a:	2302      	moveq	r3, #2
 800103c:	7023      	strbeq	r3, [r4, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	6123      	str	r3, [r4, #16]
 8001042:	2320      	movs	r3, #32
 8001044:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001048:	6963      	ldr	r3, [r4, #20]
 800104a:	b13b      	cbz	r3, 800105c <adc_lld_serve_rx_interrupt.lto_priv.44+0x6c>
    *trp = NULL;
 800104c:	2100      	movs	r1, #0
    tp->p_u.rdymsg = msg;
 800104e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    *trp = NULL;
 8001052:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8001054:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001056:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001058:	f7ff fe8a 	bl	8000d70 <chSchReadyI>
 800105c:	2300      	movs	r3, #0
 800105e:	f383 8811 	msr	BASEPRI, r3
 8001062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (adcp->grpp != NULL) {
 8001066:	6905      	ldr	r5, [r0, #16]
 8001068:	b19d      	cbz	r5, 8001092 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa2>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 800106a:	068a      	lsls	r2, r1, #26
 800106c:	d50f      	bpl.n	800108e <adc_lld_serve_rx_interrupt.lto_priv.44+0x9e>
        _adc_isr_full_code(adcp);
 800106e:	782b      	ldrb	r3, [r5, #0]
 8001070:	b1f3      	cbz	r3, 80010b0 <adc_lld_serve_rx_interrupt.lto_priv.44+0xc0>
 8001072:	686b      	ldr	r3, [r5, #4]
 8001074:	b16b      	cbz	r3, 8001092 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa2>
 8001076:	68c2      	ldr	r2, [r0, #12]
 8001078:	2a01      	cmp	r2, #1
 800107a:	d94a      	bls.n	8001112 <adc_lld_serve_rx_interrupt.lto_priv.44+0x122>
 800107c:	886d      	ldrh	r5, [r5, #2]
 800107e:	6884      	ldr	r4, [r0, #8]
 8001080:	0852      	lsrs	r2, r2, #1
 8001082:	0051      	lsls	r1, r2, #1
 8001084:	fb05 4101 	mla	r1, r5, r1, r4
}
 8001088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 800108c:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 800108e:	06cb      	lsls	r3, r1, #27
 8001090:	d405      	bmi.n	800109e <adc_lld_serve_rx_interrupt.lto_priv.44+0xae>
 8001092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001096:	2302      	movs	r3, #2
 8001098:	6125      	str	r5, [r4, #16]
 800109a:	7023      	strb	r3, [r4, #0]
 800109c:	e7d1      	b.n	8001042 <adc_lld_serve_rx_interrupt.lto_priv.44+0x52>
        _adc_isr_half_code(adcp);
 800109e:	686b      	ldr	r3, [r5, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f6      	beq.n	8001092 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa2>
 80010a4:	68c2      	ldr	r2, [r0, #12]
 80010a6:	6881      	ldr	r1, [r0, #8]
 80010a8:	0852      	lsrs	r2, r2, #1
}
 80010aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_half_code(adcp);
 80010ae:	4718      	bx	r3
  dmaStreamDisable(adcp->dmastp);
 80010b0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80010b2:	6802      	ldr	r2, [r0, #0]
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	f023 031f 	bic.w	r3, r3, #31
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	f013 0301 	ands.w	r3, r3, #1
 80010c2:	d1fb      	bne.n	80010bc <adc_lld_serve_rx_interrupt.lto_priv.44+0xcc>
 80010c4:	7a07      	ldrb	r7, [r0, #8]
 80010c6:	6846      	ldr	r6, [r0, #4]
        _adc_isr_full_code(adcp);
 80010c8:	686d      	ldr	r5, [r5, #4]
  adcp->adc->CR1 = 0;
 80010ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 80010cc:	213d      	movs	r1, #61	; 0x3d
 80010ce:	40b9      	lsls	r1, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 80010d0:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 80010d2:	6031      	str	r1, [r6, #0]
  adcp->adc->CR1 = 0;
 80010d4:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 80010d6:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80010d8:	6090      	str	r0, [r2, #8]
        _adc_isr_full_code(adcp);
 80010da:	b1ad      	cbz	r5, 8001108 <adc_lld_serve_rx_interrupt.lto_priv.44+0x118>
 80010dc:	2304      	movs	r3, #4
 80010de:	7023      	strb	r3, [r4, #0]
 80010e0:	68e2      	ldr	r2, [r4, #12]
 80010e2:	68a1      	ldr	r1, [r4, #8]
 80010e4:	4620      	mov	r0, r4
 80010e6:	47a8      	blx	r5
 80010e8:	7823      	ldrb	r3, [r4, #0]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d00c      	beq.n	8001108 <adc_lld_serve_rx_interrupt.lto_priv.44+0x118>
 80010ee:	2320      	movs	r3, #32
 80010f0:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80010f4:	6963      	ldr	r3, [r4, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0b0      	beq.n	800105c <adc_lld_serve_rx_interrupt.lto_priv.44+0x6c>
    *trp = NULL;
 80010fa:	2200      	movs	r2, #0
 80010fc:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
 80010fe:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001100:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001102:	f7ff fe35 	bl	8000d70 <chSchReadyI>
 8001106:	e7a9      	b.n	800105c <adc_lld_serve_rx_interrupt.lto_priv.44+0x6c>
 8001108:	2202      	movs	r2, #2
 800110a:	2300      	movs	r3, #0
 800110c:	7022      	strb	r2, [r4, #0]
 800110e:	6123      	str	r3, [r4, #16]
 8001110:	e7ed      	b.n	80010ee <adc_lld_serve_rx_interrupt.lto_priv.44+0xfe>
 8001112:	6881      	ldr	r1, [r0, #8]
}
 8001114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 8001118:	4718      	bx	r3
 800111a:	bf00      	nop
 800111c:	0000      	movs	r0, r0
	...

08001120 <chThdExit>:
void chThdExit(msg_t msg) {
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	2220      	movs	r2, #32
 8001124:	4603      	mov	r3, r0
 8001126:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <chThdExit+0x44>)
 800112c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800112e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
 8001130:	6223      	str	r3, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 8001132:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001136:	4285      	cmp	r5, r0
 8001138:	d006      	beq.n	8001148 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 800113a:	6803      	ldr	r3, [r0, #0]
 800113c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800113e:	f7ff fe17 	bl	8000d70 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001142:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 8001144:	42a8      	cmp	r0, r5
 8001146:	d1f8      	bne.n	800113a <chThdExit+0x1a>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001148:	7f63      	ldrb	r3, [r4, #29]
 800114a:	079b      	lsls	r3, r3, #30
 800114c:	d104      	bne.n	8001158 <chThdExit+0x38>
    REG_REMOVE(tp);
 800114e:	6963      	ldr	r3, [r4, #20]
 8001150:	6922      	ldr	r2, [r4, #16]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	6922      	ldr	r2, [r4, #16]
 8001156:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001158:	200f      	movs	r0, #15
}
 800115a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800115e:	f7ff bbef 	b.w	8000940 <chSchGoSleepS>
 8001162:	bf00      	nop
 8001164:	20000870 	.word	0x20000870
	...

08001170 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <chVTDoResetI+0x70>)
 8001172:	69da      	ldr	r2, [r3, #28]
 8001174:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8001176:	b430      	push	{r4, r5}
  if (ch.vtlist.vt_next != vtp) {
 8001178:	d00f      	beq.n	800119a <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800117a:	6841      	ldr	r1, [r0, #4]
 800117c:	6802      	ldr	r2, [r0, #0]
 800117e:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001180:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001182:	331c      	adds	r3, #28
    vtp->vt_func = NULL;
 8001184:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001186:	429a      	cmp	r2, r3
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001188:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 800118a:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800118c:	d003      	beq.n	8001196 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800118e:	8901      	ldrh	r1, [r0, #8]
 8001190:	8913      	ldrh	r3, [r2, #8]
 8001192:	440b      	add	r3, r1
 8001194:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001196:	bc30      	pop	{r4, r5}
 8001198:	4770      	bx	lr
  ch.vtlist.vt_next = vtp->vt_next;
 800119a:	4619      	mov	r1, r3
 800119c:	6814      	ldr	r4, [r2, #0]
 800119e:	f841 4f1c 	str.w	r4, [r1, #28]!
  vtp->vt_func = NULL;
 80011a2:	2000      	movs	r0, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80011a4:	428c      	cmp	r4, r1
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80011a6:	6061      	str	r1, [r4, #4]
  vtp->vt_func = NULL;
 80011a8:	60d0      	str	r0, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80011aa:	d015      	beq.n	80011d8 <chVTDoResetI+0x68>
  return (systime_t)STM32_ST_TIM->CNT;
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <chVTDoResetI+0x74>)
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80011ae:	8915      	ldrh	r5, [r2, #8]
 80011b0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80011b2:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80011b4:	8923      	ldrh	r3, [r4, #8]
 80011b6:	b292      	uxth	r2, r2
 80011b8:	442b      	add	r3, r5
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80011ba:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80011bc:	b29b      	uxth	r3, r3
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80011be:	b289      	uxth	r1, r1
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80011c0:	428b      	cmp	r3, r1
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80011c2:	8123      	strh	r3, [r4, #8]
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80011c4:	d9e7      	bls.n	8001196 <chVTDoResetI+0x26>
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 80011c6:	1a5b      	subs	r3, r3, r1
 80011c8:	b29b      	uxth	r3, r3
  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	bf2c      	ite	cs
 80011ce:	18d3      	addcs	r3, r2, r3
 80011d0:	1c93      	addcc	r3, r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	6343      	str	r3, [r0, #52]	; 0x34
 80011d6:	e7de      	b.n	8001196 <chVTDoResetI+0x26>
  STM32_ST_TIM->DIER = 0;
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <chVTDoResetI+0x74>)
 80011da:	60d8      	str	r0, [r3, #12]
 80011dc:	e7db      	b.n	8001196 <chVTDoResetI+0x26>
 80011de:	bf00      	nop
 80011e0:	20000870 	.word	0x20000870
 80011e4:	40000800 	.word	0x40000800
	...

080011f0 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80011f2:	4e25      	ldr	r6, [pc, #148]	; (8001288 <chVTDoSetI+0x98>)
  return (systime_t)STM32_ST_TIM->CNT;
 80011f4:	f8df e094 	ldr.w	lr, [pc, #148]	; 800128c <chVTDoSetI+0x9c>
 80011f8:	4637      	mov	r7, r6
 80011fa:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
 80011fe:	f857 4f1c 	ldr.w	r4, [r7, #28]!
  vtp->vt_par = par;
 8001202:	6103      	str	r3, [r0, #16]
 8001204:	2902      	cmp	r1, #2
 8001206:	bf38      	it	cc
 8001208:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800120a:	42bc      	cmp	r4, r7
  vtp->vt_func = vtfunc;
 800120c:	60c2      	str	r2, [r0, #12]
 800120e:	b2ab      	uxth	r3, r5
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001210:	d028      	beq.n	8001264 <chVTDoSetI+0x74>
    delta = now - ch.vtlist.vt_lasttime + delay;
 8001212:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	4419      	add	r1, r3
    if (delta < now - ch.vtlist.vt_lasttime) {
 8001218:	b2ad      	uxth	r5, r5
    delta = now - ch.vtlist.vt_lasttime + delay;
 800121a:	b289      	uxth	r1, r1
    if (delta < now - ch.vtlist.vt_lasttime) {
 800121c:	1aad      	subs	r5, r5, r2
 800121e:	42a9      	cmp	r1, r5
      delta -= p->vt_delta;
 8001220:	8923      	ldrh	r3, [r4, #8]
    if (delta < now - ch.vtlist.vt_lasttime) {
 8001222:	db15      	blt.n	8001250 <chVTDoSetI+0x60>
    else if (delta < p->vt_delta) {
 8001224:	4299      	cmp	r1, r3
 8001226:	d204      	bcs.n	8001232 <chVTDoSetI+0x42>
 8001228:	e017      	b.n	800125a <chVTDoSetI+0x6a>
    p = p->vt_next;
 800122a:	6824      	ldr	r4, [r4, #0]
    delta -= p->vt_delta;
 800122c:	1ac9      	subs	r1, r1, r3
  while (p->vt_delta < delta) {
 800122e:	8923      	ldrh	r3, [r4, #8]
    delta -= p->vt_delta;
 8001230:	b289      	uxth	r1, r1
  while (p->vt_delta < delta) {
 8001232:	428b      	cmp	r3, r1
 8001234:	d3f9      	bcc.n	800122a <chVTDoSetI+0x3a>
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001236:	6863      	ldr	r3, [r4, #4]
 8001238:	6043      	str	r3, [r0, #4]
  vtp->vt_next = p;
 800123a:	6004      	str	r4, [r0, #0]
  vtp->vt_prev->vt_next = vtp;
 800123c:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800123e:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001240:	8101      	strh	r1, [r0, #8]
  p->vt_delta -= delta;
 8001242:	8923      	ldrh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
  p->vt_delta -= delta;
 8001248:	1a59      	subs	r1, r3, r1
 800124a:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800124c:	84b2      	strh	r2, [r6, #36]	; 0x24
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->vt_next;
 8001250:	6824      	ldr	r4, [r4, #0]
      delta -= p->vt_delta;
 8001252:	1ac9      	subs	r1, r1, r3
 8001254:	b289      	uxth	r1, r1
 8001256:	8923      	ldrh	r3, [r4, #8]
 8001258:	e7eb      	b.n	8001232 <chVTDoSetI+0x42>
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 800125a:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800125c:	b292      	uxth	r2, r2
 800125e:	f8ce 2034 	str.w	r2, [lr, #52]	; 0x34
 8001262:	e7e6      	b.n	8001232 <chVTDoSetI+0x42>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001264:	185a      	adds	r2, r3, r1
      ch.vtlist.vt_lasttime = now;
 8001266:	84f3      	strh	r3, [r6, #38]	; 0x26
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001268:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 800126a:	2500      	movs	r5, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800126c:	2302      	movs	r3, #2
      ch.vtlist.vt_next = vtp;
 800126e:	61f0      	str	r0, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 8001270:	6230      	str	r0, [r6, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8001272:	6004      	str	r4, [r0, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001274:	6044      	str	r4, [r0, #4]
      vtp->vt_delta = delay;
 8001276:	8101      	strh	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001278:	f8ce 2034 	str.w	r2, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800127c:	f8ce 5010 	str.w	r5, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001280:	f8ce 300c 	str.w	r3, [lr, #12]
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	bf00      	nop
 8001288:	20000870 	.word	0x20000870
 800128c:	40000800 	.word	0x40000800

08001290 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001290:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != time) {
 8001292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001296:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001298:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 800129a:	d012      	beq.n	80012c2 <chSchGoSleepTimeoutS+0x32>
    chVTDoSetI(&vt, time, wakeup, currp);
 800129c:	4c0c      	ldr	r4, [pc, #48]	; (80012d0 <chSchGoSleepTimeoutS+0x40>)
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <chSchGoSleepTimeoutS+0x44>)
 80012a0:	69a3      	ldr	r3, [r4, #24]
 80012a2:	4605      	mov	r5, r0
 80012a4:	a801      	add	r0, sp, #4
 80012a6:	f7ff ffa3 	bl	80011f0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80012aa:	4628      	mov	r0, r5
 80012ac:	f7ff fb48 	bl	8000940 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80012b0:	9b04      	ldr	r3, [sp, #16]
 80012b2:	b113      	cbz	r3, 80012ba <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 80012b4:	a801      	add	r0, sp, #4
 80012b6:	f7ff ff5b 	bl	8001170 <chVTDoResetI>
  return currp->p_u.rdymsg;
 80012ba:	69a3      	ldr	r3, [r4, #24]
}
 80012bc:	6a18      	ldr	r0, [r3, #32]
 80012be:	b007      	add	sp, #28
 80012c0:	bd30      	pop	{r4, r5, pc}
 80012c2:	4c03      	ldr	r4, [pc, #12]	; (80012d0 <chSchGoSleepTimeoutS+0x40>)
    chSchGoSleepS(newstate);
 80012c4:	f7ff fb3c 	bl	8000940 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 80012c8:	69a3      	ldr	r3, [r4, #24]
}
 80012ca:	6a18      	ldr	r0, [r3, #32]
 80012cc:	b007      	add	sp, #28
 80012ce:	bd30      	pop	{r4, r5, pc}
 80012d0:	20000870 	.word	0x20000870
 80012d4:	080008b1 	.word	0x080008b1
	...

080012e0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 80012e0:	b161      	cbz	r1, 80012fc <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <chThdEnqueueTimeoutS+0x24>)
 80012e4:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80012e6:	b410      	push	{r4}
  tp->p_next = (thread_t *)tqp;
 80012e8:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 80012ea:	6844      	ldr	r4, [r0, #4]
 80012ec:	605c      	str	r4, [r3, #4]
 80012ee:	4602      	mov	r2, r0
  tp->p_prev->p_next = tp;
 80012f0:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80012f2:	2004      	movs	r0, #4
  tqp->p_prev = tp;
 80012f4:	6053      	str	r3, [r2, #4]
}
 80012f6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80012f8:	f7ff bfca 	b.w	8001290 <chSchGoSleepTimeoutS>
}
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000870 	.word	0x20000870
	...

08001310 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001314:	b083      	sub	sp, #12
 8001316:	4604      	mov	r4, r0
 8001318:	460d      	mov	r5, r1
 800131a:	4616      	mov	r6, r2
 800131c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800131e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001322:	f04f 0920 	mov.w	r9, #32
 8001326:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800132a:	2700      	movs	r7, #0
 800132c:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800132e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001330:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001334:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8001336:	b303      	cbz	r3, 800137a <chOQWriteTimeout+0x6a>
    *oqp->q_wrptr++ = *bp++;
 8001338:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 800133a:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800133c:	1c4a      	adds	r2, r1, #1
    oqp->q_counter--;
 800133e:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8001340:	6162      	str	r2, [r4, #20]
    oqp->q_counter--;
 8001342:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001344:	782b      	ldrb	r3, [r5, #0]
 8001346:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001348:	6923      	ldr	r3, [r4, #16]
 800134a:	6961      	ldr	r1, [r4, #20]
 800134c:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800134e:	bf24      	itt	cs
 8001350:	68e3      	ldrcs	r3, [r4, #12]
 8001352:	6163      	strcs	r3, [r4, #20]
    if (nfy != NULL) {
 8001354:	f1b8 0f00 	cmp.w	r8, #0
 8001358:	d000      	beq.n	800135c <chOQWriteTimeout+0x4c>
      nfy(oqp);
 800135a:	47c0      	blx	r8
 800135c:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8001360:	3e01      	subs	r6, #1
    w++;
 8001362:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001366:	d012      	beq.n	800138e <chOQWriteTimeout+0x7e>
 8001368:	f389 8811 	msr	BASEPRI, r9
 800136c:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800136e:	465d      	mov	r5, fp
 8001370:	f105 0b01 	add.w	fp, r5, #1
      nfy(oqp);
 8001374:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1de      	bne.n	8001338 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800137a:	9901      	ldr	r1, [sp, #4]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff ffae 	bl	80012e0 <chThdEnqueueTimeoutS>
 8001384:	9b00      	ldr	r3, [sp, #0]
 8001386:	2800      	cmp	r0, #0
 8001388:	d0d1      	beq.n	800132e <chOQWriteTimeout+0x1e>
 800138a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 800138e:	4638      	mov	r0, r7
 8001390:	b003      	add	sp, #12
 8001392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001396:	bf00      	nop
	...

080013a0 <writet.lto_priv.42>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80013a0:	3030      	adds	r0, #48	; 0x30
 80013a2:	f7ff bfb5 	b.w	8001310 <chOQWriteTimeout>
 80013a6:	bf00      	nop
	...

080013b0 <write.lto_priv.36>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80013b0:	3030      	adds	r0, #48	; 0x30
 80013b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b6:	f7ff bfab 	b.w	8001310 <chOQWriteTimeout>
 80013ba:	bf00      	nop
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	4604      	mov	r4, r0
 80013c4:	460f      	mov	r7, r1
 80013c6:	4616      	mov	r6, r2
 80013c8:	2320      	movs	r3, #32
 80013ca:	f383 8811 	msr	BASEPRI, r3
 80013ce:	e003      	b.n	80013d8 <chOQPutTimeout+0x18>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80013d0:	f7ff ff86 	bl	80012e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80013d4:	2800      	cmp	r0, #0
 80013d6:	db19      	blt.n	800140c <chOQPutTimeout+0x4c>
 80013d8:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80013da:	4631      	mov	r1, r6
 80013dc:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 80013de:	2d00      	cmp	r5, #0
 80013e0:	d0f6      	beq.n	80013d0 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 80013e2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80013e4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80013e6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80013e8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80013ea:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80013ec:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80013ee:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80013f0:	6923      	ldr	r3, [r4, #16]
 80013f2:	6962      	ldr	r2, [r4, #20]
 80013f4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80013f6:	bf24      	itt	cs
 80013f8:	68e3      	ldrcs	r3, [r4, #12]
 80013fa:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 80013fc:	69e3      	ldr	r3, [r4, #28]
 80013fe:	b10b      	cbz	r3, 8001404 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001400:	4620      	mov	r0, r4
 8001402:	4798      	blx	r3
 8001404:	2000      	movs	r0, #0
 8001406:	f380 8811 	msr	BASEPRI, r0
}
 800140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800140c:	f385 8811 	msr	BASEPRI, r5
 8001410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001412:	bf00      	nop
	...

08001420 <putt.lto_priv.40>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001420:	3030      	adds	r0, #48	; 0x30
 8001422:	f7ff bfcd 	b.w	80013c0 <chOQPutTimeout>
 8001426:	bf00      	nop
	...

08001430 <put.lto_priv.38>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001430:	3030      	adds	r0, #48	; 0x30
 8001432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001436:	f7ff bfc3 	b.w	80013c0 <chOQPutTimeout>
 800143a:	bf00      	nop
 800143c:	0000      	movs	r0, r0
	...

08001440 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 8001440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001444:	4604      	mov	r4, r0
 8001446:	b083      	sub	sp, #12
 8001448:	4689      	mov	r9, r1
 800144a:	4693      	mov	fp, r2
 800144c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800144e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001452:	2720      	movs	r7, #32
 8001454:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001458:	2600      	movs	r6, #0
 800145a:	9701      	str	r7, [sp, #4]
 800145c:	46b2      	mov	sl, r6
    if (nfy != NULL) {
 800145e:	f1b8 0f00 	cmp.w	r8, #0
 8001462:	d005      	beq.n	8001470 <chIQReadTimeout+0x30>
      nfy(iqp);
 8001464:	4620      	mov	r0, r4
 8001466:	47c0      	blx	r8
 8001468:	e002      	b.n	8001470 <chIQReadTimeout+0x30>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800146a:	f7ff ff39 	bl	80012e0 <chThdEnqueueTimeoutS>
 800146e:	b9e0      	cbnz	r0, 80014aa <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 8001470:	68a7      	ldr	r7, [r4, #8]
 8001472:	4629      	mov	r1, r5
 8001474:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 8001476:	2f00      	cmp	r7, #0
 8001478:	d0f7      	beq.n	800146a <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 800147a:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 800147c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800147e:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8001480:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001482:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 8001484:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001486:	7813      	ldrb	r3, [r2, #0]
 8001488:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	69a2      	ldr	r2, [r4, #24]
 8001490:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001492:	bf24      	itt	cs
 8001494:	68e3      	ldrcs	r3, [r4, #12]
 8001496:	61a3      	strcs	r3, [r4, #24]
 8001498:	f38a 8811 	msr	BASEPRI, sl
    r++;
 800149c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800149e:	45b3      	cmp	fp, r6
 80014a0:	d005      	beq.n	80014ae <chIQReadTimeout+0x6e>
 80014a2:	9b01      	ldr	r3, [sp, #4]
 80014a4:	f383 8811 	msr	BASEPRI, r3
 80014a8:	e7d9      	b.n	800145e <chIQReadTimeout+0x1e>
 80014aa:	f387 8811 	msr	BASEPRI, r7
}
 80014ae:	4630      	mov	r0, r6
 80014b0:	b003      	add	sp, #12
 80014b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b6:	bf00      	nop
	...

080014c0 <readt.lto_priv.43>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80014c0:	300c      	adds	r0, #12
 80014c2:	f7ff bfbd 	b.w	8001440 <chIQReadTimeout>
 80014c6:	bf00      	nop
	...

080014d0 <read.lto_priv.37>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80014d0:	300c      	adds	r0, #12
 80014d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d6:	f7ff bfb3 	b.w	8001440 <chIQReadTimeout>
 80014da:	bf00      	nop
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	2320      	movs	r3, #32
 80014e4:	460e      	mov	r6, r1
 80014e6:	4604      	mov	r4, r0
 80014e8:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 80014ec:	69c3      	ldr	r3, [r0, #28]
 80014ee:	b12b      	cbz	r3, 80014fc <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 80014f0:	4798      	blx	r3
 80014f2:	e003      	b.n	80014fc <chIQGetTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80014f4:	f7ff fef4 	bl	80012e0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80014f8:	2800      	cmp	r0, #0
 80014fa:	db15      	blt.n	8001528 <chIQGetTimeout+0x48>
 80014fc:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80014fe:	4631      	mov	r1, r6
 8001500:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 8001502:	2d00      	cmp	r5, #0
 8001504:	d0f6      	beq.n	80014f4 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8001506:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001508:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800150a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800150c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800150e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001510:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 8001512:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001514:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001516:	bf28      	it	cs
 8001518:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800151a:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800151c:	bf28      	it	cs
 800151e:	61a3      	strcs	r3, [r4, #24]
 8001520:	2300      	movs	r3, #0
 8001522:	f383 8811 	msr	BASEPRI, r3
}
 8001526:	bd70      	pop	{r4, r5, r6, pc}
 8001528:	f385 8811 	msr	BASEPRI, r5
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	bf00      	nop

08001530 <gett.lto_priv.41>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001530:	300c      	adds	r0, #12
 8001532:	f7ff bfd5 	b.w	80014e0 <chIQGetTimeout>
 8001536:	bf00      	nop
	...

08001540 <get.lto_priv.39>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001540:	300c      	adds	r0, #12
 8001542:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001546:	f7ff bfcb 	b.w	80014e0 <chIQGetTimeout>
 800154a:	bf00      	nop
 800154c:	0000      	movs	r0, r0
	...

08001550 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	4f13      	ldr	r7, [pc, #76]	; (80015a0 <__init_ram_areas+0x50>)
 8001554:	4d13      	ldr	r5, [pc, #76]	; (80015a4 <__init_ram_areas+0x54>)
 8001556:	4c14      	ldr	r4, [pc, #80]	; (80015a8 <__init_ram_areas+0x58>)
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <__init_ram_areas+0x5c>)
 800155a:	4915      	ldr	r1, [pc, #84]	; (80015b0 <__init_ram_areas+0x60>)
 800155c:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001560:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8001562:	429c      	cmp	r4, r3
 8001564:	d911      	bls.n	800158a <__init_ram_areas+0x3a>
 8001566:	3904      	subs	r1, #4
 8001568:	461a      	mov	r2, r3
      *p = *tp;
 800156a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800156e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8001572:	4294      	cmp	r4, r2
 8001574:	d8f9      	bhi.n	800156a <__init_ram_areas+0x1a>
 8001576:	43da      	mvns	r2, r3
 8001578:	4414      	add	r4, r2
 800157a:	f024 0403 	bic.w	r4, r4, #3
 800157e:	3404      	adds	r4, #4
 8001580:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8001582:	429d      	cmp	r5, r3
 8001584:	d903      	bls.n	800158e <__init_ram_areas+0x3e>
      *p = 0;
 8001586:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800158a:	429d      	cmp	r5, r3
 800158c:	d8fb      	bhi.n	8001586 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800158e:	4577      	cmp	r7, lr
 8001590:	d004      	beq.n	800159c <__init_ram_areas+0x4c>
 8001592:	f107 0110 	add.w	r1, r7, #16
 8001596:	c93a      	ldmia	r1, {r1, r3, r4, r5}
 8001598:	3710      	adds	r7, #16
 800159a:	e7e2      	b.n	8001562 <__init_ram_areas+0x12>
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159e:	bf00      	nop
 80015a0:	080025d0 	.word	0x080025d0
 80015a4:	20000ba0 	.word	0x20000ba0
 80015a8:	20000ba0 	.word	0x20000ba0
 80015ac:	20000ba0 	.word	0x20000ba0
 80015b0:	08002818 	.word	0x08002818
	...

080015c0 <__default_exit>:
void __default_exit(void) {
 80015c0:	e7fe      	b.n	80015c0 <__default_exit>
 80015c2:	bf00      	nop
	...

080015d0 <__late_init>:
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
	...

080015e0 <__core_init>:
void __core_init(void) {
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
	...

080015f0 <main>:
  rccResetAHB1(~0);
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <main+0x6c>)
  PWR->CR |= PWR_CR_DBP;
 80015f2:	4c1b      	ldr	r4, [pc, #108]	; (8001660 <main+0x70>)
  rccResetAHB1(~0);
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015fa:	2200      	movs	r2, #0
#include "motor.h"
#include "analog.h"
#include "includes/chprintf.h"
///home/adam/ChibiOS_16.1.9/os/hal/lib/streams/

int main(void) {
 80015fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001600:	6119      	str	r1, [r3, #16]
 8001602:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001604:	6958      	ldr	r0, [r3, #20]
 8001606:	6159      	str	r1, [r3, #20]
 8001608:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800160a:	6a18      	ldr	r0, [r3, #32]
 800160c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8001610:	6218      	str	r0, [r3, #32]
 8001612:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001614:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001616:	6259      	str	r1, [r3, #36]	; 0x24
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 800161a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800161c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001620:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8001622:	6821      	ldr	r1, [r4, #0]
 8001624:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001628:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800162a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800162c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001630:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001634:	b089      	sub	sp, #36	; 0x24
 8001636:	d003      	beq.n	8001640 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001638:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800163c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800163e:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <main+0x70>)
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <main+0x74>)
 8001644:	6843      	ldr	r3, [r0, #4]
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8001646:	4d08      	ldr	r5, [pc, #32]	; (8001668 <main+0x78>)
 8001648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800164c:	6043      	str	r3, [r0, #4]
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <main+0x7c>)
 8001650:	2100      	movs	r1, #0
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001652:	4689      	mov	r9, r1
    _stm32_dma_streams[i].stream->CR = 0U;
 8001654:	460c      	mov	r4, r1
  dma_streams_mask = 0U;
 8001656:	6019      	str	r1, [r3, #0]
 8001658:	e00c      	b.n	8001674 <main+0x84>
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40007000 	.word	0x40007000
 8001664:	0800265c 	.word	0x0800265c
 8001668:	40026010 	.word	0x40026010
 800166c:	20000a60 	.word	0x20000a60
 8001670:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    dma_isr_redir[i].dma_func = NULL;
 8001674:	4bc8      	ldr	r3, [pc, #800]	; (8001998 <main+0x3a8>)
    _stm32_dma_streams[i].stream->CR = 0U;
 8001676:	602c      	str	r4, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001678:	f843 4039 	str.w	r4, [r3, r9, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800167c:	f109 0901 	add.w	r9, r9, #1
 8001680:	f1b9 0f10 	cmp.w	r9, #16
 8001684:	f102 020c 	add.w	r2, r2, #12
 8001688:	d1f2      	bne.n	8001670 <main+0x80>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800168a:	f8df 837c 	ldr.w	r8, [pc, #892]	; 8001a08 <main+0x418>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 800168e:	4dc3      	ldr	r5, [pc, #780]	; (800199c <main+0x3ac>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001690:	48c3      	ldr	r0, [pc, #780]	; (80019a0 <main+0x3b0>)
  gpiop->OTYPER  = config->otyper;
 8001692:	f8df c378 	ldr.w	ip, [pc, #888]	; 8001a0c <main+0x41c>
  gpiop->PUPDR   = config->pupdr;
 8001696:	f8df b378 	ldr.w	fp, [pc, #888]	; 8001a10 <main+0x420>
  gpiop->OTYPER  = config->otyper;
 800169a:	f8df e378 	ldr.w	lr, [pc, #888]	; 8001a14 <main+0x424>
 800169e:	4ec1      	ldr	r6, [pc, #772]	; (80019a4 <main+0x3b4>)
 80016a0:	49c1      	ldr	r1, [pc, #772]	; (80019a8 <main+0x3b8>)
 80016a2:	4ac2      	ldr	r2, [pc, #776]	; (80019ac <main+0x3bc>)
 80016a4:	4bc2      	ldr	r3, [pc, #776]	; (80019b0 <main+0x3c0>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80016a6:	f8df a370 	ldr.w	sl, [pc, #880]	; 8001a18 <main+0x428>
  DMA1->LIFCR = 0xFFFFFFFFU;
 80016aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80016ae:	f8c8 7008 	str.w	r7, [r8, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 80016b2:	f8c8 700c 	str.w	r7, [r8, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80016b6:	60af      	str	r7, [r5, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 80016b8:	60ef      	str	r7, [r5, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80016ba:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80016bc:	f045 059f 	orr.w	r5, r5, #159	; 0x9f
 80016c0:	6305      	str	r5, [r0, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80016c2:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80016c6:	4dbb      	ldr	r5, [pc, #748]	; (80019b4 <main+0x3c4>)
 80016c8:	f048 089f 	orr.w	r8, r8, #159	; 0x9f
 80016cc:	f8c0 8050 	str.w	r8, [r0, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 80016d0:	f46f 688a 	mvn.w	r8, #1104	; 0x450
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80016d4:	9001      	str	r0, [sp, #4]
  gpiop->OTYPER  = config->otyper;
 80016d6:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80016da:	f8cc 8008 	str.w	r8, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 80016de:	f8cc b00c 	str.w	fp, [ip, #12]
  gpiop->ODR     = config->odr;
 80016e2:	f64f 78df 	movw	r8, #65503	; 0xffdf
  gpiop->AFRL    = config->afrl;
 80016e6:	f44f 4bee 	mov.w	fp, #30464	; 0x7700
  gpiop->ODR     = config->odr;
 80016ea:	f8cc 8014 	str.w	r8, [ip, #20]
  gpiop->AFRL    = config->afrl;
 80016ee:	f8cc b020 	str.w	fp, [ip, #32]
  gpiop->AFRH    = config->afrh;
 80016f2:	f44f 282a 	mov.w	r8, #696320	; 0xaa000
  gpiop->MODER   = config->moder;
 80016f6:	f8df b324 	ldr.w	fp, [pc, #804]	; 8001a1c <main+0x42c>
  gpiop->AFRH    = config->afrh;
 80016fa:	f8cc 8024 	str.w	r8, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80016fe:	2080      	movs	r0, #128	; 0x80
 8001700:	f8cc b000 	str.w	fp, [ip]
  gpiop->PUPDR   = config->pupdr;
 8001704:	f04f 3855 	mov.w	r8, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8001708:	f64f 7bff 	movw	fp, #65535	; 0xffff
  gpiop->OTYPER  = config->otyper;
 800170c:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001710:	f8ce 7008 	str.w	r7, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8001714:	f8ce 800c 	str.w	r8, [lr, #12]
  gpiop->ODR     = config->odr;
 8001718:	f8ce b014 	str.w	fp, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800171c:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8001720:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001724:	f8ce 0000 	str.w	r0, [lr]
  gpiop->PUPDR   = config->pupdr;
 8001728:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 8001a20 <main+0x430>
  gpiop->OTYPER  = config->otyper;
 800172c:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800172e:	60b7      	str	r7, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001730:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->ODR     = config->odr;
 8001734:	f8c6 b014 	str.w	fp, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001738:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800173a:	6274      	str	r4, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800173c:	6034      	str	r4, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 800173e:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001740:	608f      	str	r7, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001742:	f8c1 800c 	str.w	r8, [r1, #12]
  gpiop->ODR     = config->odr;
 8001746:	f8c1 b014 	str.w	fp, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800174a:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800174c:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800174e:	600c      	str	r4, [r1, #0]
  gpiop->PUPDR   = config->pupdr;
 8001750:	4999      	ldr	r1, [pc, #612]	; (80019b8 <main+0x3c8>)
  gpiop->OTYPER  = config->otyper;
 8001752:	6054      	str	r4, [r2, #4]
 8001754:	2660      	movs	r6, #96	; 0x60
  gpiop->OSPEEDR = config->ospeedr;
 8001756:	6097      	str	r7, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001758:	f8c2 800c 	str.w	r8, [r2, #12]
  gpiop->ODR     = config->odr;
 800175c:	f8c2 b014 	str.w	fp, [r2, #20]
 8001760:	f04f 0801 	mov.w	r8, #1
  gpiop->AFRL    = config->afrl;
 8001764:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001766:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001768:	6014      	str	r4, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 800176a:	605c      	str	r4, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800176c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  gpiop->OSPEEDR = config->ospeedr;
 8001770:	609f      	str	r7, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8001772:	60d9      	str	r1, [r3, #12]
  gpiop->ODR     = config->odr;
 8001774:	f8c3 b014 	str.w	fp, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8001778:	621c      	str	r4, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800177a:	625c      	str	r4, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800177c:	601c      	str	r4, [r3, #0]
  ADCD1.adc = ADC1;
 800177e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8001782:	f885 8000 	strb.w	r8, [r5]
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001786:	498d      	ldr	r1, [pc, #564]	; (80019bc <main+0x3cc>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001788:	f88a 6312 	strb.w	r6, [sl, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800178c:	f8ca 2180 	str.w	r2, [sl, #384]	; 0x180
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8001790:	4e8b      	ldr	r6, [pc, #556]	; (80019c0 <main+0x3d0>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001792:	f8ca 2000 	str.w	r2, [sl]
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001796:	4a8b      	ldr	r2, [pc, #556]	; (80019c4 <main+0x3d4>)
  ADCD1.adc = ADC1;
 8001798:	62ab      	str	r3, [r5, #40]	; 0x28
  tqp->p_next = (thread_t *)tqp;
 800179a:	f105 0318 	add.w	r3, r5, #24
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 800179e:	62e9      	str	r1, [r5, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80017a0:	632a      	str	r2, [r5, #48]	; 0x30
 80017a2:	61ab      	str	r3, [r5, #24]
  adcp->config   = NULL;
 80017a4:	606c      	str	r4, [r5, #4]
  adcp->samples  = NULL;
 80017a6:	60ac      	str	r4, [r5, #8]
  adcp->depth    = 0;
 80017a8:	60ec      	str	r4, [r5, #12]
  adcp->grpp     = NULL;
 80017aa:	612c      	str	r4, [r5, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80017ac:	616c      	str	r4, [r5, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80017ae:	622c      	str	r4, [r5, #32]
  tqp->p_prev = (thread_t *)tqp;
 80017b0:	61eb      	str	r3, [r5, #28]
  icu_lld_init();
 80017b2:	f7ff f9f5 	bl	8000ba0 <icu_lld_init>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80017b6:	2204      	movs	r2, #4
  PWMD1.tim = STM32_TIM1;
 80017b8:	4b83      	ldr	r3, [pc, #524]	; (80019c8 <main+0x3d8>)
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80017ba:	7432      	strb	r2, [r6, #16]
  PWMD1.tim = STM32_TIM1;
 80017bc:	61b3      	str	r3, [r6, #24]
 80017be:	f886 8000 	strb.w	r8, [r6]
  pwmp->config   = NULL;
 80017c2:	6074      	str	r4, [r6, #4]
  pwmp->enabled  = 0;
 80017c4:	60f4      	str	r4, [r6, #12]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 80017c6:	f000 fc1b 	bl	8002000 <sdObjectInit.constprop.23>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80017ca:	9801      	ldr	r0, [sp, #4]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80017cc:	497f      	ldr	r1, [pc, #508]	; (80019cc <main+0x3dc>)
  ST_ENABLE_CLOCK();
 80017ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
  SCB->VTOR = CORTEX_VTOR_INIT;
 80017d0:	4a7f      	ldr	r2, [pc, #508]	; (80019d0 <main+0x3e0>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6403      	str	r3, [r0, #64]	; 0x40
  ST_ENABLE_STOP();
 80017d8:	6888      	ldr	r0, [r1, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80017da:	4b7e      	ldr	r3, [pc, #504]	; (80019d4 <main+0x3e4>)
  ST_ENABLE_STOP();
 80017dc:	f040 0004 	orr.w	r0, r0, #4
 80017e0:	6088      	str	r0, [r1, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80017e2:	f242 517f 	movw	r1, #9599	; 0x257f
 80017e6:	6299      	str	r1, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80017e8:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80017ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  STM32_ST_TIM->CCMR1  = 0;
 80017f0:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80017f2:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80017f4:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80017f6:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80017f8:	f8c3 8014 	str.w	r8, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80017fc:	f8c3 8000 	str.w	r8, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001800:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001804:	f88a 331e 	strb.w	r3, [sl, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001808:	f8ca 1180 	str.w	r1, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800180c:	f8ca 1000 	str.w	r1, [sl]
 8001810:	6094      	str	r4, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001812:	f8d2 e00c 	ldr.w	lr, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001816:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <main+0x3e8>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001818:	4970      	ldr	r1, [pc, #448]	; (80019dc <main+0x3ec>)
  tqp->p_next = (thread_t *)tqp;
 800181a:	f8df a208 	ldr.w	sl, [pc, #520]	; 8001a24 <main+0x434>
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800181e:	4870      	ldr	r0, [pc, #448]	; (80019e0 <main+0x3f0>)
  SD1.usart = USART1;
 8001820:	f8df b204 	ldr.w	fp, [pc, #516]	; 8001a28 <main+0x438>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001824:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 8001828:	ea0e 0e0c 	and.w	lr, lr, ip
  reg_value  =  (reg_value                                   |
 800182c:	ea4e 0303 	orr.w	r3, lr, r3
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001830:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001832:	68cb      	ldr	r3, [r1, #12]
  tqp->p_prev = (thread_t *)tqp;
 8001834:	f8ca a004 	str.w	sl, [sl, #4]
 8001838:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183c:	60cb      	str	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800183e:	6801      	ldr	r1, [r0, #0]
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <main+0x3f4>)
  ch.rlist.r_prio = NOPRIO;
 8001842:	f8ca 4008 	str.w	r4, [sl, #8]
 8001846:	ea41 0108 	orr.w	r1, r1, r8
 800184a:	6001      	str	r1, [r0, #0]
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800184c:	f10a 0e1c 	add.w	lr, sl, #28
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	2120      	movs	r1, #32
 8001852:	f882 901f 	strb.w	r9, [r2, #31]
  chTMStartMeasurementX(&tm);
 8001856:	a802      	add	r0, sp, #8
 8001858:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
 800185c:	9101      	str	r1, [sp, #4]
 800185e:	f8ca e01c 	str.w	lr, [sl, #28]
  tmp->cumulative = (rttime_t)0;
 8001862:	2200      	movs	r2, #0
  tqp->p_next = (thread_t *)tqp;
 8001864:	f8ca a000 	str.w	sl, [sl]
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8001868:	f8ca a010 	str.w	sl, [sl, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800186c:	f8ca a014 	str.w	sl, [sl, #20]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001870:	f8ca e020 	str.w	lr, [sl, #32]
 8001874:	f8cb 3074 	str.w	r3, [fp, #116]	; 0x74
 8001878:	2300      	movs	r3, #0
 800187a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  ch.vtlist.vt_delta = (systime_t)-1;
 800187e:	f8aa 7024 	strh.w	r7, [sl, #36]	; 0x24
  tmp->best       = (rtcnt_t)-1;
 8001882:	9702      	str	r7, [sp, #8]
  ch.vtlist.vt_lasttime = (systime_t)0;
 8001884:	f8aa 4026 	strh.w	r4, [sl, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
 8001888:	f8ca 4070 	str.w	r4, [sl, #112]	; 0x70
  tmp->worst      = (rtcnt_t)0;
 800188c:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 800188e:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8001890:	9405      	str	r4, [sp, #20]
  chTMStartMeasurementX(&tm);
 8001892:	f000 fb75 	bl	8001f80 <chTMStartMeasurementX.constprop.31>
  chTMStopMeasurementX(&tm);
 8001896:	a802      	add	r0, sp, #8
 8001898:	f7ff fa22 	bl	8000ce0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800189c:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <main+0x3f8>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800189e:	4853      	ldr	r0, [pc, #332]	; (80019ec <main+0x3fc>)
  REG_INSERT(tp);
 80018a0:	f8da e014 	ldr.w	lr, [sl, #20]
  ch.tm.offset = tm.last;
 80018a4:	9904      	ldr	r1, [sp, #16]
 80018a6:	f8ca e040 	str.w	lr, [sl, #64]	; 0x40
 80018aa:	f103 0710 	add.w	r7, r3, #16
 80018ae:	611f      	str	r7, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 80018b0:	615f      	str	r7, [r3, #20]
 80018b2:	f020 0c07 	bic.w	ip, r0, #7
  tp->p_prio = prio;
 80018b6:	2740      	movs	r7, #64	; 0x40
  REG_INSERT(tp);
 80018b8:	f10a 002c 	add.w	r0, sl, #44	; 0x2c
 80018bc:	619c      	str	r4, [r3, #24]
  tp->p_prio = prio;
 80018be:	f8ca 7034 	str.w	r7, [sl, #52]	; 0x34
  tp->p_realprio = prio;
 80018c2:	f8ca 7068 	str.w	r7, [sl, #104]	; 0x68
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80018c6:	f88a 4049 	strb.w	r4, [sl, #73]	; 0x49
  tp->p_mtxlist = NULL;
 80018ca:	f8ca 4064 	str.w	r4, [sl, #100]	; 0x64
  tp->p_epending = (eventmask_t)0;
 80018ce:	f8ca 4060 	str.w	r4, [sl, #96]	; 0x60
  tp->p_refs = (trefs_t)1;
 80018d2:	f88a 804a 	strb.w	r8, [sl, #74]	; 0x4a
  tp->p_name = NULL;
 80018d6:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
  REG_INSERT(tp);
 80018da:	f8ca a03c 	str.w	sl, [sl, #60]	; 0x3c
 80018de:	f8ca 1070 	str.w	r1, [sl, #112]	; 0x70
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80018e2:	4a43      	ldr	r2, [pc, #268]	; (80019f0 <main+0x400>)
 80018e4:	f8ce 0010 	str.w	r0, [lr, #16]
 80018e8:	f8ca 0014 	str.w	r0, [sl, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80018ec:	f8ca 0018 	str.w	r0, [sl, #24]
  tlp->p_next = (thread_t *)tlp;
 80018f0:	f10a 0050 	add.w	r0, sl, #80	; 0x50
 80018f4:	f8df e134 	ldr.w	lr, [pc, #308]	; 8001a2c <main+0x43c>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80018f8:	4f3e      	ldr	r7, [pc, #248]	; (80019f4 <main+0x404>)
 80018fa:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
 80018fe:	483e      	ldr	r0, [pc, #248]	; (80019f8 <main+0x408>)
  default_heap.h_free.h.u.next = NULL;
 8001900:	609c      	str	r4, [r3, #8]
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001902:	f022 0207 	bic.w	r2, r2, #7
  default_heap.h_free.h.size = 0;
 8001906:	60dc      	str	r4, [r3, #12]
  default_heap.h_provider = chCoreAlloc;
 8001908:	6018      	str	r0, [r3, #0]
  tqp->p_next = (thread_t *)tqp;
 800190a:	f10a 0354 	add.w	r3, sl, #84	; 0x54
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800190e:	f88a 8048 	strb.w	r8, [sl, #72]	; 0x48
 8001912:	f8ca 3054 	str.w	r3, [sl, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 8001916:	f8ca 3058 	str.w	r3, [sl, #88]	; 0x58
 800191a:	f8ce 2000 	str.w	r2, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800191e:	f8c7 c000 	str.w	ip, [r7]
 8001922:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8001926:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001928:	f8da 3018 	ldr.w	r3, [sl, #24]
 800192c:	4a33      	ldr	r2, [pc, #204]	; (80019fc <main+0x40c>)
 800192e:	619a      	str	r2, [r3, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001930:	9901      	ldr	r1, [sp, #4]
 8001932:	f381 8811 	msr	BASEPRI, r1
 8001936:	f8da 3014 	ldr.w	r3, [sl, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800193a:	4f31      	ldr	r7, [pc, #196]	; (8001a00 <main+0x410>)
 800193c:	4831      	ldr	r0, [pc, #196]	; (8001a04 <main+0x414>)
  tp->p_prio = prio;
 800193e:	f8ca 8080 	str.w	r8, [sl, #128]	; 0x80
  tp->p_state = CH_STATE_WTSTART;
 8001942:	2102      	movs	r1, #2
  REG_INSERT(tp);
 8001944:	f10a 0278 	add.w	r2, sl, #120	; 0x78
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001948:	f50a 7e96 	add.w	lr, sl, #300	; 0x12c
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800194c:	f88a 4095 	strb.w	r4, [sl, #149]	; 0x95
  tp->p_realprio = prio;
 8001950:	f8ca 80b4 	str.w	r8, [sl, #180]	; 0xb4
  tp->p_epending = (eventmask_t)0;
 8001954:	f8ca 40ac 	str.w	r4, [sl, #172]	; 0xac
  tp->p_refs = (trefs_t)1;
 8001958:	f88a 8096 	strb.w	r8, [sl, #150]	; 0x96
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800195c:	f8ca 712c 	str.w	r7, [sl, #300]	; 0x12c
 8001960:	f8ca 014c 	str.w	r0, [sl, #332]	; 0x14c
  tp->p_state = CH_STATE_WTSTART;
 8001964:	f88a 1094 	strb.w	r1, [sl, #148]	; 0x94
  REG_INSERT(tp);
 8001968:	f8ca 308c 	str.w	r3, [sl, #140]	; 0x8c
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800196c:	f8ca 4130 	str.w	r4, [sl, #304]	; 0x130
  tp->p_mtxlist = NULL;
 8001970:	f8ca 40b0 	str.w	r4, [sl, #176]	; 0xb0
  tp->p_name = NULL;
 8001974:	f8ca 4090 	str.w	r4, [sl, #144]	; 0x90
  REG_INSERT(tp);
 8001978:	f8ca a088 	str.w	sl, [sl, #136]	; 0x88
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800197c:	f8ca e084 	str.w	lr, [sl, #132]	; 0x84
  REG_INSERT(tp);
 8001980:	611a      	str	r2, [r3, #16]
  if (ntp->p_prio <= currp->p_prio) {
 8001982:	f8da 3018 	ldr.w	r3, [sl, #24]
  ntp->p_u.rdymsg = msg;
 8001986:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
  if (ntp->p_prio <= currp->p_prio) {
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	f8ca 2014 	str.w	r2, [sl, #20]
  tqp->p_next = (thread_t *)tqp;
 8001990:	f10a 00a0 	add.w	r0, sl, #160	; 0xa0
 8001994:	e04c      	b.n	8001a30 <main+0x440>
 8001996:	bf00      	nop
 8001998:	200009e0 	.word	0x200009e0
 800199c:	40026400 	.word	0x40026400
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40021c00 	.word	0x40021c00
 80019b4:	20000838 	.word	0x20000838
 80019b8:	55555550 	.word	0x55555550
 80019bc:	080026e0 	.word	0x080026e0
 80019c0:	20000ab4 	.word	0x20000ab4
 80019c4:	00022c16 	.word	0x00022c16
 80019c8:	40010000 	.word	0x40010000
 80019cc:	e0042000 	.word	0xe0042000
 80019d0:	e000ed00 	.word	0xe000ed00
 80019d4:	40000800 	.word	0x40000800
 80019d8:	05fa0300 	.word	0x05fa0300
 80019dc:	e000edf0 	.word	0xe000edf0
 80019e0:	e0001000 	.word	0xe0001000
 80019e4:	40011000 	.word	0x40011000
 80019e8:	200009c0 	.word	0x200009c0
 80019ec:	20020000 	.word	0x20020000
 80019f0:	20000ba7 	.word	0x20000ba7
 80019f4:	20000a64 	.word	0x20000a64
 80019f8:	08000871 	.word	0x08000871
 80019fc:	08002710 	.word	0x08002710
 8001a00:	08000921 	.word	0x08000921
 8001a04:	080002a1 	.word	0x080002a1
 8001a08:	40026000 	.word	0x40026000
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	64155105 	.word	0x64155105
 8001a14:	40020400 	.word	0x40020400
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	2a8004a0 	.word	0x2a8004a0
 8001a20:	51555555 	.word	0x51555555
 8001a24:	20000870 	.word	0x20000870
 8001a28:	20000ad0 	.word	0x20000ad0
 8001a2c:	20000a68 	.word	0x20000a68
  tlp->p_next = (thread_t *)tlp;
 8001a30:	f10a 079c 	add.w	r7, sl, #156	; 0x9c
 8001a34:	f8ca 709c 	str.w	r7, [sl, #156]	; 0x9c
  tqp->p_next = (thread_t *)tqp;
 8001a38:	f8ca 00a0 	str.w	r0, [sl, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 8001a3c:	f8ca 00a4 	str.w	r0, [sl, #164]	; 0xa4
 8001a40:	2900      	cmp	r1, #0
 8001a42:	f000 81e3 	beq.w	8001e0c <main+0x81c>
  tp->p_state = CH_STATE_READY;
 8001a46:	f88a 4094 	strb.w	r4, [sl, #148]	; 0x94
  cp = (thread_t *)&ch.rlist.r_queue;
 8001a4a:	4653      	mov	r3, sl
    cp = cp->p_next;
 8001a4c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001a4e:	6899      	ldr	r1, [r3, #8]
 8001a50:	2900      	cmp	r1, #0
 8001a52:	d1fb      	bne.n	8001a4c <main+0x45c>
  tp->p_next = cp;
 8001a54:	f8ca 3078 	str.w	r3, [sl, #120]	; 0x78
  tp->p_prev = cp->p_prev;
 8001a58:	6858      	ldr	r0, [r3, #4]
 8001a5a:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
  tp->p_prev->p_next = tp;
 8001a5e:	6002      	str	r2, [r0, #0]
  cp->p_prev = tp;
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	f381 8811 	msr	BASEPRI, r1
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8001a66:	4bcf      	ldr	r3, [pc, #828]	; (8001da4 <main+0x7b4>)
 8001a68:	f8ca 3090 	str.w	r3, [sl, #144]	; 0x90
  sdObjectInit(&SD1, NULL, notify1);
 8001a6c:	f000 fac8 	bl	8002000 <sdObjectInit.constprop.23>
  SD1.usart = USART1;
 8001a70:	4bcd      	ldr	r3, [pc, #820]	; (8001da8 <main+0x7b8>)
 8001a72:	f8cb 3074 	str.w	r3, [fp, #116]	; 0x74
 8001a76:	2220      	movs	r2, #32
 8001a78:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001a7c:	f89b 3008 	ldrb.w	r3, [fp, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	f000 81c5 	beq.w	8001e10 <main+0x820>
  USART_TypeDef *u = sdp->usart;
 8001a86:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8001a8a:	4bc7      	ldr	r3, [pc, #796]	; (8001da8 <main+0x7b8>)
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f000 81d1 	beq.w	8001e34 <main+0x844>
 8001a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a96:	429a      	cmp	r2, r3
 8001a98:	f000 81cc 	beq.w	8001e34 <main+0x844>
    u->BRR = STM32_PCLK1 / config->speed;
 8001a9c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001aa0:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001aa2:	2340      	movs	r3, #64	; 0x40
 8001aa4:	6113      	str	r3, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001aa6:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001aa8:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 8001aac:	2300      	movs	r3, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001aae:	6151      	str	r1, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001ab0:	60d0      	str	r0, [r2, #12]
  u->SR = 0;
 8001ab2:	6013      	str	r3, [r2, #0]
  sdp->state = SD_READY;
 8001ab4:	2002      	movs	r0, #2
  (void)u->SR;  /* SR reset step 1.*/
 8001ab6:	6814      	ldr	r4, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001ab8:	6852      	ldr	r2, [r2, #4]
 8001aba:	f88b 0008 	strb.w	r0, [fp, #8]
 8001abe:	f383 8811 	msr	BASEPRI, r3
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001ac2:	2004      	movs	r0, #4
  PWMD1.tim = STM32_TIM1;
 8001ac4:	4ab9      	ldr	r2, [pc, #740]	; (8001dac <main+0x7bc>)
 8001ac6:	61b2      	str	r2, [r6, #24]
  pwmp->state    = PWM_STOP;
 8001ac8:	7031      	strb	r1, [r6, #0]
  pwmp->config   = NULL;
 8001aca:	6073      	str	r3, [r6, #4]
  pwmp->enabled  = 0;
 8001acc:	60f3      	str	r3, [r6, #12]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001ace:	7430      	strb	r0, [r6, #16]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8001ad6:	49b6      	ldr	r1, [pc, #728]	; (8001db0 <main+0x7c0>)
  if (pwmp->state == PWM_STOP) {
 8001ad8:	7832      	ldrb	r2, [r6, #0]
  pwmp->period = config->period;
 8001ada:	f8d1 e004 	ldr.w	lr, [r1, #4]
  pwmp->config = config;
 8001ade:	6071      	str	r1, [r6, #4]
 8001ae0:	2a01      	cmp	r2, #1
  pwmp->period = config->period;
 8001ae2:	f8c6 e008 	str.w	lr, [r6, #8]
 8001ae6:	f000 820f 	beq.w	8001f08 <main+0x918>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8001aea:	69b2      	ldr	r2, [r6, #24]
 8001aec:	6974      	ldr	r4, [r6, #20]
 8001aee:	6013      	str	r3, [r2, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8001af0:	6353      	str	r3, [r2, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001af2:	6393      	str	r3, [r2, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8001af4:	63d3      	str	r3, [r2, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8001af8:	6253      	str	r3, [r2, #36]	; 0x24
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001afa:	68cb      	ldr	r3, [r1, #12]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001afc:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001afe:	6808      	ldr	r0, [r1, #0]
 8001b00:	fbb4 f0f0 	udiv	r0, r4, r0
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001b04:	f003 030f 	and.w	r3, r3, #15
  pwmp->tim->ARR  = pwmp->period - 1;
 8001b08:	f10e 34ff 	add.w	r4, lr, #4294967295	; 0xffffffff
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001b0c:	3801      	subs	r0, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001b0e:	2b01      	cmp	r3, #1
  pwmp->tim->PSC  = psc;
 8001b10:	6290      	str	r0, [r2, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8001b12:	62d4      	str	r4, [r2, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001b14:	6057      	str	r7, [r2, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001b16:	d003      	beq.n	8001b20 <main+0x530>
  ccer = 0;
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2303      	moveq	r3, #3
 8001b1e:	2300      	movne	r3, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001b20:	6948      	ldr	r0, [r1, #20]
 8001b22:	f000 000f 	and.w	r0, r0, #15
 8001b26:	2801      	cmp	r0, #1
 8001b28:	d003      	beq.n	8001b32 <main+0x542>
 8001b2a:	2802      	cmp	r0, #2
 8001b2c:	d103      	bne.n	8001b36 <main+0x546>
    ccer |= STM32_TIM_CCER_CC2P;
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
    ccer |= STM32_TIM_CCER_CC2E;
 8001b32:	f043 0310 	orr.w	r3, r3, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8001b36:	69c8      	ldr	r0, [r1, #28]
 8001b38:	f000 000f 	and.w	r0, r0, #15
 8001b3c:	2801      	cmp	r0, #1
 8001b3e:	d003      	beq.n	8001b48 <main+0x558>
 8001b40:	2802      	cmp	r0, #2
 8001b42:	d103      	bne.n	8001b4c <main+0x55c>
    ccer |= STM32_TIM_CCER_CC3P;
 8001b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8001b4c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001b4e:	f000 000f 	and.w	r0, r0, #15
 8001b52:	2801      	cmp	r0, #1
 8001b54:	d003      	beq.n	8001b5e <main+0x56e>
 8001b56:	2802      	cmp	r0, #2
 8001b58:	d103      	bne.n	8001b62 <main+0x572>
    ccer |= STM32_TIM_CCER_CC4P;
 8001b5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8001b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001b62:	6b09      	ldr	r1, [r1, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 8001b64:	6213      	str	r3, [r2, #32]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001b66:	2400      	movs	r4, #0
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001b68:	f021 03ff 	bic.w	r3, r1, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001b6c:	f04f 0e01 	mov.w	lr, #1
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8001b70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001b74:	2185      	movs	r1, #133	; 0x85
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8001b76:	2702      	movs	r7, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001b78:	f8c2 e014 	str.w	lr, [r2, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001b7c:	6114      	str	r4, [r2, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001b7e:	60d3      	str	r3, [r2, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8001b80:	6450      	str	r0, [r2, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001b82:	6011      	str	r1, [r2, #0]
  pwmp->enabled = 0;
 8001b84:	60f4      	str	r4, [r6, #12]
  pwmp->state = PWM_READY;
 8001b86:	7037      	strb	r7, [r6, #0]
 8001b88:	f384 8811 	msr	BASEPRI, r4
 8001b8c:	f7ff f808 	bl	8000ba0 <icu_lld_init>
 8001b90:	2620      	movs	r6, #32
 8001b92:	f386 8811 	msr	BASEPRI, r6
  icup->config = config;
 8001b96:	f8df a234 	ldr.w	sl, [pc, #564]	; 8001dcc <main+0x7dc>
 8001b9a:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <main+0x7c4>)
 8001b9c:	f8ca 3004 	str.w	r3, [sl, #4]
  icu_lld_start(icup);
 8001ba0:	4650      	mov	r0, sl
 8001ba2:	f7fe ff5d 	bl	8000a60 <icu_lld_start>
  icup->state = ICU_READY;
 8001ba6:	f88a 7000 	strb.w	r7, [sl]
 8001baa:	f384 8811 	msr	BASEPRI, r4
 8001bae:	f386 8811 	msr	BASEPRI, r6
  icup->config = config;
 8001bb2:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8001dd0 <main+0x7e0>
 8001bb6:	4b80      	ldr	r3, [pc, #512]	; (8001db8 <main+0x7c8>)
 8001bb8:	f8c9 3004 	str.w	r3, [r9, #4]
  icu_lld_start(icup);
 8001bbc:	4648      	mov	r0, r9
 8001bbe:	f7fe ff4f 	bl	8000a60 <icu_lld_start>
  icup->state = ICU_READY;
 8001bc2:	f889 7000 	strb.w	r7, [r9]
 8001bc6:	f384 8811 	msr	BASEPRI, r4
 8001bca:	f386 8811 	msr	BASEPRI, r6
  icup->config = config;
 8001bce:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8001dd4 <main+0x7e4>
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <main+0x7cc>)
 8001bd4:	f8c8 3004 	str.w	r3, [r8, #4]
  icu_lld_start(icup);
 8001bd8:	4640      	mov	r0, r8
 8001bda:	f7fe ff41 	bl	8000a60 <icu_lld_start>
  icup->state = ICU_READY;
 8001bde:	f888 7000 	strb.w	r7, [r8]
 8001be2:	f384 8811 	msr	BASEPRI, r4
    
    icuStart(&ICUD2, &icucfgA);
    icuStart(&ICUD5, &icucfgB);
    icuStart(&ICUD3, &icucfgC);
    
    icuStartCapture(&ICUD2);
 8001be6:	4650      	mov	r0, sl
 8001be8:	f7ff f862 	bl	8000cb0 <icuStartCapture>
    icuStartCapture(&ICUD5);
 8001bec:	4648      	mov	r0, r9
 8001bee:	f7ff f85f 	bl	8000cb0 <icuStartCapture>
    icuStartCapture(&ICUD3);
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	f7ff f85c 	bl	8000cb0 <icuStartCapture>

    //ADC
    palSetGroupMode(GPIOA, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	2106      	movs	r1, #6
 8001bfc:	4870      	ldr	r0, [pc, #448]	; (8001dc0 <main+0x7d0>)
 8001bfe:	f7fe ffef 	bl	8000be0 <_pal_lld_setgroupmode>
                    0, PAL_MODE_INPUT_ANALOG);
    palSetGroupMode(GPIOB, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 8001c02:	2203      	movs	r2, #3
 8001c04:	2106      	movs	r1, #6
 8001c06:	486f      	ldr	r0, [pc, #444]	; (8001dc4 <main+0x7d4>)
 8001c08:	f7fe ffea 	bl	8000be0 <_pal_lld_setgroupmode>
 8001c0c:	f386 8811 	msr	BASEPRI, r6
  if (adcp->state == ADC_STOP) {
 8001c10:	782b      	ldrb	r3, [r5, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8001c12:	606c      	str	r4, [r5, #4]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	f000 8117 	beq.w	8001e48 <main+0x858>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 8001c1a:	f04f 0802 	mov.w	r8, #2
 8001c1e:	f885 8000 	strb.w	r8, [r5]
 8001c22:	2700      	movs	r7, #0
 8001c24:	f387 8811 	msr	BASEPRI, r7
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 8001c28:	4a67      	ldr	r2, [pc, #412]	; (8001dc8 <main+0x7d8>)
 8001c2a:	6853      	ldr	r3, [r2, #4]
 8001c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c30:	6053      	str	r3, [r2, #4]
 8001c32:	2620      	movs	r6, #32
 8001c34:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 8001c38:	4864      	ldr	r0, [pc, #400]	; (8001dcc <main+0x7dc>)
 8001c3a:	f7fe fef1 	bl	8000a20 <icu_lld_enable_notifications>
 8001c3e:	f387 8811 	msr	BASEPRI, r7
 8001c42:	f386 8811 	msr	BASEPRI, r6
 8001c46:	4862      	ldr	r0, [pc, #392]	; (8001dd0 <main+0x7e0>)
 8001c48:	f7fe feea 	bl	8000a20 <icu_lld_enable_notifications>
 8001c4c:	f387 8811 	msr	BASEPRI, r7
 8001c50:	f386 8811 	msr	BASEPRI, r6
 8001c54:	485f      	ldr	r0, [pc, #380]	; (8001dd4 <main+0x7e4>)
 8001c56:	f7fe fee3 	bl	8000a20 <icu_lld_enable_notifications>
 8001c5a:	f387 8811 	msr	BASEPRI, r7
    palSetPadMode(GPIOA,15,PAL_MODE_ALTERNATE(7));
 8001c5e:	4c58      	ldr	r4, [pc, #352]	; (8001dc0 <main+0x7d0>)
    palSetPadMode(GPIOC,10,PAL_MODE_OUTPUT_PUSHPULL);
 8001c60:	4d5d      	ldr	r5, [pc, #372]	; (8001dd8 <main+0x7e8>)
    } else {
        set_motor_state(0, motor_number);
    }

    motor_freqs[motor_number] = speed; 
    if (motor_actual_speeds[motor_number] == 0) {
 8001c62:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001df4 <main+0x804>
    palSetPadMode(GPIOA,15,PAL_MODE_ALTERNATE(7));
 8001c66:	4620      	mov	r0, r4
 8001c68:	f240 3282 	movw	r2, #898	; 0x382
 8001c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c70:	f7fe ffb6 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,3,PAL_MODE_ALTERNATE(7));
 8001c74:	f240 3282 	movw	r2, #898	; 0x382
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4852      	ldr	r0, [pc, #328]	; (8001dc4 <main+0x7d4>)
 8001c7c:	f7fe ffb0 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,10,PAL_MODE_OUTPUT_PUSHPULL);
 8001c80:	4628      	mov	r0, r5
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c88:	f7fe ffaa 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,12,PAL_MODE_OUTPUT_PUSHPULL);
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c94:	f7fe ffa4 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,8,PAL_MODE_ALTERNATE(1));
 8001c98:	4620      	mov	r0, r4
 8001c9a:	2282      	movs	r2, #130	; 0x82
 8001c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca0:	f7fe ff9e 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,8,PAL_MODE_OUTPUT_PUSHPULL);
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cac:	f7fe ff98 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,9,PAL_MODE_OUTPUT_PUSHPULL);
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb8:	f7fe ff92 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,9,PAL_MODE_ALTERNATE(1));
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	2282      	movs	r2, #130	; 0x82
 8001cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc4:	f7fe ff8c 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,5,PAL_MODE_OUTPUT_PUSHPULL);
 8001cc8:	4631      	mov	r1, r6
 8001cca:	4628      	mov	r0, r5
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f7fe ff87 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,6,PAL_MODE_OUTPUT_PUSHPULL);
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2140      	movs	r1, #64	; 0x40
 8001cd8:	f7fe ff82 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,10,PAL_MODE_ALTERNATE(1));
 8001cdc:	4620      	mov	r0, r4
 8001cde:	2282      	movs	r2, #130	; 0x82
 8001ce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce4:	f7fe ff7c 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,0,PAL_MODE_ALTERNATE(1));
 8001ce8:	4620      	mov	r0, r4
 8001cea:	2282      	movs	r2, #130	; 0x82
 8001cec:	2101      	movs	r1, #1
 8001cee:	f7fe ff77 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,1,PAL_MODE_ALTERNATE(2));
 8001cf2:	4641      	mov	r1, r8
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001cfa:	f7fe ff71 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,4,PAL_MODE_ALTERNATE(2));
 8001cfe:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001d02:	2110      	movs	r1, #16
 8001d04:	482f      	ldr	r0, [pc, #188]	; (8001dc4 <main+0x7d4>)
  vtp->vt_func = NULL;
 8001d06:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001dec <main+0x7fc>
 8001d0a:	f7fe ff69 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,6,PAL_MODE_INPUT_ANALOG);
 8001d0e:	4620      	mov	r0, r4
 8001d10:	2203      	movs	r2, #3
 8001d12:	2140      	movs	r1, #64	; 0x40
 8001d14:	f7fe ff64 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,7,PAL_MODE_INPUT_ANALOG);
 8001d18:	4620      	mov	r0, r4
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	f7fe ff5f 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,5,PAL_MODE_OUTPUT_PUSHPULL);
 8001d22:	4620      	mov	r0, r4
 8001d24:	4631      	mov	r1, r6
 8001d26:	2201      	movs	r2, #1
 8001d28:	f7fe ff5a 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,6,PAL_MODE_OUTPUT_PUSHPULL);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	4824      	ldr	r0, [pc, #144]	; (8001dc4 <main+0x7d4>)
 8001d32:	f7fe ff55 	bl	8000be0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,7,PAL_MODE_OUTPUT_PUSHPULL);
 8001d36:	2201      	movs	r2, #1
 8001d38:	4628      	mov	r0, r5
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	f7fe ff50 	bl	8000be0 <_pal_lld_setgroupmode>

    board_init();
    init_pins();
    chprintf(&SD1, "Loaded! \r\n");
 8001d40:	4926      	ldr	r1, [pc, #152]	; (8001ddc <main+0x7ec>)
 8001d42:	4827      	ldr	r0, [pc, #156]	; (8001de0 <main+0x7f0>)
 8001d44:	f000 fa54 	bl	80021f0 <chprintf.constprop.0>
            palClearPad(GPIOC, pinA);
            palClearPad(GPIOC, pinB);
            break;
        case 1:
            palSetPad(GPIOC, pinA);
            palClearPad(GPIOC, pinB);
 8001d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
            palSetPad(GPIOC, pinA);
 8001d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    //init_sensor_thread();
    timer_init();
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001d50:	8366      	strh	r6, [r4, #26]
 8001d52:	832a      	strh	r2, [r5, #24]
            palClearPad(GPIOC, pinB);
 8001d54:	836b      	strh	r3, [r5, #26]
    if (motor_actual_speeds[motor_number] == 0) {
 8001d56:	f9b9 0000 	ldrsh.w	r0, [r9]
    motor_freqs[motor_number] = speed; 
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <main+0x7f4>)
 8001d5c:	f8c8 700c 	str.w	r7, [r8, #12]
 8001d60:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8001d64:	f8c8 7020 	str.w	r7, [r8, #32]
 8001d68:	f8c8 7034 	str.w	r7, [r8, #52]	; 0x34
 8001d6c:	601c      	str	r4, [r3, #0]
    if (motor_actual_speeds[motor_number] == 0) {
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d064      	beq.n	8001e3c <main+0x84c>
    index = motor_number;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <main+0x7f8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	2320      	movs	r3, #32
 8001d7a:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8001d7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001d82:	b113      	cbz	r3, 8001d8a <main+0x79a>
    chVTDoResetI(vtp);
 8001d84:	4819      	ldr	r0, [pc, #100]	; (8001dec <main+0x7fc>)
 8001d86:	f7ff f9f3 	bl	8001170 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <main+0x800>)
 8001d8e:	4817      	ldr	r0, [pc, #92]	; (8001dec <main+0x7fc>)
 8001d90:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001d94:	f7ff fa2c 	bl	80011f0 <chVTDoSetI>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f383 8811 	msr	BASEPRI, r3
 8001d9e:	2420      	movs	r4, #32
 8001da0:	e02a      	b.n	8001df8 <main+0x808>
 8001da2:	bf00      	nop
 8001da4:	08002790 	.word	0x08002790
 8001da8:	40011000 	.word	0x40011000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	20000800 	.word	0x20000800
 8001db4:	08002730 	.word	0x08002730
 8001db8:	08002750 	.word	0x08002750
 8001dbc:	08002770 	.word	0x08002770
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40012300 	.word	0x40012300
 8001dcc:	20000a6c 	.word	0x20000a6c
 8001dd0:	20000a9c 	.word	0x20000a9c
 8001dd4:	20000a84 	.word	0x20000a84
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	08002798 	.word	0x08002798
 8001de0:	20000ad0 	.word	0x20000ad0
 8001de4:	20000b8c 	.word	0x20000b8c
 8001de8:	20000834 	.word	0x20000834
 8001dec:	20000b48 	.word	0x20000b48
 8001df0:	08002091 	.word	0x08002091
 8001df4:	20000b84 	.word	0x20000b84
 8001df8:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001dfc:	2164      	movs	r1, #100	; 0x64
 8001dfe:	2008      	movs	r0, #8
 8001e00:	f7ff fa46 	bl	8001290 <chSchGoSleepTimeoutS>
 8001e04:	2300      	movs	r3, #0
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	e7f5      	b.n	8001df8 <main+0x808>
  tp->p_state = CH_STATE_READY;
 8001e0c:	7719      	strb	r1, [r3, #28]
 8001e0e:	e7fe      	b.n	8001e0e <main+0x81e>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8001e10:	4850      	ldr	r0, [pc, #320]	; (8001f54 <main+0x964>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001e12:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <main+0x968>)
 8001e14:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001e16:	f041 0110 	orr.w	r1, r1, #16
 8001e1a:	6441      	str	r1, [r0, #68]	; 0x44
 8001e1c:	21c0      	movs	r1, #192	; 0xc0
 8001e1e:	f883 1325 	strb.w	r1, [r3, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001e22:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001e26:	605a      	str	r2, [r3, #4]
  USART_TypeDef *u = sdp->usart;
 8001e28:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8001e2c:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <main+0x96c>)
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	f47f ae2f 	bne.w	8001a92 <main+0x4a2>
    u->BRR = STM32_PCLK2 / config->speed;
 8001e34:	f240 3341 	movw	r3, #833	; 0x341
 8001e38:	6093      	str	r3, [r2, #8]
 8001e3a:	e632      	b.n	8001aa2 <main+0x4b2>
        pwmEnableChannel(&PWMD1, motor_number, speed);
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	f000 f90f 	bl	8002060 <pwmEnableChannel.constprop.11>
        motor_actual_speeds[motor_number] = speed;
 8001e42:	f8a9 4000 	strh.w	r4, [r9]
 8001e46:	e794      	b.n	8001d72 <main+0x782>
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001e48:	4a45      	ldr	r2, [pc, #276]	; (8001f60 <main+0x970>)
      b = dmaStreamAllocate(adcp->dmastp,
 8001e4a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001e4c:	6810      	ldr	r0, [r2, #0]
 8001e4e:	7a4a      	ldrb	r2, [r1, #9]
 8001e50:	4093      	lsls	r3, r2
 8001e52:	4203      	tst	r3, r0
 8001e54:	d142      	bne.n	8001edc <main+0x8ec>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001e56:	4c43      	ldr	r4, [pc, #268]	; (8001f64 <main+0x974>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001e58:	4e41      	ldr	r6, [pc, #260]	; (8001f60 <main+0x970>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001e5a:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001e5e:	4303      	orrs	r3, r0
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001e60:	6065      	str	r5, [r4, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001e62:	4c40      	ldr	r4, [pc, #256]	; (8001f64 <main+0x974>)
 8001e64:	4840      	ldr	r0, [pc, #256]	; (8001f68 <main+0x978>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001e66:	6033      	str	r3, [r6, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001e68:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001e6c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8001e70:	d004      	beq.n	8001e7c <main+0x88c>
    rccEnableDMA1(false);
 8001e72:	4838      	ldr	r0, [pc, #224]	; (8001f54 <main+0x964>)
 8001e74:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001e76:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001e7a:	6302      	str	r2, [r0, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8001e7c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001e80:	d004      	beq.n	8001e8c <main+0x89c>
    rccEnableDMA2(false);
 8001e82:	4a34      	ldr	r2, [pc, #208]	; (8001f54 <main+0x964>)
 8001e84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e8a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001e8c:	680a      	ldr	r2, [r1, #0]
 8001e8e:	6813      	ldr	r3, [r2, #0]
 8001e90:	f023 031f 	bic.w	r3, r3, #31
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	f013 0301 	ands.w	r3, r3, #1
 8001e9c:	d1fb      	bne.n	8001e96 <main+0x8a6>
 8001e9e:	7a0c      	ldrb	r4, [r1, #8]
 8001ea0:	684e      	ldr	r6, [r1, #4]
 8001ea2:	203d      	movs	r0, #61	; 0x3d
 8001ea4:	40a0      	lsls	r0, r4
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001ea6:	2421      	movs	r4, #33	; 0x21
  dmaStreamDisable(dmastp);
 8001ea8:	6030      	str	r0, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001eaa:	6013      	str	r3, [r2, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001eac:	6154      	str	r4, [r2, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 8001eae:	7a89      	ldrb	r1, [r1, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001eb0:	094b      	lsrs	r3, r1, #5
 8001eb2:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001eb4:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
 8001eb8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001ebc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8001ec0:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ec4:	f001 011f 	and.w	r1, r1, #31
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001ece:	2660      	movs	r6, #96	; 0x60
 8001ed0:	f884 6300 	strb.w	r6, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ed4:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001ed8:	6019      	str	r1, [r3, #0]
 8001eda:	e000      	b.n	8001ede <main+0x8ee>
 8001edc:	680a      	ldr	r2, [r1, #0]
      rccEnableADC1(FALSE);
 8001ede:	491d      	ldr	r1, [pc, #116]	; (8001f54 <main+0x964>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <main+0x97c>)
 8001ee2:	6093      	str	r3, [r2, #8]
      rccEnableADC1(FALSE);
 8001ee4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001ee6:	4822      	ldr	r0, [pc, #136]	; (8001f70 <main+0x980>)
    adcp->adc->CR1 = 0;
 8001ee8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      rccEnableADC1(FALSE);
 8001eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eee:	644b      	str	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001ef0:	6843      	ldr	r3, [r0, #4]
 8001ef2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    adcp->adc->CR1 = 0;
 8001ef6:	2100      	movs	r1, #0
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001efc:	2401      	movs	r4, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8001efe:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
 8001f00:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8001f02:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8001f04:	6094      	str	r4, [r2, #8]
 8001f06:	e688      	b.n	8001c1a <main+0x62a>
      rccEnableTIM1(FALSE);
 8001f08:	4f12      	ldr	r7, [pc, #72]	; (8001f54 <main+0x964>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001f0a:	4813      	ldr	r0, [pc, #76]	; (8001f58 <main+0x968>)
 8001f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
      pwmp->clock = STM32_TIMCLK2;
 8001f0e:	f8df c064 	ldr.w	ip, [pc, #100]	; 8001f74 <main+0x984>
      rccEnableTIM1(FALSE);
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	647a      	str	r2, [r7, #68]	; 0x44
      rccResetTIM1();
 8001f18:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8001f1a:	69b2      	ldr	r2, [r6, #24]
      pwmp->clock = STM32_TIMCLK2;
 8001f1c:	f8c6 c014 	str.w	ip, [r6, #20]
      rccResetTIM1();
 8001f20:	f044 0401 	orr.w	r4, r4, #1
 8001f24:	627c      	str	r4, [r7, #36]	; 0x24
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	2370      	movs	r3, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f2a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001f2e:	f880 3319 	strb.w	r3, [r0, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f32:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001f36:	6007      	str	r7, [r0, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001f38:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f40:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001f44:	6003      	str	r3, [r0, #0]
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8001f46:	f646 0368 	movw	r3, #26728	; 0x6868
 8001f4a:	6193      	str	r3, [r2, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8001f4c:	4664      	mov	r4, ip
 8001f4e:	61d3      	str	r3, [r2, #28]
 8001f50:	e5d3      	b.n	8001afa <main+0x50a>
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	20000a60 	.word	0x20000a60
 8001f64:	200009e0 	.word	0x200009e0
 8001f68:	08000ff1 	.word	0x08000ff1
 8001f6c:	4001204c 	.word	0x4001204c
 8001f70:	40012300 	.word	0x40012300
 8001f74:	05b8d800 	.word	0x05b8d800
	...

08001f80 <chTMStartMeasurementX.constprop.31>:
  return DWT->CYCCNT;
 8001f80:	4b01      	ldr	r3, [pc, #4]	; (8001f88 <chTMStartMeasurementX.constprop.31+0x8>)
 8001f82:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001f84:	6083      	str	r3, [r0, #8]
 8001f86:	4770      	bx	lr
 8001f88:	e0001000 	.word	0xe0001000
 8001f8c:	00000000 	.word	0x00000000

08001f90 <chEvtBroadcastFlagsI.constprop.28>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001f92:	4f17      	ldr	r7, [pc, #92]	; (8001ff0 <chEvtBroadcastFlagsI.constprop.28+0x60>)
 8001f94:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001f98:	42bc      	cmp	r4, r7
 8001f9a:	d020      	beq.n	8001fde <chEvtBroadcastFlagsI.constprop.28+0x4e>
 8001f9c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	e002      	b.n	8001fa8 <chEvtBroadcastFlagsI.constprop.28+0x18>
    elp = elp->el_next;
 8001fa2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001fa4:	42bc      	cmp	r4, r7
 8001fa6:	d01a      	beq.n	8001fde <chEvtBroadcastFlagsI.constprop.28+0x4e>
    elp->el_flags |= flags;
 8001fa8:	68e3      	ldr	r3, [r4, #12]
 8001faa:	432b      	orrs	r3, r5
 8001fac:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001fae:	b115      	cbz	r5, 8001fb6 <chEvtBroadcastFlagsI.constprop.28+0x26>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8001fb0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001fb2:	4213      	tst	r3, r2
 8001fb4:	d0f5      	beq.n	8001fa2 <chEvtBroadcastFlagsI.constprop.28+0x12>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8001fb6:	6860      	ldr	r0, [r4, #4]
  tp->p_epending |= events;
 8001fb8:	68a3      	ldr	r3, [r4, #8]
 8001fba:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001fbc:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 8001fbe:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001fc0:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 8001fc2:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001fc4:	d00c      	beq.n	8001fe0 <chEvtBroadcastFlagsI.constprop.28+0x50>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001fc6:	2a0b      	cmp	r2, #11
 8001fc8:	d1eb      	bne.n	8001fa2 <chEvtBroadcastFlagsI.constprop.28+0x12>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001fca:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001fcc:	ea32 0303 	bics.w	r3, r2, r3
 8001fd0:	d1e7      	bne.n	8001fa2 <chEvtBroadcastFlagsI.constprop.28+0x12>
    tp->p_u.rdymsg = MSG_OK;
 8001fd2:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8001fd4:	f7fe fecc 	bl	8000d70 <chSchReadyI>
    elp = elp->el_next;
 8001fd8:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001fda:	42bc      	cmp	r4, r7
 8001fdc:	d1e4      	bne.n	8001fa8 <chEvtBroadcastFlagsI.constprop.28+0x18>
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001fe0:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001fe2:	4213      	tst	r3, r2
 8001fe4:	d0dd      	beq.n	8001fa2 <chEvtBroadcastFlagsI.constprop.28+0x12>
    tp->p_u.rdymsg = MSG_OK;
 8001fe6:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8001fe8:	f7fe fec2 	bl	8000d70 <chSchReadyI>
 8001fec:	e7f4      	b.n	8001fd8 <chEvtBroadcastFlagsI.constprop.28+0x48>
 8001fee:	bf00      	nop
 8001ff0:	20000ad0 	.word	0x20000ad0
	...

08002000 <sdObjectInit.constprop.23>:
  sdp->vmt = &vmt;
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <sdObjectInit.constprop.23+0x54>)
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <sdObjectInit.constprop.23+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002004:	b4f0      	push	{r4, r5, r6, r7}
  sdp->vmt = &vmt;
 8002006:	4618      	mov	r0, r3
  sdp->state = SD_STOP;
 8002008:	2101      	movs	r1, #1
  sdp->vmt = &vmt;
 800200a:	f840 2b04 	str.w	r2, [r0], #4
  oqp->q_counter = size;
 800200e:	2410      	movs	r4, #16
  iqp->q_counter = 0;
 8002010:	2200      	movs	r2, #0
  tqp->p_next = (thread_t *)tqp;
 8002012:	f103 050c 	add.w	r5, r3, #12
  oqp->q_notify  = onfy;
 8002016:	4e11      	ldr	r6, [pc, #68]	; (800205c <sdObjectInit.constprop.23+0x5c>)
  sdp->state = SD_STOP;
 8002018:	7219      	strb	r1, [r3, #8]
  oqp->q_top     = bp + size;
 800201a:	f103 0774 	add.w	r7, r3, #116	; 0x74
  iqp->q_buffer  = bp;
 800201e:	f103 0154 	add.w	r1, r3, #84	; 0x54
  iqp->q_counter = 0;
 8002022:	615a      	str	r2, [r3, #20]
  iqp->q_notify  = infy;
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
  oqp->q_counter = size;
 8002026:	639c      	str	r4, [r3, #56]	; 0x38
  iqp->q_top     = bp + size;
 8002028:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800202c:	f103 0430 	add.w	r4, r3, #48	; 0x30
  oqp->q_top     = bp + size;
 8002030:	641f      	str	r7, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 8002032:	64de      	str	r6, [r3, #76]	; 0x4c
 8002034:	60dd      	str	r5, [r3, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002036:	611d      	str	r5, [r3, #16]
  tqp->p_next = (thread_t *)tqp;
 8002038:	631c      	str	r4, [r3, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 800203a:	635c      	str	r4, [r3, #52]	; 0x34
  iqp->q_link    = link;
 800203c:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_link    = link;
 800203e:	651b      	str	r3, [r3, #80]	; 0x50
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002040:	6058      	str	r0, [r3, #4]
  iqp->q_buffer  = bp;
 8002042:	6199      	str	r1, [r3, #24]
  iqp->q_rdptr   = bp;
 8002044:	6259      	str	r1, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8002046:	6219      	str	r1, [r3, #32]
  iqp->q_top     = bp + size;
 8002048:	61da      	str	r2, [r3, #28]
  oqp->q_buffer  = bp;
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 800204c:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 800204e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002050:	bcf0      	pop	{r4, r5, r6, r7}
 8002052:	4770      	bx	lr
 8002054:	20000ad0 	.word	0x20000ad0
 8002058:	080027c0 	.word	0x080027c0
 800205c:	080002c1 	.word	0x080002c1

08002060 <pwmEnableChannel.constprop.11>:
 * @param[in] channel   PWM channel identifier (0...channels-1)
 * @param[in] width     PWM pulse width as clock pulses number
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
 8002060:	b470      	push	{r4, r5, r6}
 8002062:	2320      	movs	r3, #32
 8002064:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <pwmEnableChannel.constprop.11+0x2c>)
  pwmp->tim->CCR[channel] = width;
 800206a:	699c      	ldr	r4, [r3, #24]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	f100 060c 	add.w	r6, r0, #12
 8002072:	2501      	movs	r5, #1
 8002074:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8002078:	fa05 f000 	lsl.w	r0, r5, r0
 800207c:	4302      	orrs	r2, r0
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	6061      	str	r1, [r4, #4]
 8002082:	2300      	movs	r3, #0
 8002084:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8002088:	bc70      	pop	{r4, r5, r6}
 800208a:	4770      	bx	lr
 800208c:	20000ab4 	.word	0x20000ab4

08002090 <motor_tick>:
void motor_tick() {
 8002090:	b538      	push	{r3, r4, r5, lr}
    int8_t i = index;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <motor_tick+0x5c>)
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 8002094:	4916      	ldr	r1, [pc, #88]	; (80020f0 <motor_tick+0x60>)
    int8_t i = index;
 8002096:	f993 4000 	ldrsb.w	r4, [r3]
    if (motor_actual_speeds[i] < 2048) {
 800209a:	4d16      	ldr	r5, [pc, #88]	; (80020f4 <motor_tick+0x64>)
    index = -1;
 800209c:	20ff      	movs	r0, #255	; 0xff
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 800209e:	2220      	movs	r2, #32
    index = -1;
 80020a0:	7018      	strb	r0, [r3, #0]
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 80020a2:	830a      	strh	r2, [r1, #24]
    if (motor_actual_speeds[i] < 2048) {
 80020a4:	f935 1014 	ldrsh.w	r1, [r5, r4, lsl #1]
 80020a8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80020ac:	db13      	blt.n	80020d6 <motor_tick+0x46>
        chVTReset(&main_timer[i]);
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <motor_tick+0x68>)
 80020b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80020b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80020b8:	f382 8811 	msr	BASEPRI, r2
  if (chVTIsArmedI(vtp)) {
 80020bc:	68c3      	ldr	r3, [r0, #12]
 80020be:	b10b      	cbz	r3, 80020c4 <motor_tick+0x34>
    chVTDoResetI(vtp);
 80020c0:	f7ff f856 	bl	8001170 <chVTDoResetI>
 80020c4:	2300      	movs	r3, #0
 80020c6:	f383 8811 	msr	BASEPRI, r3
        motor_actual_speeds[i] = motor_freqs[i]; // set to default
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <motor_tick+0x6c>)
 80020cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80020d0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 80020d4:	bd38      	pop	{r3, r4, r5, pc}
        pwmEnableChannel(&PWMD1, i, ++motor_actual_speeds[i]);
 80020d6:	3101      	adds	r1, #1
 80020d8:	b20b      	sxth	r3, r1
 80020da:	4619      	mov	r1, r3
 80020dc:	b2e0      	uxtb	r0, r4
 80020de:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
}
 80020e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pwmEnableChannel(&PWMD1, i, ++motor_actual_speeds[i]);
 80020e6:	f7ff bfbb 	b.w	8002060 <pwmEnableChannel.constprop.11>
 80020ea:	bf00      	nop
 80020ec:	20000834 	.word	0x20000834
 80020f0:	40020000 	.word	0x40020000
 80020f4:	20000b84 	.word	0x20000b84
 80020f8:	20000b48 	.word	0x20000b48
 80020fc:	20000b8c 	.word	0x20000b8c

08002100 <encoder_pulse_captured>:
void encoder_pulse_captured(ICUDriver *icup) {
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (icup == &ICUD2) {
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <encoder_pulse_captured+0xb4>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8002104:	6942      	ldr	r2, [r0, #20]
    if (icup == &ICUD2) {
 8002106:	4298      	cmp	r0, r3
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8002108:	6817      	ldr	r7, [r2, #0]
    if (icup == &ICUD2) {
 800210a:	d006      	beq.n	800211a <encoder_pulse_captured+0x1a>
    } else if (icup == &ICUD5) {
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <encoder_pulse_captured+0xb8>)
 800210e:	4298      	cmp	r0, r3
 8002110:	d046      	beq.n	80021a0 <encoder_pulse_captured+0xa0>
    } else if (icup == &ICUD3) {
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <encoder_pulse_captured+0xbc>)
 8002114:	4298      	cmp	r0, r3
 8002116:	d048      	beq.n	80021aa <encoder_pulse_captured+0xaa>
 8002118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (icup == &ICUD2) {
 800211a:	2600      	movs	r6, #0
 800211c:	4c28      	ldr	r4, [pc, #160]	; (80021c0 <encoder_pulse_captured+0xc0>)
 800211e:	4635      	mov	r5, r6
        sender = 0;
 8002120:	4631      	mov	r1, r6
        index = sender;
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <encoder_pulse_captured+0xc4>)
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8002124:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <encoder_pulse_captured+0xc8>)
        index = sender;
 8002126:	7019      	strb	r1, [r3, #0]
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8002128:	2320      	movs	r3, #32
 800212a:	8353      	strh	r3, [r2, #26]
 800212c:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8002130:	68e3      	ldr	r3, [r4, #12]
 8002132:	b113      	cbz	r3, 800213a <encoder_pulse_captured+0x3a>
    chVTDoResetI(vtp);
 8002134:	4620      	mov	r0, r4
 8002136:	f7ff f81b 	bl	8001170 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 800213a:	4620      	mov	r0, r4
 800213c:	2300      	movs	r3, #0
 800213e:	4a23      	ldr	r2, [pc, #140]	; (80021cc <encoder_pulse_captured+0xcc>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8002140:	4c23      	ldr	r4, [pc, #140]	; (80021d0 <encoder_pulse_captured+0xd0>)
 8002142:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002146:	f7ff f853 	bl	80011f0 <chVTDoSetI>
 800214a:	3701      	adds	r7, #1
 800214c:	2300      	movs	r3, #0
 800214e:	fbb4 f4f7 	udiv	r4, r4, r7
 8002152:	b224      	sxth	r4, r4
 8002154:	f383 8811 	msr	BASEPRI, r3
        rotations_per_sec[sender] = period_width;
 8002158:	481e      	ldr	r0, [pc, #120]	; (80021d4 <encoder_pulse_captured+0xd4>)
    int16_t period_calc = (1848*period_width-281984)/1667;
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <encoder_pulse_captured+0xd8>)
        rotations_per_sec[sender] = period_width;
 800215c:	f820 4015 	strh.w	r4, [r0, r5, lsl #1]
    int16_t period_calc = (1848*period_width-281984)/1667;
 8002160:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <encoder_pulse_captured+0xdc>)
        if(period_calc < motor_freqs[sender]) {
 8002162:	491f      	ldr	r1, [pc, #124]	; (80021e0 <encoder_pulse_captured+0xe0>)
    int16_t period_calc = (1848*period_width-281984)/1667;
 8002164:	f44f 60e7 	mov.w	r0, #1848	; 0x738
 8002168:	fb14 3300 	smlabb	r3, r4, r0, r3
 800216c:	fb82 0203 	smull	r0, r2, r2, r3
 8002170:	441a      	add	r2, r3
 8002172:	17db      	asrs	r3, r3, #31
        if(period_calc < motor_freqs[sender]) {
 8002174:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
    int16_t period_calc = (1848*period_width-281984)/1667;
 8002178:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
            pwmEnableChannel(&PWMD1, sender, ++motor_actual_speeds[sender]);
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <encoder_pulse_captured+0xe4>)
        if(period_calc < motor_freqs[sender]) {
 800217e:	b21b      	sxth	r3, r3
 8002180:	428b      	cmp	r3, r1
            pwmEnableChannel(&PWMD1, sender, ++motor_actual_speeds[sender]);
 8002182:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8002186:	bfb4      	ite	lt
 8002188:	3301      	addlt	r3, #1
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
 800218a:	f103 33ff 	addge.w	r3, r3, #4294967295	; 0xffffffff
 800218e:	b21b      	sxth	r3, r3
 8002190:	4630      	mov	r0, r6
 8002192:	4619      	mov	r1, r3
 8002194:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
}
 8002198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
 800219c:	f7ff bf60 	b.w	8002060 <pwmEnableChannel.constprop.11>
    } else if (icup == &ICUD5) {
 80021a0:	2601      	movs	r6, #1
 80021a2:	4635      	mov	r5, r6
        sender = 1;
 80021a4:	4631      	mov	r1, r6
    } else if (icup == &ICUD5) {
 80021a6:	4c10      	ldr	r4, [pc, #64]	; (80021e8 <encoder_pulse_captured+0xe8>)
 80021a8:	e7bb      	b.n	8002122 <encoder_pulse_captured+0x22>
    } else if (icup == &ICUD3) {
 80021aa:	2602      	movs	r6, #2
 80021ac:	4c0f      	ldr	r4, [pc, #60]	; (80021ec <encoder_pulse_captured+0xec>)
 80021ae:	4635      	mov	r5, r6
        sender = 2;
 80021b0:	4631      	mov	r1, r6
 80021b2:	e7b6      	b.n	8002122 <encoder_pulse_captured+0x22>
 80021b4:	20000a6c 	.word	0x20000a6c
 80021b8:	20000a9c 	.word	0x20000a9c
 80021bc:	20000a84 	.word	0x20000a84
 80021c0:	20000b48 	.word	0x20000b48
 80021c4:	20000834 	.word	0x20000834
 80021c8:	40020000 	.word	0x40020000
 80021cc:	08002091 	.word	0x08002091
 80021d0:	000f4240 	.word	0x000f4240
 80021d4:	20000b98 	.word	0x20000b98
 80021d8:	fffbb280 	.word	0xfffbb280
 80021dc:	9d414457 	.word	0x9d414457
 80021e0:	20000b8c 	.word	0x20000b8c
 80021e4:	20000b84 	.word	0x20000b84
 80021e8:	20000b5c 	.word	0x20000b5c
 80021ec:	20000b70 	.word	0x20000b70

080021f0 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80021f0:	b40e      	push	{r1, r2, r3}
 80021f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80023ec <chprintf.constprop.0+0x1fc>
    c = *fmt++;
 80021fa:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <chprintf.constprop.0+0x1f8>)
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80021fc:	b086      	sub	sp, #24
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80021fe:	ad10      	add	r5, sp, #64	; 0x40
  int n = 0;
 8002200:	2200      	movs	r2, #0
      streamPut(chp, (uint8_t)c);
 8002202:	46c2      	mov	sl, r8
  va_start(ap, fmt);
 8002204:	9502      	str	r5, [sp, #8]
  int n = 0;
 8002206:	9200      	str	r2, [sp, #0]
    c = *fmt++;
 8002208:	214c      	movs	r1, #76	; 0x4c
      n++;
 800220a:	9c00      	ldr	r4, [sp, #0]
      streamPut(chp, (uint8_t)c);
 800220c:	f8d8 2000 	ldr.w	r2, [r8]
      n++;
 8002210:	3401      	adds	r4, #1
      streamPut(chp, (uint8_t)c);
 8002212:	6892      	ldr	r2, [r2, #8]
      n++;
 8002214:	9400      	str	r4, [sp, #0]
      streamPut(chp, (uint8_t)c);
 8002216:	4650      	mov	r0, sl
      n++;
 8002218:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)c);
 800221a:	4790      	blx	r2
    c = *fmt++;
 800221c:	7821      	ldrb	r1, [r4, #0]
 800221e:	1c63      	adds	r3, r4, #1
    if (c == 0)
 8002220:	2900      	cmp	r1, #0
 8002222:	f000 8138 	beq.w	8002496 <chprintf.constprop.0+0x2a6>
    if (c != '%') {
 8002226:	2925      	cmp	r1, #37	; 0x25
 8002228:	d1ef      	bne.n	800220a <chprintf.constprop.0+0x1a>
    if (*fmt == '-') {
 800222a:	7861      	ldrb	r1, [r4, #1]
 800222c:	292d      	cmp	r1, #45	; 0x2d
 800222e:	bf03      	ittte	eq
 8002230:	78a1      	ldrbeq	r1, [r4, #2]
      fmt++;
 8002232:	1ca3      	addeq	r3, r4, #2
      left_align = TRUE;
 8002234:	f04f 0e01 	moveq.w	lr, #1
    left_align = FALSE;
 8002238:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 800223c:	2930      	cmp	r1, #48	; 0x30
 800223e:	bf04      	itt	eq
 8002240:	7859      	ldrbeq	r1, [r3, #1]
      fmt++;
 8002242:	3301      	addeq	r3, #1
 8002244:	f103 0001 	add.w	r0, r3, #1
      filler = '0';
 8002248:	bf0c      	ite	eq
 800224a:	f04f 0930 	moveq.w	r9, #48	; 0x30
    filler = ' ';
 800224e:	f04f 0920 	movne.w	r9, #32
    width = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	e005      	b.n	8002262 <chprintf.constprop.0+0x72>
        c = va_arg(ap, int);
 8002256:	782a      	ldrb	r2, [r5, #0]
 8002258:	3504      	adds	r5, #4
 800225a:	f810 1b01 	ldrb.w	r1, [r0], #1
      width = width * 10 + c;
 800225e:	eb02 0346 	add.w	r3, r2, r6, lsl #1
      if (c >= '0' && c <= '9')
 8002262:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	2a09      	cmp	r2, #9
      c = *fmt++;
 800226a:	4604      	mov	r4, r0
      width = width * 10 + c;
 800226c:	eb03 0683 	add.w	r6, r3, r3, lsl #2
      if (c >= '0' && c <= '9')
 8002270:	d9f3      	bls.n	800225a <chprintf.constprop.0+0x6a>
      else if (c == '*')
 8002272:	292a      	cmp	r1, #42	; 0x2a
 8002274:	d0ef      	beq.n	8002256 <chprintf.constprop.0+0x66>
    if (c == '.') {
 8002276:	292e      	cmp	r1, #46	; 0x2e
 8002278:	f04f 0000 	mov.w	r0, #0
 800227c:	d043      	beq.n	8002306 <chprintf.constprop.0+0x116>
    if (c == 'l' || c == 'L') {
 800227e:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 8002282:	2a4c      	cmp	r2, #76	; 0x4c
 8002284:	d04e      	beq.n	8002324 <chprintf.constprop.0+0x134>
    switch (c) {
 8002286:	f1a1 0644 	sub.w	r6, r1, #68	; 0x44
 800228a:	2e34      	cmp	r6, #52	; 0x34
 800228c:	f200 815f 	bhi.w	800254e <chprintf.constprop.0+0x35e>
 8002290:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002294:	015d0109 	.word	0x015d0109
 8002298:	015d015d 	.word	0x015d015d
 800229c:	0109015d 	.word	0x0109015d
 80022a0:	015d015d 	.word	0x015d015d
 80022a4:	015d015d 	.word	0x015d015d
 80022a8:	0107015d 	.word	0x0107015d
 80022ac:	015d015d 	.word	0x015d015d
 80022b0:	015d015d 	.word	0x015d015d
 80022b4:	0088015d 	.word	0x0088015d
 80022b8:	015d015d 	.word	0x015d015d
 80022bc:	015d013b 	.word	0x015d013b
 80022c0:	015d015d 	.word	0x015d015d
 80022c4:	015d015d 	.word	0x015d015d
 80022c8:	015d015d 	.word	0x015d015d
 80022cc:	015d015d 	.word	0x015d015d
 80022d0:	0153015d 	.word	0x0153015d
 80022d4:	015d0109 	.word	0x015d0109
 80022d8:	015d015d 	.word	0x015d015d
 80022dc:	0109015d 	.word	0x0109015d
 80022e0:	015d015d 	.word	0x015d015d
 80022e4:	015d015d 	.word	0x015d015d
 80022e8:	0107015d 	.word	0x0107015d
 80022ec:	015d015d 	.word	0x015d015d
 80022f0:	013d015d 	.word	0x013d015d
 80022f4:	0088015d 	.word	0x0088015d
 80022f8:	015d015d 	.word	0x015d015d
 80022fc:	013b      	.short	0x013b
          c = va_arg(ap, int);
 80022fe:	782a      	ldrb	r2, [r5, #0]
 8002300:	3504      	adds	r5, #4
        precision += c;
 8002302:	eb02 0046 	add.w	r0, r2, r6, lsl #1
        c = *fmt++;
 8002306:	f814 1b01 	ldrb.w	r1, [r4], #1
        if (c >= '0' && c <= '9')
 800230a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	2a09      	cmp	r2, #9
        precision *= 10;
 8002312:	eb00 0680 	add.w	r6, r0, r0, lsl #2
        if (c >= '0' && c <= '9')
 8002316:	d9f4      	bls.n	8002302 <chprintf.constprop.0+0x112>
        else if (c == '*')
 8002318:	292a      	cmp	r1, #42	; 0x2a
 800231a:	d0f0      	beq.n	80022fe <chprintf.constprop.0+0x10e>
    if (c == 'l' || c == 'L') {
 800231c:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 8002320:	2a4c      	cmp	r2, #76	; 0x4c
 8002322:	d1b0      	bne.n	8002286 <chprintf.constprop.0+0x96>
      if (*fmt)
 8002324:	7822      	ldrb	r2, [r4, #0]
 8002326:	b10a      	cbz	r2, 800232c <chprintf.constprop.0+0x13c>
        c = *fmt++;
 8002328:	3401      	adds	r4, #1
 800232a:	4611      	mov	r1, r2
    switch (c) {
 800232c:	f1a1 0244 	sub.w	r2, r1, #68	; 0x44
 8002330:	2a34      	cmp	r2, #52	; 0x34
 8002332:	f200 810c 	bhi.w	800254e <chprintf.constprop.0+0x35e>
 8002336:	e8df f012 	tbh	[pc, r2, lsl #1]
 800233a:	00b6      	.short	0x00b6
 800233c:	010a010a 	.word	0x010a010a
 8002340:	010a010a 	.word	0x010a010a
 8002344:	010a00b6 	.word	0x010a00b6
 8002348:	010a010a 	.word	0x010a010a
 800234c:	010a010a 	.word	0x010a010a
 8002350:	010a00b4 	.word	0x010a00b4
 8002354:	010a010a 	.word	0x010a010a
 8002358:	010a010a 	.word	0x010a010a
 800235c:	010a0035 	.word	0x010a0035
 8002360:	00e8010a 	.word	0x00e8010a
 8002364:	010a010a 	.word	0x010a010a
 8002368:	010a010a 	.word	0x010a010a
 800236c:	010a010a 	.word	0x010a010a
 8002370:	010a010a 	.word	0x010a010a
 8002374:	010a010a 	.word	0x010a010a
 8002378:	00b60100 	.word	0x00b60100
 800237c:	010a010a 	.word	0x010a010a
 8002380:	010a010a 	.word	0x010a010a
 8002384:	010a00b6 	.word	0x010a00b6
 8002388:	010a010a 	.word	0x010a010a
 800238c:	010a010a 	.word	0x010a010a
 8002390:	010a00b4 	.word	0x010a00b4
 8002394:	010a010a 	.word	0x010a010a
 8002398:	010a00ea 	.word	0x010a00ea
 800239c:	010a0035 	.word	0x010a0035
 80023a0:	00e8010a 	.word	0x00e8010a
      c = 10;
 80023a4:	270a      	movs	r7, #10
        l = va_arg(ap, unsigned int);
 80023a6:	6829      	ldr	r1, [r5, #0]
  q = p + MAX_FILLER;
 80023a8:	f10d 0017 	add.w	r0, sp, #23
        l = va_arg(ap, unsigned int);
 80023ac:	3504      	adds	r5, #4
 80023ae:	e000      	b.n	80023b2 <chprintf.constprop.0+0x1c2>
  } while ((ll /= radix) != 0);
 80023b0:	4660      	mov	r0, ip
    i = (int)(l % radix);
 80023b2:	fbb1 f6f7 	udiv	r6, r1, r7
 80023b6:	fb07 1116 	mls	r1, r7, r6, r1
    i += '0';
 80023ba:	f101 0230 	add.w	r2, r1, #48	; 0x30
    if (i > '9')
 80023be:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 80023c0:	bfc8      	it	gt
 80023c2:	f101 0237 	addgt.w	r2, r1, #55	; 0x37
    *--q = i;
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f800 2c01 	strb.w	r2, [r0, #-1]
 80023cc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    l /= radix;
 80023d0:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 80023d2:	2e00      	cmp	r6, #0
 80023d4:	d1ec      	bne.n	80023b0 <chprintf.constprop.0+0x1c0>
  i = (int)(p + MAX_FILLER - q);
 80023d6:	f10d 0117 	add.w	r1, sp, #23
 80023da:	eba1 070c 	sub.w	r7, r1, ip
 80023de:	ae03      	add	r6, sp, #12
 80023e0:	4631      	mov	r1, r6
 80023e2:	44bc      	add	ip, r7
 80023e4:	e006      	b.n	80023f4 <chprintf.constprop.0+0x204>
 80023e6:	bf00      	nop
 80023e8:	08002799 	.word	0x08002799
 80023ec:	20000ad0 	.word	0x20000ad0
 80023f0:	f810 2b01 	ldrb.w	r2, [r0], #1
    *p++ = *q++;
 80023f4:	f801 2b01 	strb.w	r2, [r1], #1
  while (--i);
 80023f8:	4584      	cmp	ip, r0
 80023fa:	d1f9      	bne.n	80023f0 <chprintf.constprop.0+0x200>
 80023fc:	4437      	add	r7, r6
    i = (int)(p - s);
 80023fe:	1bbf      	subs	r7, r7, r6
    if ((width -= i) < 0)
 8002400:	1bdb      	subs	r3, r3, r7
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	d478      	bmi.n	80024f8 <chprintf.constprop.0+0x308>
    if (left_align == FALSE)
 8002406:	f1be 0f00 	cmp.w	lr, #0
 800240a:	f040 80a8 	bne.w	800255e <chprintf.constprop.0+0x36e>
 800240e:	9a01      	ldr	r2, [sp, #4]
 8002410:	f1c2 0b00 	rsb	fp, r2, #0
    if (width < 0) {
 8002414:	2a00      	cmp	r2, #0
 8002416:	f000 80a0 	beq.w	800255a <chprintf.constprop.0+0x36a>
      if (*s == '-' && filler == '0') {
 800241a:	7831      	ldrb	r1, [r6, #0]
 800241c:	292d      	cmp	r1, #45	; 0x2d
 800241e:	f000 80ae 	beq.w	800257e <chprintf.constprop.0+0x38e>
        streamPut(chp, (uint8_t)filler);
 8002422:	f8d8 3000 	ldr.w	r3, [r8]
 8002426:	4649      	mov	r1, r9
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4650      	mov	r0, sl
 800242c:	4798      	blx	r3
      } while (++width != 0);
 800242e:	f11b 0b01 	adds.w	fp, fp, #1
 8002432:	d1f6      	bne.n	8002422 <chprintf.constprop.0+0x232>
 8002434:	e89d 000c 	ldmia.w	sp, {r2, r3}
    while (--i >= 0) {
 8002438:	3f01      	subs	r7, #1
 800243a:	4413      	add	r3, r2
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	bf58      	it	pl
 8002440:	f8cd b004 	strpl.w	fp, [sp, #4]
 8002444:	f53f aeea 	bmi.w	800221c <chprintf.constprop.0+0x2c>
 8002448:	46bb      	mov	fp, r7
      streamPut(chp, (uint8_t)*s++);
 800244a:	f8d8 3000 	ldr.w	r3, [r8]
 800244e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002452:	689b      	ldr	r3, [r3, #8]
    while (--i >= 0) {
 8002454:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8002458:	4650      	mov	r0, sl
 800245a:	4798      	blx	r3
    while (--i >= 0) {
 800245c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8002460:	d1f3      	bne.n	800244a <chprintf.constprop.0+0x25a>
 8002462:	9b00      	ldr	r3, [sp, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	9300      	str	r3, [sp, #0]
    while (width) {
 800246a:	9b01      	ldr	r3, [sp, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f43f aed5 	beq.w	800221c <chprintf.constprop.0+0x2c>
 8002472:	461e      	mov	r6, r3
      streamPut(chp, (uint8_t)filler);
 8002474:	f8d8 3000 	ldr.w	r3, [r8]
 8002478:	4649      	mov	r1, r9
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4650      	mov	r0, sl
 800247e:	4798      	blx	r3
    while (width) {
 8002480:	3e01      	subs	r6, #1
 8002482:	d1f7      	bne.n	8002474 <chprintf.constprop.0+0x284>
 8002484:	e89d 000c 	ldmia.w	sp, {r2, r3}
    c = *fmt++;
 8002488:	7821      	ldrb	r1, [r4, #0]
 800248a:	4413      	add	r3, r2
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	1c63      	adds	r3, r4, #1
    if (c == 0)
 8002490:	2900      	cmp	r1, #0
 8002492:	f47f aec8 	bne.w	8002226 <chprintf.constprop.0+0x36>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002496:	9800      	ldr	r0, [sp, #0]
 8002498:	b006      	add	sp, #24
 800249a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800249e:	b003      	add	sp, #12
 80024a0:	4770      	bx	lr
      c = 8;
 80024a2:	2708      	movs	r7, #8
 80024a4:	e77f      	b.n	80023a6 <chprintf.constprop.0+0x1b6>
        l = va_arg(ap, int);
 80024a6:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 80024a8:	2900      	cmp	r1, #0
        l = va_arg(ap, int);
 80024aa:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 80024ae:	db75      	blt.n	800259c <chprintf.constprop.0+0x3ac>
    p = tmpbuf;
 80024b0:	ae03      	add	r6, sp, #12
 80024b2:	4637      	mov	r7, r6
  q = p + MAX_FILLER;
 80024b4:	f107 020b 	add.w	r2, r7, #11
 80024b8:	9201      	str	r2, [sp, #4]
 80024ba:	4610      	mov	r0, r2
    i = (int)(l % radix);
 80024bc:	4a41      	ldr	r2, [pc, #260]	; (80025c4 <chprintf.constprop.0+0x3d4>)
 80024be:	fba2 c201 	umull	ip, r2, r2, r1
 80024c2:	08d2      	lsrs	r2, r2, #3
 80024c4:	eb02 0b82 	add.w	fp, r2, r2, lsl #2
 80024c8:	4694      	mov	ip, r2
 80024ca:	eba1 024b 	sub.w	r2, r1, fp, lsl #1
    i += '0';
 80024ce:	3230      	adds	r2, #48	; 0x30
    *--q = i;
 80024d0:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 80024d2:	4661      	mov	r1, ip
    *--q = i;
 80024d4:	f800 2d01 	strb.w	r2, [r0, #-1]!
  } while ((ll /= radix) != 0);
 80024d8:	2900      	cmp	r1, #0
 80024da:	d1ef      	bne.n	80024bc <chprintf.constprop.0+0x2cc>
  i = (int)(p + MAX_FILLER - q);
 80024dc:	9901      	ldr	r1, [sp, #4]
 80024de:	1a09      	subs	r1, r1, r0
 80024e0:	4439      	add	r1, r7
 80024e2:	e001      	b.n	80024e8 <chprintf.constprop.0+0x2f8>
 80024e4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    *p++ = *q++;
 80024e8:	f807 2b01 	strb.w	r2, [r7], #1
  while (--i);
 80024ec:	428f      	cmp	r7, r1
 80024ee:	d1f9      	bne.n	80024e4 <chprintf.constprop.0+0x2f4>
    i = (int)(p - s);
 80024f0:	1bbf      	subs	r7, r7, r6
    if ((width -= i) < 0)
 80024f2:	1bdb      	subs	r3, r3, r7
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	d586      	bpl.n	8002406 <chprintf.constprop.0+0x216>
    if (left_align == FALSE)
 80024f8:	f1be 0f00 	cmp.w	lr, #0
 80024fc:	d133      	bne.n	8002566 <chprintf.constprop.0+0x376>
    while (--i >= 0) {
 80024fe:	3f01      	subs	r7, #1
 8002500:	bf58      	it	pl
 8002502:	f8cd e004 	strpl.w	lr, [sp, #4]
 8002506:	d59f      	bpl.n	8002448 <chprintf.constprop.0+0x258>
 8002508:	e688      	b.n	800221c <chprintf.constprop.0+0x2c>
      c = 16;
 800250a:	2710      	movs	r7, #16
 800250c:	e74b      	b.n	80023a6 <chprintf.constprop.0+0x1b6>
      if ((s = va_arg(ap, char *)) == 0)
 800250e:	682f      	ldr	r7, [r5, #0]
 8002510:	3504      	adds	r5, #4
 8002512:	2f00      	cmp	r7, #0
 8002514:	d04a      	beq.n	80025ac <chprintf.constprop.0+0x3bc>
      for (p = s; *p && (--precision >= 0); p++)
 8002516:	783a      	ldrb	r2, [r7, #0]
      if (precision == 0)
 8002518:	bb58      	cbnz	r0, 8002572 <chprintf.constprop.0+0x382>
      for (p = s; *p && (--precision >= 0); p++)
 800251a:	2a00      	cmp	r2, #0
 800251c:	d04d      	beq.n	80025ba <chprintf.constprop.0+0x3ca>
 800251e:	463e      	mov	r6, r7
 8002520:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002524:	4637      	mov	r7, r6
 8002526:	e001      	b.n	800252c <chprintf.constprop.0+0x33c>
 8002528:	3a01      	subs	r2, #1
 800252a:	d403      	bmi.n	8002534 <chprintf.constprop.0+0x344>
 800252c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002530:	2900      	cmp	r1, #0
 8002532:	d1f9      	bne.n	8002528 <chprintf.constprop.0+0x338>
      filler = ' ';
 8002534:	f04f 0920 	mov.w	r9, #32
 8002538:	e761      	b.n	80023fe <chprintf.constprop.0+0x20e>
      *p++ = va_arg(ap, int);
 800253a:	ae06      	add	r6, sp, #24
 800253c:	682a      	ldr	r2, [r5, #0]
 800253e:	f806 2d0c 	strb.w	r2, [r6, #-12]!
 8002542:	3504      	adds	r5, #4
      filler = ' ';
 8002544:	f04f 0920 	mov.w	r9, #32
      *p++ = va_arg(ap, int);
 8002548:	f10d 070d 	add.w	r7, sp, #13
 800254c:	e757      	b.n	80023fe <chprintf.constprop.0+0x20e>
      *p++ = c;
 800254e:	ae06      	add	r6, sp, #24
 8002550:	f10d 070d 	add.w	r7, sp, #13
 8002554:	f806 1d0c 	strb.w	r1, [r6, #-12]!
 8002558:	e751      	b.n	80023fe <chprintf.constprop.0+0x20e>
    if (width < 0) {
 800255a:	f8cd b004 	str.w	fp, [sp, #4]
    while (--i >= 0) {
 800255e:	3f01      	subs	r7, #1
 8002560:	f57f af72 	bpl.w	8002448 <chprintf.constprop.0+0x258>
 8002564:	e781      	b.n	800246a <chprintf.constprop.0+0x27a>
 8002566:	3f01      	subs	r7, #1
 8002568:	f53f ae58 	bmi.w	800221c <chprintf.constprop.0+0x2c>
      width = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	e76a      	b.n	8002448 <chprintf.constprop.0+0x258>
      for (p = s; *p && (--precision >= 0); p++)
 8002572:	b312      	cbz	r2, 80025ba <chprintf.constprop.0+0x3ca>
 8002574:	1e42      	subs	r2, r0, #1
 8002576:	463e      	mov	r6, r7
 8002578:	2800      	cmp	r0, #0
 800257a:	d1d3      	bne.n	8002524 <chprintf.constprop.0+0x334>
 800257c:	e7da      	b.n	8002534 <chprintf.constprop.0+0x344>
      if (*s == '-' && filler == '0') {
 800257e:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002582:	f47f af4e 	bne.w	8002422 <chprintf.constprop.0+0x232>
        streamPut(chp, (uint8_t)*s++);
 8002586:	f8d8 2000 	ldr.w	r2, [r8]
 800258a:	4650      	mov	r0, sl
 800258c:	6892      	ldr	r2, [r2, #8]
 800258e:	4790      	blx	r2
        n++;
 8002590:	9b00      	ldr	r3, [sp, #0]
 8002592:	3301      	adds	r3, #1
        streamPut(chp, (uint8_t)*s++);
 8002594:	3601      	adds	r6, #1
        n++;
 8002596:	9300      	str	r3, [sp, #0]
        i--;
 8002598:	3f01      	subs	r7, #1
 800259a:	e742      	b.n	8002422 <chprintf.constprop.0+0x232>
        *p++ = '-';
 800259c:	222d      	movs	r2, #45	; 0x2d
        l = -l;
 800259e:	4249      	negs	r1, r1
        *p++ = '-';
 80025a0:	f88d 200c 	strb.w	r2, [sp, #12]
 80025a4:	f10d 070d 	add.w	r7, sp, #13
 80025a8:	ae03      	add	r6, sp, #12
 80025aa:	e783      	b.n	80024b4 <chprintf.constprop.0+0x2c4>
      if (precision == 0)
 80025ac:	b108      	cbz	r0, 80025b2 <chprintf.constprop.0+0x3c2>
        s = "(null)";
 80025ae:	4f06      	ldr	r7, [pc, #24]	; (80025c8 <chprintf.constprop.0+0x3d8>)
 80025b0:	e7e0      	b.n	8002574 <chprintf.constprop.0+0x384>
      if (precision == 0)
 80025b2:	4e05      	ldr	r6, [pc, #20]	; (80025c8 <chprintf.constprop.0+0x3d8>)
      for (p = s; *p && (--precision >= 0); p++)
 80025b4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80025b8:	e7b4      	b.n	8002524 <chprintf.constprop.0+0x334>
 80025ba:	463e      	mov	r6, r7
      filler = ' ';
 80025bc:	f04f 0920 	mov.w	r9, #32
 80025c0:	e71d      	b.n	80023fe <chprintf.constprop.0+0x20e>
 80025c2:	bf00      	nop
 80025c4:	cccccccd 	.word	0xcccccccd
 80025c8:	080027b0 	.word	0x080027b0
 80025cc:	00000000 	.word	0x00000000

080025d0 <ram_areas>:
 80025d0:	08002818 20000ba0 20000ba0 20000ba0     .(..... ... ... 
 80025e0:	08002818 00000000 00000000 00000000     .(..............
 80025f0:	08002818 00000000 00000000 00000000     .(..............
 8002600:	08002818 00000000 00000000 00000000     .(..............
 8002610:	08002818 00000000 00000000 00000000     .(..............
 8002620:	08002818 00000000 00000000 00000000     .(..............
 8002630:	08002818 00000000 00000000 00000000     .(..............
 8002640:	08002818 00000000 00000000 00000000     .(..............

08002650 <_stm32_dma_streams>:
 8002650:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8002660:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8002670:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8002680:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8002690:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 80026a0:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 80026b0:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 80026c0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 80026d0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 80026e0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 80026f0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8002700:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08002710 <ch_debug>:
 8002710:	6e69616d 18811600 08440204 1814100c     main......D.....
 8002720:	1e1d1c00 00000000 00000000 00000000     ................

08002730 <icucfgA>:
 8002730:	00000000 000f4240 08002101 00000000     ....@B...!......
	...

08002750 <icucfgB>:
 8002750:	00000000 000f4240 00000000 08002101     ....@B.......!..
 8002760:	00000000 00000001 00000000 00000000     ................

08002770 <icucfgC>:
 8002770:	00000000 000f4240 00000000 08002101     ....@B.......!..
	...
 8002790:	656c6469 00000000 64616f4c 20216465     idle....Loaded! 
 80027a0:	00000a0d 00000000 00000000 00000000     ................
 80027b0:	6c756e28 0000296c 00000000 00000000     (null)..........

080027c0 <vmt>:
 80027c0:	080013b1 080014d1 08001431 08001541     ........1...A...
 80027d0:	08001421 08001531 080013a1 080014c1     !...1...........
