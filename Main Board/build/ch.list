
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4823      	ldr	r0, [pc, #140]	; (8000250 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f003 f985 	bl	80034e0 <__core_init>
 80001d6:	f003 f893 	bl	8003300 <__early_init>
 80001da:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001de:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xa>)
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <endfiniloop+0xe>)

080001e2 <msloop>:
 80001e2:	4291      	cmp	r1, r2
 80001e4:	bf3c      	itt	cc
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ea:	e7fa      	bcc.n	80001e2 <msloop>
 80001ec:	491b      	ldr	r1, [pc, #108]	; (800025c <endfiniloop+0x12>)
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <endfiniloop+0x6>)

080001f0 <psloop>:
 80001f0:	4291      	cmp	r1, r2
 80001f2:	bf3c      	itt	cc
 80001f4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f8:	e7fa      	bcc.n	80001f0 <psloop>
 80001fa:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x16>)
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <endfiniloop+0x1a>)
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x1e>)

08000200 <dloop>:
 8000200:	429a      	cmp	r2, r3
 8000202:	bf3e      	ittt	cc
 8000204:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000208:	f842 0b04 	strcc.w	r0, [r2], #4
 800020c:	e7f8      	bcc.n	8000200 <dloop>
 800020e:	2000      	movs	r0, #0
 8000210:	4916      	ldr	r1, [pc, #88]	; (800026c <endfiniloop+0x22>)
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x26>)

08000214 <bloop>:
 8000214:	4291      	cmp	r1, r2
 8000216:	bf3c      	itt	cc
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
 800021c:	e7fa      	bcc.n	8000214 <bloop>
 800021e:	f003 f917 	bl	8003450 <__init_ram_areas>
 8000222:	f003 f955 	bl	80034d0 <__late_init>
 8000226:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2a>)
 8000228:	4d13      	ldr	r5, [pc, #76]	; (8000278 <endfiniloop+0x2e>)

0800022a <initloop>:
 800022a:	42ac      	cmp	r4, r5
 800022c:	da03      	bge.n	8000236 <endinitloop>
 800022e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000232:	4788      	blx	r1
 8000234:	e7f9      	b.n	800022a <initloop>

08000236 <endinitloop>:
 8000236:	f002 fc23 	bl	8002a80 <main>
 800023a:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x32>)
 800023c:	4d10      	ldr	r5, [pc, #64]	; (8000280 <endfiniloop+0x36>)

0800023e <finiloop>:
 800023e:	42ac      	cmp	r4, r5
 8000240:	da03      	bge.n	800024a <endfiniloop>
 8000242:	f854 1b04 	ldr.w	r1, [r4], #4
 8000246:	4788      	blx	r1
 8000248:	e7f9      	b.n	800023e <finiloop>

0800024a <endfiniloop>:
 800024a:	f003 b939 	b.w	80034c0 <__default_exit>
 800024e:	0000      	.short	0x0000
 8000250:	20000800 	.word	0x20000800
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	08004d20 	.word	0x08004d20
 8000264:	20000800 	.word	0x20000800
 8000268:	20000834 	.word	0x20000834
 800026c:	20000838 	.word	0x20000838
 8000270:	20000fa0 	.word	0x20000fa0
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f003 f888 	bl	80033c0 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f003 f8ae 	bl	8003410 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop
	...

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>
	...

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2f>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd8:	bf24      	itt	cs
 8000bda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bde:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be2:	d90d      	bls.n	8000c00 <__aeabi_d2f+0x30>
 8000be4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c04:	d121      	bne.n	8000c4a <__aeabi_d2f+0x7a>
 8000c06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0a:	bfbc      	itt	lt
 8000c0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	4770      	bxlt	lr
 8000c12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c16:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1a:	f1c2 0218 	rsb	r2, r2, #24
 8000c1e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c22:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c26:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2a:	bf18      	it	ne
 8000c2c:	f040 0001 	orrne.w	r0, r0, #1
 8000c30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c38:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c3c:	ea40 000c 	orr.w	r0, r0, ip
 8000c40:	fa23 f302 	lsr.w	r3, r3, r2
 8000c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c48:	e7cc      	b.n	8000be4 <__aeabi_d2f+0x14>
 8000c4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4e:	d107      	bne.n	8000c60 <__aeabi_d2f+0x90>
 8000c50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c54:	bf1e      	ittt	ne
 8000c56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5e:	4770      	bxne	lr
 8000c60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__gesf2>:
 8000c70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c74:	e006      	b.n	8000c84 <__cmpsf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__lesf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	e002      	b.n	8000c84 <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__cmpsf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c94:	bf18      	it	ne
 8000c96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9a:	d011      	beq.n	8000cc0 <__cmpsf2+0x40>
 8000c9c:	b001      	add	sp, #4
 8000c9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ca2:	bf18      	it	ne
 8000ca4:	ea90 0f01 	teqne	r0, r1
 8000ca8:	bf58      	it	pl
 8000caa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cae:	bf88      	it	hi
 8000cb0:	17c8      	asrhi	r0, r1, #31
 8000cb2:	bf38      	it	cc
 8000cb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cb8:	bf18      	it	ne
 8000cba:	f040 0001 	orrne.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	d102      	bne.n	8000ccc <__cmpsf2+0x4c>
 8000cc6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cca:	d105      	bne.n	8000cd8 <__cmpsf2+0x58>
 8000ccc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd0:	d1e4      	bne.n	8000c9c <__cmpsf2+0x1c>
 8000cd2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cd6:	d0e1      	beq.n	8000c9c <__cmpsf2+0x1c>
 8000cd8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <__aeabi_cfrcmple>:
 8000ce0:	4684      	mov	ip, r0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	4661      	mov	r1, ip
 8000ce6:	e7ff      	b.n	8000ce8 <__aeabi_cfcmpeq>

08000ce8 <__aeabi_cfcmpeq>:
 8000ce8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cea:	f7ff ffc9 	bl	8000c80 <__cmpsf2>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	bf48      	it	mi
 8000cf2:	f110 0f00 	cmnmi.w	r0, #0
 8000cf6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cf8 <__aeabi_fcmpeq>:
 8000cf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cfc:	f7ff fff4 	bl	8000ce8 <__aeabi_cfcmpeq>
 8000d00:	bf0c      	ite	eq
 8000d02:	2001      	moveq	r0, #1
 8000d04:	2000      	movne	r0, #0
 8000d06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0a:	bf00      	nop

08000d0c <__aeabi_fcmplt>:
 8000d0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d10:	f7ff ffea 	bl	8000ce8 <__aeabi_cfcmpeq>
 8000d14:	bf34      	ite	cc
 8000d16:	2001      	movcc	r0, #1
 8000d18:	2000      	movcs	r0, #0
 8000d1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d1e:	bf00      	nop

08000d20 <__aeabi_fcmple>:
 8000d20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d24:	f7ff ffe0 	bl	8000ce8 <__aeabi_cfcmpeq>
 8000d28:	bf94      	ite	ls
 8000d2a:	2001      	movls	r0, #1
 8000d2c:	2000      	movhi	r0, #0
 8000d2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d32:	bf00      	nop

08000d34 <__aeabi_fcmpge>:
 8000d34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d38:	f7ff ffd2 	bl	8000ce0 <__aeabi_cfrcmple>
 8000d3c:	bf94      	ite	ls
 8000d3e:	2001      	movls	r0, #1
 8000d40:	2000      	movhi	r0, #0
 8000d42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d46:	bf00      	nop

08000d48 <__aeabi_fcmpgt>:
 8000d48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d4c:	f7ff ffc8 	bl	8000ce0 <__aeabi_cfrcmple>
 8000d50:	bf34      	ite	cc
 8000d52:	2001      	movcc	r0, #1
 8000d54:	2000      	movcs	r0, #0
 8000d56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5a:	bf00      	nop
 8000d5c:	0000      	movs	r0, r0
	...

08000d60 <__aeabi_f2iz>:
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d68:	d30f      	bcc.n	8000d8a <__aeabi_f2iz+0x2a>
 8000d6a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_f2iz+0x30>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d7c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	bf18      	it	ne
 8000d86:	4240      	negne	r0, r0
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2iz+0x3a>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d105      	bne.n	8000da6 <__aeabi_f2iz+0x46>
 8000d9a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr
 8000dac:	0000      	movs	r0, r0
	...

08000db0 <chTMStartMeasurementX.constprop.34>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000db0:	4b01      	ldr	r3, [pc, #4]	; (8000db8 <chTMStartMeasurementX.constprop.34+0x8>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000db4:	6083      	str	r3, [r0, #8]
}
 8000db6:	4770      	bx	lr
 8000db8:	e0001000 	.word	0xe0001000
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8000dc0:	4a02      	ldr	r2, [pc, #8]	; (8000dcc <notify1+0xc>)
 8000dc2:	68d3      	ldr	r3, [r2, #12]
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	60d3      	str	r3, [r2, #12]
}
 8000dca:	4770      	bx	lr
 8000dcc:	40011000 	.word	0x40011000

08000dd0 <sdObjectInit.constprop.25>:
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <sdObjectInit.constprop.25+0x54>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <sdObjectInit.constprop.25+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000dd4:	b470      	push	{r4, r5, r6}
  sdp->vmt = &vmt;
 8000dd6:	4618      	mov	r0, r3
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000dd8:	4c14      	ldr	r4, [pc, #80]	; (8000e2c <sdObjectInit.constprop.25+0x5c>)
 8000dda:	f840 2b04 	str.w	r2, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000dde:	2501      	movs	r5, #1
  iqp->q_counter = 0;
 8000de0:	2200      	movs	r2, #0
  oqp->q_counter = size;
 8000de2:	2110      	movs	r1, #16
 8000de4:	721d      	strb	r5, [r3, #8]
  oqp->q_top     = bp + size;
 8000de6:	f103 0674 	add.w	r6, r3, #116	; 0x74
  iqp->q_counter = 0;
 8000dea:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000dec:	f103 050c 	add.w	r5, r3, #12
  iqp->q_notify  = infy;
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  oqp->q_counter = size;
 8000df2:	6399      	str	r1, [r3, #56]	; 0x38
  iqp->q_top     = bp + size;
 8000df4:	f103 0264 	add.w	r2, r3, #100	; 0x64
  iqp->q_buffer  = bp;
 8000df8:	f103 0154 	add.w	r1, r3, #84	; 0x54
  oqp->q_notify  = onfy;
 8000dfc:	64dc      	str	r4, [r3, #76]	; 0x4c
 8000dfe:	f103 0430 	add.w	r4, r3, #48	; 0x30
  oqp->q_top     = bp + size;
 8000e02:	641e      	str	r6, [r3, #64]	; 0x40
  tqp->p_prev = (thread_t *)tqp;
 8000e04:	e9c3 5503 	strd	r5, r5, [r3, #12]
 8000e08:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
  iqp->q_link    = link;
 8000e0c:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_link    = link;
 8000e0e:	651b      	str	r3, [r3, #80]	; 0x50
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8000e10:	6058      	str	r0, [r3, #4]
  iqp->q_buffer  = bp;
 8000e12:	6199      	str	r1, [r3, #24]
  iqp->q_wrptr   = bp;
 8000e14:	e9c3 1108 	strd	r1, r1, [r3, #32]
  iqp->q_top     = bp + size;
 8000e18:	61da      	str	r2, [r3, #28]
  oqp->q_buffer  = bp;
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 8000e1c:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
 8000e20:	bc70      	pop	{r4, r5, r6}
 8000e22:	4770      	bx	lr
 8000e24:	200008d0 	.word	0x200008d0
 8000e28:	08004b20 	.word	0x08004b20
 8000e2c:	08000dc1 	.word	0x08000dc1

08000e30 <adc_lld_start_conversion.constprop.16>:
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <adc_lld_start_conversion.constprop.16+0x88>)
 8000e32:	6913      	ldr	r3, [r2, #16]
 8000e34:	68d1      	ldr	r1, [r2, #12]

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
 8000e36:	7818      	ldrb	r0, [r3, #0]
void adc_lld_start_conversion(ADCDriver *adcp) {
 8000e38:	b4f0      	push	{r4, r5, r6, r7}
  mode = adcp->dmamode;
 8000e3a:	6b14      	ldr	r4, [r2, #48]	; 0x30
  if (grpp->circular) {
 8000e3c:	b128      	cbz	r0, 8000e4a <adc_lld_start_conversion.constprop.16+0x1a>
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 8000e3e:	2901      	cmp	r1, #1
    mode |= STM32_DMA_CR_CIRC;
 8000e40:	bf94      	ite	ls
 8000e42:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 8000e46:	f444 7484 	orrhi.w	r4, r4, #264	; 0x108
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000e4a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8000e4c:	885d      	ldrh	r5, [r3, #2]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000e4e:	6800      	ldr	r0, [r0, #0]
 8000e50:	6896      	ldr	r6, [r2, #8]
 8000e52:	60c6      	str	r6, [r0, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8000e54:	fb01 f105 	mul.w	r1, r1, r5
 8000e58:	6041      	str	r1, [r0, #4]
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000e5a:	68d9      	ldr	r1, [r3, #12]
  dmaStreamSetMode(adcp->dmastp, mode);
 8000e5c:	6004      	str	r4, [r0, #0]
  dmaStreamEnable(adcp->dmastp);
 8000e5e:	6805      	ldr	r5, [r0, #0]
  adcp->adc->SR    = 0;
 8000e60:	6a92      	ldr	r2, [r2, #40]	; 0x28
  adcp->adc->SMPR2 = grpp->smpr2;
 8000e62:	699e      	ldr	r6, [r3, #24]
  dmaStreamEnable(adcp->dmastp);
 8000e64:	f045 0501 	orr.w	r5, r5, #1
  adcp->adc->SMPR1 = grpp->smpr1;
 8000e68:	e9d3 4704 	ldrd	r4, r7, [r3, #16]
  dmaStreamEnable(adcp->dmastp);
 8000e6c:	6005      	str	r5, [r0, #0]
  adcp->adc->SR    = 0;
 8000e6e:	2000      	movs	r0, #0
 8000e70:	6010      	str	r0, [r2, #0]
  adcp->adc->SQR1  = grpp->sqr1;
 8000e72:	69dd      	ldr	r5, [r3, #28]
  adcp->adc->SMPR1 = grpp->smpr1;
 8000e74:	60d7      	str	r7, [r2, #12]
  adcp->adc->SQR3  = grpp->sqr3;
 8000e76:	e9d3 0308 	ldrd	r0, r3, [r3, #32]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000e7a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  adcp->adc->SMPR2 = grpp->smpr2;
 8000e7e:	6116      	str	r6, [r2, #16]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000e80:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  adcp->adc->SQR1  = grpp->sqr1;
 8000e84:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 8000e86:	6310      	str	r0, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 8000e88:	6353      	str	r3, [r2, #52]	; 0x34
  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8000e8a:	0063      	lsls	r3, r4, #1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000e8c:	6051      	str	r1, [r2, #4]
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8000e8e:	d50b      	bpl.n	8000ea8 <adc_lld_start_conversion.constprop.16+0x78>
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8000e90:	f024 4380 	bic.w	r3, r4, #1073741824	; 0x40000000
 8000e94:	f240 3103 	movw	r1, #771	; 0x303
 8000e98:	f023 0302 	bic.w	r3, r3, #2

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8000e9c:	430c      	orrs	r4, r1
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	6093      	str	r3, [r2, #8]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8000ea2:	6094      	str	r4, [r2, #8]
  }
  else
    adcp->adc->CR2 = cr2;
}
 8000ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea6:	4770      	bx	lr
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8000ea8:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000eac:	f044 0401 	orr.w	r4, r4, #1
    adcp->adc->CR2 = cr2;
 8000eb0:	6094      	str	r4, [r2, #8]
}
 8000eb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000838 	.word	0x20000838
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <encoder_pulse_captured>:
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
        }
    }
    //timer_reset(sender);
    */
}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
	...

08000ed0 <_idle_thread>:
}
 8000ed0:	e7fe      	b.n	8000ed0 <_idle_thread>
 8000ed2:	bf00      	nop
	...

08000ee0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000ee0:	4603      	mov	r3, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	f382 8811 	msr	BASEPRI, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000ee8:	4908      	ldr	r1, [pc, #32]	; (8000f0c <chCoreAlloc+0x2c>)
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <chCoreAlloc+0x30>)
 8000eec:	6808      	ldr	r0, [r1, #0]
 8000eee:	6812      	ldr	r2, [r2, #0]
  size = MEM_ALIGN_NEXT(size);
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000ef6:	1a12      	subs	r2, r2, r0
 8000ef8:	4293      	cmp	r3, r2
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8000efa:	bf9a      	itte	ls
 8000efc:	181b      	addls	r3, r3, r0
 8000efe:	600b      	strls	r3, [r1, #0]
    return NULL;
 8000f00:	2000      	movhi	r0, #0
 8000f02:	2300      	movs	r3, #0
 8000f04:	f383 8811 	msr	BASEPRI, r3
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000b88 	.word	0x20000b88
 8000f10:	20000b3c 	.word	0x20000b3c
	...

08000f20 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 8000f22:	68c3      	ldr	r3, [r0, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000f24:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
 8000f26:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000f28:	68dc      	ldr	r4, [r3, #12]
 8000f2a:	4014      	ands	r4, r2
 8000f2c:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 8000f2e:	43d2      	mvns	r2, r2
 8000f30:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000f32:	7d0b      	ldrb	r3, [r1, #20]
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8000f34:	4605      	mov	r5, r0
 8000f36:	f004 0702 	and.w	r7, r4, #2
 8000f3a:	f004 0604 	and.w	r6, r4, #4
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000f3e:	b9c3      	cbnz	r3, 8000f72 <icu_lld_serve_interrupt+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000f40:	b17e      	cbz	r6, 8000f62 <icu_lld_serve_interrupt+0x42>
      _icu_isr_invoke_width_cb(icup);
 8000f42:	7803      	ldrb	r3, [r0, #0]
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d009      	beq.n	8000f5c <icu_lld_serve_interrupt+0x3c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000f48:	b987      	cbnz	r7, 8000f6c <icu_lld_serve_interrupt+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8000f4a:	07e3      	lsls	r3, r4, #31
 8000f4c:	d505      	bpl.n	8000f5a <icu_lld_serve_interrupt+0x3a>
    _icu_isr_invoke_overflow_cb(icup);
 8000f4e:	686b      	ldr	r3, [r5, #4]
 8000f50:	4628      	mov	r0, r5
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	4798      	blx	r3
 8000f56:	2303      	movs	r3, #3
 8000f58:	702b      	strb	r3, [r5, #0]
}
 8000f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _icu_isr_invoke_width_cb(icup);
 8000f5c:	688b      	ldr	r3, [r1, #8]
 8000f5e:	b303      	cbz	r3, 8000fa2 <icu_lld_serve_interrupt+0x82>
 8000f60:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000f62:	2f00      	cmp	r7, #0
 8000f64:	d0f1      	beq.n	8000f4a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
 8000f66:	782b      	ldrb	r3, [r5, #0]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d011      	beq.n	8000f90 <icu_lld_serve_interrupt+0x70>
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	702b      	strb	r3, [r5, #0]
 8000f70:	e7eb      	b.n	8000f4a <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000f72:	b147      	cbz	r7, 8000f86 <icu_lld_serve_interrupt+0x66>
      _icu_isr_invoke_width_cb(icup);
 8000f74:	7803      	ldrb	r3, [r0, #0]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d002      	beq.n	8000f80 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	d1f6      	bne.n	8000f6c <icu_lld_serve_interrupt+0x4c>
 8000f7e:	e7e4      	b.n	8000f4a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_width_cb(icup);
 8000f80:	688b      	ldr	r3, [r1, #8]
 8000f82:	b18b      	cbz	r3, 8000fa8 <icu_lld_serve_interrupt+0x88>
 8000f84:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	d0df      	beq.n	8000f4a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
 8000f8a:	782b      	ldrb	r3, [r5, #0]
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d1ed      	bne.n	8000f6c <icu_lld_serve_interrupt+0x4c>
 8000f90:	6869      	ldr	r1, [r5, #4]
 8000f92:	68cb      	ldr	r3, [r1, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0e9      	beq.n	8000f6c <icu_lld_serve_interrupt+0x4c>
 8000f98:	4628      	mov	r0, r5
 8000f9a:	4798      	blx	r3
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	702b      	strb	r3, [r5, #0]
 8000fa0:	e7d3      	b.n	8000f4a <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d1f5      	bne.n	8000f92 <icu_lld_serve_interrupt+0x72>
 8000fa6:	e7d0      	b.n	8000f4a <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d1f2      	bne.n	8000f92 <icu_lld_serve_interrupt+0x72>
 8000fac:	e7cd      	b.n	8000f4a <icu_lld_serve_interrupt+0x2a>
 8000fae:	bf00      	nop

08000fb0 <icu_lld_enable_notifications>:
  uint32_t dier = icup->tim->DIER;
 8000fb0:	68c2      	ldr	r2, [r0, #12]
 8000fb2:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
 8000fb4:	b410      	push	{r4}
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8000fb6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000fba:	d10c      	bne.n	8000fd6 <icu_lld_enable_notifications+0x26>
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000fbc:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
 8000fbe:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000fc0:	7d0c      	ldrb	r4, [r1, #20]
 8000fc2:	6888      	ldr	r0, [r1, #8]
 8000fc4:	b94c      	cbnz	r4, 8000fda <icu_lld_enable_notifications+0x2a>
      if (icup->config->width_cb != NULL)
 8000fc6:	b168      	cbz	r0, 8000fe4 <icu_lld_enable_notifications+0x34>
        dier |= STM32_TIM_DIER_CC1IE;
 8000fc8:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
 8000fcc:	6909      	ldr	r1, [r1, #16]
 8000fce:	b109      	cbz	r1, 8000fd4 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
 8000fd4:	60d3      	str	r3, [r2, #12]
}
 8000fd6:	bc10      	pop	{r4}
 8000fd8:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d1f4      	bne.n	8000fc8 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC2IE;
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	e7f3      	b.n	8000fcc <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC1IE;
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	e7f0      	b.n	8000fcc <icu_lld_enable_notifications+0x1c>
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
 8000ff0:	7802      	ldrb	r2, [r0, #0]
 8000ff2:	68c3      	ldr	r3, [r0, #12]
 8000ff4:	2a01      	cmp	r2, #1
void icu_lld_start(ICUDriver *icup) {
 8000ff6:	b430      	push	{r4, r5}
  if (icup->state == ICU_STOP) {
 8000ff8:	d037      	beq.n	800106a <icu_lld_start+0x7a>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001000:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (icup->clock / icup->config->frequency) - 1;
 8001004:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8001008:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
 800100a:	684d      	ldr	r5, [r1, #4]
 800100c:	fbb2 f2f5 	udiv	r2, r2, r5
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8001010:	2500      	movs	r5, #0
 8001012:	611d      	str	r5, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8001014:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
 8001018:	3a01      	subs	r2, #1
  icup->tim->ARR  = 0xFFFF;
 800101a:	f64f 75ff 	movw	r5, #65535	; 0xffff
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800101e:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 8001022:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001024:	7d0c      	ldrb	r4, [r1, #20]
 8001026:	780a      	ldrb	r2, [r1, #0]
 8001028:	b98c      	cbnz	r4, 800104e <icu_lld_start+0x5e>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 800102a:	f240 2401 	movw	r4, #513	; 0x201
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800102e:	2154      	movs	r1, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8001030:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8001032:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8001034:	b142      	cbz	r2, 8001048 <icu_lld_start+0x58>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8001036:	2213      	movs	r2, #19
 8001038:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 800103a:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 800103e:	3334      	adds	r3, #52	; 0x34
 8001040:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
 8001044:	bc30      	pop	{r4, r5}
 8001046:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8001048:	2231      	movs	r2, #49	; 0x31
 800104a:	621a      	str	r2, [r3, #32]
 800104c:	e7f5      	b.n	800103a <icu_lld_start+0x4a>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 800104e:	f44f 7481 	mov.w	r4, #258	; 0x102
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8001052:	2164      	movs	r1, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8001054:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8001056:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8001058:	bb3a      	cbnz	r2, 80010aa <icu_lld_start+0xba>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800105a:	2213      	movs	r2, #19
 800105c:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 800105e:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 8001062:	3338      	adds	r3, #56	; 0x38
 8001064:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001068:	e7ec      	b.n	8001044 <icu_lld_start+0x54>
    if (&ICUD2 == icup) {
 800106a:	4a28      	ldr	r2, [pc, #160]	; (800110c <icu_lld_start+0x11c>)
 800106c:	4290      	cmp	r0, r2
 800106e:	d036      	beq.n	80010de <icu_lld_start+0xee>
    if (&ICUD3 == icup) {
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <icu_lld_start+0x120>)
 8001072:	4290      	cmp	r0, r2
 8001074:	d01c      	beq.n	80010b0 <icu_lld_start+0xc0>
    if (&ICUD5 == icup) {
 8001076:	4a27      	ldr	r2, [pc, #156]	; (8001114 <icu_lld_start+0x124>)
 8001078:	4290      	cmp	r0, r2
 800107a:	d1c3      	bne.n	8001004 <icu_lld_start+0x14>
      rccEnableTIM5(FALSE);
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <icu_lld_start+0x128>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800107e:	4927      	ldr	r1, [pc, #156]	; (800111c <icu_lld_start+0x12c>)
 8001080:	6c14      	ldr	r4, [r2, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 8001082:	4d27      	ldr	r5, [pc, #156]	; (8001120 <icu_lld_start+0x130>)
      rccEnableTIM5(FALSE);
 8001084:	f044 0408 	orr.w	r4, r4, #8
 8001088:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM5();
 800108a:	6a14      	ldr	r4, [r2, #32]
 800108c:	f044 0408 	orr.w	r4, r4, #8
 8001090:	6214      	str	r4, [r2, #32]
 8001092:	2400      	movs	r4, #0
 8001094:	6214      	str	r4, [r2, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001096:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800109a:	2470      	movs	r4, #112	; 0x70
 800109c:	f881 4332 	strb.w	r4, [r1, #818]	; 0x332
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010a0:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010a4:	604a      	str	r2, [r1, #4]
      icup->clock = STM32_TIMCLK1;
 80010a6:	6085      	str	r5, [r0, #8]
 80010a8:	e7ac      	b.n	8001004 <icu_lld_start+0x14>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80010aa:	2231      	movs	r2, #49	; 0x31
 80010ac:	621a      	str	r2, [r3, #32]
 80010ae:	e7d6      	b.n	800105e <icu_lld_start+0x6e>
      rccEnableTIM3(FALSE);
 80010b0:	4a19      	ldr	r2, [pc, #100]	; (8001118 <icu_lld_start+0x128>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010b2:	491a      	ldr	r1, [pc, #104]	; (800111c <icu_lld_start+0x12c>)
 80010b4:	6c14      	ldr	r4, [r2, #64]	; 0x40
     icup->clock = STM32_TIMCLK1;
 80010b6:	4d1a      	ldr	r5, [pc, #104]	; (8001120 <icu_lld_start+0x130>)
      rccEnableTIM3(FALSE);
 80010b8:	f044 0402 	orr.w	r4, r4, #2
 80010bc:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM3();
 80010be:	6a14      	ldr	r4, [r2, #32]
 80010c0:	f044 0402 	orr.w	r4, r4, #2
 80010c4:	6214      	str	r4, [r2, #32]
 80010c6:	2400      	movs	r4, #0
 80010c8:	6214      	str	r4, [r2, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010ce:	2470      	movs	r4, #112	; 0x70
 80010d0:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010d4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010d8:	600a      	str	r2, [r1, #0]
     icup->clock = STM32_TIMCLK1;
 80010da:	6085      	str	r5, [r0, #8]
    if (&ICUD5 == icup) {
 80010dc:	e792      	b.n	8001004 <icu_lld_start+0x14>
      rccEnableTIM2(FALSE);
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <icu_lld_start+0x128>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <icu_lld_start+0x12c>)
 80010e2:	6c14      	ldr	r4, [r2, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 80010e4:	4d0e      	ldr	r5, [pc, #56]	; (8001120 <icu_lld_start+0x130>)
      rccEnableTIM2(FALSE);
 80010e6:	f044 0401 	orr.w	r4, r4, #1
 80010ea:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM2();
 80010ec:	6a14      	ldr	r4, [r2, #32]
 80010ee:	f044 0401 	orr.w	r4, r4, #1
 80010f2:	6214      	str	r4, [r2, #32]
 80010f4:	2400      	movs	r4, #0
 80010f6:	6214      	str	r4, [r2, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010fc:	2470      	movs	r4, #112	; 0x70
 80010fe:	f881 431c 	strb.w	r4, [r1, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001102:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001106:	600a      	str	r2, [r1, #0]
      icup->clock = STM32_TIMCLK1;
 8001108:	6085      	str	r5, [r0, #8]
    if (&ICUD5 == icup) {
 800110a:	e77b      	b.n	8001004 <icu_lld_start+0x14>
 800110c:	2000086c 	.word	0x2000086c
 8001110:	20000884 	.word	0x20000884
 8001114:	2000089c 	.word	0x2000089c
 8001118:	40023800 	.word	0x40023800
 800111c:	e000e100 	.word	0xe000e100
 8001120:	05b8d800 	.word	0x05b8d800
	...

08001130 <icu_lld_init>:
void icu_lld_init(void) {
 8001130:	b430      	push	{r4, r5}
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8001132:	480a      	ldr	r0, [pc, #40]	; (800115c <icu_lld_init+0x2c>)
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <icu_lld_init+0x30>)
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <icu_lld_init+0x34>)
  ICUD3.tim = STM32_TIM3;
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <icu_lld_init+0x38>)
 800113a:	60c2      	str	r2, [r0, #12]
 800113c:	2101      	movs	r1, #1
  ICUD2.tim = STM32_TIM2;
 800113e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  icup->config = NULL;
 8001142:	2200      	movs	r2, #0
 8001144:	60e5      	str	r5, [r4, #12]
  icup->state  = ICU_STOP;
 8001146:	7001      	strb	r1, [r0, #0]
  ICUD5.tim = STM32_TIM5;
 8001148:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800114c:	7019      	strb	r1, [r3, #0]
 800114e:	7021      	strb	r1, [r4, #0]
  icup->config = NULL;
 8001150:	6062      	str	r2, [r4, #4]
 8001152:	60dd      	str	r5, [r3, #12]
 8001154:	6042      	str	r2, [r0, #4]
 8001156:	605a      	str	r2, [r3, #4]
}
 8001158:	bc30      	pop	{r4, r5}
 800115a:	4770      	bx	lr
 800115c:	20000884 	.word	0x20000884
 8001160:	2000086c 	.word	0x2000086c
 8001164:	2000089c 	.word	0x2000089c
 8001168:	40000400 	.word	0x40000400
 800116c:	00000000 	.word	0x00000000

08001170 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001170:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 8001174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001178:	09d2      	lsrs	r2, r2, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800117a:	4667      	mov	r7, ip
  uint32_t bit     = 0;
 800117c:	2400      	movs	r4, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800117e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
 8001182:	f04f 0803 	mov.w	r8, #3
      m4 = 15 << ((bit & 7) * 4);
 8001186:	f04f 0e0f 	mov.w	lr, #15
 800118a:	e00f      	b.n	80011ac <_pal_lld_setgroupmode+0x3c>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800118c:	f8d0 a000 	ldr.w	sl, [r0]
 8001190:	ea03 030a 	and.w	r3, r3, sl
 8001194:	433b      	orrs	r3, r7
        if (bit < 8)
 8001196:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8001198:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 800119a:	d835      	bhi.n	8001208 <_pal_lld_setgroupmode+0x98>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800119c:	6a03      	ldr	r3, [r0, #32]
 800119e:	401e      	ands	r6, r3
 80011a0:	4335      	orrs	r5, r6
 80011a2:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80011a4:	0849      	lsrs	r1, r1, #1
 80011a6:	d02d      	beq.n	8001204 <_pal_lld_setgroupmode+0x94>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 80011a8:	00bf      	lsls	r7, r7, #2
    bit++;
 80011aa:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 80011ac:	07cb      	lsls	r3, r1, #31
 80011ae:	d5f9      	bpl.n	80011a4 <_pal_lld_setgroupmode+0x34>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80011b0:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80011b2:	fa09 f504 	lsl.w	r5, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80011b6:	ea23 0305 	bic.w	r3, r3, r5
 80011ba:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 80011bc:	0063      	lsls	r3, r4, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80011be:	6885      	ldr	r5, [r0, #8]
      m2 = 3 << (bit * 2);
 80011c0:	fa08 f303 	lsl.w	r3, r8, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80011c4:	43db      	mvns	r3, r3
 80011c6:	401d      	ands	r5, r3
 80011c8:	6085      	str	r5, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011ca:	68c6      	ldr	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80011cc:	f004 0507 	and.w	r5, r4, #7
 80011d0:	00ad      	lsls	r5, r5, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011d2:	401e      	ands	r6, r3
      m4 = 15 << ((bit & 7) * 4);
 80011d4:	fa0e fa05 	lsl.w	sl, lr, r5
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80011d8:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80011dc:	60c6      	str	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80011de:	fa02 f505 	lsl.w	r5, r2, r5
 80011e2:	ea6f 060a 	mvn.w	r6, sl
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80011e6:	d1d1      	bne.n	800118c <_pal_lld_setgroupmode+0x1c>
        if (bit < 8)
 80011e8:	2c07      	cmp	r4, #7
 80011ea:	d812      	bhi.n	8001212 <_pal_lld_setgroupmode+0xa2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80011ec:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80011f0:	ea06 060a 	and.w	r6, r6, sl
 80011f4:	4335      	orrs	r5, r6
 80011f6:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80011f8:	6805      	ldr	r5, [r0, #0]
 80011fa:	402b      	ands	r3, r5
 80011fc:	433b      	orrs	r3, r7
    if (!mask)
 80011fe:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8001200:	6003      	str	r3, [r0, #0]
    if (!mask)
 8001202:	d1d1      	bne.n	80011a8 <_pal_lld_setgroupmode+0x38>
  }
}
 8001204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001208:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800120a:	401e      	ands	r6, r3
 800120c:	4335      	orrs	r5, r6
 800120e:	6245      	str	r5, [r0, #36]	; 0x24
 8001210:	e7c8      	b.n	80011a4 <_pal_lld_setgroupmode+0x34>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001212:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8001216:	ea06 060a 	and.w	r6, r6, sl
 800121a:	4335      	orrs	r5, r6
 800121c:	6245      	str	r5, [r0, #36]	; 0x24
 800121e:	e7eb      	b.n	80011f8 <_pal_lld_setgroupmode+0x88>

08001220 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 8001220:	b430      	push	{r4, r5}
 8001222:	2320      	movs	r3, #32
 8001224:	f383 8811 	msr	BASEPRI, r3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8001228:	68c3      	ldr	r3, [r0, #12]
 800122a:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 800122c:	2100      	movs	r1, #0
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800122e:	f042 0201 	orr.w	r2, r2, #1
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8001232:	2505      	movs	r5, #5

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 8001234:	2403      	movs	r4, #3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 8001236:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 8001238:	6119      	str	r1, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800123a:	601d      	str	r5, [r3, #0]
 800123c:	7004      	strb	r4, [r0, #0]
 800123e:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 8001242:	bc30      	pop	{r4, r5}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
	...

08001250 <_port_irq_epilogue>:
 8001250:	2320      	movs	r3, #32
 8001252:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <_port_irq_epilogue+0x4c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800125e:	d102      	bne.n	8001266 <_port_irq_epilogue+0x16>
 8001260:	f383 8811 	msr	BASEPRI, r3
 8001264:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800126a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800126e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001272:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8001276:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800127a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <_port_irq_epilogue+0x50>)
 8001280:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8001282:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001284:	6889      	ldr	r1, [r1, #8]
 8001286:	6892      	ldr	r2, [r2, #8]
 8001288:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800128a:	bf8c      	ite	hi
 800128c:	4a05      	ldrhi	r2, [pc, #20]	; (80012a4 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800128e:	4a06      	ldrls	r2, [pc, #24]	; (80012a8 <_port_irq_epilogue+0x58>)
 8001290:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00
 80012a0:	20000948 	.word	0x20000948
 80012a4:	080002b1 	.word	0x080002b1
 80012a8:	080002b4 	.word	0x080002b4
 80012ac:	00000000 	.word	0x00000000

080012b0 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 80012b0:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80012b2:	4d17      	ldr	r5, [pc, #92]	; (8001310 <VectorA4+0x60>)
 80012b4:	69ab      	ldr	r3, [r5, #24]
 80012b6:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	4014      	ands	r4, r2
 80012bc:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 80012be:	43d2      	mvns	r2, r2
 80012c0:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80012c2:	07a3      	lsls	r3, r4, #30
 80012c4:	d504      	bpl.n	80012d0 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 80012c6:	686b      	ldr	r3, [r5, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80012ca:	b10b      	cbz	r3, 80012d0 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 80012cc:	4628      	mov	r0, r5
 80012ce:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80012d0:	0760      	lsls	r0, r4, #29
 80012d2:	d504      	bpl.n	80012de <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 80012d4:	686b      	ldr	r3, [r5, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80012d8:	b10b      	cbz	r3, 80012de <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <VectorA4+0x60>)
 80012dc:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80012de:	0721      	lsls	r1, r4, #28
 80012e0:	d504      	bpl.n	80012ec <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 80012e2:	686b      	ldr	r3, [r5, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80012e6:	b10b      	cbz	r3, 80012ec <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <VectorA4+0x60>)
 80012ea:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80012ec:	06e2      	lsls	r2, r4, #27
 80012ee:	d504      	bpl.n	80012fa <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 80012f0:	686b      	ldr	r3, [r5, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80012f4:	b10b      	cbz	r3, 80012fa <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <VectorA4+0x60>)
 80012f8:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80012fa:	07e3      	lsls	r3, r4, #31
 80012fc:	d504      	bpl.n	8001308 <VectorA4+0x58>
 80012fe:	686b      	ldr	r3, [r5, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	b10b      	cbz	r3, 8001308 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <VectorA4+0x60>)
 8001306:	4798      	blx	r3
}
 8001308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800130c:	f7ff bfa0 	b.w	8001250 <_port_irq_epilogue>
 8001310:	200008b4 	.word	0x200008b4
	...

08001320 <VectorAC>:
 8001320:	f7ff bfc6 	b.w	80012b0 <VectorA4>
	...

08001330 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8001330:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD5);
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <Vector108+0x10>)
 8001334:	f7ff fdf4 	bl	8000f20 <icu_lld_serve_interrupt>
}
 8001338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800133c:	f7ff bf88 	b.w	8001250 <_port_irq_epilogue>
 8001340:	2000089c 	.word	0x2000089c
	...

08001350 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8001350:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD3);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <VectorB4+0x10>)
 8001354:	f7ff fde4 	bl	8000f20 <icu_lld_serve_interrupt>
}
 8001358:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800135c:	f7ff bf78 	b.w	8001250 <_port_irq_epilogue>
 8001360:	20000884 	.word	0x20000884
	...

08001370 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8001370:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD2);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <VectorB0+0x10>)
 8001374:	f7ff fdd4 	bl	8000f20 <icu_lld_serve_interrupt>
}
 8001378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800137c:	f7ff bf68 	b.w	8001250 <_port_irq_epilogue>
 8001380:	2000086c 	.word	0x2000086c
	...

08001390 <VectorB8>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <VectorB8+0x9c>)
 8001392:	6913      	ldr	r3, [r2, #16]
 8001394:	079b      	lsls	r3, r3, #30
 8001396:	d401      	bmi.n	800139c <VectorB8+0xc>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001398:	f7ff bf5a 	b.w	8001250 <_port_irq_epilogue>
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    STM32_ST_TIM->SR = 0U;
 80013a0:	2700      	movs	r7, #0
 80013a2:	6117      	str	r7, [r2, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80013a4:	2620      	movs	r6, #32
 80013a6:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80013aa:	4c21      	ldr	r4, [pc, #132]	; (8001430 <VectorB8+0xa0>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80013ac:	6a50      	ldr	r0, [r2, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80013ae:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
  vtp = ch.vtlist.vt_next;
 80013b2:	69e1      	ldr	r1, [r4, #28]
 80013b4:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80013b6:	eba0 050c 	sub.w	r5, r0, ip
 80013ba:	890b      	ldrh	r3, [r1, #8]
 80013bc:	b2ad      	uxth	r5, r5
 80013be:	429d      	cmp	r5, r3
 80013c0:	bf38      	it	cc
 80013c2:	f104 081c 	addcc.w	r8, r4, #28
 80013c6:	d31e      	bcc.n	8001406 <VectorB8+0x76>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80013c8:	4615      	mov	r5, r2
 80013ca:	f104 081c 	add.w	r8, r4, #28
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80013ce:	680a      	ldr	r2, [r1, #0]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80013d0:	4463      	add	r3, ip
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80013d2:	4542      	cmp	r2, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80013d4:	84e3      	strh	r3, [r4, #38]	; 0x26
    fn = vtp->vt_func;
 80013d6:	68cb      	ldr	r3, [r1, #12]
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80013d8:	f8c2 8004 	str.w	r8, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80013dc:	61e2      	str	r2, [r4, #28]
    vtp->vt_func = NULL;
 80013de:	60cf      	str	r7, [r1, #12]
 80013e0:	bf08      	it	eq
 80013e2:	60ef      	streq	r7, [r5, #12]
 80013e4:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80013e8:	6908      	ldr	r0, [r1, #16]
 80013ea:	4798      	blx	r3
 80013ec:	f386 8811 	msr	BASEPRI, r6
  return (systime_t)STM32_ST_TIM->CNT;
 80013f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80013f2:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 80013f6:	69e1      	ldr	r1, [r4, #28]
 80013f8:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80013fa:	eba0 020c 	sub.w	r2, r0, ip
 80013fe:	890b      	ldrh	r3, [r1, #8]
 8001400:	b292      	uxth	r2, r2
 8001402:	4293      	cmp	r3, r2
 8001404:	d9e3      	bls.n	80013ce <VectorB8+0x3e>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8001406:	4541      	cmp	r1, r8
 8001408:	d009      	beq.n	800141e <VectorB8+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800140a:	4463      	add	r3, ip
 800140c:	1a1b      	subs	r3, r3, r0
 800140e:	b29b      	uxth	r3, r3
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 8001410:	2b02      	cmp	r3, #2
 8001412:	bf2c      	ite	cs
 8001414:	18c3      	addcs	r3, r0, r3
 8001416:	1c83      	addcc	r3, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <VectorB8+0x9c>)
 800141a:	b29b      	uxth	r3, r3
 800141c:	6353      	str	r3, [r2, #52]	; 0x34
 800141e:	2300      	movs	r3, #0
 8001420:	f383 8811 	msr	BASEPRI, r3
}
 8001424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001428:	f7ff bf12 	b.w	8001250 <_port_irq_epilogue>
 800142c:	40000800 	.word	0x40000800
 8001430:	20000948 	.word	0x20000948
	...

08001440 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001444:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8001446:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001448:	0d89      	lsrs	r1, r1, #22
 800144a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800144e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8001450:	058c      	lsls	r4, r1, #22
 8001452:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8001454:	b10a      	cbz	r2, 800145a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8001456:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8001458:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800145a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800145e:	f7ff bef7 	b.w	8001250 <_port_irq_epilogue>
 8001462:	bf00      	nop
 8001464:	40026400 	.word	0x40026400
 8001468:	20000ab8 	.word	0x20000ab8
 800146c:	00000000 	.word	0x00000000

08001470 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
 8001472:	4809      	ldr	r0, [pc, #36]	; (8001498 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001474:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8001476:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001478:	0c09      	lsrs	r1, r1, #16
 800147a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800147e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8001480:	040c      	lsls	r4, r1, #16
 8001482:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8001484:	b10a      	cbz	r2, 800148a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8001486:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8001488:	4790      	blx	r2
}
 800148a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800148e:	f7ff bedf 	b.w	8001250 <_port_irq_epilogue>
 8001492:	bf00      	nop
 8001494:	40026400 	.word	0x40026400
 8001498:	20000ab8 	.word	0x20000ab8
 800149c:	00000000 	.word	0x00000000

080014a0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80014a4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 80014a6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80014a8:	0989      	lsrs	r1, r1, #6
 80014aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80014ae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80014b0:	018c      	lsls	r4, r1, #6
 80014b2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 80014b4:	b10a      	cbz	r2, 80014ba <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 80014b6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80014b8:	4790      	blx	r2
}
 80014ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80014be:	f7ff bec7 	b.w	8001250 <_port_irq_epilogue>
 80014c2:	bf00      	nop
 80014c4:	40026400 	.word	0x40026400
 80014c8:	20000ab8 	.word	0x20000ab8
 80014cc:	00000000 	.word	0x00000000

080014d0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80014d0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80014d6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 80014d8:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80014da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80014de:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 80014e0:	b10a      	cbz	r2, 80014e6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 80014e2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80014e4:	4790      	blx	r2
}
 80014e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80014ea:	f7ff beb1 	b.w	8001250 <_port_irq_epilogue>
 80014ee:	bf00      	nop
 80014f0:	40026400 	.word	0x40026400
 80014f4:	20000ab8 	.word	0x20000ab8
	...

08001500 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001504:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8001506:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001508:	0d89      	lsrs	r1, r1, #22
 800150a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800150e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8001510:	058c      	lsls	r4, r1, #22
 8001512:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8001514:	b10a      	cbz	r2, 800151a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8001516:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001518:	4790      	blx	r2
}
 800151a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800151e:	f7ff be97 	b.w	8001250 <_port_irq_epilogue>
 8001522:	bf00      	nop
 8001524:	40026400 	.word	0x40026400
 8001528:	20000ab8 	.word	0x20000ab8
 800152c:	00000000 	.word	0x00000000

08001530 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
 8001532:	4809      	ldr	r0, [pc, #36]	; (8001558 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001534:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 8001536:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800153e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8001540:	040c      	lsls	r4, r1, #16
 8001542:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8001544:	b10a      	cbz	r2, 800154a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8001546:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001548:	4790      	blx	r2
}
 800154a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800154e:	f7ff be7f 	b.w	8001250 <_port_irq_epilogue>
 8001552:	bf00      	nop
 8001554:	40026400 	.word	0x40026400
 8001558:	20000ab8 	.word	0x20000ab8
 800155c:	00000000 	.word	0x00000000

08001560 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001564:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 8001566:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001568:	0989      	lsrs	r1, r1, #6
 800156a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800156e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8001570:	018c      	lsls	r4, r1, #6
 8001572:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8001574:	b10a      	cbz	r2, 800157a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8001576:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001578:	4790      	blx	r2
}
 800157a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800157e:	f7ff be67 	b.w	8001250 <_port_irq_epilogue>
 8001582:	bf00      	nop
 8001584:	40026400 	.word	0x40026400
 8001588:	20000ab8 	.word	0x20000ab8
 800158c:	00000000 	.word	0x00000000

08001590 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8001590:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001596:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 8001598:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800159a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800159e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 80015a0:	b10a      	cbz	r2, 80015a6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80015a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80015a4:	4790      	blx	r2
}
 80015a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80015aa:	f7ff be51 	b.w	8001250 <_port_irq_epilogue>
 80015ae:	bf00      	nop
 80015b0:	40026400 	.word	0x40026400
 80015b4:	20000ab8 	.word	0x20000ab8
	...

080015c0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
 80015c2:	4809      	ldr	r0, [pc, #36]	; (80015e8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80015c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 80015c6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80015c8:	0d89      	lsrs	r1, r1, #22
 80015ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80015ce:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 80015d0:	058c      	lsls	r4, r1, #22
 80015d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80015d4:	b10a      	cbz	r2, 80015da <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80015d6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80015d8:	4790      	blx	r2
}
 80015da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80015de:	f7ff be37 	b.w	8001250 <_port_irq_epilogue>
 80015e2:	bf00      	nop
 80015e4:	40026000 	.word	0x40026000
 80015e8:	20000ab8 	.word	0x20000ab8
 80015ec:	00000000 	.word	0x00000000

080015f0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
 80015f2:	4809      	ldr	r0, [pc, #36]	; (8001618 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80015f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 80015f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80015f8:	0c09      	lsrs	r1, r1, #16
 80015fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80015fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8001600:	040c      	lsls	r4, r1, #16
 8001602:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8001604:	b10a      	cbz	r2, 800160a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8001606:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001608:	4790      	blx	r2
}
 800160a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800160e:	f7ff be1f 	b.w	8001250 <_port_irq_epilogue>
 8001612:	bf00      	nop
 8001614:	40026000 	.word	0x40026000
 8001618:	20000ab8 	.word	0x20000ab8
 800161c:	00000000 	.word	0x00000000

08001620 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001624:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8001626:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001628:	0989      	lsrs	r1, r1, #6
 800162a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800162e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8001630:	018c      	lsls	r4, r1, #6
 8001632:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8001634:	b10a      	cbz	r2, 800163a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8001636:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001638:	4790      	blx	r2
}
 800163a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800163e:	f7ff be07 	b.w	8001250 <_port_irq_epilogue>
 8001642:	bf00      	nop
 8001644:	40026000 	.word	0x40026000
 8001648:	20000ab8 	.word	0x20000ab8
 800164c:	00000000 	.word	0x00000000

08001650 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001650:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001656:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8001658:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800165a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800165e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8001660:	b10a      	cbz	r2, 8001666 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8001662:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001664:	4790      	blx	r2
}
 8001666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800166a:	f7ff bdf1 	b.w	8001250 <_port_irq_epilogue>
 800166e:	bf00      	nop
 8001670:	40026000 	.word	0x40026000
 8001674:	20000ab8 	.word	0x20000ab8
	...

08001680 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001684:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 8001686:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001688:	0d89      	lsrs	r1, r1, #22
 800168a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800168e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8001690:	058c      	lsls	r4, r1, #22
 8001692:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8001694:	b10a      	cbz	r2, 800169a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8001696:	69c0      	ldr	r0, [r0, #28]
 8001698:	4790      	blx	r2
}
 800169a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800169e:	f7ff bdd7 	b.w	8001250 <_port_irq_epilogue>
 80016a2:	bf00      	nop
 80016a4:	40026000 	.word	0x40026000
 80016a8:	20000ab8 	.word	0x20000ab8
 80016ac:	00000000 	.word	0x00000000

080016b0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
 80016b2:	4809      	ldr	r0, [pc, #36]	; (80016d8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80016b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 80016b6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80016b8:	0c09      	lsrs	r1, r1, #16
 80016ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80016be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80016c0:	040c      	lsls	r4, r1, #16
 80016c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80016c4:	b10a      	cbz	r2, 80016ca <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80016c6:	6940      	ldr	r0, [r0, #20]
 80016c8:	4790      	blx	r2
}
 80016ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80016ce:	f7ff bdbf 	b.w	8001250 <_port_irq_epilogue>
 80016d2:	bf00      	nop
 80016d4:	40026000 	.word	0x40026000
 80016d8:	20000ab8 	.word	0x20000ab8
 80016dc:	00000000 	.word	0x00000000

080016e0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80016e4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 80016e6:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80016e8:	0989      	lsrs	r1, r1, #6
 80016ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80016ee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 80016f0:	018c      	lsls	r4, r1, #6
 80016f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 80016f4:	b10a      	cbz	r2, 80016fa <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 80016f6:	68c0      	ldr	r0, [r0, #12]
 80016f8:	4790      	blx	r2
}
 80016fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80016fe:	f7ff bda7 	b.w	8001250 <_port_irq_epilogue>
 8001702:	bf00      	nop
 8001704:	40026000 	.word	0x40026000
 8001708:	20000ab8 	.word	0x20000ab8
 800170c:	00000000 	.word	0x00000000

08001710 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8001710:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001716:	6819      	ldr	r1, [r3, #0]
 8001718:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800171c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	b10b      	cbz	r3, 8001726 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001722:	6850      	ldr	r0, [r2, #4]
 8001724:	4798      	blx	r3
}
 8001726:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800172a:	f7ff bd91 	b.w	8001250 <_port_irq_epilogue>
 800172e:	bf00      	nop
 8001730:	40026000 	.word	0x40026000
 8001734:	20000ab8 	.word	0x20000ab8
	...

08001740 <SVC_Handler>:
void SVC_Handler(void) {
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001744:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8001748:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800174a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800174e:	2300      	movs	r3, #0
 8001750:	f383 8811 	msr	BASEPRI, r3
}
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	0000      	movs	r0, r0
	...

08001760 <chTMStopMeasurementX>:
  return DWT->CYCCNT;
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <chTMStopMeasurementX+0x44>)
 8001764:	6852      	ldr	r2, [r2, #4]
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8001768:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800176a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
  tmp->last = (now - tmp->last) - offset;
 800176e:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8001770:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8001774:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001776:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8001778:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 800177a:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800177c:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800177e:	eb14 0b03 	adds.w	fp, r4, r3
  if (tmp->last < tmp->best) {
 8001782:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8001784:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001786:	f145 0c00 	adc.w	ip, r5, #0
  if (tmp->last > tmp->worst) {
 800178a:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 800178c:	bf88      	it	hi
 800178e:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8001790:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8001792:	e9c0 bc04 	strd	fp, ip, [r0, #16]
    tmp->best = tmp->last;
 8001796:	bf38      	it	cc
 8001798:	6003      	strcc	r3, [r0, #0]
}
 800179a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800179e:	4770      	bx	lr
 80017a0:	e0001000 	.word	0xe0001000
 80017a4:	20000948 	.word	0x20000948
	...

080017b0 <wakeup>:
 80017b0:	2320      	movs	r3, #32
 80017b2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->p_state) {
 80017b6:	7f03      	ldrb	r3, [r0, #28]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	d80d      	bhi.n	80017d8 <wakeup+0x28>
 80017bc:	e8df f003 	tbb	[pc, r3]
 80017c0:	220c0c26 	.word	0x220c0c26
 80017c4:	080c0408 	.word	0x080c0408
    chSemFastSignalI(tp->p_u.wtsemp);
 80017c8:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	3301      	adds	r3, #1
 80017ce:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80017d0:	e9d0 3200 	ldrd	r3, r2, [r0]
 80017d4:	6013      	str	r3, [r2, #0]
  tp->p_next->p_prev = tp->p_prev;
 80017d6:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 80017d8:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 80017da:	2200      	movs	r2, #0
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80017dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->p_prio >= tp->p_prio);
 80017e0:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <wakeup+0x64>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80017e4:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 80017e6:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 80017e8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	428a      	cmp	r2, r1
 80017ee:	d2fb      	bcs.n	80017e8 <wakeup+0x38>
  tp->p_prev = cp->p_prev;
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	2100      	movs	r1, #0
 80017f4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->p_prev->p_next = tp;
 80017f8:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80017fa:	6058      	str	r0, [r3, #4]
 80017fc:	f381 8811 	msr	BASEPRI, r1
}
 8001800:	bc10      	pop	{r4}
 8001802:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 8001804:	6a03      	ldr	r3, [r0, #32]
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
    break;
 800180a:	e7e5      	b.n	80017d8 <wakeup+0x28>
 800180c:	2300      	movs	r3, #0
 800180e:	f383 8811 	msr	BASEPRI, r3
 8001812:	4770      	bx	lr
 8001814:	20000948 	.word	0x20000948
	...

08001820 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 8001820:	2200      	movs	r2, #0
  } while (cp->p_prio >= tp->p_prio);
 8001822:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <chSchReadyI+0x24>)
thread_t *chSchReadyI(thread_t *tp) {
 8001826:	b410      	push	{r4}
 8001828:	4604      	mov	r4, r0
  tp->p_state = CH_STATE_READY;
 800182a:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 800182c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	428a      	cmp	r2, r1
 8001832:	d2fb      	bcs.n	800182c <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 8001834:	685a      	ldr	r2, [r3, #4]
}
 8001836:	4620      	mov	r0, r4
  tp->p_prev = cp->p_prev;
 8001838:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 800183c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800183e:	605c      	str	r4, [r3, #4]
}
 8001840:	bc10      	pop	{r4}
 8001842:	4770      	bx	lr
 8001844:	20000948 	.word	0x20000948
	...

08001850 <chEvtBroadcastFlagsI.constprop.31>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001852:	4f15      	ldr	r7, [pc, #84]	; (80018a8 <chEvtBroadcastFlagsI.constprop.31+0x58>)
 8001854:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001858:	42bc      	cmp	r4, r7
 800185a:	d01f      	beq.n	800189c <chEvtBroadcastFlagsI.constprop.31+0x4c>
 800185c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800185e:	2600      	movs	r6, #0
 8001860:	e004      	b.n	800186c <chEvtBroadcastFlagsI.constprop.31+0x1c>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001862:	2a0b      	cmp	r2, #11
 8001864:	d01b      	beq.n	800189e <chEvtBroadcastFlagsI.constprop.31+0x4e>
    elp = elp->el_next;
 8001866:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001868:	42bc      	cmp	r4, r7
 800186a:	d017      	beq.n	800189c <chEvtBroadcastFlagsI.constprop.31+0x4c>
    elp->el_flags |= flags;
 800186c:	68e3      	ldr	r3, [r4, #12]
 800186e:	432b      	orrs	r3, r5
 8001870:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001872:	b115      	cbz	r5, 800187a <chEvtBroadcastFlagsI.constprop.31+0x2a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8001874:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001876:	4213      	tst	r3, r2
 8001878:	d0f5      	beq.n	8001866 <chEvtBroadcastFlagsI.constprop.31+0x16>
  tp->p_epending |= events;
 800187a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800187e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001880:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 8001882:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001884:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 8001886:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001888:	d1eb      	bne.n	8001862 <chEvtBroadcastFlagsI.constprop.31+0x12>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800188a:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800188c:	4213      	tst	r3, r2
 800188e:	d0ea      	beq.n	8001866 <chEvtBroadcastFlagsI.constprop.31+0x16>
    tp->p_u.rdymsg = MSG_OK;
 8001890:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8001892:	f7ff ffc5 	bl	8001820 <chSchReadyI>
    elp = elp->el_next;
 8001896:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001898:	42bc      	cmp	r4, r7
 800189a:	d1e7      	bne.n	800186c <chEvtBroadcastFlagsI.constprop.31+0x1c>
}
 800189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800189e:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80018a0:	ea32 0303 	bics.w	r3, r2, r3
 80018a4:	d1df      	bne.n	8001866 <chEvtBroadcastFlagsI.constprop.31+0x16>
 80018a6:	e7f3      	b.n	8001890 <chEvtBroadcastFlagsI.constprop.31+0x40>
 80018a8:	200008d0 	.word	0x200008d0
 80018ac:	00000000 	.word	0x00000000

080018b0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80018b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80018b4:	4c67      	ldr	r4, [pc, #412]	; (8001a54 <VectorD4+0x1a4>)
 80018b6:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80018b8:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 80018bc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80018be:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80018c0:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80018c2:	d47d      	bmi.n	80019c0 <VectorD4+0x110>
 80018c4:	2320      	movs	r3, #32
 80018c6:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80018ca:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80018ce:	d049      	beq.n	8001964 <VectorD4+0xb4>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80018d0:	4f61      	ldr	r7, [pc, #388]	; (8001a58 <VectorD4+0x1a8>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80018d2:	f04f 0900 	mov.w	r9, #0
 80018d6:	e008      	b.n	80018ea <VectorD4+0x3a>
    if (sr & USART_SR_RXNE)
 80018d8:	06a9      	lsls	r1, r5, #26
    b = u->DR;
 80018da:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80018de:	d41d      	bmi.n	800191c <VectorD4+0x6c>
    sr = u->SR;
 80018e0:	6835      	ldr	r5, [r6, #0]
 80018e2:	b2ad      	uxth	r5, r5
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80018e4:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80018e8:	d03c      	beq.n	8001964 <VectorD4+0xb4>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80018ea:	072b      	lsls	r3, r5, #28
 80018ec:	d0f4      	beq.n	80018d8 <VectorD4+0x28>
    sts |= SD_OVERRUN_ERROR;
 80018ee:	f015 0f08 	tst.w	r5, #8
 80018f2:	bf0c      	ite	eq
 80018f4:	2000      	moveq	r0, #0
 80018f6:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 80018f8:	07e9      	lsls	r1, r5, #31
    sts |= SD_PARITY_ERROR;
 80018fa:	bf48      	it	mi
 80018fc:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8001900:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8001902:	bf48      	it	mi
 8001904:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8001908:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800190a:	bf48      	it	mi
 800190c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001910:	f7ff ff9e 	bl	8001850 <chEvtBroadcastFlagsI.constprop.31>
    if (sr & USART_SR_RXNE)
 8001914:	06a9      	lsls	r1, r5, #26
    b = u->DR;
 8001916:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800191a:	d5e1      	bpl.n	80018e0 <VectorD4+0x30>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800191c:	6963      	ldr	r3, [r4, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800191e:	2b00      	cmp	r3, #0
 8001920:	d040      	beq.n	80019a4 <VectorD4+0xf4>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001922:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001926:	4293      	cmp	r3, r2
 8001928:	d043      	beq.n	80019b2 <VectorD4+0x102>
  iqp->q_counter++;
 800192a:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
 800192c:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
 800192e:	3201      	adds	r2, #1
 8001930:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
 8001932:	6221      	str	r1, [r4, #32]
    b = u->DR;
 8001934:	f883 a000 	strb.w	sl, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001938:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800193c:	429a      	cmp	r2, r3
 800193e:	d301      	bcc.n	8001944 <VectorD4+0x94>
    iqp->q_wrptr = iqp->q_buffer;
 8001940:	69a3      	ldr	r3, [r4, #24]
 8001942:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001944:	68e3      	ldr	r3, [r4, #12]
 8001946:	42bb      	cmp	r3, r7
 8001948:	d0ca      	beq.n	80018e0 <VectorD4+0x30>
  tqp->p_next = tp->p_next;
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	60e2      	str	r2, [r4, #12]
  (void) chSchReadyI(tp);
 800194e:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001950:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 8001952:	f8c3 9020 	str.w	r9, [r3, #32]
  (void) chSchReadyI(tp);
 8001956:	f7ff ff63 	bl	8001820 <chSchReadyI>
    sr = u->SR;
 800195a:	6835      	ldr	r5, [r6, #0]
 800195c:	b2ad      	uxth	r5, r5
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800195e:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8001962:	d1c2      	bne.n	80018ea <VectorD4+0x3a>
 8001964:	2300      	movs	r3, #0
 8001966:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800196a:	f018 0f80 	tst.w	r8, #128	; 0x80
 800196e:	d001      	beq.n	8001974 <VectorD4+0xc4>
 8001970:	062a      	lsls	r2, r5, #24
 8001972:	d433      	bmi.n	80019dc <VectorD4+0x12c>
  if (sr & USART_SR_TC) {
 8001974:	066b      	lsls	r3, r5, #25
 8001976:	d511      	bpl.n	800199c <VectorD4+0xec>
 8001978:	2320      	movs	r3, #32
 800197a:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800197e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8001982:	429a      	cmp	r2, r3
 8001984:	d051      	beq.n	8001a2a <VectorD4+0x17a>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001986:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800198a:	ea08 0303 	and.w	r3, r8, r3
    u->SR = ~USART_SR_TC;
 800198e:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001992:	60f3      	str	r3, [r6, #12]
 8001994:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8001996:	6032      	str	r2, [r6, #0]
 8001998:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 800199c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80019a0:	f7ff bc56 	b.w	8001250 <_port_irq_epilogue>
 80019a4:	2004      	movs	r0, #4
 80019a6:	f7ff ff53 	bl	8001850 <chEvtBroadcastFlagsI.constprop.31>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80019aa:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d1bb      	bne.n	800192a <VectorD4+0x7a>
 80019b2:	6962      	ldr	r2, [r4, #20]
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d0b8      	beq.n	800192a <VectorD4+0x7a>
 80019b8:	2080      	movs	r0, #128	; 0x80
 80019ba:	f7ff ff49 	bl	8001850 <chEvtBroadcastFlagsI.constprop.31>
 80019be:	e78f      	b.n	80018e0 <VectorD4+0x30>
 80019c0:	2320      	movs	r3, #32
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019ca:	f7ff ff41 	bl	8001850 <chEvtBroadcastFlagsI.constprop.31>
    u->SR = ~USART_SR_LBD;
 80019ce:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80019d2:	6033      	str	r3, [r6, #0]
 80019d4:	2300      	movs	r3, #0
 80019d6:	f383 8811 	msr	BASEPRI, r3
 80019da:	e773      	b.n	80018c4 <VectorD4+0x14>
 80019dc:	2320      	movs	r3, #32
 80019de:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80019e2:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d026      	beq.n	8001a38 <VectorD4+0x188>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 80019ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 80019ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
  b = *oqp->q_rdptr++;
 80019ee:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 80019f0:	3201      	adds	r2, #1
 80019f2:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80019f4:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 80019f6:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 80019f8:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80019fa:	d301      	bcc.n	8001a00 <VectorD4+0x150>
    oqp->q_rdptr = oqp->q_buffer;
 80019fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019fe:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001a00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a02:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <VectorD4+0x1ac>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d009      	beq.n	8001a1c <VectorD4+0x16c>
  tqp->p_next = tp->p_next;
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_u.rdymsg = msg;
 8001a0c:	f04f 0c00 	mov.w	ip, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001a10:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8001a12:	4618      	mov	r0, r3
  tp->p_u.rdymsg = msg;
 8001a14:	f8c3 c020 	str.w	ip, [r3, #32]
  (void) chSchReadyI(tp);
 8001a18:	f7ff ff02 	bl	8001820 <chSchReadyI>
      u->DR = b;
 8001a1c:	6077      	str	r7, [r6, #4]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f383 8811 	msr	BASEPRI, r3
  if (sr & USART_SR_TC) {
 8001a24:	066b      	lsls	r3, r5, #25
 8001a26:	d5b9      	bpl.n	800199c <VectorD4+0xec>
 8001a28:	e7a6      	b.n	8001978 <VectorD4+0xc8>
 8001a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0aa      	beq.n	8001986 <VectorD4+0xd6>
 8001a30:	2010      	movs	r0, #16
 8001a32:	f7ff ff0d 	bl	8001850 <chEvtBroadcastFlagsI.constprop.31>
 8001a36:	e7a6      	b.n	8001986 <VectorD4+0xd6>
 8001a38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	d0d5      	beq.n	80019ea <VectorD4+0x13a>
 8001a3e:	2008      	movs	r0, #8
 8001a40:	f7ff ff06 	bl	8001850 <chEvtBroadcastFlagsI.constprop.31>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001a44:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001a48:	ea08 0303 	and.w	r3, r8, r3
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a50:	60f3      	str	r3, [r6, #12]
 8001a52:	e7e4      	b.n	8001a1e <VectorD4+0x16e>
 8001a54:	200008d0 	.word	0x200008d0
 8001a58:	200008dc 	.word	0x200008dc
 8001a5c:	20000900 	.word	0x20000900

08001a60 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8001a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr = ADC1->SR;
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <Vector88+0x8c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8001a66:	2100      	movs	r1, #0
 8001a68:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8001a6a:	0693      	lsls	r3, r2, #26
 8001a6c:	d536      	bpl.n	8001adc <Vector88+0x7c>
 8001a6e:	4c20      	ldr	r4, [pc, #128]	; (8001af0 <Vector88+0x90>)
 8001a70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a72:	680a      	ldr	r2, [r1, #0]
 8001a74:	6853      	ldr	r3, [r2, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d030      	beq.n	8001adc <Vector88+0x7c>
    if (ADCD1.grpp != NULL)
 8001a7a:	6925      	ldr	r5, [r4, #16]
 8001a7c:	2d00      	cmp	r5, #0
 8001a7e:	d02d      	beq.n	8001adc <Vector88+0x7c>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f023 031f 	bic.w	r3, r3, #31
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	6813      	ldr	r3, [r2, #0]
 8001a8a:	f013 0301 	ands.w	r3, r3, #1
 8001a8e:	d1fb      	bne.n	8001a88 <Vector88+0x28>
 8001a90:	7a0f      	ldrb	r7, [r1, #8]
 8001a92:	684e      	ldr	r6, [r1, #4]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001a94:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 8001a96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8001a98:	203d      	movs	r0, #61	; 0x3d
 8001a9a:	40b8      	lsls	r0, r7
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001a9c:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
 8001a9e:	6030      	str	r0, [r6, #0]
  adcp->adc->CR1 = 0;
 8001aa0:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001aa2:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001aa4:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001aa6:	b1ed      	cbz	r5, 8001ae4 <Vector88+0x84>
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	7023      	strb	r3, [r4, #0]
 8001aac:	4810      	ldr	r0, [pc, #64]	; (8001af0 <Vector88+0x90>)
 8001aae:	47a8      	blx	r5
 8001ab0:	7823      	ldrb	r3, [r4, #0]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	bf04      	itt	eq
 8001ab6:	2302      	moveq	r3, #2
 8001ab8:	7023      	strbeq	r3, [r4, #0]
 8001aba:	2300      	movs	r3, #0
 8001abc:	6123      	str	r3, [r4, #16]
 8001abe:	2320      	movs	r3, #32
 8001ac0:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001ac4:	6960      	ldr	r0, [r4, #20]
 8001ac6:	b130      	cbz	r0, 8001ad6 <Vector88+0x76>
    tp->p_u.rdymsg = msg;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001acc:	6203      	str	r3, [r0, #32]
    *trp = NULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6163      	str	r3, [r4, #20]
    (void) chSchReadyI(tp);
 8001ad2:	f7ff fea5 	bl	8001820 <chSchReadyI>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f383 8811 	msr	BASEPRI, r3
}
 8001adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001ae0:	f7ff bbb6 	b.w	8001250 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	6125      	str	r5, [r4, #16]
 8001ae8:	7023      	strb	r3, [r4, #0]
 8001aea:	e7e8      	b.n	8001abe <Vector88+0x5e>
 8001aec:	40012000 	.word	0x40012000
 8001af0:	20000838 	.word	0x20000838
	...

08001b00 <adc_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001b00:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b08:	4604      	mov	r4, r0
 8001b0a:	6905      	ldr	r5, [r0, #16]
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001b0c:	d033      	beq.n	8001b76 <adc_lld_serve_rx_interrupt+0x76>
  dmaStreamDisable(adcp->dmastp);
 8001b0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001b10:	6803      	ldr	r3, [r0, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	f022 021f 	bic.w	r2, r2, #31
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	f011 0101 	ands.w	r1, r1, #1
 8001b20:	d1fb      	bne.n	8001b1a <adc_lld_serve_rx_interrupt+0x1a>
 8001b22:	7a07      	ldrb	r7, [r0, #8]
 8001b24:	6846      	ldr	r6, [r0, #4]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001b26:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 8001b28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8001b2a:	223d      	movs	r2, #61	; 0x3d
 8001b2c:	40ba      	lsls	r2, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001b2e:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001b30:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8001b32:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8001b34:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001b36:	6098      	str	r0, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001b38:	2d00      	cmp	r5, #0
 8001b3a:	d03e      	beq.n	8001bba <adc_lld_serve_rx_interrupt+0xba>
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	7023      	strb	r3, [r4, #0]
 8001b40:	4620      	mov	r0, r4
 8001b42:	47a8      	blx	r5
 8001b44:	7823      	ldrb	r3, [r4, #0]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	bf04      	itt	eq
 8001b4a:	2302      	moveq	r3, #2
 8001b4c:	7023      	strbeq	r3, [r4, #0]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	6123      	str	r3, [r4, #16]
 8001b52:	2320      	movs	r3, #32
 8001b54:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001b58:	6963      	ldr	r3, [r4, #20]
 8001b5a:	b13b      	cbz	r3, 8001b6c <adc_lld_serve_rx_interrupt+0x6c>
    *trp = NULL;
 8001b5c:	2100      	movs	r1, #0
    tp->p_u.rdymsg = msg;
 8001b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    *trp = NULL;
 8001b62:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8001b64:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001b66:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001b68:	f7ff fe5a 	bl	8001820 <chSchReadyI>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f383 8811 	msr	BASEPRI, r3
}
 8001b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (adcp->grpp != NULL) {
 8001b76:	2d00      	cmp	r5, #0
 8001b78:	d0fb      	beq.n	8001b72 <adc_lld_serve_rx_interrupt+0x72>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8001b7a:	068a      	lsls	r2, r1, #26
 8001b7c:	d512      	bpl.n	8001ba4 <adc_lld_serve_rx_interrupt+0xa4>
        _adc_isr_full_code(adcp);
 8001b7e:	782b      	ldrb	r3, [r5, #0]
 8001b80:	686e      	ldr	r6, [r5, #4]
 8001b82:	b1f3      	cbz	r3, 8001bc2 <adc_lld_serve_rx_interrupt+0xc2>
 8001b84:	2e00      	cmp	r6, #0
 8001b86:	d0f4      	beq.n	8001b72 <adc_lld_serve_rx_interrupt+0x72>
 8001b88:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8001b8c:	2a01      	cmp	r2, #1
 8001b8e:	d943      	bls.n	8001c18 <adc_lld_serve_rx_interrupt+0x118>
 8001b90:	886b      	ldrh	r3, [r5, #2]
 8001b92:	0852      	lsrs	r2, r2, #1
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001b9c:	4633      	mov	r3, r6
}
 8001b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 8001ba2:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001ba4:	06cb      	lsls	r3, r1, #27
 8001ba6:	d5e4      	bpl.n	8001b72 <adc_lld_serve_rx_interrupt+0x72>
        _adc_isr_half_code(adcp);
 8001ba8:	686b      	ldr	r3, [r5, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0e1      	beq.n	8001b72 <adc_lld_serve_rx_interrupt+0x72>
 8001bae:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
}
 8001bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_half_code(adcp);
 8001bb6:	0852      	lsrs	r2, r2, #1
 8001bb8:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001bba:	2302      	movs	r3, #2
 8001bbc:	6125      	str	r5, [r4, #16]
 8001bbe:	7023      	strb	r3, [r4, #0]
 8001bc0:	e7c7      	b.n	8001b52 <adc_lld_serve_rx_interrupt+0x52>
  dmaStreamDisable(adcp->dmastp);
 8001bc2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001bc4:	6802      	ldr	r2, [r0, #0]
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	f023 031f 	bic.w	r3, r3, #31
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	f013 0301 	ands.w	r3, r3, #1
 8001bd4:	d1fb      	bne.n	8001bce <adc_lld_serve_rx_interrupt+0xce>
 8001bd6:	7a07      	ldrb	r7, [r0, #8]
 8001bd8:	6845      	ldr	r5, [r0, #4]
  adcp->adc->CR1 = 0;
 8001bda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8001bdc:	213d      	movs	r1, #61	; 0x3d
 8001bde:	40b9      	lsls	r1, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001be0:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001be2:	6029      	str	r1, [r5, #0]
  adcp->adc->CR1 = 0;
 8001be4:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001be6:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001be8:	6090      	str	r0, [r2, #8]
        _adc_isr_full_code(adcp);
 8001bea:	b1ce      	cbz	r6, 8001c20 <adc_lld_serve_rx_interrupt+0x120>
 8001bec:	2304      	movs	r3, #4
 8001bee:	7023      	strb	r3, [r4, #0]
 8001bf0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	47b0      	blx	r6
 8001bf8:	7823      	ldrb	r3, [r4, #0]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d010      	beq.n	8001c20 <adc_lld_serve_rx_interrupt+0x120>
 8001bfe:	2320      	movs	r3, #32
 8001c00:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8001c04:	6963      	ldr	r3, [r4, #20]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0b0      	beq.n	8001b6c <adc_lld_serve_rx_interrupt+0x6c>
    *trp = NULL;
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
 8001c0e:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001c10:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001c12:	f7ff fe05 	bl	8001820 <chSchReadyI>
 8001c16:	e7a9      	b.n	8001b6c <adc_lld_serve_rx_interrupt+0x6c>
 8001c18:	4633      	mov	r3, r6
}
 8001c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 8001c1e:	4718      	bx	r3
 8001c20:	2202      	movs	r2, #2
 8001c22:	2300      	movs	r3, #0
 8001c24:	7022      	strb	r2, [r4, #0]
 8001c26:	6123      	str	r3, [r4, #16]
 8001c28:	e7e9      	b.n	8001bfe <adc_lld_serve_rx_interrupt+0xfe>
 8001c2a:	bf00      	nop
 8001c2c:	0000      	movs	r0, r0
	...

08001c30 <BusFault_Handler>:
__attribute__((weak))
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
 8001c30:	e7fe      	b.n	8001c30 <BusFault_Handler>
 8001c32:	bf00      	nop
	...

08001c40 <chSchWakeupS.constprop.37>:
  if (ntp->p_prio <= currp->p_prio) {
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <chSchWakeupS.constprop.37+0x50>)
 8001c42:	6999      	ldr	r1, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001c44:	b430      	push	{r4, r5}
 8001c46:	4604      	mov	r4, r0
  if (ntp->p_prio <= currp->p_prio) {
 8001c48:	688d      	ldr	r5, [r1, #8]
 8001c4a:	6880      	ldr	r0, [r0, #8]
  ntp->p_u.rdymsg = msg;
 8001c4c:	2200      	movs	r2, #0
  if (ntp->p_prio <= currp->p_prio) {
 8001c4e:	42a8      	cmp	r0, r5
  ntp->p_u.rdymsg = msg;
 8001c50:	6222      	str	r2, [r4, #32]
  if (ntp->p_prio <= currp->p_prio) {
 8001c52:	d80b      	bhi.n	8001c6c <chSchWakeupS.constprop.37+0x2c>
  tp->p_state = CH_STATE_READY;
 8001c54:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 8001c56:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4290      	cmp	r0, r2
 8001c5c:	d9fb      	bls.n	8001c56 <chSchWakeupS.constprop.37+0x16>
  tp->p_prev = cp->p_prev;
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 8001c64:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001c66:	605c      	str	r4, [r3, #4]
}
 8001c68:	bc30      	pop	{r4, r5}
 8001c6a:	4770      	bx	lr
  tp->p_state = CH_STATE_READY;
 8001c6c:	770a      	strb	r2, [r1, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001c6e:	461a      	mov	r2, r3
    cp = cp->p_next;
 8001c70:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001c72:	6890      	ldr	r0, [r2, #8]
 8001c74:	4285      	cmp	r5, r0
 8001c76:	d9fb      	bls.n	8001c70 <chSchWakeupS.constprop.37+0x30>
  tp->p_prev = cp->p_prev;
 8001c78:	6850      	ldr	r0, [r2, #4]
 8001c7a:	6048      	str	r0, [r1, #4]
    ntp->p_state = CH_STATE_CURRENT;
 8001c7c:	2501      	movs	r5, #1
  tp->p_next = cp;
 8001c7e:	600a      	str	r2, [r1, #0]
  tp->p_prev->p_next = tp;
 8001c80:	6001      	str	r1, [r0, #0]
  cp->p_prev = tp;
 8001c82:	6051      	str	r1, [r2, #4]
    ntp->p_state = CH_STATE_CURRENT;
 8001c84:	7725      	strb	r5, [r4, #28]
    chSysSwitch(ntp, otp);
 8001c86:	4620      	mov	r0, r4
    setcurrp(ntp);
 8001c88:	619c      	str	r4, [r3, #24]
}
 8001c8a:	bc30      	pop	{r4, r5}
    chSysSwitch(ntp, otp);
 8001c8c:	f7fe bb00 	b.w	8000290 <_port_switch>
 8001c90:	20000948 	.word	0x20000948
	...

08001ca0 <chThdCreateStatic.constprop.36>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	2520      	movs	r5, #32
 8001ca6:	f385 8811 	msr	BASEPRI, r5
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001caa:	3924      	subs	r1, #36	; 0x24
 8001cac:	1846      	adds	r6, r0, r1
 8001cae:	60c6      	str	r6, [r0, #12]
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	5043      	str	r3, [r0, r1]
 8001cb4:	4f0f      	ldr	r7, [pc, #60]	; (8001cf4 <chThdCreateStatic.constprop.36+0x54>)
  REG_INSERT(tp);
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <chThdCreateStatic.constprop.36+0x58>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001cb8:	6075      	str	r5, [r6, #4]
 8001cba:	6237      	str	r7, [r6, #32]
  REG_INSERT(tp);
 8001cbc:	6103      	str	r3, [r0, #16]
 8001cbe:	6959      	ldr	r1, [r3, #20]
  tp->p_realprio = prio;
 8001cc0:	63c2      	str	r2, [r0, #60]	; 0x3c
  tp->p_prio = prio;
 8001cc2:	6082      	str	r2, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 8001cc4:	2602      	movs	r6, #2
  tp->p_refs = (trefs_t)1;
 8001cc6:	2201      	movs	r2, #1
  tp->p_state = CH_STATE_WTSTART;
 8001cc8:	8386      	strh	r6, [r0, #28]
  tp->p_refs = (trefs_t)1;
 8001cca:	7782      	strb	r2, [r0, #30]
  list_init(&tp->p_waiting);
 8001ccc:	f100 0624 	add.w	r6, r0, #36	; 0x24
  queue_init(&tp->p_msgqueue);
 8001cd0:	f100 0228 	add.w	r2, r0, #40	; 0x28
  REG_INSERT(tp);
 8001cd4:	6141      	str	r1, [r0, #20]
  tp->p_epending = (eventmask_t)0;
 8001cd6:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
  tp->p_name = NULL;
 8001cda:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8001cdc:	6108      	str	r0, [r1, #16]
  tqp->p_next = (thread_t *)tqp;
 8001cde:	e9c0 6209 	strd	r6, r2, [r0, #36]	; 0x24
  tqp->p_prev = (thread_t *)tqp;
 8001ce2:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001ce4:	6158      	str	r0, [r3, #20]
  chSchWakeupS(tp, MSG_OK);
 8001ce6:	f7ff ffab 	bl	8001c40 <chSchWakeupS.constprop.37>
 8001cea:	f385 8811 	msr	BASEPRI, r5
}
 8001cee:	4620      	mov	r0, r4
 8001cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	080002a1 	.word	0x080002a1
 8001cf8:	20000948 	.word	0x20000948
 8001cfc:	00000000 	.word	0x00000000

08001d00 <chSchGoSleepS>:
  otp = currp;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <chSchGoSleepS+0x20>)
 8001d02:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8001d04:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8001d06:	b410      	push	{r4}
  otp->p_state = newstate;
 8001d08:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 8001d0a:	6810      	ldr	r0, [r2, #0]
 8001d0c:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 8001d0e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001d10:	6043      	str	r3, [r0, #4]
 8001d12:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8001d14:	4610      	mov	r0, r2
}
 8001d16:	bc10      	pop	{r4}
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001d18:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8001d1a:	f7fe bab9 	b.w	8000290 <_port_switch>
 8001d1e:	bf00      	nop
 8001d20:	20000948 	.word	0x20000948
	...

08001d30 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != time) {
 8001d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d36:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001d38:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 8001d3a:	d05a      	beq.n	8001df2 <chSchGoSleepTimeoutS+0xc2>
    chVTDoSetI(&vt, time, wakeup, currp);
 8001d3c:	4c4a      	ldr	r4, [pc, #296]	; (8001e68 <chSchGoSleepTimeoutS+0x138>)
  return (systime_t)STM32_ST_TIM->CNT;
 8001d3e:	f8df c130 	ldr.w	ip, [pc, #304]	; 8001e70 <chSchGoSleepTimeoutS+0x140>
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001d42:	69a2      	ldr	r2, [r4, #24]
 8001d44:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8001d48:	9205      	str	r2, [sp, #20]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001d4a:	4625      	mov	r5, r4
 8001d4c:	2902      	cmp	r1, #2
 8001d4e:	f855 2f1c 	ldr.w	r2, [r5, #28]!
 8001d52:	4607      	mov	r7, r0
 8001d54:	bf38      	it	cc
 8001d56:	2102      	movcc	r1, #2
  vtp->vt_func = vtfunc;
 8001d58:	4844      	ldr	r0, [pc, #272]	; (8001e6c <chSchGoSleepTimeoutS+0x13c>)
 8001d5a:	9004      	str	r0, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001d5c:	42aa      	cmp	r2, r5
 8001d5e:	b29e      	uxth	r6, r3
 8001d60:	d06c      	beq.n	8001e3c <chSchGoSleepTimeoutS+0x10c>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8001d62:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
 8001d66:	8910      	ldrh	r0, [r2, #8]
 8001d68:	eba6 060e 	sub.w	r6, r6, lr

    if (delta < now - ch.vtlist.vt_lasttime) {
 8001d6c:	b29b      	uxth	r3, r3
    delta = now - ch.vtlist.vt_lasttime + delay;
 8001d6e:	4431      	add	r1, r6
 8001d70:	b289      	uxth	r1, r1
    if (delta < now - ch.vtlist.vt_lasttime) {
 8001d72:	eba3 030e 	sub.w	r3, r3, lr
 8001d76:	4299      	cmp	r1, r3
 8001d78:	da33      	bge.n	8001de2 <chSchGoSleepTimeoutS+0xb2>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
      p = p->vt_next;
 8001d7a:	6812      	ldr	r2, [r2, #0]
      delta -= p->vt_delta;
 8001d7c:	1a09      	subs	r1, r1, r0
 8001d7e:	8910      	ldrh	r0, [r2, #8]
 8001d80:	b289      	uxth	r1, r1
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8001d82:	4281      	cmp	r1, r0
 8001d84:	d905      	bls.n	8001d92 <chSchGoSleepTimeoutS+0x62>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001d86:	6812      	ldr	r2, [r2, #0]
    delta -= p->vt_delta;
 8001d88:	1a09      	subs	r1, r1, r0
  while (p->vt_delta < delta) {
 8001d8a:	8910      	ldrh	r0, [r2, #8]
    delta -= p->vt_delta;
 8001d8c:	b289      	uxth	r1, r1
  while (p->vt_delta < delta) {
 8001d8e:	4288      	cmp	r0, r1
 8001d90:	d3f9      	bcc.n	8001d86 <chSchGoSleepTimeoutS+0x56>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001d92:	6853      	ldr	r3, [r2, #4]
 8001d94:	9302      	str	r3, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8001d96:	ae01      	add	r6, sp, #4
  vtp->vt_next = p;
 8001d98:	9201      	str	r2, [sp, #4]
  vtp->vt_prev->vt_next = vtp;
 8001d9a:	601e      	str	r6, [r3, #0]
  p->vt_prev = vtp;
 8001d9c:	6056      	str	r6, [r2, #4]
  vtp->vt_delta = delta
 8001d9e:	f8ad 100c 	strh.w	r1, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001da2:	8913      	ldrh	r3, [r2, #8]
 8001da4:	1a59      	subs	r1, r3, r1
  ch.vtlist.vt_delta = (systime_t)-1;
 8001da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  p->vt_delta -= delta;
 8001daa:	8111      	strh	r1, [r2, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001dac:	84a3      	strh	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001dae:	4638      	mov	r0, r7
 8001db0:	f7ff ffa6 	bl	8001d00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001db4:	9b04      	ldr	r3, [sp, #16]
 8001db6:	b183      	cbz	r3, 8001dda <chSchGoSleepTimeoutS+0xaa>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001db8:	69e2      	ldr	r2, [r4, #28]
 8001dba:	9b01      	ldr	r3, [sp, #4]
 8001dbc:	42b2      	cmp	r2, r6
 8001dbe:	d01f      	beq.n	8001e00 <chSchGoSleepTimeoutS+0xd0>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001dc0:	9a02      	ldr	r2, [sp, #8]
 8001dc2:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001dc4:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 8001dc6:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001dc8:	42ab      	cmp	r3, r5
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001dca:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8001dcc:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001dce:	d004      	beq.n	8001dda <chSchGoSleepTimeoutS+0xaa>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8001dd0:	891a      	ldrh	r2, [r3, #8]
 8001dd2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001dd6:	440a      	add	r2, r1
 8001dd8:	811a      	strh	r2, [r3, #8]
  return currp->p_u.rdymsg;
 8001dda:	69a3      	ldr	r3, [r4, #24]
}
 8001ddc:	6a18      	ldr	r0, [r3, #32]
 8001dde:	b007      	add	sp, #28
 8001de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->vt_delta) {
 8001de2:	4281      	cmp	r1, r0
 8001de4:	d2cd      	bcs.n	8001d82 <chSchGoSleepTimeoutS+0x52>
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8001de6:	448e      	add	lr, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001de8:	fa1f f38e 	uxth.w	r3, lr
 8001dec:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
 8001df0:	e7c7      	b.n	8001d82 <chSchGoSleepTimeoutS+0x52>
    chSchGoSleepS(newstate);
 8001df2:	4c1d      	ldr	r4, [pc, #116]	; (8001e68 <chSchGoSleepTimeoutS+0x138>)
 8001df4:	f7ff ff84 	bl	8001d00 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 8001df8:	69a3      	ldr	r3, [r4, #24]
}
 8001dfa:	6a18      	ldr	r0, [r3, #32]
 8001dfc:	b007      	add	sp, #28
 8001dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8001e00:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001e02:	42ab      	cmp	r3, r5
  ch.vtlist.vt_next = vtp->vt_next;
 8001e04:	61e3      	str	r3, [r4, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001e06:	605d      	str	r5, [r3, #4]
  vtp->vt_func = NULL;
 8001e08:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001e0a:	d02a      	beq.n	8001e62 <chSchGoSleepTimeoutS+0x132>
  return (systime_t)STM32_ST_TIM->CNT;
 8001e0c:	4d18      	ldr	r5, [pc, #96]	; (8001e70 <chSchGoSleepTimeoutS+0x140>)
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001e0e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8001e10:	6a69      	ldr	r1, [r5, #36]	; 0x24
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001e12:	891a      	ldrh	r2, [r3, #8]
 8001e14:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8001e18:	b289      	uxth	r1, r1
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001e1a:	1a0e      	subs	r6, r1, r0
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001e1c:	443a      	add	r2, r7
 8001e1e:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001e20:	b2b6      	uxth	r6, r6
 8001e22:	42b2      	cmp	r2, r6
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001e24:	811a      	strh	r2, [r3, #8]
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001e26:	d9d8      	bls.n	8001dda <chSchGoSleepTimeoutS+0xaa>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001e28:	1a52      	subs	r2, r2, r1
 8001e2a:	4402      	add	r2, r0
 8001e2c:	b292      	uxth	r2, r2
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001e2e:	2a02      	cmp	r2, #2
 8001e30:	bf2c      	ite	cs
 8001e32:	1889      	addcs	r1, r1, r2
 8001e34:	3102      	addcc	r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e36:	b289      	uxth	r1, r1
 8001e38:	6369      	str	r1, [r5, #52]	; 0x34
 8001e3a:	e7ce      	b.n	8001dda <chSchGoSleepTimeoutS+0xaa>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001e3c:	1873      	adds	r3, r6, r1
      ch.vtlist.vt_lasttime = now;
 8001e3e:	84e6      	strh	r6, [r4, #38]	; 0x26
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e40:	b29b      	uxth	r3, r3
      ch.vtlist.vt_next = vtp;
 8001e42:	ae01      	add	r6, sp, #4
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001e44:	e9cd 5501 	strd	r5, r5, [sp, #4]
      vtp->vt_delta = delay;
 8001e48:	f8ad 100c 	strh.w	r1, [sp, #12]
      ch.vtlist.vt_prev = vtp;
 8001e4c:	e9c4 6607 	strd	r6, r6, [r4, #28]
  STM32_ST_TIM->SR     = 0;
 8001e50:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e52:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001e56:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8001e58:	f8cc 2010 	str.w	r2, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001e5c:	f8cc 300c 	str.w	r3, [ip, #12]
 8001e60:	e7a5      	b.n	8001dae <chSchGoSleepTimeoutS+0x7e>
  STM32_ST_TIM->DIER = 0;
 8001e62:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <chSchGoSleepTimeoutS+0x140>)
 8001e64:	60da      	str	r2, [r3, #12]
    return;
 8001e66:	e7b8      	b.n	8001dda <chSchGoSleepTimeoutS+0xaa>
 8001e68:	20000948 	.word	0x20000948
 8001e6c:	080017b1 	.word	0x080017b1
 8001e70:	40000800 	.word	0x40000800
	...

08001e80 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001e80:	b161      	cbz	r1, 8001e9c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <chThdEnqueueTimeoutS+0x24>)
 8001e84:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001e86:	b410      	push	{r4}
  tp->p_next = (thread_t *)tqp;
 8001e88:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 8001e8a:	6844      	ldr	r4, [r0, #4]
 8001e8c:	605c      	str	r4, [r3, #4]
 8001e8e:	4602      	mov	r2, r0
  tp->p_prev->p_next = tp;
 8001e90:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001e92:	2004      	movs	r0, #4
  tqp->p_prev = tp;
 8001e94:	6053      	str	r3, [r2, #4]
}
 8001e96:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001e98:	f7ff bf4a 	b.w	8001d30 <chSchGoSleepTimeoutS>
}
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000948 	.word	0x20000948
	...

08001eb0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	460e      	mov	r6, r1
 8001eba:	4615      	mov	r5, r2
 8001ebc:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8001ebe:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001ec2:	f04f 0920 	mov.w	r9, #32
 8001ec6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 8001eca:	2700      	movs	r7, #0
 8001ecc:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8001ece:	68a2      	ldr	r2, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001ed0:	46b3      	mov	fp, r6
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001ed2:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8001ed4:	b302      	cbz	r2, 8001f18 <chOQWriteTimeout+0x68>
    *oqp->q_wrptr++ = *bp++;
 8001ed6:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 8001ed8:	68a2      	ldr	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001eda:	1c4e      	adds	r6, r1, #1
    oqp->q_counter--;
 8001edc:	3a01      	subs	r2, #1
    *oqp->q_wrptr++ = *bp++;
 8001ede:	6166      	str	r6, [r4, #20]
    oqp->q_counter--;
 8001ee0:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001ee2:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8001ee6:	700a      	strb	r2, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001ee8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001eec:	4291      	cmp	r1, r2
      oqp->q_wrptr = oqp->q_buffer;
 8001eee:	bf24      	itt	cs
 8001ef0:	68e2      	ldrcs	r2, [r4, #12]
 8001ef2:	6162      	strcs	r2, [r4, #20]
    if (nfy != NULL) {
 8001ef4:	f1b8 0f00 	cmp.w	r8, #0
 8001ef8:	d000      	beq.n	8001efc <chOQWriteTimeout+0x4c>
      nfy(oqp);
 8001efa:	47c0      	blx	r8
 8001efc:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8001f00:	3d01      	subs	r5, #1
    w++;
 8001f02:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001f06:	d011      	beq.n	8001f2c <chOQWriteTimeout+0x7c>
 8001f08:	f389 8811 	msr	BASEPRI, r9
 8001f0c:	68a2      	ldr	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001f0e:	465e      	mov	r6, fp
 8001f10:	46b3      	mov	fp, r6
      nfy(oqp);
 8001f12:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8001f14:	2a00      	cmp	r2, #0
 8001f16:	d1de      	bne.n	8001ed6 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001f18:	9901      	ldr	r1, [sp, #4]
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff ffaf 	bl	8001e80 <chThdEnqueueTimeoutS>
 8001f22:	9a00      	ldr	r2, [sp, #0]
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d0d2      	beq.n	8001ece <chOQWriteTimeout+0x1e>
 8001f28:	f382 8811 	msr	BASEPRI, r2
      return w;
    }
    chSysLock();
  }
}
 8001f2c:	4638      	mov	r0, r7
 8001f2e:	b003      	add	sp, #12
 8001f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001f40 <writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001f40:	3030      	adds	r0, #48	; 0x30
 8001f42:	f7ff bfb5 	b.w	8001eb0 <chOQWriteTimeout>
 8001f46:	bf00      	nop
	...

08001f50 <write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001f50:	3030      	adds	r0, #48	; 0x30
 8001f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f56:	f7ff bfab 	b.w	8001eb0 <chOQWriteTimeout>
 8001f5a:	bf00      	nop
 8001f5c:	0000      	movs	r0, r0
	...

08001f60 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	4604      	mov	r4, r0
 8001f64:	460f      	mov	r7, r1
 8001f66:	4616      	mov	r6, r2
 8001f68:	2320      	movs	r3, #32
 8001f6a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001f6e:	e003      	b.n	8001f78 <chOQPutTimeout+0x18>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001f70:	f7ff ff86 	bl	8001e80 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001f74:	2800      	cmp	r0, #0
 8001f76:	db18      	blt.n	8001faa <chOQPutTimeout+0x4a>
 8001f78:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001f7a:	4631      	mov	r1, r6
 8001f7c:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	d0f6      	beq.n	8001f70 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8001f82:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001f84:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001f86:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001f88:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8001f8a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8001f8c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001f8e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001f90:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001f94:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001f96:	bf24      	itt	cs
 8001f98:	68e3      	ldrcs	r3, [r4, #12]
 8001f9a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8001f9c:	69e3      	ldr	r3, [r4, #28]
 8001f9e:	b103      	cbz	r3, 8001fa2 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 8001fa0:	4798      	blx	r3
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f380 8811 	msr	BASEPRI, r0
}
 8001fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001faa:	f385 8811 	msr	BASEPRI, r5
 8001fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fb0 <putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001fb0:	3030      	adds	r0, #48	; 0x30
 8001fb2:	f7ff bfd5 	b.w	8001f60 <chOQPutTimeout>
 8001fb6:	bf00      	nop
	...

08001fc0 <put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001fc0:	3030      	adds	r0, #48	; 0x30
 8001fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc6:	f7ff bfcb 	b.w	8001f60 <chOQPutTimeout>
 8001fca:	bf00      	nop
 8001fcc:	0000      	movs	r0, r0
	...

08001fd0 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 8001fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	4689      	mov	r9, r1
 8001fda:	4693      	mov	fp, r2
 8001fdc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8001fde:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001fe2:	2720      	movs	r7, #32
 8001fe4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001fe8:	2600      	movs	r6, #0
 8001fea:	9701      	str	r7, [sp, #4]
 8001fec:	46b2      	mov	sl, r6
    if (nfy != NULL) {
 8001fee:	f1b8 0f00 	cmp.w	r8, #0
 8001ff2:	d005      	beq.n	8002000 <chIQReadTimeout+0x30>
      nfy(iqp);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	47c0      	blx	r8
 8001ff8:	e002      	b.n	8002000 <chIQReadTimeout+0x30>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8001ffa:	f7ff ff41 	bl	8001e80 <chThdEnqueueTimeoutS>
 8001ffe:	b9e0      	cbnz	r0, 800203a <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 8002000:	68a7      	ldr	r7, [r4, #8]
 8002002:	4629      	mov	r1, r5
 8002004:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 8002006:	2f00      	cmp	r7, #0
 8002008:	d0f7      	beq.n	8001ffa <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 800200a:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 800200c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800200e:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8002010:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8002012:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 8002014:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8002016:	7813      	ldrb	r3, [r2, #0]
 8002018:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800201c:	6923      	ldr	r3, [r4, #16]
 800201e:	69a2      	ldr	r2, [r4, #24]
 8002020:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8002022:	bf24      	itt	cs
 8002024:	68e3      	ldrcs	r3, [r4, #12]
 8002026:	61a3      	strcs	r3, [r4, #24]
 8002028:	f38a 8811 	msr	BASEPRI, sl
    r++;
 800202c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800202e:	45b3      	cmp	fp, r6
 8002030:	d005      	beq.n	800203e <chIQReadTimeout+0x6e>
 8002032:	9b01      	ldr	r3, [sp, #4]
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	e7d9      	b.n	8001fee <chIQReadTimeout+0x1e>
 800203a:	f387 8811 	msr	BASEPRI, r7
}
 800203e:	4630      	mov	r0, r6
 8002040:	b003      	add	sp, #12
 8002042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002046:	bf00      	nop
	...

08002050 <readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002050:	300c      	adds	r0, #12
 8002052:	f7ff bfbd 	b.w	8001fd0 <chIQReadTimeout>
 8002056:	bf00      	nop
	...

08002060 <read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002060:	300c      	adds	r0, #12
 8002062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002066:	f7ff bfb3 	b.w	8001fd0 <chIQReadTimeout>
 800206a:	bf00      	nop
 800206c:	0000      	movs	r0, r0
	...

08002070 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	2320      	movs	r3, #32
 8002074:	460e      	mov	r6, r1
 8002076:	4604      	mov	r4, r0
 8002078:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 800207c:	69c3      	ldr	r3, [r0, #28]
 800207e:	b12b      	cbz	r3, 800208c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8002080:	4798      	blx	r3
 8002082:	e003      	b.n	800208c <chIQGetTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8002084:	f7ff fefc 	bl	8001e80 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8002088:	2800      	cmp	r0, #0
 800208a:	db15      	blt.n	80020b8 <chIQGetTimeout+0x48>
 800208c:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800208e:	4631      	mov	r1, r6
 8002090:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 8002092:	2d00      	cmp	r5, #0
 8002094:	d0f6      	beq.n	8002084 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8002096:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8002098:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800209a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800209c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800209e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80020a0:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 80020a2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80020a4:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 80020a6:	bf28      	it	cs
 80020a8:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 80020aa:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80020ac:	bf28      	it	cs
 80020ae:	61a3      	strcs	r3, [r4, #24]
 80020b0:	2300      	movs	r3, #0
 80020b2:	f383 8811 	msr	BASEPRI, r3
}
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
 80020b8:	f385 8811 	msr	BASEPRI, r5
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
 80020be:	bf00      	nop

080020c0 <SensorThread>:
thread_t *moving_thread;
int16_t sensors[NUM_OF_SENSORS];
int8_t sensor_state[NUM_OF_SENSORS]; 

THD_WORKING_AREA(waSensorThread, 512);
THD_FUNCTION(SensorThread, arg) {
 80020c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80020c4:	4c44      	ldr	r4, [pc, #272]	; (80021d8 <SensorThread+0x118>)
 80020c6:	4f45      	ldr	r7, [pc, #276]	; (80021dc <SensorThread+0x11c>)
 80020c8:	b083      	sub	sp, #12
 80020ca:	f104 0814 	add.w	r8, r4, #20
  return chIQGetTimeout(iqp, TIME_INFINITE);
 80020ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d2:	4843      	ldr	r0, [pc, #268]	; (80021e0 <SensorThread+0x120>)
 80020d4:	f7ff ffcc 	bl	8002070 <chIQGetTimeout>

    adcsample_t sensor_value1;
    adcsample_t sensor_value2;

    while(1) {
        if (get_camera_output() == -128) {
 80020d8:	b240      	sxtb	r0, r0
 80020da:	3080      	adds	r0, #128	; 0x80
 80020dc:	d16c      	bne.n	80021b8 <SensorThread+0xf8>
 80020de:	2600      	movs	r6, #0
 80020e0:	e043      	b.n	800216a <SensorThread+0xaa>
        palClearPad(GPIOA,5);
 80020e2:	4940      	ldr	r1, [pc, #256]	; (80021e4 <SensorThread+0x124>)
 80020e4:	834a      	strh	r2, [r1, #26]
    if (num & 0b10) {
 80020e6:	0798      	lsls	r0, r3, #30
        palClearPad(GPIOC,7);
 80020e8:	f04f 0180 	mov.w	r1, #128	; 0x80
        palSetPad(GPIOC,7);
 80020ec:	460a      	mov	r2, r1
        palClearPad(GPIOC,7);
 80020ee:	bf4b      	itete	mi
 80020f0:	4a3d      	ldrmi	r2, [pc, #244]	; (80021e8 <SensorThread+0x128>)
        palSetPad(GPIOC,7);
 80020f2:	493d      	ldrpl	r1, [pc, #244]	; (80021e8 <SensorThread+0x128>)
        palClearPad(GPIOC,7);
 80020f4:	8351      	strhmi	r1, [r2, #26]
        palSetPad(GPIOC,7);
 80020f6:	830a      	strhpl	r2, [r1, #24]
    if (num & 0b100) {
 80020f8:	f013 0f04 	tst.w	r3, #4
        palClearPad(GPIOB,6);
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <SensorThread+0x12c>)
 80020fe:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002102:	bf14      	ite	ne
 8002104:	8359      	strhne	r1, [r3, #26]
        palSetPad(GPIOB,6);
 8002106:	8319      	strheq	r1, [r3, #24]
 8002108:	f04f 0920 	mov.w	r9, #32
 800210c:	f389 8811 	msr	BASEPRI, r9
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 8002110:	f10d 0306 	add.w	r3, sp, #6
 8002114:	60a3      	str	r3, [r4, #8]
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <SensorThread+0x130>)
  adcp->state    = ADC_ACTIVE;
 8002118:	2503      	movs	r5, #3
  adcp->depth    = depth;
 800211a:	f04f 0b01 	mov.w	fp, #1
 800211e:	e9c4 b303 	strd	fp, r3, [r4, #12]
  adcp->state    = ADC_ACTIVE;
 8002122:	7025      	strb	r5, [r4, #0]
  adc_lld_start_conversion(adcp);
 8002124:	f7fe fe84 	bl	8000e30 <adc_lld_start_conversion.constprop.16>
  return ch.rlist.r_current;
 8002128:	69bb      	ldr	r3, [r7, #24]
  *trp = tp;
 800212a:	6163      	str	r3, [r4, #20]
  tp->p_u.wttrp = trp;
 800212c:	f8c3 8020 	str.w	r8, [r3, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002130:	4628      	mov	r0, r5
 8002132:	f7ff fde5 	bl	8001d00 <chSchGoSleepS>
 8002136:	f04f 0a00 	mov.w	sl, #0
 800213a:	f38a 8811 	msr	BASEPRI, sl
 800213e:	f389 8811 	msr	BASEPRI, r9
  adcp->samples  = samples;
 8002142:	ab01      	add	r3, sp, #4
  adcp->depth    = depth;
 8002144:	e9c4 3b02 	strd	r3, fp, [r4, #8]
  adcp->grpp     = grpp;
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <SensorThread+0x134>)
 800214a:	6123      	str	r3, [r4, #16]
  adcp->state    = ADC_ACTIVE;
 800214c:	7025      	strb	r5, [r4, #0]
  adc_lld_start_conversion(adcp);
 800214e:	f7fe fe6f 	bl	8000e30 <adc_lld_start_conversion.constprop.16>
 8002152:	69bb      	ldr	r3, [r7, #24]
  *trp = tp;
 8002154:	6163      	str	r3, [r4, #20]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002156:	4628      	mov	r0, r5
  tp->p_u.wttrp = trp;
 8002158:	f8c3 8020 	str.w	r8, [r3, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800215c:	f7ff fdd0 	bl	8001d00 <chSchGoSleepS>
 8002160:	f38a 8811 	msr	BASEPRI, sl
            for (int8_t i = 0; i < NUM_OF_SENSORS/2; i++) {
                mx_set(i);
                adcConvert(&ADCD1, &line_sensors_cfg1, &sensor_value1, 1);
                adcConvert(&ADCD1, &line_sensors_cfg2, &sensor_value2, 1);
                sensor_state[i] = sensor_value1 < 500 ? 1 : 0;
                sensor_state[i+8] = sensor_value2 < 500 ? 1 : 0;
 8002164:	445e      	add	r6, fp
            for (int8_t i = 0; i < NUM_OF_SENSORS/2; i++) {
 8002166:	2e08      	cmp	r6, #8
 8002168:	d009      	beq.n	800217e <SensorThread+0xbe>
        palClearPad(GPIOA,5);
 800216a:	b2f3      	uxtb	r3, r6
    if (num & 0b1) {
 800216c:	f013 0f01 	tst.w	r3, #1
        palClearPad(GPIOA,5);
 8002170:	f04f 0220 	mov.w	r2, #32
    if (num & 0b1) {
 8002174:	d1b5      	bne.n	80020e2 <SensorThread+0x22>
        palSetPad(GPIOA,5);
 8002176:	491b      	ldr	r1, [pc, #108]	; (80021e4 <SensorThread+0x124>)
 8002178:	2220      	movs	r2, #32
 800217a:	830a      	strh	r2, [r1, #24]
 800217c:	e7b3      	b.n	80020e6 <SensorThread+0x26>
 800217e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002182:	4817      	ldr	r0, [pc, #92]	; (80021e0 <SensorThread+0x120>)
 8002184:	f7ff ff74 	bl	8002070 <chIQGetTimeout>
                if (x > 0) {
                    output -= 1;
                }  
            }
    
            chMsgSend(moving_thread, out);
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <SensorThread+0x138>)
 800218a:	681a      	ldr	r2, [r3, #0]
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f389 8811 	msr	BASEPRI, r9

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8002192:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8002196:	6219      	str	r1, [r3, #32]
  tp->p_next = (thread_t *)tqp;
 8002198:	6019      	str	r1, [r3, #0]
  tp->p_prev = tqp->p_prev;
 800219a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800219c:	6059      	str	r1, [r3, #4]
 800219e:	b240      	sxtb	r0, r0
 80021a0:	6318      	str	r0, [r3, #48]	; 0x30
  tp->p_prev->p_next = tp;
 80021a2:	600b      	str	r3, [r1, #0]
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG) {
 80021a4:	7f11      	ldrb	r1, [r2, #28]
  tqp->p_prev = tp;
 80021a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80021a8:	290e      	cmp	r1, #14
 80021aa:	d010      	beq.n	80021ce <SensorThread+0x10e>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80021ac:	200c      	movs	r0, #12
 80021ae:	f7ff fda7 	bl	8001d00 <chSchGoSleepS>
 80021b2:	2300      	movs	r3, #0
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	2320      	movs	r3, #32
 80021ba:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80021be:	2101      	movs	r1, #1
 80021c0:	2008      	movs	r0, #8
 80021c2:	f7ff fdb5 	bl	8001d30 <chSchGoSleepTimeoutS>
 80021c6:	2300      	movs	r3, #0
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	e77f      	b.n	80020ce <SensorThread+0xe>
    (void) chSchReadyI(tp);
 80021ce:	4610      	mov	r0, r2
 80021d0:	f7ff fb26 	bl	8001820 <chSchReadyI>
 80021d4:	e7ea      	b.n	80021ac <SensorThread+0xec>
 80021d6:	bf00      	nop
 80021d8:	20000838 	.word	0x20000838
 80021dc:	20000948 	.word	0x20000948
 80021e0:	200008dc 	.word	0x200008dc
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020400 	.word	0x40020400
 80021f0:	08004a00 	.word	0x08004a00
 80021f4:	08004a30 	.word	0x08004a30
 80021f8:	20000b84 	.word	0x20000b84
 80021fc:	00000000 	.word	0x00000000

08002200 <gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002200:	300c      	adds	r0, #12
 8002202:	f7ff bf35 	b.w	8002070 <chIQGetTimeout>
 8002206:	bf00      	nop
	...

08002210 <get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002210:	300c      	adds	r0, #12
 8002212:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002216:	f7ff bf2b 	b.w	8002070 <chIQGetTimeout>
 800221a:	bf00      	nop
 800221c:	0000      	movs	r0, r0
	...

08002220 <chprintf.constprop.1>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002220:	b40e      	push	{r1, r2, r3}
 8002222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002226:	b090      	sub	sp, #64	; 0x40
 8002228:	ab19      	add	r3, sp, #100	; 0x64
  int n = 0;
 800222a:	f04f 0900 	mov.w	r9, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 800222e:	f853 2b04 	ldr.w	r2, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002232:	9309      	str	r3, [sp, #36]	; 0x24
    c = *fmt++;
 8002234:	4615      	mov	r5, r2
 8002236:	4698      	mov	r8, r3
 8002238:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0)
 800223c:	b171      	cbz	r1, 800225c <chprintf.constprop.1+0x3c>
    if (c != '%') {
 800223e:	2925      	cmp	r1, #37	; 0x25
 8002240:	d012      	beq.n	8002268 <chprintf.constprop.1+0x48>
      streamPut(chp, (uint8_t)c);
 8002242:	4f82      	ldr	r7, [pc, #520]	; (800244c <chprintf.constprop.1+0x22c>)
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4638      	mov	r0, r7
 8002248:	6892      	ldr	r2, [r2, #8]
      n++;
 800224a:	f109 0901 	add.w	r9, r9, #1
      streamPut(chp, (uint8_t)c);
 800224e:	4790      	blx	r2
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002250:	462a      	mov	r2, r5
    c = *fmt++;
 8002252:	4615      	mov	r5, r2
 8002254:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0)
 8002258:	2900      	cmp	r1, #0
 800225a:	d1f0      	bne.n	800223e <chprintf.constprop.1+0x1e>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 800225c:	4648      	mov	r0, r9
 800225e:	b010      	add	sp, #64	; 0x40
 8002260:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002264:	b003      	add	sp, #12
 8002266:	4770      	bx	lr
    if (*fmt == '-') {
 8002268:	7853      	ldrb	r3, [r2, #1]
 800226a:	2b2d      	cmp	r3, #45	; 0x2d
 800226c:	bf05      	ittet	eq
 800226e:	7893      	ldrbeq	r3, [r2, #2]
      fmt++;
 8002270:	1c95      	addeq	r5, r2, #2
    left_align = FALSE;
 8002272:	2200      	movne	r2, #0
      left_align = TRUE;
 8002274:	2201      	moveq	r2, #1
    if (*fmt == '0') {
 8002276:	2b30      	cmp	r3, #48	; 0x30
    left_align = FALSE;
 8002278:	9201      	str	r2, [sp, #4]
    if (*fmt == '0') {
 800227a:	f000 80b3 	beq.w	80023e4 <chprintf.constprop.1+0x1c4>
    filler = ' ';
 800227e:	2220      	movs	r2, #32
 8002280:	9200      	str	r2, [sp, #0]
 8002282:	1c69      	adds	r1, r5, #1
    width = 0;
 8002284:	2600      	movs	r6, #0
 8002286:	e007      	b.n	8002298 <chprintf.constprop.1+0x78>
        c = va_arg(ap, int);
 8002288:	f850 2b04 	ldr.w	r2, [r0], #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	4680      	mov	r8, r0
 8002290:	f811 3b01 	ldrb.w	r3, [r1], #1
      width = width * 10 + c;
 8002294:	eb02 0644 	add.w	r6, r2, r4, lsl #1
      if (c >= '0' && c <= '9')
 8002298:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	2a09      	cmp	r2, #9
        c = va_arg(ap, int);
 80022a0:	4640      	mov	r0, r8
      c = *fmt++;
 80022a2:	460d      	mov	r5, r1
      width = width * 10 + c;
 80022a4:	eb06 0486 	add.w	r4, r6, r6, lsl #2
      if (c >= '0' && c <= '9')
 80022a8:	d9f2      	bls.n	8002290 <chprintf.constprop.1+0x70>
      else if (c == '*')
 80022aa:	2b2a      	cmp	r3, #42	; 0x2a
 80022ac:	d0ec      	beq.n	8002288 <chprintf.constprop.1+0x68>
    if (c == '.') {
 80022ae:	2b2e      	cmp	r3, #46	; 0x2e
    precision = 0;
 80022b0:	f04f 0700 	mov.w	r7, #0
    if (c == '.') {
 80022b4:	d045      	beq.n	8002342 <chprintf.constprop.1+0x122>
    if (c == 'l' || c == 'L') {
 80022b6:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80022ba:	2a4c      	cmp	r2, #76	; 0x4c
 80022bc:	d051      	beq.n	8002362 <chprintf.constprop.1+0x142>
    switch (c) {
 80022be:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 80022c2:	2934      	cmp	r1, #52	; 0x34
 80022c4:	f200 81d8 	bhi.w	8002678 <chprintf.constprop.1+0x458>
 80022c8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80022cc:	01d601ad 	.word	0x01d601ad
 80022d0:	01d601d6 	.word	0x01d601d6
 80022d4:	01ad01d6 	.word	0x01ad01d6
 80022d8:	01d601d6 	.word	0x01d601d6
 80022dc:	01d601d6 	.word	0x01d601d6
 80022e0:	022501d6 	.word	0x022501d6
 80022e4:	01d601d6 	.word	0x01d601d6
 80022e8:	01d601d6 	.word	0x01d601d6
 80022ec:	021d01d6 	.word	0x021d01d6
 80022f0:	01d601d6 	.word	0x01d601d6
 80022f4:	01d60222 	.word	0x01d60222
 80022f8:	01d601d6 	.word	0x01d601d6
 80022fc:	01d601d6 	.word	0x01d601d6
 8002300:	01d601d6 	.word	0x01d601d6
 8002304:	01d601d6 	.word	0x01d601d6
 8002308:	015c01d6 	.word	0x015c01d6
 800230c:	01d601ad 	.word	0x01d601ad
 8002310:	01d600c2 	.word	0x01d600c2
 8002314:	01ad01d6 	.word	0x01ad01d6
 8002318:	01d601d6 	.word	0x01d601d6
 800231c:	01d601d6 	.word	0x01d601d6
 8002320:	022501d6 	.word	0x022501d6
 8002324:	01d601d6 	.word	0x01d601d6
 8002328:	009001d6 	.word	0x009001d6
 800232c:	021d01d6 	.word	0x021d01d6
 8002330:	01d601d6 	.word	0x01d601d6
 8002334:	0222      	.short	0x0222
          c = va_arg(ap, int);
 8002336:	f851 2b04 	ldr.w	r2, [r1], #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	4688      	mov	r8, r1
        precision += c;
 800233e:	eb02 0740 	add.w	r7, r2, r0, lsl #1
        c = *fmt++;
 8002342:	f815 3b01 	ldrb.w	r3, [r5], #1
        if (c >= '0' && c <= '9')
 8002346:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	2a09      	cmp	r2, #9
          c = va_arg(ap, int);
 800234e:	4641      	mov	r1, r8
        precision *= 10;
 8002350:	eb07 0087 	add.w	r0, r7, r7, lsl #2
        if (c >= '0' && c <= '9')
 8002354:	d9f3      	bls.n	800233e <chprintf.constprop.1+0x11e>
        else if (c == '*')
 8002356:	2b2a      	cmp	r3, #42	; 0x2a
 8002358:	d0ed      	beq.n	8002336 <chprintf.constprop.1+0x116>
    if (c == 'l' || c == 'L') {
 800235a:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 800235e:	2a4c      	cmp	r2, #76	; 0x4c
 8002360:	d1ad      	bne.n	80022be <chprintf.constprop.1+0x9e>
      if (*fmt)
 8002362:	782a      	ldrb	r2, [r5, #0]
 8002364:	2a00      	cmp	r2, #0
 8002366:	f000 8187 	beq.w	8002678 <chprintf.constprop.1+0x458>
    switch (c) {
 800236a:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 800236e:	3501      	adds	r5, #1
 8002370:	2b34      	cmp	r3, #52	; 0x34
 8002372:	f200 8180 	bhi.w	8002676 <chprintf.constprop.1+0x456>
 8002376:	e8df f013 	tbh	[pc, r3, lsl #1]
 800237a:	0156      	.short	0x0156
 800237c:	017e017e 	.word	0x017e017e
 8002380:	017e017e 	.word	0x017e017e
 8002384:	017e0156 	.word	0x017e0156
 8002388:	017e017e 	.word	0x017e017e
 800238c:	017e017e 	.word	0x017e017e
 8002390:	017e0195 	.word	0x017e0195
 8002394:	017e017e 	.word	0x017e017e
 8002398:	017e017e 	.word	0x017e017e
 800239c:	017e01bc 	.word	0x017e01bc
 80023a0:	01c1017e 	.word	0x01c1017e
 80023a4:	017e017e 	.word	0x017e017e
 80023a8:	017e017e 	.word	0x017e017e
 80023ac:	017e017e 	.word	0x017e017e
 80023b0:	017e017e 	.word	0x017e017e
 80023b4:	017e017e 	.word	0x017e017e
 80023b8:	01560105 	.word	0x01560105
 80023bc:	006b017e 	.word	0x006b017e
 80023c0:	017e017e 	.word	0x017e017e
 80023c4:	017e0156 	.word	0x017e0156
 80023c8:	017e017e 	.word	0x017e017e
 80023cc:	017e017e 	.word	0x017e017e
 80023d0:	017e0195 	.word	0x017e0195
 80023d4:	017e017e 	.word	0x017e017e
 80023d8:	017e0039 	.word	0x017e0039
 80023dc:	017e01bc 	.word	0x017e01bc
 80023e0:	01c1017e 	.word	0x01c1017e
      filler = '0';
 80023e4:	9300      	str	r3, [sp, #0]
      fmt++;
 80023e6:	3501      	adds	r5, #1
    if (*fmt == '0') {
 80023e8:	782b      	ldrb	r3, [r5, #0]
 80023ea:	e74a      	b.n	8002282 <chprintf.constprop.1+0x62>
      if ((s = va_arg(ap, char *)) == 0)
 80023ec:	f858 4b04 	ldr.w	r4, [r8], #4
 80023f0:	2c00      	cmp	r4, #0
 80023f2:	f000 81a5 	beq.w	8002740 <chprintf.constprop.1+0x520>
 80023f6:	7823      	ldrb	r3, [r4, #0]
        precision = 32767;
 80023f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80023fc:	2f00      	cmp	r7, #0
 80023fe:	bf08      	it	eq
 8002400:	4617      	moveq	r7, r2
      for (p = s; *p && (--precision >= 0); p++)
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 81cc 	beq.w	80027a0 <chprintf.constprop.1+0x580>
    precision = 0;
 8002408:	46a6      	mov	lr, r4
 800240a:	e001      	b.n	8002410 <chprintf.constprop.1+0x1f0>
      for (p = s; *p && (--precision >= 0); p++)
 800240c:	42fb      	cmn	r3, r7
 800240e:	d406      	bmi.n	800241e <chprintf.constprop.1+0x1fe>
 8002410:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
 8002414:	ea6f 030e 	mvn.w	r3, lr
 8002418:	4423      	add	r3, r4
 800241a:	2a00      	cmp	r2, #0
 800241c:	d1f6      	bne.n	800240c <chprintf.constprop.1+0x1ec>
 800241e:	ebae 0704 	sub.w	r7, lr, r4
      filler = ' ';
 8002422:	2320      	movs	r3, #32
    if ((width -= i) < 0)
 8002424:	ebb6 0a07 	subs.w	sl, r6, r7
      filler = ' ';
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
    if (left_align == FALSE)
 800242e:	9b01      	ldr	r3, [sp, #4]
    if ((width -= i) < 0)
 8002430:	f140 80b7 	bpl.w	80025a2 <chprintf.constprop.1+0x382>
    if (left_align == FALSE)
 8002434:	2b00      	cmp	r3, #0
 8002436:	f040 812d 	bne.w	8002694 <chprintf.constprop.1+0x474>
    while (--i >= 0) {
 800243a:	f1bb 0f00 	cmp.w	fp, #0
 800243e:	f6ff af07 	blt.w	8002250 <chprintf.constprop.1+0x30>
 8002442:	4f02      	ldr	r7, [pc, #8]	; (800244c <chprintf.constprop.1+0x22c>)
      width = -width;
 8002444:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002448:	e0cc      	b.n	80025e4 <chprintf.constprop.1+0x3c4>
 800244a:	bf00      	nop
 800244c:	200008d0 	.word	0x200008d0
      f = (float) va_arg(ap, double);
 8002450:	f108 0807 	add.w	r8, r8, #7
 8002454:	f028 0807 	bic.w	r8, r8, #7
 8002458:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 800245c:	f7fe fbb8 	bl	8000bd0 <__aeabi_d2f>
      if (f < 0) {
 8002460:	2100      	movs	r1, #0
      f = (float) va_arg(ap, double);
 8002462:	4682      	mov	sl, r0
      if (f < 0) {
 8002464:	f7fe fc52 	bl	8000d0c <__aeabi_fcmplt>
 8002468:	2800      	cmp	r0, #0
 800246a:	f040 815f 	bne.w	800272c <chprintf.constprop.1+0x50c>
    p = tmpbuf;
 800246e:	ac0a      	add	r4, sp, #40	; 0x28
 8002470:	9404      	str	r4, [sp, #16]
      p = ftoa(p, f, precision);
 8002472:	4650      	mov	r0, sl
 8002474:	f7fe f888 	bl	8000588 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002478:	3f01      	subs	r7, #1
 800247a:	2f08      	cmp	r7, #8
      p = ftoa(p, f, precision);
 800247c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002480:	f200 8171 	bhi.w	8002766 <chprintf.constprop.1+0x546>
 8002484:	4bc0      	ldr	r3, [pc, #768]	; (8002788 <chprintf.constprop.1+0x568>)
 8002486:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800248a:	9305      	str	r3, [sp, #20]
 800248c:	4618      	mov	r0, r3
 800248e:	469b      	mov	fp, r3
 8002490:	f7fe f858 	bl	8000544 <__aeabi_ui2d>
 8002494:	4fbd      	ldr	r7, [pc, #756]	; (800278c <chprintf.constprop.1+0x56c>)
 8002496:	465b      	mov	r3, fp
 8002498:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800249c:	fba7 3703 	umull	r3, r7, r7, r3
 80024a0:	08ff      	lsrs	r7, r7, #3
  l = (long)num;
 80024a2:	4650      	mov	r0, sl
 80024a4:	f7fe fc5c 	bl	8000d60 <__aeabi_f2iz>
  q = p + MAX_FILLER;
 80024a8:	9b04      	ldr	r3, [sp, #16]
    i = (int)(l % radix);
 80024aa:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 800278c <chprintf.constprop.1+0x56c>
  q = p + MAX_FILLER;
 80024ae:	f103 0a0b 	add.w	sl, r3, #11
  l = num;
 80024b2:	4601      	mov	r1, r0
  q = p + MAX_FILLER;
 80024b4:	4652      	mov	r2, sl
    i = (int)(l % radix);
 80024b6:	fbae c301 	umull	ip, r3, lr, r1
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80024c0:	469c      	mov	ip, r3
 80024c2:	eba1 034b 	sub.w	r3, r1, fp, lsl #1
    i += '0';
 80024c6:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 80024c8:	468b      	mov	fp, r1
    *--q = i;
 80024ca:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80024cc:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 80024d0:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 80024d4:	4661      	mov	r1, ip
  } while ((ll /= radix) != 0);
 80024d6:	d8ee      	bhi.n	80024b6 <chprintf.constprop.1+0x296>
 80024d8:	9904      	ldr	r1, [sp, #16]
 80024da:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 80024dc:	ebaa 0a02 	sub.w	sl, sl, r2
 80024e0:	eb01 0c0a 	add.w	ip, r1, sl
 80024e4:	4673      	mov	r3, lr
 80024e6:	e001      	b.n	80024ec <chprintf.constprop.1+0x2cc>
 80024e8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 80024ec:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 80024f0:	4561      	cmp	r1, ip
 80024f2:	d1f9      	bne.n	80024e8 <chprintf.constprop.1+0x2c8>
 80024f4:	9a04      	ldr	r2, [sp, #16]
  *p++ = '.';
 80024f6:	232e      	movs	r3, #46	; 0x2e
 80024f8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80024fc:	4452      	add	r2, sl
 80024fe:	700b      	strb	r3, [r1, #0]
 8002500:	4692      	mov	sl, r2
  l = (long)((num - l) * precision);
 8002502:	f7fe f82f 	bl	8000564 <__aeabi_i2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800250e:	f7fd fedb 	bl	80002c8 <__aeabi_dsub>
 8002512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002516:	f7fe f893 	bl	8000640 <__aeabi_dmul>
 800251a:	f7fe fb31 	bl	8000b80 <__aeabi_d2iz>
    ll = num;
 800251e:	9b05      	ldr	r3, [sp, #20]
    i = (int)(l % radix);
 8002520:	499a      	ldr	r1, [pc, #616]	; (800278c <chprintf.constprop.1+0x56c>)
  q = p + MAX_FILLER;
 8002522:	f10a 0e0d 	add.w	lr, sl, #13
    ll = num;
 8002526:	2b09      	cmp	r3, #9
 8002528:	bf98      	it	ls
 800252a:	4607      	movls	r7, r0
  *p++ = '.';
 800252c:	f10a 0302 	add.w	r3, sl, #2
  q = p + MAX_FILLER;
 8002530:	4672      	mov	r2, lr
  *p++ = '.';
 8002532:	9304      	str	r3, [sp, #16]
    i = (int)(l % radix);
 8002534:	fba1 c300 	umull	ip, r3, r1, r0
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 800253e:	469c      	mov	ip, r3
 8002540:	eba0 034b 	sub.w	r3, r0, fp, lsl #1
    i += '0';
 8002544:	3330      	adds	r3, #48	; 0x30
  } while ((ll /= radix) != 0);
 8002546:	46bb      	mov	fp, r7
    *--q = i;
 8002548:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 800254a:	fba1 0707 	umull	r0, r7, r1, r7
 800254e:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 8002552:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8002556:	4660      	mov	r0, ip
  } while ((ll /= radix) != 0);
 8002558:	ea4f 07d7 	mov.w	r7, r7, lsr #3
 800255c:	d8ea      	bhi.n	8002534 <chprintf.constprop.1+0x314>
  i = (int)(p + MAX_FILLER - q);
 800255e:	ebae 0702 	sub.w	r7, lr, r2
 8002562:	1cb9      	adds	r1, r7, #2
 8002564:	448a      	add	sl, r1
 8002566:	9904      	ldr	r1, [sp, #16]
 8002568:	e001      	b.n	800256e <chprintf.constprop.1+0x34e>
 800256a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 800256e:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8002572:	4551      	cmp	r1, sl
 8002574:	d1f9      	bne.n	800256a <chprintf.constprop.1+0x34a>
 8002576:	9b04      	ldr	r3, [sp, #16]
 8002578:	443b      	add	r3, r7
 800257a:	461f      	mov	r7, r3
 800257c:	1b3f      	subs	r7, r7, r4
 800257e:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 8002582:	e009      	b.n	8002598 <chprintf.constprop.1+0x378>
      *p++ = va_arg(ap, int);
 8002584:	f858 3b04 	ldr.w	r3, [r8], #4
 8002588:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
      filler = ' ';
 800258c:	2320      	movs	r3, #32
      *p++ = va_arg(ap, int);
 800258e:	f04f 0b00 	mov.w	fp, #0
 8002592:	2701      	movs	r7, #1
      filler = ' ';
 8002594:	9300      	str	r3, [sp, #0]
    s = tmpbuf;
 8002596:	ac0a      	add	r4, sp, #40	; 0x28
    if ((width -= i) < 0)
 8002598:	ebb6 0a07 	subs.w	sl, r6, r7
    if (left_align == FALSE)
 800259c:	9b01      	ldr	r3, [sp, #4]
    if ((width -= i) < 0)
 800259e:	f53f af49 	bmi.w	8002434 <chprintf.constprop.1+0x214>
    if (left_align == FALSE)
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d171      	bne.n	800268a <chprintf.constprop.1+0x46a>
      width = -width;
 80025a6:	1bbb      	subs	r3, r7, r6
 80025a8:	9301      	str	r3, [sp, #4]
    if (width < 0) {
 80025aa:	f1ba 0f00 	cmp.w	sl, #0
 80025ae:	d06a      	beq.n	8002686 <chprintf.constprop.1+0x466>
 80025b0:	4f77      	ldr	r7, [pc, #476]	; (8002790 <chprintf.constprop.1+0x570>)
      if (*s == '-' && filler == '0') {
 80025b2:	7821      	ldrb	r1, [r4, #0]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	292d      	cmp	r1, #45	; 0x2d
 80025b8:	6892      	ldr	r2, [r2, #8]
 80025ba:	f000 80c6 	beq.w	800274a <chprintf.constprop.1+0x52a>
        streamPut(chp, (uint8_t)filler);
 80025be:	4e74      	ldr	r6, [pc, #464]	; (8002790 <chprintf.constprop.1+0x570>)
    if (width < 0) {
 80025c0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80025c4:	e001      	b.n	80025ca <chprintf.constprop.1+0x3aa>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
        streamPut(chp, (uint8_t)filler);
 80025ca:	9900      	ldr	r1, [sp, #0]
 80025cc:	4630      	mov	r0, r6
 80025ce:	4790      	blx	r2
      } while (++width != 0);
 80025d0:	f11a 0a01 	adds.w	sl, sl, #1
 80025d4:	d1f7      	bne.n	80025c6 <chprintf.constprop.1+0x3a6>
 80025d6:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 80025d8:	f1bb 0f00 	cmp.w	fp, #0
 80025dc:	eba9 0903 	sub.w	r9, r9, r3
 80025e0:	f6ff ae36 	blt.w	8002250 <chprintf.constprop.1+0x30>
      streamPut(chp, (uint8_t)*s++);
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <chprintf.constprop.1+0x570>)
 80025e6:	eb04 060b 	add.w	r6, r4, fp
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	4790      	blx	r2
 80025f6:	1b32      	subs	r2, r6, r4
    while (--i >= 0) {
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	4b65      	ldr	r3, [pc, #404]	; (8002790 <chprintf.constprop.1+0x570>)
 80025fc:	daf5      	bge.n	80025ea <chprintf.constprop.1+0x3ca>
 80025fe:	f109 0901 	add.w	r9, r9, #1
 8002602:	44d9      	add	r9, fp
    while (width) {
 8002604:	f1ba 0f00 	cmp.w	sl, #0
 8002608:	f43f ae22 	beq.w	8002250 <chprintf.constprop.1+0x30>
 800260c:	4f60      	ldr	r7, [pc, #384]	; (8002790 <chprintf.constprop.1+0x570>)
 800260e:	4654      	mov	r4, sl
      streamPut(chp, (uint8_t)filler);
 8002610:	463e      	mov	r6, r7
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	9900      	ldr	r1, [sp, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4630      	mov	r0, r6
 800261a:	4798      	blx	r3
    while (width) {
 800261c:	3c01      	subs	r4, #1
 800261e:	d1f8      	bne.n	8002612 <chprintf.constprop.1+0x3f2>
 8002620:	44d1      	add	r9, sl
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002622:	462a      	mov	r2, r5
 8002624:	e615      	b.n	8002252 <chprintf.constprop.1+0x32>
        l = va_arg(ap, int);
 8002626:	f8d8 0000 	ldr.w	r0, [r8]
 800262a:	f108 0304 	add.w	r3, r8, #4
      if (l < 0) {
 800262e:	2800      	cmp	r0, #0
        l = va_arg(ap, int);
 8002630:	4698      	mov	r8, r3
      if (l < 0) {
 8002632:	db73      	blt.n	800271c <chprintf.constprop.1+0x4fc>
    p = tmpbuf;
 8002634:	ac0a      	add	r4, sp, #40	; 0x28
 8002636:	4627      	mov	r7, r4
  q = p + MAX_FILLER;
 8002638:	f107 0c0b 	add.w	ip, r7, #11
 800263c:	4661      	mov	r1, ip
    i = (int)(l % radix);
 800263e:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800278c <chprintf.constprop.1+0x56c>
 8002642:	e000      	b.n	8002646 <chprintf.constprop.1+0x426>
  } while ((ll /= radix) != 0);
 8002644:	4610      	mov	r0, r2
    i = (int)(l % radix);
 8002646:	fbae 3200 	umull	r3, r2, lr, r0
 800264a:	08d2      	lsrs	r2, r2, #3
 800264c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002650:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    i += '0';
 8002654:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8002656:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002658:	2809      	cmp	r0, #9
    *--q = i;
 800265a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 800265e:	dcf1      	bgt.n	8002644 <chprintf.constprop.1+0x424>
  i = (int)(p + MAX_FILLER - q);
 8002660:	ebac 0c01 	sub.w	ip, ip, r1
 8002664:	44bc      	add	ip, r7
 8002666:	e001      	b.n	800266c <chprintf.constprop.1+0x44c>
 8002668:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 800266c:	f807 3b01 	strb.w	r3, [r7], #1
  while (--i);
 8002670:	4567      	cmp	r7, ip
 8002672:	d1f9      	bne.n	8002668 <chprintf.constprop.1+0x448>
 8002674:	e782      	b.n	800257c <chprintf.constprop.1+0x35c>
    switch (c) {
 8002676:	4613      	mov	r3, r2
      *p++ = c;
 8002678:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800267c:	f04f 0b00 	mov.w	fp, #0
 8002680:	2701      	movs	r7, #1
    s = tmpbuf;
 8002682:	ac0a      	add	r4, sp, #40	; 0x28
 8002684:	e788      	b.n	8002598 <chprintf.constprop.1+0x378>
      width = -width;
 8002686:	f8dd a004 	ldr.w	sl, [sp, #4]
    while (--i >= 0) {
 800268a:	f1bb 0f00 	cmp.w	fp, #0
 800268e:	dbb9      	blt.n	8002604 <chprintf.constprop.1+0x3e4>
 8002690:	4f3f      	ldr	r7, [pc, #252]	; (8002790 <chprintf.constprop.1+0x570>)
 8002692:	e7a7      	b.n	80025e4 <chprintf.constprop.1+0x3c4>
 8002694:	f1bb 0f00 	cmp.w	fp, #0
 8002698:	f6ff adda 	blt.w	8002250 <chprintf.constprop.1+0x30>
      width = 0;
 800269c:	f04f 0a00 	mov.w	sl, #0
 80026a0:	4f3b      	ldr	r7, [pc, #236]	; (8002790 <chprintf.constprop.1+0x570>)
 80026a2:	e79f      	b.n	80025e4 <chprintf.constprop.1+0x3c4>
 80026a4:	f858 1b04 	ldr.w	r1, [r8], #4
    switch (c) {
 80026a8:	f04f 0c08 	mov.w	ip, #8
  q = p + MAX_FILLER;
 80026ac:	f10d 0733 	add.w	r7, sp, #51	; 0x33
 80026b0:	463b      	mov	r3, r7
 80026b2:	e000      	b.n	80026b6 <chprintf.constprop.1+0x496>
  } while ((ll /= radix) != 0);
 80026b4:	4603      	mov	r3, r0
    i = (int)(l % radix);
 80026b6:	460c      	mov	r4, r1
 80026b8:	fbb1 f1fc 	udiv	r1, r1, ip
 80026bc:	fb0c 4e11 	mls	lr, ip, r1, r4
    i += '0';
 80026c0:	f10e 0230 	add.w	r2, lr, #48	; 0x30
    if (i > '9')
 80026c4:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 80026c6:	bfc8      	it	gt
 80026c8:	f10e 0237 	addgt.w	r2, lr, #55	; 0x37
    *--q = i;
 80026cc:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 80026ce:	4564      	cmp	r4, ip
    *--q = i;
 80026d0:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80026d4:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 80026d8:	d2ec      	bcs.n	80026b4 <chprintf.constprop.1+0x494>
  i = (int)(p + MAX_FILLER - q);
 80026da:	1a3f      	subs	r7, r7, r0
 80026dc:	ac0a      	add	r4, sp, #40	; 0x28
 80026de:	4438      	add	r0, r7
 80026e0:	4621      	mov	r1, r4
 80026e2:	e001      	b.n	80026e8 <chprintf.constprop.1+0x4c8>
 80026e4:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 80026e8:	f801 2b01 	strb.w	r2, [r1], #1
  while (--i);
 80026ec:	4283      	cmp	r3, r0
 80026ee:	d1f9      	bne.n	80026e4 <chprintf.constprop.1+0x4c4>
 80026f0:	e745      	b.n	800257e <chprintf.constprop.1+0x35e>
 80026f2:	f858 1b04 	ldr.w	r1, [r8], #4
    switch (c) {
 80026f6:	f04f 0c0a 	mov.w	ip, #10
 80026fa:	e7d7      	b.n	80026ac <chprintf.constprop.1+0x48c>
 80026fc:	f858 1b04 	ldr.w	r1, [r8], #4
 8002700:	f04f 0c10 	mov.w	ip, #16
 8002704:	e7d2      	b.n	80026ac <chprintf.constprop.1+0x48c>
 8002706:	f04f 0c0a 	mov.w	ip, #10
 800270a:	f858 1b04 	ldr.w	r1, [r8], #4
 800270e:	e7cd      	b.n	80026ac <chprintf.constprop.1+0x48c>
 8002710:	f04f 0c10 	mov.w	ip, #16
 8002714:	e7f9      	b.n	800270a <chprintf.constprop.1+0x4ea>
 8002716:	f04f 0c08 	mov.w	ip, #8
 800271a:	e7f6      	b.n	800270a <chprintf.constprop.1+0x4ea>
        *p++ = '-';
 800271c:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800271e:	4240      	negs	r0, r0
        *p++ = '-';
 8002720:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8002724:	f10d 0729 	add.w	r7, sp, #41	; 0x29
 8002728:	ac0a      	add	r4, sp, #40	; 0x28
 800272a:	e785      	b.n	8002638 <chprintf.constprop.1+0x418>
        *p++ = '-';
 800272c:	232d      	movs	r3, #45	; 0x2d
 800272e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8002732:	f10d 0329 	add.w	r3, sp, #41	; 0x29
        f = -f;
 8002736:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
        *p++ = '-';
 800273a:	9304      	str	r3, [sp, #16]
 800273c:	ac0a      	add	r4, sp, #40	; 0x28
 800273e:	e698      	b.n	8002472 <chprintf.constprop.1+0x252>
      if (precision == 0)
 8002740:	b9d7      	cbnz	r7, 8002778 <chprintf.constprop.1+0x558>
        precision = 32767;
 8002742:	f647 77ff 	movw	r7, #32767	; 0x7fff
        s = "(null)";
 8002746:	4c13      	ldr	r4, [pc, #76]	; (8002794 <chprintf.constprop.1+0x574>)
 8002748:	e65e      	b.n	8002408 <chprintf.constprop.1+0x1e8>
      if (*s == '-' && filler == '0') {
 800274a:	9b00      	ldr	r3, [sp, #0]
 800274c:	2b30      	cmp	r3, #48	; 0x30
 800274e:	f47f af36 	bne.w	80025be <chprintf.constprop.1+0x39e>
        streamPut(chp, (uint8_t)*s++);
 8002752:	4638      	mov	r0, r7
 8002754:	4790      	blx	r2
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	f109 0901 	add.w	r9, r9, #1
 800275c:	6892      	ldr	r2, [r2, #8]
 800275e:	3401      	adds	r4, #1
 8002760:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002764:	e72b      	b.n	80025be <chprintf.constprop.1+0x39e>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002766:	a306      	add	r3, pc, #24	; (adr r3, 8002780 <chprintf.constprop.1+0x560>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <chprintf.constprop.1+0x578>)
 8002772:	4f0a      	ldr	r7, [pc, #40]	; (800279c <chprintf.constprop.1+0x57c>)
 8002774:	9305      	str	r3, [sp, #20]
 8002776:	e694      	b.n	80024a2 <chprintf.constprop.1+0x282>
        s = "(null)";
 8002778:	4c06      	ldr	r4, [pc, #24]	; (8002794 <chprintf.constprop.1+0x574>)
 800277a:	e645      	b.n	8002408 <chprintf.constprop.1+0x1e8>
 800277c:	f3af 8000 	nop.w
 8002780:	00000000 	.word	0x00000000
 8002784:	41cdcd65 	.word	0x41cdcd65
 8002788:	08004a70 	.word	0x08004a70
 800278c:	cccccccd 	.word	0xcccccccd
 8002790:	200008d0 	.word	0x200008d0
 8002794:	08004990 	.word	0x08004990
 8002798:	3b9aca00 	.word	0x3b9aca00
 800279c:	05f5e100 	.word	0x05f5e100
    if (left_align == FALSE)
 80027a0:	9b01      	ldr	r3, [sp, #4]
 80027a2:	b93b      	cbnz	r3, 80027b4 <chprintf.constprop.1+0x594>
      width = -width;
 80027a4:	4273      	negs	r3, r6
 80027a6:	9301      	str	r3, [sp, #4]
    if (width < 0) {
 80027a8:	b146      	cbz	r6, 80027bc <chprintf.constprop.1+0x59c>
      filler = ' ';
 80027aa:	2320      	movs	r3, #32
 80027ac:	9300      	str	r3, [sp, #0]
    if (width < 0) {
 80027ae:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80027b2:	e6fd      	b.n	80025b0 <chprintf.constprop.1+0x390>
      filler = ' ';
 80027b4:	2320      	movs	r3, #32
    if (left_align == FALSE)
 80027b6:	46b2      	mov	sl, r6
      filler = ' ';
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	e723      	b.n	8002604 <chprintf.constprop.1+0x3e4>
      width = -width;
 80027bc:	469a      	mov	sl, r3
      filler = ' ';
 80027be:	2320      	movs	r3, #32
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	e71f      	b.n	8002604 <chprintf.constprop.1+0x3e4>
	...

080027d0 <MoveThread>:
    }

}

 THD_WORKING_AREA(waMoveThread, 128);
    THD_FUNCTION(MoveThread, arg) {
 80027d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80027d4:	f8df a294 	ldr.w	sl, [pc, #660]	; 8002a6c <MoveThread+0x29c>
 80027d8:	b087      	sub	sp, #28
 80027da:	2320      	movs	r3, #32
 80027dc:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 80027e0:	f8da 2018 	ldr.w	r2, [sl, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 80027e4:	4613      	mov	r3, r2
 80027e6:	f853 0f28 	ldr.w	r0, [r3, #40]!
 80027ea:	4298      	cmp	r0, r3
 80027ec:	f000 80c3 	beq.w	8002976 <MoveThread+0x1a6>
  tqp->p_next = tp->p_next;
 80027f0:	6801      	ldr	r1, [r0, #0]
 80027f2:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 80027f4:	220d      	movs	r2, #13
  tqp->p_next->p_prev = (thread_t *)tqp;
 80027f6:	604b      	str	r3, [r1, #4]
 80027f8:	2400      	movs	r4, #0
 80027fa:	7702      	strb	r2, [r0, #28]
 80027fc:	f384 8811 	msr	BASEPRI, r4
 8002800:	2320      	movs	r3, #32
    
        (void)arg;

        while(1){
            sensor_thread = chMsgWait();
            double line = (double)chMsgGet(sensor_thread);
 8002802:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8002804:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002808:	f7ff fa1a 	bl	8001c40 <chSchWakeupS.constprop.37>
 800280c:	f384 8811 	msr	BASEPRI, r4
            chMsgRelease(sensor_thread, MSG_OK);
            // PROCESS
            if (line <= 128 && line >= -128) { 
 8002810:	f105 0380 	add.w	r3, r5, #128	; 0x80
 8002814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002818:	d8df      	bhi.n	80027da <MoveThread+0xa>
 800281a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800281e:	4882      	ldr	r0, [pc, #520]	; (8002a28 <MoveThread+0x258>)
 8002820:	f7ff fc26 	bl	8002070 <chIQGetTimeout>
#include "includes/chprintf.h"

double get_camera_output() {
    int8_t output = sdGet(&SD1);
    //chprintf((BaseSequentialStream*)&SD1,"%d \r\n", output);
    return output;
 8002824:	b240      	sxtb	r0, r0
 8002826:	f7fd fe9d 	bl	8000564 <__aeabi_i2d>
     chVTObjectInit(&main_timer[i]);
    }
}
 
void calculate_speed(double smer, double brana, int8_t percent) {
    brana *= -5;
 800282a:	2200      	movs	r2, #0
 800282c:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <MoveThread+0x25c>)
 800282e:	f7fd ff07 	bl	8000640 <__aeabi_dmul>
    if (brana < -20) {
 8002832:	2200      	movs	r2, #0
    brana *= -5;
 8002834:	4606      	mov	r6, r0
 8002836:	460f      	mov	r7, r1
    if (brana < -20) {
 8002838:	4b7d      	ldr	r3, [pc, #500]	; (8002a30 <MoveThread+0x260>)
    brana *= -5;
 800283a:	e9cd 6700 	strd	r6, r7, [sp]
    if (brana < -20) {
 800283e:	f7fe f977 	bl	8000b30 <__aeabi_dcmplt>
 8002842:	2800      	cmp	r0, #0
 8002844:	f000 80a0 	beq.w	8002988 <MoveThread+0x1b8>
        brana -= 50;
 8002848:	4630      	mov	r0, r6
 800284a:	4639      	mov	r1, r7
 800284c:	2200      	movs	r2, #0
 800284e:	4b79      	ldr	r3, [pc, #484]	; (8002a34 <MoveThread+0x264>)
 8002850:	f7fd fd3a 	bl	80002c8 <__aeabi_dsub>
 8002854:	e9cd 0100 	strd	r0, r1, [sp]
    }  else if (brana > 20) {
        brana += 50;
    }
    chprintf((BaseSequentialStream*)&SD1,"%d : %d \r\n", (int)smer, (int)brana);
 8002858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800285c:	f7fe f990 	bl	8000b80 <__aeabi_d2iz>
 8002860:	462a      	mov	r2, r5
 8002862:	4603      	mov	r3, r0
 8002864:	4974      	ldr	r1, [pc, #464]	; (8002a38 <MoveThread+0x268>)
 8002866:	4875      	ldr	r0, [pc, #468]	; (8002a3c <MoveThread+0x26c>)
 8002868:	f7ff fcda 	bl	8002220 <chprintf.constprop.1>
            double line = (double)chMsgGet(sensor_thread);
 800286c:	4628      	mov	r0, r5
 800286e:	f7fd fe79 	bl	8000564 <__aeabi_i2d>
    // calculate move angle
    smer /= 127;
 8002872:	a367      	add	r3, pc, #412	; (adr r3, 8002a10 <MoveThread+0x240>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fe f80c 	bl	8000894 <__aeabi_ddiv>
    if (percent <= 100 && percent > 0) {
        if(smer != -2) {
 800287c:	2200      	movs	r2, #0
 800287e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    smer /= 127;
 8002882:	e9cd 0104 	strd	r0, r1, [sp, #16]
        if(smer != -2) {
 8002886:	f7fe f949 	bl	8000b1c <__aeabi_dcmpeq>
 800288a:	2800      	cmp	r0, #0
 800288c:	d1a5      	bne.n	80027da <MoveThread+0xa>
            double smer_motor = -1;
 800288e:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <MoveThread+0x270>)
 8002890:	4e6c      	ldr	r6, [pc, #432]	; (8002a44 <MoveThread+0x274>)
 8002892:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8002a70 <MoveThread+0x2a0>
 8002896:	4f6c      	ldr	r7, [pc, #432]	; (8002a48 <MoveThread+0x278>)
 8002898:	2200      	movs	r2, #0
 800289a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        if(smer != -2) {
 800289e:	4604      	mov	r4, r0
            for (int8_t i = 0; i < NUM_OF_MOTORS; i++) {
                smer_motor += MOTOR_CONST;
 80028a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028a4:	a35c      	add	r3, pc, #368	; (adr r3, 8002a18 <MoveThread+0x248>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fd0f 	bl	80002cc <__adddf3>
                double speed = truncl(sin(((double)smer_motor-(double)smer)*(double)PI) * 17 * percent);
 80028ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
                smer_motor += MOTOR_CONST;
 80028b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
                double speed = truncl(sin(((double)smer_motor-(double)smer)*(double)PI) * 17 * percent);
 80028b6:	f7fd fd07 	bl	80002c8 <__aeabi_dsub>
 80028ba:	a359      	add	r3, pc, #356	; (adr r3, 8002a20 <MoveThread+0x250>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	f7fd febe 	bl	8000640 <__aeabi_dmul>
 80028c4:	f000 fe14 	bl	80034f0 <sin>
 80028c8:	2200      	movs	r2, #0
 80028ca:	4b60      	ldr	r3, [pc, #384]	; (8002a4c <MoveThread+0x27c>)
 80028cc:	f7fd feb8 	bl	8000640 <__aeabi_dmul>
 80028d0:	2200      	movs	r2, #0
 80028d2:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <MoveThread+0x280>)
 80028d4:	f7fd feb4 	bl	8000640 <__aeabi_dmul>
 80028d8:	f000 fe5a 	bl	8003590 <truncl>
                speed += ((speed < 0) ? speed*-1 : speed) < 5 ? -speed : (speed < 0 ? -300 : 300);
 80028dc:	2200      	movs	r2, #0
 80028de:	2300      	movs	r3, #0
                double speed = truncl(sin(((double)smer_motor-(double)smer)*(double)PI) * 17 * percent);
 80028e0:	4680      	mov	r8, r0
 80028e2:	460d      	mov	r5, r1
                speed += ((speed < 0) ? speed*-1 : speed) < 5 ? -speed : (speed < 0 ? -300 : 300);
 80028e4:	f7fe f924 	bl	8000b30 <__aeabi_dcmplt>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	f040 8082 	bne.w	80029f2 <MoveThread+0x222>
 80028ee:	4640      	mov	r0, r8
 80028f0:	4629      	mov	r1, r5
 80028f2:	2200      	movs	r2, #0
 80028f4:	4b57      	ldr	r3, [pc, #348]	; (8002a54 <MoveThread+0x284>)
 80028f6:	f7fe f91b 	bl	8000b30 <__aeabi_dcmplt>
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d158      	bne.n	80029b0 <MoveThread+0x1e0>
 80028fe:	f8df e174 	ldr.w	lr, [pc, #372]	; 8002a74 <MoveThread+0x2a4>
 8002902:	4684      	mov	ip, r0
 8002904:	4662      	mov	r2, ip
 8002906:	4673      	mov	r3, lr
 8002908:	4640      	mov	r0, r8
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fcde 	bl	80002cc <__adddf3>
                    speed = -600;
                } else if (brana > 0) {
                    speed = 600;
                }*/
 
                move_motor(i,speed+brana);
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
                speed += ((speed < 0) ? speed*-1 : speed) < 5 ? -speed : (speed < 0 ? -300 : 300);
 8002914:	4680      	mov	r8, r0
 8002916:	4689      	mov	r9, r1
                move_motor(i,speed+brana);
 8002918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800291c:	f7fd fcd6 	bl	80002cc <__adddf3>
 8002920:	f7fe f92e 	bl	8000b80 <__aeabi_d2iz>
 8002924:	f917 1b01 	ldrsb.w	r1, [r7], #1
 8002928:	f91b 2b01 	ldrsb.w	r2, [fp], #1
 800292c:	2301      	movs	r3, #1
 800292e:	fa03 f202 	lsl.w	r2, r3, r2
 8002932:	408b      	lsls	r3, r1
 8002934:	b201      	sxth	r1, r0
    if (speed < 0) {
 8002936:	2900      	cmp	r1, #0
 8002938:	b292      	uxth	r2, r2
 800293a:	b29b      	uxth	r3, r3
 800293c:	db3c      	blt.n	80029b8 <MoveThread+0x1e8>
        case 0:
            palClearPad(GPIOC, pinA);
            palClearPad(GPIOC, pinB);
            break;
        case 1:
            palSetPad(GPIOC, pinA);
 800293e:	4846      	ldr	r0, [pc, #280]	; (8002a58 <MoveThread+0x288>)
 8002940:	bf14      	ite	ne
 8002942:	8302      	strhne	r2, [r0, #24]
            palClearPad(GPIOC, pinA);
 8002944:	8342      	strheq	r2, [r0, #26]
            palClearPad(GPIOC, pinB);
 8002946:	8343      	strh	r3, [r0, #26]
    if (motor_actual_speeds[motor_number] == 0) {
 8002948:	f9b6 3000 	ldrsh.w	r3, [r6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03c      	beq.n	80029ca <MoveThread+0x1fa>
                chprintf((BaseSequentialStream*)&SD1,"%d ", (int)speed);
 8002950:	4649      	mov	r1, r9
 8002952:	4640      	mov	r0, r8
 8002954:	f7fe f914 	bl	8000b80 <__aeabi_d2iz>
 8002958:	3401      	adds	r4, #1
 800295a:	4602      	mov	r2, r0
 800295c:	493f      	ldr	r1, [pc, #252]	; (8002a5c <MoveThread+0x28c>)
 800295e:	4837      	ldr	r0, [pc, #220]	; (8002a3c <MoveThread+0x26c>)
 8002960:	f7ff fc5e 	bl	8002220 <chprintf.constprop.1>
            for (int8_t i = 0; i < NUM_OF_MOTORS; i++) {
 8002964:	2c03      	cmp	r4, #3
 8002966:	f106 0602 	add.w	r6, r6, #2
 800296a:	d199      	bne.n	80028a0 <MoveThread+0xd0>
            chprintf((BaseSequentialStream*)&SD1,"\r\n");
 800296c:	493c      	ldr	r1, [pc, #240]	; (8002a60 <MoveThread+0x290>)
 800296e:	4833      	ldr	r0, [pc, #204]	; (8002a3c <MoveThread+0x26c>)
 8002970:	f7ff fc56 	bl	8002220 <chprintf.constprop.1>
 8002974:	e731      	b.n	80027da <MoveThread+0xa>
    chSchGoSleepS(CH_STATE_WTMSG);
 8002976:	200e      	movs	r0, #14
 8002978:	f7ff f9c2 	bl	8001d00 <chSchGoSleepS>
 800297c:	f8da 2018 	ldr.w	r2, [sl, #24]
 8002980:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002982:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8002986:	e733      	b.n	80027f0 <MoveThread+0x20>
    }  else if (brana > 20) {
 8002988:	e9dd 6700 	ldrd	r6, r7, [sp]
 800298c:	2200      	movs	r2, #0
 800298e:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <MoveThread+0x294>)
 8002990:	4630      	mov	r0, r6
 8002992:	4639      	mov	r1, r7
 8002994:	f7fe f8ea 	bl	8000b6c <__aeabi_dcmpgt>
 8002998:	2800      	cmp	r0, #0
 800299a:	f43f af5d 	beq.w	8002858 <MoveThread+0x88>
        brana += 50;
 800299e:	4630      	mov	r0, r6
 80029a0:	4639      	mov	r1, r7
 80029a2:	2200      	movs	r2, #0
 80029a4:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <MoveThread+0x264>)
 80029a6:	f7fd fc91 	bl	80002cc <__adddf3>
 80029aa:	e9cd 0100 	strd	r0, r1, [sp]
 80029ae:	e753      	b.n	8002858 <MoveThread+0x88>
                speed += ((speed < 0) ? speed*-1 : speed) < 5 ? -speed : (speed < 0 ? -300 : 300);
 80029b0:	46c4      	mov	ip, r8
 80029b2:	f105 4e00 	add.w	lr, r5, #2147483648	; 0x80000000
 80029b6:	e7a5      	b.n	8002904 <MoveThread+0x134>
            palClearPad(GPIOC, pinB);
            break;
        case 2:
            palSetPad(GPIOC, pinB);
 80029b8:	4d27      	ldr	r5, [pc, #156]	; (8002a58 <MoveThread+0x288>)
 80029ba:	832b      	strh	r3, [r5, #24]
            palClearPad(GPIOC, pinA);
 80029bc:	836a      	strh	r2, [r5, #26]
    if (motor_actual_speeds[motor_number] == 0) {
 80029be:	f9b6 3000 	ldrsh.w	r3, [r6]
        speed *= -1;
 80029c2:	4240      	negs	r0, r0
 80029c4:	b201      	sxth	r1, r0
    if (motor_actual_speeds[motor_number] == 0) {
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1c2      	bne.n	8002950 <MoveThread+0x180>
 80029ca:	2220      	movs	r2, #32
 80029cc:	f382 8811 	msr	BASEPRI, r2
  pwmp->tim->CCR[channel] = width;
 80029d0:	4825      	ldr	r0, [pc, #148]	; (8002a68 <MoveThread+0x298>)

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 80029d2:	2501      	movs	r5, #1
 80029d4:	6982      	ldr	r2, [r0, #24]
 80029d6:	68c0      	ldr	r0, [r0, #12]
 80029d8:	40a5      	lsls	r5, r4
 80029da:	4328      	orrs	r0, r5
 80029dc:	f104 050c 	add.w	r5, r4, #12
 80029e0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80029e4:	4d20      	ldr	r5, [pc, #128]	; (8002a68 <MoveThread+0x298>)
 80029e6:	6051      	str	r1, [r2, #4]
 80029e8:	60e8      	str	r0, [r5, #12]
 80029ea:	f383 8811 	msr	BASEPRI, r3
        motor_actual_speeds[motor_number] = speed;
 80029ee:	8031      	strh	r1, [r6, #0]
 80029f0:	e7ae      	b.n	8002950 <MoveThread+0x180>
                speed += ((speed < 0) ? speed*-1 : speed) < 5 ? -speed : (speed < 0 ? -300 : 300);
 80029f2:	4640      	mov	r0, r8
 80029f4:	4629      	mov	r1, r5
 80029f6:	2200      	movs	r2, #0
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MoveThread+0x25c>)
 80029fa:	f7fe f8b7 	bl	8000b6c <__aeabi_dcmpgt>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d1d6      	bne.n	80029b0 <MoveThread+0x1e0>
 8002a02:	4684      	mov	ip, r0
 8002a04:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002a78 <MoveThread+0x2a8>
 8002a08:	e77c      	b.n	8002904 <MoveThread+0x134>
 8002a0a:	bf00      	nop
 8002a0c:	f3af 8000 	nop.w
 8002a10:	00000000 	.word	0x00000000
 8002a14:	405fc000 	.word	0x405fc000
 8002a18:	55555555 	.word	0x55555555
 8002a1c:	3fe55555 	.word	0x3fe55555
 8002a20:	54411744 	.word	0x54411744
 8002a24:	400921fb 	.word	0x400921fb
 8002a28:	200008dc 	.word	0x200008dc
 8002a2c:	c0140000 	.word	0xc0140000
 8002a30:	c0340000 	.word	0xc0340000
 8002a34:	40490000 	.word	0x40490000
 8002a38:	080048a0 	.word	0x080048a0
 8002a3c:	200008d0 	.word	0x200008d0
 8002a40:	bff00000 	.word	0xbff00000
 8002a44:	20000b7c 	.word	0x20000b7c
 8002a48:	08004890 	.word	0x08004890
 8002a4c:	40310000 	.word	0x40310000
 8002a50:	40440000 	.word	0x40440000
 8002a54:	40140000 	.word	0x40140000
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	080048ac 	.word	0x080048ac
 8002a60:	080048a8 	.word	0x080048a8
 8002a64:	40340000 	.word	0x40340000
 8002a68:	200008b4 	.word	0x200008b4
 8002a6c:	20000948 	.word	0x20000948
 8002a70:	08004880 	.word	0x08004880
 8002a74:	4072c000 	.word	0x4072c000
 8002a78:	c072c000 	.word	0xc072c000
 8002a7c:	00000000 	.word	0x00000000

08002a80 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <main+0x6c>)
  PWR->CR |= PWR_CR_DBP;
 8002a82:	4c1b      	ldr	r4, [pc, #108]	; (8002af0 <main+0x70>)
  rccResetAHB1(~0);
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a8a:	2200      	movs	r2, #0
#include "includes/chprintf.h"
#include <math.h>

///home/adam/ChibiOS_16.1.9/os/hal/lib/streams/

int main(void) {
 8002a8c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002a90:	6119      	str	r1, [r3, #16]
 8002a92:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8002a94:	6958      	ldr	r0, [r3, #20]
 8002a96:	6159      	str	r1, [r3, #20]
 8002a98:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002a9a:	6a18      	ldr	r0, [r3, #32]
 8002a9c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8002aa0:	6218      	str	r0, [r3, #32]
 8002aa2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8002aa4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002aa6:	6259      	str	r1, [r3, #36]	; 0x24
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8002aaa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002aac:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002ab0:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8002ab2:	6821      	ldr	r1, [r4, #0]
 8002ab4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002ab8:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002aba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002abc:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002ac0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002ac4:	b089      	sub	sp, #36	; 0x24
 8002ac6:	d003      	beq.n	8002ad0 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8002ac8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002acc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002ace:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <main+0x70>)
 8002ad2:	4908      	ldr	r1, [pc, #32]	; (8002af4 <main+0x74>)
 8002ad4:	6853      	ldr	r3, [r2, #4]
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8002ad6:	4d08      	ldr	r5, [pc, #32]	; (8002af8 <main+0x78>)
 8002ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002adc:	6053      	str	r3, [r2, #4]
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <main+0x7c>)
 8002ae0:	2000      	movs	r0, #0
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002ae2:	4602      	mov	r2, r0
  dma_streams_mask = 0U;
 8002ae4:	6018      	str	r0, [r3, #0]
    _stm32_dma_streams[i].stream->CR = 0U;
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	e00c      	b.n	8002b04 <main+0x84>
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000
 8002af4:	080048bc 	.word	0x080048bc
 8002af8:	40026010 	.word	0x40026010
 8002afc:	20000b38 	.word	0x20000b38
 8002b00:	f851 5c0c 	ldr.w	r5, [r1, #-12]
    dma_isr_redir[i].dma_func = NULL;
 8002b04:	4bc0      	ldr	r3, [pc, #768]	; (8002e08 <main+0x388>)
    _stm32_dma_streams[i].stream->CR = 0U;
 8002b06:	602c      	str	r4, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
 8002b08:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002b0c:	3201      	adds	r2, #1
 8002b0e:	2a10      	cmp	r2, #16
 8002b10:	f101 010c 	add.w	r1, r1, #12
 8002b14:	d1f4      	bne.n	8002b00 <main+0x80>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002b16:	f8df b354 	ldr.w	fp, [pc, #852]	; 8002e6c <main+0x3ec>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002b1a:	f8df e354 	ldr.w	lr, [pc, #852]	; 8002e70 <main+0x3f0>
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002b1e:	f8df 9354 	ldr.w	r9, [pc, #852]	; 8002e74 <main+0x3f4>
 8002b22:	9201      	str	r2, [sp, #4]
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b28:	f8cb 3008 	str.w	r3, [fp, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8002b2c:	f8cb 300c 	str.w	r3, [fp, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002b30:	f8ce 3008 	str.w	r3, [lr, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002b34:	f8ce 300c 	str.w	r3, [lr, #12]
 8002b38:	f8d9 e030 	ldr.w	lr, [r9, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
 8002b3c:	f8df a338 	ldr.w	sl, [pc, #824]	; 8002e78 <main+0x3f8>
  gpiop->PUPDR   = config->pupdr;
 8002b40:	4ab2      	ldr	r2, [pc, #712]	; (8002e0c <main+0x38c>)
  gpiop->OTYPER  = config->otyper;
 8002b42:	f8df c338 	ldr.w	ip, [pc, #824]	; 8002e7c <main+0x3fc>
  gpiop->MODER   = config->moder;
 8002b46:	f8df b338 	ldr.w	fp, [pc, #824]	; 8002e80 <main+0x400>
  gpiop->OTYPER  = config->otyper;
 8002b4a:	4eb1      	ldr	r6, [pc, #708]	; (8002e10 <main+0x390>)
 8002b4c:	4db1      	ldr	r5, [pc, #708]	; (8002e14 <main+0x394>)
 8002b4e:	48b2      	ldr	r0, [pc, #712]	; (8002e18 <main+0x398>)
 8002b50:	49b2      	ldr	r1, [pc, #712]	; (8002e1c <main+0x39c>)
  adcp->state    = ADC_STOP;
 8002b52:	4fb3      	ldr	r7, [pc, #716]	; (8002e20 <main+0x3a0>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002b54:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8002e84 <main+0x404>
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8002b58:	f04e 0e9f 	orr.w	lr, lr, #159	; 0x9f
 8002b5c:	f8c9 e030 	str.w	lr, [r9, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8002b60:	f8d9 e050 	ldr.w	lr, [r9, #80]	; 0x50
 8002b64:	f04e 0e9f 	orr.w	lr, lr, #159	; 0x9f
 8002b68:	f8c9 e050 	str.w	lr, [r9, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8002b6c:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8002b70:	f8ca 4004 	str.w	r4, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002b74:	f8ca e008 	str.w	lr, [sl, #8]
  gpiop->ODR     = config->odr;
 8002b78:	f64f 7edf 	movw	lr, #65503	; 0xffdf
  gpiop->PUPDR   = config->pupdr;
 8002b7c:	f8ca 200c 	str.w	r2, [sl, #12]
  gpiop->ODR     = config->odr;
 8002b80:	f8ca e014 	str.w	lr, [sl, #20]
  gpiop->AFRL    = config->afrl;
 8002b84:	f44f 4eee 	mov.w	lr, #30464	; 0x7700
 8002b88:	f8ca e020 	str.w	lr, [sl, #32]
  gpiop->AFRH    = config->afrh;
 8002b8c:	f44f 2e2a 	mov.w	lr, #696320	; 0xaa000
 8002b90:	f8ca e024 	str.w	lr, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	f8ca b000 	str.w	fp, [sl]
  gpiop->PUPDR   = config->pupdr;
 8002b9a:	f04f 3e55 	mov.w	lr, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8002b9e:	f64f 7bff 	movw	fp, #65535	; 0xffff
  gpiop->OTYPER  = config->otyper;
 8002ba2:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002ba6:	f8cc 3008 	str.w	r3, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8002baa:	f8cc e00c 	str.w	lr, [ip, #12]
  gpiop->ODR     = config->odr;
 8002bae:	f8cc b014 	str.w	fp, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8002bb2:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8002bb6:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002bba:	f8cc 2000 	str.w	r2, [ip]
  gpiop->PUPDR   = config->pupdr;
 8002bbe:	4a99      	ldr	r2, [pc, #612]	; (8002e24 <main+0x3a4>)
 8002bc0:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8002e88 <main+0x408>
  gpiop->OTYPER  = config->otyper;
 8002bc4:	6074      	str	r4, [r6, #4]
 8002bc6:	f04f 0a01 	mov.w	sl, #1
  gpiop->OSPEEDR = config->ospeedr;
 8002bca:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8002bcc:	60f2      	str	r2, [r6, #12]
  gpiop->ODR     = config->odr;
 8002bce:	f8c6 b014 	str.w	fp, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8002bd2:	6234      	str	r4, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8002bd4:	6274      	str	r4, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002bd6:	6034      	str	r4, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8002bd8:	606c      	str	r4, [r5, #4]
 8002bda:	2660      	movs	r6, #96	; 0x60
  gpiop->OSPEEDR = config->ospeedr;
 8002bdc:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8002bde:	f8c5 e00c 	str.w	lr, [r5, #12]
  gpiop->ODR     = config->odr;
 8002be2:	f8c5 b014 	str.w	fp, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8002be6:	622c      	str	r4, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8002be8:	626c      	str	r4, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002bea:	602c      	str	r4, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8002bec:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002bee:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8002bf0:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->ODR     = config->odr;
 8002bf4:	f8c0 b014 	str.w	fp, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8002bf8:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8002bfa:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002bfc:	6004      	str	r4, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8002bfe:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002c00:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8002c02:	f8c1 c00c 	str.w	ip, [r1, #12]
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8002c06:	f8df c284 	ldr.w	ip, [pc, #644]	; 8002e8c <main+0x40c>
  gpiop->ODR     = config->odr;
 8002c0a:	f8c1 b014 	str.w	fp, [r1, #20]
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8002c0e:	f8df e280 	ldr.w	lr, [pc, #640]	; 8002e90 <main+0x410>
  gpiop->AFRL    = config->afrl;
 8002c12:	620c      	str	r4, [r1, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c14:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  gpiop->AFRH    = config->afrh;
 8002c18:	624c      	str	r4, [r1, #36]	; 0x24
  ADCD1.adc = ADC1;
 8002c1a:	f5a0 4070 	sub.w	r0, r0, #61440	; 0xf000
  gpiop->MODER   = config->moder;
 8002c1e:	600c      	str	r4, [r1, #0]
 8002c20:	f887 a000 	strb.w	sl, [r7]
  tqp->p_next = (thread_t *)tqp;
 8002c24:	f107 0118 	add.w	r1, r7, #24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002c28:	f888 6312 	strb.w	r6, [r8, #786]	; 0x312
  pwmp->state    = PWM_STOP;
 8002c2c:	4e7e      	ldr	r6, [pc, #504]	; (8002e28 <main+0x3a8>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c2e:	f8c8 5180 	str.w	r5, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002c32:	f8c8 5000 	str.w	r5, [r8]
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8002c36:	e9c7 0c0a 	strd	r0, ip, [r7, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8002c3a:	f8c7 e030 	str.w	lr, [r7, #48]	; 0x30
  adcp->samples  = NULL;
 8002c3e:	e9c7 4401 	strd	r4, r4, [r7, #4]
  adcp->grpp     = NULL;
 8002c42:	e9c7 4403 	strd	r4, r4, [r7, #12]
  adcp->thread   = NULL;
 8002c46:	617c      	str	r4, [r7, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8002c48:	623c      	str	r4, [r7, #32]
  tqp->p_prev = (thread_t *)tqp;
 8002c4a:	e9c7 1106 	strd	r1, r1, [r7, #24]
  icu_lld_init();
 8002c4e:	f7fe fa6f 	bl	8001130 <icu_lld_init>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002c52:	2004      	movs	r0, #4
  PWMD1.tim = STM32_TIM1;
 8002c54:	4975      	ldr	r1, [pc, #468]	; (8002e2c <main+0x3ac>)
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002c56:	7430      	strb	r0, [r6, #16]
  PWMD1.tim = STM32_TIM1;
 8002c58:	61b1      	str	r1, [r6, #24]
 8002c5a:	f886 a000 	strb.w	sl, [r6]
  pwmp->config   = NULL;
 8002c5e:	6074      	str	r4, [r6, #4]
  pwmp->enabled  = 0;
 8002c60:	60f4      	str	r4, [r6, #12]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8002c62:	f7fe f8b5 	bl	8000dd0 <sdObjectInit.constprop.25>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002c66:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002c6a:	f8df c228 	ldr.w	ip, [pc, #552]	; 8002e94 <main+0x414>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002c6e:	4870      	ldr	r0, [pc, #448]	; (8002e30 <main+0x3b0>)
  SCB->VTOR = CORTEX_VTOR_INIT;
 8002c70:	4970      	ldr	r1, [pc, #448]	; (8002e34 <main+0x3b4>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002c72:	f8df e224 	ldr.w	lr, [pc, #548]	; 8002e98 <main+0x418>
  ST_ENABLE_CLOCK();
 8002c76:	f045 0504 	orr.w	r5, r5, #4
 8002c7a:	f8c9 5040 	str.w	r5, [r9, #64]	; 0x40
  ST_ENABLE_STOP();
 8002c7e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8002c82:	f045 0504 	orr.w	r5, r5, #4
 8002c86:	f8cc 5008 	str.w	r5, [ip, #8]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002c8a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c8e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002c92:	f242 5c7f 	movw	ip, #9599	; 0x257f
 8002c96:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002c9a:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8002c9e:	6184      	str	r4, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002ca0:	6344      	str	r4, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8002ca2:	60c4      	str	r4, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8002ca4:	6044      	str	r4, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002ca6:	f8c0 a014 	str.w	sl, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002caa:	f8c0 a000 	str.w	sl, [r0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002cae:	f888 331e 	strb.w	r3, [r8, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002cb2:	f8c8 5180 	str.w	r5, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002cb6:	f8c8 5000 	str.w	r5, [r8]
 8002cba:	608c      	str	r4, [r1, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	68c8      	ldr	r0, [r1, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <main+0x3b8>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002cc0:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8002e9c <main+0x41c>
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	9a01      	ldr	r2, [sp, #4]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8002cc6:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 8002cca:	4028      	ands	r0, r5
  reg_value  =  (reg_value                                   |
 8002ccc:	ea40 0e0e 	orr.w	lr, r0, lr
  SCB->AIRCR =  reg_value;
 8002cd0:	f8c1 e00c 	str.w	lr, [r1, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002cd4:	68d8      	ldr	r0, [r3, #12]
  tqp->p_next = (thread_t *)tqp;
 8002cd6:	4d59      	ldr	r5, [pc, #356]	; (8002e3c <main+0x3bc>)
 8002cd8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  tqp->p_prev = (thread_t *)tqp;
 8002cdc:	606d      	str	r5, [r5, #4]
 8002cde:	60d8      	str	r0, [r3, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002ce0:	f8dc 0000 	ldr.w	r0, [ip]
  ch.rlist.r_prio = NOPRIO;
 8002ce4:	60ac      	str	r4, [r5, #8]
 8002ce6:	ea40 000a 	orr.w	r0, r0, sl
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	f04f 0320 	mov.w	r3, #32
 8002cee:	f8cc 0000 	str.w	r0, [ip]
 8002cf2:	77ca      	strb	r2, [r1, #31]
 8002cf4:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8002cf8:	f105 021c 	add.w	r2, r5, #28
  SD1.usart = USART1;
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <main+0x3c0>)
  tqp->p_next = (thread_t *)tqp;
 8002cfe:	602d      	str	r5, [r5, #0]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002d00:	e9c5 2207 	strd	r2, r2, [r5, #28]
 8002d04:	4a4f      	ldr	r2, [pc, #316]	; (8002e44 <main+0x3c4>)
  tmp->cumulative = (rttime_t)0;
 8002d06:	2100      	movs	r1, #0
  chTMStartMeasurementX(&tm);
 8002d08:	a802      	add	r0, sp, #8
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8002d0a:	e9c5 5504 	strd	r5, r5, [r5, #16]
 8002d0e:	675a      	str	r2, [r3, #116]	; 0x74
  tmp->cumulative = (rttime_t)0;
 8002d10:	2200      	movs	r2, #0
  tmp->best       = (rtcnt_t)-1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  ch.vtlist.vt_delta = (systime_t)-1;
 8002d16:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
  tmp->cumulative = (rttime_t)0;
 8002d1a:	e9cd 1206 	strd	r1, r2, [sp, #24]
  tmp->worst      = (rtcnt_t)0;
 8002d1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
  ch.tm.offset = (rtcnt_t)0;
 8002d22:	672c      	str	r4, [r5, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 8002d24:	e9cd 4404 	strd	r4, r4, [sp, #16]
  chTMStartMeasurementX(&tm);
 8002d28:	f7fe f842 	bl	8000db0 <chTMStartMeasurementX.constprop.34>
  chTMStopMeasurementX(&tm);
 8002d2c:	a802      	add	r0, sp, #8
 8002d2e:	f7fe fd17 	bl	8001760 <chTMStopMeasurementX>
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002d32:	4945      	ldr	r1, [pc, #276]	; (8002e48 <main+0x3c8>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8002d34:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <main+0x3cc>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002d36:	4a46      	ldr	r2, [pc, #280]	; (8002e50 <main+0x3d0>)
  REG_INSERT(tp);
 8002d38:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8002d3c:	619c      	str	r4, [r3, #24]
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002d3e:	f021 0c07 	bic.w	ip, r1, #7
  ch.tm.offset = tm.last;
 8002d42:	9904      	ldr	r1, [sp, #16]
 8002d44:	6729      	str	r1, [r5, #112]	; 0x70
 8002d46:	f103 0010 	add.w	r0, r3, #16
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002d4a:	f022 0e07 	bic.w	lr, r2, #7
  tp->p_prio = prio;
 8002d4e:	2140      	movs	r1, #64	; 0x40
  REG_INSERT(tp);
 8002d50:	f105 022c 	add.w	r2, r5, #44	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8002d54:	e9c3 0004 	strd	r0, r0, [r3, #16]
  tp->p_prio = prio;
 8002d58:	6369      	str	r1, [r5, #52]	; 0x34
  tp->p_realprio = prio;
 8002d5a:	66a9      	str	r1, [r5, #104]	; 0x68
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002d5c:	f885 4049 	strb.w	r4, [r5, #73]	; 0x49
  tp->p_epending = (eventmask_t)0;
 8002d60:	e9c5 4418 	strd	r4, r4, [r5, #96]	; 0x60
  tp->p_refs = (trefs_t)1;
 8002d64:	f885 a04a 	strb.w	sl, [r5, #74]	; 0x4a
  tp->p_name = NULL;
 8002d68:	646c      	str	r4, [r5, #68]	; 0x44
  REG_INSERT(tp);
 8002d6a:	63ed      	str	r5, [r5, #60]	; 0x3c
 8002d6c:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
 8002d70:	f8cb 2010 	str.w	r2, [fp, #16]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8002d74:	e9c5 2205 	strd	r2, r2, [r5, #20]
  tlp->p_next = (thread_t *)tlp;
 8002d78:	f105 0250 	add.w	r2, r5, #80	; 0x50
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002d7c:	4935      	ldr	r1, [pc, #212]	; (8002e54 <main+0x3d4>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002d7e:	4836      	ldr	r0, [pc, #216]	; (8002e58 <main+0x3d8>)
 8002d80:	652a      	str	r2, [r5, #80]	; 0x50
 8002d82:	4a36      	ldr	r2, [pc, #216]	; (8002e5c <main+0x3dc>)
 8002d84:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
 8002d86:	e9c3 4402 	strd	r4, r4, [r3, #8]
  tqp->p_next = (thread_t *)tqp;
 8002d8a:	f105 0354 	add.w	r3, r5, #84	; 0x54
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8002d8e:	f885 a048 	strb.w	sl, [r5, #72]	; 0x48
  tqp->p_prev = (thread_t *)tqp;
 8002d92:	e9c5 3315 	strd	r3, r3, [r5, #84]	; 0x54
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002d96:	f8c1 c000 	str.w	ip, [r1]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002d9a:	f8c0 e000 	str.w	lr, [r0]
 8002d9e:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8002da2:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8002da4:	69ab      	ldr	r3, [r5, #24]
 8002da6:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <main+0x3e0>)
 8002da8:	619a      	str	r2, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8002daa:	21d8      	movs	r1, #216	; 0xd8
 8002dac:	4652      	mov	r2, sl
 8002dae:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8002db2:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <main+0x3e4>)
 8002db4:	f7fe ff74 	bl	8001ca0 <chThdCreateStatic.constprop.36>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8002db8:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <main+0x3e8>)
 8002dba:	6183      	str	r3, [r0, #24]
  sdObjectInit(&SD1, NULL, notify1);
 8002dbc:	f7fe f808 	bl	8000dd0 <sdObjectInit.constprop.25>
  SD1.usart = USART1;
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <main+0x3c0>)
 8002dc2:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <main+0x3c4>)
 8002dc4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002dcc:	7a1b      	ldrb	r3, [r3, #8]
 8002dce:	4553      	cmp	r3, sl
 8002dd0:	d10d      	bne.n	8002dee <main+0x36e>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8002dd2:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8002dd6:	f043 0310 	orr.w	r3, r3, #16
 8002dda:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dde:	22c0      	movs	r2, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002de0:	2320      	movs	r3, #32
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002de2:	f888 2325 	strb.w	r2, [r8, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002de6:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002dea:	f8c8 3004 	str.w	r3, [r8, #4]
  USART_TypeDef *u = sdp->usart;
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <main+0x3c0>)
 8002df0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <main+0x3c4>)
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d053      	beq.n	8002ea0 <main+0x420>
 8002df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d04f      	beq.n	8002ea0 <main+0x420>
    u->BRR = STM32_PCLK1 / config->speed;
 8002e00:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002e04:	6093      	str	r3, [r2, #8]
 8002e06:	e04e      	b.n	8002ea6 <main+0x426>
 8002e08:	20000ab8 	.word	0x20000ab8
 8002e0c:	64155105 	.word	0x64155105
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40021c00 	.word	0x40021c00
 8002e20:	20000838 	.word	0x20000838
 8002e24:	51555555 	.word	0x51555555
 8002e28:	200008b4 	.word	0x200008b4
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000800 	.word	0x40000800
 8002e34:	e000ed00 	.word	0xe000ed00
 8002e38:	e000edf0 	.word	0xe000edf0
 8002e3c:	20000948 	.word	0x20000948
 8002e40:	200008d0 	.word	0x200008d0
 8002e44:	40011000 	.word	0x40011000
 8002e48:	20000fa7 	.word	0x20000fa7
 8002e4c:	20000a98 	.word	0x20000a98
 8002e50:	20020000 	.word	0x20020000
 8002e54:	20000b88 	.word	0x20000b88
 8002e58:	20000b3c 	.word	0x20000b3c
 8002e5c:	08000ee1 	.word	0x08000ee1
 8002e60:	08004970 	.word	0x08004970
 8002e64:	08000ed1 	.word	0x08000ed1
 8002e68:	08004a60 	.word	0x08004a60
 8002e6c:	40026000 	.word	0x40026000
 8002e70:	40026400 	.word	0x40026400
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	2a8004a0 	.word	0x2a8004a0
 8002e84:	e000e100 	.word	0xe000e100
 8002e88:	55555550 	.word	0x55555550
 8002e8c:	08004940 	.word	0x08004940
 8002e90:	00022c16 	.word	0x00022c16
 8002e94:	e0042000 	.word	0xe0042000
 8002e98:	05fa0300 	.word	0x05fa0300
 8002e9c:	e0001000 	.word	0xe0001000
    u->BRR = STM32_PCLK2 / config->speed;
 8002ea0:	f240 3341 	movw	r3, #833	; 0x341
 8002ea4:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002ea6:	2340      	movs	r3, #64	; 0x40
 8002ea8:	6113      	str	r3, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002eaa:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002eac:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 8002eb0:	2300      	movs	r3, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002eb2:	6151      	str	r1, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002eb4:	60d0      	str	r0, [r2, #12]
  u->SR = 0;
 8002eb6:	6013      	str	r3, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002eb8:	6814      	ldr	r4, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002eba:	6852      	ldr	r2, [r2, #4]
  sdp->state = SD_READY;
 8002ebc:	4ab2      	ldr	r2, [pc, #712]	; (8003188 <main+0x708>)
 8002ebe:	2002      	movs	r0, #2
 8002ec0:	7210      	strb	r0, [r2, #8]
 8002ec2:	f383 8811 	msr	BASEPRI, r3
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002ec6:	2004      	movs	r0, #4
  PWMD1.tim = STM32_TIM1;
 8002ec8:	4ab0      	ldr	r2, [pc, #704]	; (800318c <main+0x70c>)
 8002eca:	61b2      	str	r2, [r6, #24]
  pwmp->state    = PWM_STOP;
 8002ecc:	7031      	strb	r1, [r6, #0]
  pwmp->config   = NULL;
 8002ece:	6073      	str	r3, [r6, #4]
  pwmp->enabled  = 0;
 8002ed0:	60f3      	str	r3, [r6, #12]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8002ed2:	7430      	strb	r0, [r6, #16]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f382 8811 	msr	BASEPRI, r2
  pwmp->config = config;
 8002eda:	49ad      	ldr	r1, [pc, #692]	; (8003190 <main+0x710>)
  if (pwmp->state == PWM_STOP) {
 8002edc:	7832      	ldrb	r2, [r6, #0]
  pwmp->period = config->period;
 8002ede:	684c      	ldr	r4, [r1, #4]
 8002ee0:	2a01      	cmp	r2, #1
 8002ee2:	e9c6 1401 	strd	r1, r4, [r6, #4]
 8002ee6:	f000 81cd 	beq.w	8003284 <main+0x804>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8002eea:	69b2      	ldr	r2, [r6, #24]
 8002eec:	6013      	str	r3, [r2, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8002eee:	6353      	str	r3, [r2, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8002ef0:	6393      	str	r3, [r2, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8002ef2:	63d3      	str	r3, [r2, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8002ef6:	6253      	str	r3, [r2, #36]	; 0x24
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002ef8:	68cb      	ldr	r3, [r1, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8002efa:	6972      	ldr	r2, [r6, #20]
 8002efc:	6808      	ldr	r0, [r1, #0]
 8002efe:	fbb2 f0f0 	udiv	r0, r2, r0
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002f02:	f003 030f 	and.w	r3, r3, #15
  pwmp->tim->PSC  = psc;
 8002f06:	69b2      	ldr	r2, [r6, #24]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8002f08:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  pwmp->tim->ARR  = pwmp->period - 1;
 8002f0a:	3c01      	subs	r4, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8002f0c:	3801      	subs	r0, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002f0e:	2b01      	cmp	r3, #1
  pwmp->tim->PSC  = psc;
 8002f10:	6290      	str	r0, [r2, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8002f12:	62d4      	str	r4, [r2, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8002f14:	6055      	str	r5, [r2, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002f16:	f000 8123 	beq.w	8003160 <main+0x6e0>
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	f000 8121 	beq.w	8003162 <main+0x6e2>
  ccer = 0;
 8002f20:	2300      	movs	r3, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8002f22:	6948      	ldr	r0, [r1, #20]
 8002f24:	f000 000f 	and.w	r0, r0, #15
 8002f28:	2801      	cmp	r0, #1
 8002f2a:	f000 811f 	beq.w	800316c <main+0x6ec>
 8002f2e:	2802      	cmp	r0, #2
 8002f30:	f000 811a 	beq.w	8003168 <main+0x6e8>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8002f34:	69c8      	ldr	r0, [r1, #28]
 8002f36:	f000 000f 	and.w	r0, r0, #15
 8002f3a:	2801      	cmp	r0, #1
 8002f3c:	f000 811b 	beq.w	8003176 <main+0x6f6>
 8002f40:	2802      	cmp	r0, #2
 8002f42:	f000 8116 	beq.w	8003172 <main+0x6f2>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8002f46:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002f48:	f000 000f 	and.w	r0, r0, #15
 8002f4c:	2801      	cmp	r0, #1
 8002f4e:	f000 8117 	beq.w	8003180 <main+0x700>
 8002f52:	2802      	cmp	r0, #2
 8002f54:	f000 8112 	beq.w	800317c <main+0x6fc>
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002f58:	6b09      	ldr	r1, [r1, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 8002f5a:	6213      	str	r3, [r2, #32]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8002f5c:	2400      	movs	r4, #0
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002f5e:	f021 03ff 	bic.w	r3, r1, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8002f62:	2501      	movs	r5, #1
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8002f64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8002f68:	2185      	movs	r1, #133	; 0x85
  pwmp->state = PWM_READY;
 8002f6a:	f04f 0802 	mov.w	r8, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8002f6e:	6155      	str	r5, [r2, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8002f70:	6114      	str	r4, [r2, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002f72:	60d3      	str	r3, [r2, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8002f74:	6450      	str	r0, [r2, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8002f76:	6011      	str	r1, [r2, #0]
  pwmp->enabled = 0;
 8002f78:	60f4      	str	r4, [r6, #12]
  pwmp->state = PWM_READY;
 8002f7a:	f886 8000 	strb.w	r8, [r6]
 8002f7e:	f384 8811 	msr	BASEPRI, r4
 8002f82:	f7fe f8d5 	bl	8001130 <icu_lld_init>
 8002f86:	2520      	movs	r5, #32
 8002f88:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 8002f8c:	f8df a220 	ldr.w	sl, [pc, #544]	; 80031b0 <main+0x730>
 8002f90:	4b80      	ldr	r3, [pc, #512]	; (8003194 <main+0x714>)
 8002f92:	f8ca 3004 	str.w	r3, [sl, #4]
  icu_lld_start(icup);
 8002f96:	4650      	mov	r0, sl
 8002f98:	f7fe f82a 	bl	8000ff0 <icu_lld_start>
  icup->state = ICU_READY;
 8002f9c:	f88a 8000 	strb.w	r8, [sl]
 8002fa0:	f384 8811 	msr	BASEPRI, r4
 8002fa4:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 8002fa8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80031b4 <main+0x734>
 8002fac:	4b7a      	ldr	r3, [pc, #488]	; (8003198 <main+0x718>)
 8002fae:	f8c9 3004 	str.w	r3, [r9, #4]
  icu_lld_start(icup);
 8002fb2:	4648      	mov	r0, r9
 8002fb4:	f7fe f81c 	bl	8000ff0 <icu_lld_start>
  icup->state = ICU_READY;
 8002fb8:	f889 8000 	strb.w	r8, [r9]
 8002fbc:	f384 8811 	msr	BASEPRI, r4
 8002fc0:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 8002fc4:	4e75      	ldr	r6, [pc, #468]	; (800319c <main+0x71c>)
 8002fc6:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <main+0x720>)
 8002fc8:	6073      	str	r3, [r6, #4]
  icu_lld_start(icup);
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f7fe f810 	bl	8000ff0 <icu_lld_start>
  icup->state = ICU_READY;
 8002fd0:	f886 8000 	strb.w	r8, [r6]
 8002fd4:	f384 8811 	msr	BASEPRI, r4
    
    icuStart(&ICUD2, &icucfgA);
    icuStart(&ICUD5, &icucfgB);
    icuStart(&ICUD3, &icucfgC);
    
    icuStartCapture(&ICUD2);
 8002fd8:	4650      	mov	r0, sl
 8002fda:	f7fe f921 	bl	8001220 <icuStartCapture>
    icuStartCapture(&ICUD5);
 8002fde:	4648      	mov	r0, r9
 8002fe0:	f7fe f91e 	bl	8001220 <icuStartCapture>
    icuStartCapture(&ICUD3);
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f7fe f91b 	bl	8001220 <icuStartCapture>

    //ADC
    palSetGroupMode(GPIOA, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 8002fea:	2203      	movs	r2, #3
 8002fec:	2106      	movs	r1, #6
 8002fee:	486d      	ldr	r0, [pc, #436]	; (80031a4 <main+0x724>)
 8002ff0:	f7fe f8be 	bl	8001170 <_pal_lld_setgroupmode>
                    0, PAL_MODE_INPUT_ANALOG);
    palSetGroupMode(GPIOB, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	2106      	movs	r1, #6
 8002ff8:	486b      	ldr	r0, [pc, #428]	; (80031a8 <main+0x728>)
 8002ffa:	f7fe f8b9 	bl	8001170 <_pal_lld_setgroupmode>
 8002ffe:	f385 8811 	msr	BASEPRI, r5
  if (adcp->state == ADC_STOP) {
 8003002:	783b      	ldrb	r3, [r7, #0]
  adcp->config = config;
 8003004:	607c      	str	r4, [r7, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	f000 80e4 	beq.w	80031d4 <main+0x754>
  adcp->state = ADC_READY;
 800300c:	f04f 0802 	mov.w	r8, #2
 8003010:	f887 8000 	strb.w	r8, [r7]
 8003014:	2400      	movs	r4, #0
 8003016:	f384 8811 	msr	BASEPRI, r4
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 800301a:	4a64      	ldr	r2, [pc, #400]	; (80031ac <main+0x72c>)
 800301c:	6853      	ldr	r3, [r2, #4]
 800301e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003022:	6053      	str	r3, [r2, #4]
 8003024:	2620      	movs	r6, #32
 8003026:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 800302a:	4861      	ldr	r0, [pc, #388]	; (80031b0 <main+0x730>)
 800302c:	f7fd ffc0 	bl	8000fb0 <icu_lld_enable_notifications>
 8003030:	f384 8811 	msr	BASEPRI, r4
 8003034:	f386 8811 	msr	BASEPRI, r6
 8003038:	485e      	ldr	r0, [pc, #376]	; (80031b4 <main+0x734>)
 800303a:	f7fd ffb9 	bl	8000fb0 <icu_lld_enable_notifications>
 800303e:	f384 8811 	msr	BASEPRI, r4
 8003042:	f386 8811 	msr	BASEPRI, r6
 8003046:	4855      	ldr	r0, [pc, #340]	; (800319c <main+0x71c>)
 8003048:	f7fd ffb2 	bl	8000fb0 <icu_lld_enable_notifications>
 800304c:	f384 8811 	msr	BASEPRI, r4
    palSetPadMode(GPIOA,15,PAL_MODE_ALTERNATE(7));
 8003050:	4d54      	ldr	r5, [pc, #336]	; (80031a4 <main+0x724>)
  vtp->vt_func = NULL;
 8003052:	4f59      	ldr	r7, [pc, #356]	; (80031b8 <main+0x738>)
 8003054:	f240 3282 	movw	r2, #898	; 0x382
 8003058:	4628      	mov	r0, r5
 800305a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305e:	f7fe f887 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,3,PAL_MODE_ALTERNATE(7));
 8003062:	f240 3282 	movw	r2, #898	; 0x382
 8003066:	2108      	movs	r1, #8
 8003068:	484f      	ldr	r0, [pc, #316]	; (80031a8 <main+0x728>)
 800306a:	f7fe f881 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,10,PAL_MODE_OUTPUT_PUSHPULL);
 800306e:	2201      	movs	r2, #1
 8003070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003074:	4851      	ldr	r0, [pc, #324]	; (80031bc <main+0x73c>)
 8003076:	f7fe f87b 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,12,PAL_MODE_OUTPUT_PUSHPULL);
 800307a:	2201      	movs	r2, #1
 800307c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003080:	484e      	ldr	r0, [pc, #312]	; (80031bc <main+0x73c>)
 8003082:	f7fe f875 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,8,PAL_MODE_ALTERNATE(1));
 8003086:	4628      	mov	r0, r5
 8003088:	2282      	movs	r2, #130	; 0x82
 800308a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800308e:	f7fe f86f 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,8,PAL_MODE_OUTPUT_PUSHPULL);
 8003092:	2201      	movs	r2, #1
 8003094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003098:	4848      	ldr	r0, [pc, #288]	; (80031bc <main+0x73c>)
 800309a:	f7fe f869 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,9,PAL_MODE_OUTPUT_PUSHPULL);
 800309e:	2201      	movs	r2, #1
 80030a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030a4:	4845      	ldr	r0, [pc, #276]	; (80031bc <main+0x73c>)
 80030a6:	f7fe f863 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,9,PAL_MODE_ALTERNATE(1));
 80030aa:	4628      	mov	r0, r5
 80030ac:	2282      	movs	r2, #130	; 0x82
 80030ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030b2:	f7fe f85d 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,5,PAL_MODE_OUTPUT_PUSHPULL);
 80030b6:	4631      	mov	r1, r6
 80030b8:	2201      	movs	r2, #1
 80030ba:	4840      	ldr	r0, [pc, #256]	; (80031bc <main+0x73c>)
 80030bc:	f7fe f858 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,6,PAL_MODE_OUTPUT_PUSHPULL);
 80030c0:	2201      	movs	r2, #1
 80030c2:	2140      	movs	r1, #64	; 0x40
 80030c4:	483d      	ldr	r0, [pc, #244]	; (80031bc <main+0x73c>)
 80030c6:	f7fe f853 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,10,PAL_MODE_ALTERNATE(1));
 80030ca:	4628      	mov	r0, r5
 80030cc:	2282      	movs	r2, #130	; 0x82
 80030ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030d2:	f7fe f84d 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,0,PAL_MODE_ALTERNATE(1));
 80030d6:	2282      	movs	r2, #130	; 0x82
 80030d8:	2101      	movs	r1, #1
 80030da:	f7fe f849 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,1,PAL_MODE_ALTERNATE(2));
 80030de:	4641      	mov	r1, r8
 80030e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80030e4:	f7fe f844 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,4,PAL_MODE_ALTERNATE(2));
 80030e8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80030ec:	2110      	movs	r1, #16
 80030ee:	482e      	ldr	r0, [pc, #184]	; (80031a8 <main+0x728>)
 80030f0:	f7fe f83e 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,6,PAL_MODE_INPUT_ANALOG);
 80030f4:	4628      	mov	r0, r5
 80030f6:	2203      	movs	r2, #3
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	f7fe f839 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,7,PAL_MODE_INPUT_ANALOG);
 80030fe:	2203      	movs	r2, #3
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	f7fe f835 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,5,PAL_MODE_OUTPUT_PUSHPULL);
 8003106:	4631      	mov	r1, r6
 8003108:	2201      	movs	r2, #1
 800310a:	f7fe f831 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,6,PAL_MODE_OUTPUT_PUSHPULL);
 800310e:	2201      	movs	r2, #1
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	4825      	ldr	r0, [pc, #148]	; (80031a8 <main+0x728>)
 8003114:	f7fe f82c 	bl	8001170 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,7,PAL_MODE_OUTPUT_PUSHPULL);
 8003118:	2201      	movs	r2, #1
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	4827      	ldr	r0, [pc, #156]	; (80031bc <main+0x73c>)
 800311e:	f7fe f827 	bl	8001170 <_pal_lld_setgroupmode>

    for (int8_t i = 0; i < NUM_OF_SENSORS; i++) {
		sensors[i] = 0;
    }

    sensor_thread = chThdCreateStatic(waSensorThread, sizeof(waSensorThread), NORMALPRIO, SensorThread, NULL);
 8003122:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <main+0x740>)
 8003124:	60fc      	str	r4, [r7, #12]
 8003126:	2240      	movs	r2, #64	; 0x40
 8003128:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 800312c:	623c      	str	r4, [r7, #32]
 800312e:	637c      	str	r4, [r7, #52]	; 0x34
 8003130:	4824      	ldr	r0, [pc, #144]	; (80031c4 <main+0x744>)
 8003132:	f7fe fdb5 	bl	8001ca0 <chThdCreateStatic.constprop.36>
}

void init_moving_thread() {
    moving_thread = chThdCreateStatic(waMoveThread, sizeof(waMoveThread), NORMALPRIO, MoveThread, NULL);
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <main+0x748>)
 8003138:	4824      	ldr	r0, [pc, #144]	; (80031cc <main+0x74c>)
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003140:	f7fe fdae 	bl	8001ca0 <chThdCreateStatic.constprop.36>
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <main+0x750>)
 8003146:	4634      	mov	r4, r6
 8003148:	6018      	str	r0, [r3, #0]
    init_pins();
    timer_init();
    init_sensor_thread();
    init_moving_thread();
    
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 800314a:	836e      	strh	r6, [r5, #26]
 800314c:	f384 8811 	msr	BASEPRI, r4
 8003150:	2132      	movs	r1, #50	; 0x32
 8003152:	2008      	movs	r0, #8
 8003154:	f7fe fdec 	bl	8001d30 <chSchGoSleepTimeoutS>
 8003158:	2300      	movs	r3, #0
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	e7f5      	b.n	800314c <main+0x6cc>
  ccer = 0;
 8003160:	2300      	movs	r3, #0
    ccer |= STM32_TIM_CCER_CC1E;
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	e6dc      	b.n	8002f22 <main+0x4a2>
    ccer |= STM32_TIM_CCER_CC2P;
 8003168:	f043 0320 	orr.w	r3, r3, #32
    ccer |= STM32_TIM_CCER_CC2E;
 800316c:	f043 0310 	orr.w	r3, r3, #16
 8003170:	e6e0      	b.n	8002f34 <main+0x4b4>
    ccer |= STM32_TIM_CCER_CC3P;
 8003172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	e6e4      	b.n	8002f46 <main+0x4c6>
    ccer |= STM32_TIM_CCER_CC4P;
 800317c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8003180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003184:	e6e8      	b.n	8002f58 <main+0x4d8>
 8003186:	bf00      	nop
 8003188:	200008d0 	.word	0x200008d0
 800318c:	40010000 	.word	0x40010000
 8003190:	20000800 	.word	0x20000800
 8003194:	080049a0 	.word	0x080049a0
 8003198:	080049c0 	.word	0x080049c0
 800319c:	20000884 	.word	0x20000884
 80031a0:	080049e0 	.word	0x080049e0
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40020400 	.word	0x40020400
 80031ac:	40012300 	.word	0x40012300
 80031b0:	2000086c 	.word	0x2000086c
 80031b4:	2000089c 	.word	0x2000089c
 80031b8:	20000b40 	.word	0x20000b40
 80031bc:	40020800 	.word	0x40020800
 80031c0:	080020c1 	.word	0x080020c1
 80031c4:	20000cd8 	.word	0x20000cd8
 80031c8:	080027d1 	.word	0x080027d1
 80031cc:	20000b90 	.word	0x20000b90
 80031d0:	20000b84 	.word	0x20000b84
      b = dmaStreamAllocate(adcp->dmastp,
 80031d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 80031d6:	4d41      	ldr	r5, [pc, #260]	; (80032dc <main+0x85c>)
 80031d8:	7a51      	ldrb	r1, [r2, #9]
 80031da:	6828      	ldr	r0, [r5, #0]
 80031dc:	408b      	lsls	r3, r1
 80031de:	4203      	tst	r3, r0
 80031e0:	d13a      	bne.n	8003258 <main+0x7d8>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80031e2:	4e3f      	ldr	r6, [pc, #252]	; (80032e0 <main+0x860>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 80031e4:	4303      	orrs	r3, r0
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80031e6:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80031ea:	483e      	ldr	r0, [pc, #248]	; (80032e4 <main+0x864>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 80031ec:	602b      	str	r3, [r5, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80031ee:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80031f2:	6067      	str	r7, [r4, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80031f4:	f846 0031 	str.w	r0, [r6, r1, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80031f8:	d004      	beq.n	8003204 <main+0x784>
    rccEnableDMA1(false);
 80031fa:	483b      	ldr	r0, [pc, #236]	; (80032e8 <main+0x868>)
 80031fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80031fe:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8003202:	6301      	str	r1, [r0, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8003204:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8003208:	d161      	bne.n	80032ce <main+0x84e>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	f021 011f 	bic.w	r1, r1, #31
 8003212:	6019      	str	r1, [r3, #0]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	f011 0101 	ands.w	r1, r1, #1
 800321a:	d1fb      	bne.n	8003214 <main+0x794>
 800321c:	7a14      	ldrb	r4, [r2, #8]
 800321e:	6855      	ldr	r5, [r2, #4]
 8003220:	203d      	movs	r0, #61	; 0x3d
 8003222:	40a0      	lsls	r0, r4
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8003224:	2421      	movs	r4, #33	; 0x21
  dmaStreamDisable(dmastp);
 8003226:	6028      	str	r0, [r5, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8003228:	6019      	str	r1, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800322a:	615c      	str	r4, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 800322c:	7a91      	ldrb	r1, [r2, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800322e:	094b      	lsrs	r3, r1, #5
 8003230:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003232:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
 8003236:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800323a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800323e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003242:	f001 011f 	and.w	r1, r1, #31
 8003246:	2001      	movs	r0, #1
 8003248:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800324c:	2560      	movs	r5, #96	; 0x60
 800324e:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003252:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003256:	6019      	str	r1, [r3, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8003258:	6813      	ldr	r3, [r2, #0]
      rccEnableADC1(FALSE);
 800325a:	4923      	ldr	r1, [pc, #140]	; (80032e8 <main+0x868>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <main+0x86c>)
 800325e:	609a      	str	r2, [r3, #8]
      rccEnableADC1(FALSE);
 8003260:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8003262:	4823      	ldr	r0, [pc, #140]	; (80032f0 <main+0x870>)
    adcp->adc->CR1 = 0;
 8003264:	6aba      	ldr	r2, [r7, #40]	; 0x28
      rccEnableADC1(FALSE);
 8003266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326a:	644b      	str	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800326c:	6843      	ldr	r3, [r0, #4]
 800326e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    adcp->adc->CR1 = 0;
 8003272:	2100      	movs	r1, #0
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 8003278:	2401      	movs	r4, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800327a:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
 800327c:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 800327e:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8003280:	6094      	str	r4, [r2, #8]
 8003282:	e6c3      	b.n	800300c <main+0x58c>
      rccEnableTIM1(FALSE);
 8003284:	4818      	ldr	r0, [pc, #96]	; (80032e8 <main+0x868>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003286:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <main+0x874>)
 8003288:	6c45      	ldr	r5, [r0, #68]	; 0x44
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800328a:	f8d6 c018 	ldr.w	ip, [r6, #24]
      rccEnableTIM1(FALSE);
 800328e:	f045 0501 	orr.w	r5, r5, #1
 8003292:	6445      	str	r5, [r0, #68]	; 0x44
      rccResetTIM1();
 8003294:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003296:	f045 0501 	orr.w	r5, r5, #1
 800329a:	6245      	str	r5, [r0, #36]	; 0x24
 800329c:	6243      	str	r3, [r0, #36]	; 0x24
 800329e:	2370      	movs	r3, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032a0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80032a4:	f882 3319 	strb.w	r3, [r2, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032a8:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80032ac:	6010      	str	r0, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032ae:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80032b2:	f882 331b 	strb.w	r3, [r2, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80032b6:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80032ba:	f646 0368 	movw	r3, #26728	; 0x6868
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80032be:	6010      	str	r0, [r2, #0]
      pwmp->clock = STM32_TIMCLK2;
 80032c0:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <main+0x878>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80032c2:	f8cc 3018 	str.w	r3, [ip, #24]
      pwmp->clock = STM32_TIMCLK2;
 80032c6:	6172      	str	r2, [r6, #20]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 80032c8:	f8cc 301c 	str.w	r3, [ip, #28]
 80032cc:	e614      	b.n	8002ef8 <main+0x478>
    rccEnableDMA2(false);
 80032ce:	4906      	ldr	r1, [pc, #24]	; (80032e8 <main+0x868>)
 80032d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80032d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032d6:	630b      	str	r3, [r1, #48]	; 0x30
 80032d8:	e797      	b.n	800320a <main+0x78a>
 80032da:	bf00      	nop
 80032dc:	20000b38 	.word	0x20000b38
 80032e0:	20000ab8 	.word	0x20000ab8
 80032e4:	08001b01 	.word	0x08001b01
 80032e8:	40023800 	.word	0x40023800
 80032ec:	4001204c 	.word	0x4001204c
 80032f0:	40012300 	.word	0x40012300
 80032f4:	e000e100 	.word	0xe000e100
 80032f8:	05b8d800 	.word	0x05b8d800
 80032fc:	00000000 	.word	0x00000000

08003300 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <__early_init+0xa0>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003302:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <__early_init+0xa4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8003304:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8003308:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800330c:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800330e:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	0790      	lsls	r0, r2, #30
 800331c:	d5fc      	bpl.n	8003318 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800331e:	6899      	ldr	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003320:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <__early_init+0xa0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8003322:	f021 0103 	bic.w	r1, r1, #3
 8003326:	6099      	str	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800332c:	6891      	ldr	r1, [r2, #8]
 800332e:	f011 010c 	ands.w	r1, r1, #12
 8003332:	d1fb      	bne.n	800332c <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003334:	6810      	ldr	r0, [r2, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <__early_init+0xa0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003338:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800333c:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800333e:	6091      	str	r1, [r2, #8]
  RCC->CSR |= RCC_CSR_LSION;
 8003340:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8003342:	f041 0101 	orr.w	r1, r1, #1
 8003346:	6751      	str	r1, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003348:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800334a:	0791      	lsls	r1, r2, #30
 800334c:	d5fc      	bpl.n	8003348 <__early_init+0x48>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <__early_init+0xa8>)
 8003350:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003352:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003354:	4913      	ldr	r1, [pc, #76]	; (80033a4 <__early_init+0xa4>)
  RCC->CR |= RCC_CR_PLLON;
 8003356:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800335a:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800335c:	684b      	ldr	r3, [r1, #4]
 800335e:	045a      	lsls	r2, r3, #17
 8003360:	d5fc      	bpl.n	800335c <__early_init+0x5c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003362:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <__early_init+0xa0>)
 8003364:	6813      	ldr	r3, [r2, #0]
 8003366:	019b      	lsls	r3, r3, #6
 8003368:	d5fc      	bpl.n	8003364 <__early_init+0x64>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <__early_init+0xac>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800336c:	4910      	ldr	r1, [pc, #64]	; (80033b0 <__early_init+0xb0>)
 800336e:	6091      	str	r1, [r2, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003370:	f240 7103 	movw	r1, #1795	; 0x703
 8003374:	6019      	str	r1, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003376:	6891      	ldr	r1, [r2, #8]
 8003378:	f041 0102 	orr.w	r1, r1, #2
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800337c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003380:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	f002 020c 	and.w	r2, r2, #12
 8003388:	2a08      	cmp	r2, #8
 800338a:	d1fa      	bne.n	8003382 <__early_init+0x82>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800338c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
 8003394:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800339a:	665a      	str	r2, [r3, #100]	; 0x64
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000
 80033a8:	08016010 	.word	0x08016010
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	38881000 	.word	0x38881000
	...

080033c0 <chThdExit>:
void chThdExit(msg_t msg) {
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	2320      	movs	r3, #32
 80033c4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <chThdExit+0x40>)
 80033ca:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 80033cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
 80033ce:	6220      	str	r0, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 80033d0:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80033d4:	42ab      	cmp	r3, r5
 80033d6:	d007      	beq.n	80033e8 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fa1f 	bl	8001820 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 80033e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 80033e4:	42ab      	cmp	r3, r5
 80033e6:	d1f7      	bne.n	80033d8 <chThdExit+0x18>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80033e8:	7f63      	ldrb	r3, [r4, #29]
 80033ea:	079b      	lsls	r3, r3, #30
 80033ec:	d103      	bne.n	80033f6 <chThdExit+0x36>
    REG_REMOVE(tp);
 80033ee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80033f2:	6113      	str	r3, [r2, #16]
 80033f4:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80033f6:	200f      	movs	r0, #15
}
 80033f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80033fc:	f7fe bc80 	b.w	8001d00 <chSchGoSleepS>
 8003400:	20000948 	.word	0x20000948
	...

08003410 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8003410:	490d      	ldr	r1, [pc, #52]	; (8003448 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 8003412:	6808      	ldr	r0, [r1, #0]
 8003414:	698a      	ldr	r2, [r1, #24]
  tqp->p_next = tp->p_next;
 8003416:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8003418:	b430      	push	{r4, r5}
  if (otp->p_prio == IDLEPRIO) {
 800341a:	6895      	ldr	r5, [r2, #8]
 800341c:	600b      	str	r3, [r1, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800341e:	6059      	str	r1, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 8003420:	2401      	movs	r4, #1
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8003422:	6188      	str	r0, [r1, #24]
  otp->p_state = CH_STATE_READY;
 8003424:	2100      	movs	r1, #0
  currp->p_state = CH_STATE_CURRENT;
 8003426:	7704      	strb	r4, [r0, #28]
  otp->p_state = CH_STATE_READY;
 8003428:	7711      	strb	r1, [r2, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800342a:	e000      	b.n	800342e <chSchDoReschedule+0x1e>
 800342c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	428d      	cmp	r5, r1
 8003432:	d3fb      	bcc.n	800342c <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 8003434:	685c      	ldr	r4, [r3, #4]
  chSysSwitch(currp, otp);
 8003436:	4611      	mov	r1, r2
  otp->p_prev = cp->p_prev;
 8003438:	e9c2 3400 	strd	r3, r4, [r2]
  otp->p_prev->p_next = otp;
 800343c:	6022      	str	r2, [r4, #0]
  cp->p_prev = otp;
 800343e:	605a      	str	r2, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8003440:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8003442:	f7fc bf25 	b.w	8000290 <_port_switch>
 8003446:	bf00      	nop
 8003448:	20000948 	.word	0x20000948
 800344c:	00000000 	.word	0x00000000

08003450 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003450:	b4f0      	push	{r4, r5, r6, r7}
 8003452:	4f14      	ldr	r7, [pc, #80]	; (80034a4 <__init_ram_areas+0x54>)
 8003454:	4d14      	ldr	r5, [pc, #80]	; (80034a8 <__init_ram_areas+0x58>)
 8003456:	4815      	ldr	r0, [pc, #84]	; (80034ac <__init_ram_areas+0x5c>)
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <__init_ram_areas+0x60>)
 800345a:	4916      	ldr	r1, [pc, #88]	; (80034b4 <__init_ram_areas+0x64>)
 800345c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8003460:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8003462:	4298      	cmp	r0, r3
 8003464:	d911      	bls.n	800348a <__init_ram_areas+0x3a>
 8003466:	3904      	subs	r1, #4
 8003468:	461a      	mov	r2, r3
      *p = *tp;
 800346a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800346e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8003472:	4290      	cmp	r0, r2
 8003474:	d8f9      	bhi.n	800346a <__init_ram_areas+0x1a>
 8003476:	1e42      	subs	r2, r0, #1
 8003478:	1ad2      	subs	r2, r2, r3
 800347a:	f022 0203 	bic.w	r2, r2, #3
 800347e:	3204      	adds	r2, #4
 8003480:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8003482:	429d      	cmp	r5, r3
 8003484:	d903      	bls.n	800348e <__init_ram_areas+0x3e>
      *p = 0;
 8003486:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800348a:	429d      	cmp	r5, r3
 800348c:	d8fb      	bhi.n	8003486 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800348e:	4567      	cmp	r7, ip
 8003490:	d005      	beq.n	800349e <__init_ram_areas+0x4e>
 8003492:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8003496:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800349a:	3710      	adds	r7, #16
 800349c:	e7e1      	b.n	8003462 <__init_ram_areas+0x12>
#endif
}
 800349e:	bcf0      	pop	{r4, r5, r6, r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	08004aa0 	.word	0x08004aa0
 80034a8:	20000fa0 	.word	0x20000fa0
 80034ac:	20000fa0 	.word	0x20000fa0
 80034b0:	20000fa0 	.word	0x20000fa0
 80034b4:	08004d54 	.word	0x08004d54
	...

080034c0 <__default_exit>:
  }
 80034c0:	e7fe      	b.n	80034c0 <__default_exit>
 80034c2:	bf00      	nop
	...

080034d0 <__late_init>:
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
	...

080034e0 <__core_init>:
}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
	...

080034f0 <sin>:
 80034f0:	b530      	push	{r4, r5, lr}
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <sin+0x8c>)
 80034f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80034f8:	4293      	cmp	r3, r2
 80034fa:	b087      	sub	sp, #28
 80034fc:	dd1b      	ble.n	8003536 <sin+0x46>
 80034fe:	4a20      	ldr	r2, [pc, #128]	; (8003580 <sin+0x90>)
 8003500:	4293      	cmp	r3, r2
 8003502:	dd05      	ble.n	8003510 <sin+0x20>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	f7fc fede 	bl	80002c8 <__aeabi_dsub>
 800350c:	b007      	add	sp, #28
 800350e:	bd30      	pop	{r4, r5, pc}
 8003510:	aa02      	add	r2, sp, #8
 8003512:	f000 f845 	bl	80035a0 <__ieee754_rem_pio2>
 8003516:	f000 0003 	and.w	r0, r0, #3
 800351a:	2801      	cmp	r0, #1
 800351c:	d013      	beq.n	8003546 <sin+0x56>
 800351e:	2802      	cmp	r0, #2
 8003520:	d021      	beq.n	8003566 <sin+0x76>
 8003522:	b1b8      	cbz	r0, 8003554 <sin+0x64>
 8003524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800352c:	f000 fa58 	bl	80039e0 <__kernel_cos>
 8003530:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003534:	e7ea      	b.n	800350c <sin+0x1c>
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	2300      	movs	r3, #0
 800353e:	f000 ff97 	bl	8004470 <__kernel_sin>
 8003542:	b007      	add	sp, #28
 8003544:	bd30      	pop	{r4, r5, pc}
 8003546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800354a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800354e:	f000 fa47 	bl	80039e0 <__kernel_cos>
 8003552:	e7db      	b.n	800350c <sin+0x1c>
 8003554:	2301      	movs	r3, #1
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800355c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003560:	f000 ff86 	bl	8004470 <__kernel_sin>
 8003564:	e7d2      	b.n	800350c <sin+0x1c>
 8003566:	2301      	movs	r3, #1
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800356e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003572:	f000 ff7d 	bl	8004470 <__kernel_sin>
 8003576:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800357a:	e7c7      	b.n	800350c <sin+0x1c>
 800357c:	3fe921fb 	.word	0x3fe921fb
 8003580:	7fefffff 	.word	0x7fefffff
	...

08003590 <truncl>:
 8003590:	f001 b936 	b.w	8004800 <trunc>
	...

080035a0 <__ieee754_rem_pio2>:
 80035a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a4:	4cbe      	ldr	r4, [pc, #760]	; (80038a0 <__ieee754_rem_pio2+0x300>)
 80035a6:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80035aa:	42a5      	cmp	r5, r4
 80035ac:	b08f      	sub	sp, #60	; 0x3c
 80035ae:	f340 8082 	ble.w	80036b6 <__ieee754_rem_pio2+0x116>
 80035b2:	4614      	mov	r4, r2
 80035b4:	4abb      	ldr	r2, [pc, #748]	; (80038a4 <__ieee754_rem_pio2+0x304>)
 80035b6:	4295      	cmp	r5, r2
 80035b8:	460e      	mov	r6, r1
 80035ba:	dc26      	bgt.n	800360a <__ieee754_rem_pio2+0x6a>
 80035bc:	2900      	cmp	r1, #0
 80035be:	a3ae      	add	r3, pc, #696	; (adr r3, 8003878 <__ieee754_rem_pio2+0x2d8>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f340 81b3 	ble.w	800392e <__ieee754_rem_pio2+0x38e>
 80035c8:	f7fc fe7e 	bl	80002c8 <__aeabi_dsub>
 80035cc:	4bb6      	ldr	r3, [pc, #728]	; (80038a8 <__ieee754_rem_pio2+0x308>)
 80035ce:	429d      	cmp	r5, r3
 80035d0:	4606      	mov	r6, r0
 80035d2:	460f      	mov	r7, r1
 80035d4:	f000 8084 	beq.w	80036e0 <__ieee754_rem_pio2+0x140>
 80035d8:	a3a9      	add	r3, pc, #676	; (adr r3, 8003880 <__ieee754_rem_pio2+0x2e0>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f7fc fe73 	bl	80002c8 <__aeabi_dsub>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	e9c4 2300 	strd	r2, r3, [r4]
 80035ea:	4639      	mov	r1, r7
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7fc fe6b 	bl	80002c8 <__aeabi_dsub>
 80035f2:	a3a3      	add	r3, pc, #652	; (adr r3, 8003880 <__ieee754_rem_pio2+0x2e0>)
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f7fc fe66 	bl	80002c8 <__aeabi_dsub>
 80035fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003600:	2701      	movs	r7, #1
 8003602:	4638      	mov	r0, r7
 8003604:	b00f      	add	sp, #60	; 0x3c
 8003606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800360a:	4aa8      	ldr	r2, [pc, #672]	; (80038ac <__ieee754_rem_pio2+0x30c>)
 800360c:	4295      	cmp	r5, r2
 800360e:	f340 8087 	ble.w	8003720 <__ieee754_rem_pio2+0x180>
 8003612:	4aa7      	ldr	r2, [pc, #668]	; (80038b0 <__ieee754_rem_pio2+0x310>)
 8003614:	4295      	cmp	r5, r2
 8003616:	dc59      	bgt.n	80036cc <__ieee754_rem_pio2+0x12c>
 8003618:	152f      	asrs	r7, r5, #20
 800361a:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
 800361e:	eba5 5107 	sub.w	r1, r5, r7, lsl #20
 8003622:	4689      	mov	r9, r1
 8003624:	4680      	mov	r8, r0
 8003626:	f7fd faab 	bl	8000b80 <__aeabi_d2iz>
 800362a:	f7fc ff9b 	bl	8000564 <__aeabi_i2d>
 800362e:	4682      	mov	sl, r0
 8003630:	468b      	mov	fp, r1
 8003632:	4640      	mov	r0, r8
 8003634:	4649      	mov	r1, r9
 8003636:	4652      	mov	r2, sl
 8003638:	465b      	mov	r3, fp
 800363a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800363e:	f7fc fe43 	bl	80002c8 <__aeabi_dsub>
 8003642:	2200      	movs	r2, #0
 8003644:	4b9b      	ldr	r3, [pc, #620]	; (80038b4 <__ieee754_rem_pio2+0x314>)
 8003646:	f7fc fffb 	bl	8000640 <__aeabi_dmul>
 800364a:	4689      	mov	r9, r1
 800364c:	4680      	mov	r8, r0
 800364e:	f7fd fa97 	bl	8000b80 <__aeabi_d2iz>
 8003652:	4605      	mov	r5, r0
 8003654:	f7fc ff86 	bl	8000564 <__aeabi_i2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4640      	mov	r0, r8
 800365e:	4649      	mov	r1, r9
 8003660:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003664:	f7fc fe30 	bl	80002c8 <__aeabi_dsub>
 8003668:	2200      	movs	r2, #0
 800366a:	4b92      	ldr	r3, [pc, #584]	; (80038b4 <__ieee754_rem_pio2+0x314>)
 800366c:	f7fc ffe8 	bl	8000640 <__aeabi_dmul>
 8003670:	2200      	movs	r2, #0
 8003672:	2300      	movs	r3, #0
 8003674:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003678:	f7fd fa50 	bl	8000b1c <__aeabi_dcmpeq>
 800367c:	2800      	cmp	r0, #0
 800367e:	f000 80f6 	beq.w	800386e <__ieee754_rem_pio2+0x2ce>
 8003682:	2d00      	cmp	r5, #0
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2302      	movne	r3, #2
 800368a:	4a8b      	ldr	r2, [pc, #556]	; (80038b8 <__ieee754_rem_pio2+0x318>)
 800368c:	9201      	str	r2, [sp, #4]
 800368e:	2102      	movs	r1, #2
 8003690:	463a      	mov	r2, r7
 8003692:	9100      	str	r1, [sp, #0]
 8003694:	a808      	add	r0, sp, #32
 8003696:	4621      	mov	r1, r4
 8003698:	f000 faca 	bl	8003c30 <__kernel_rem_pio2>
 800369c:	2e00      	cmp	r6, #0
 800369e:	4607      	mov	r7, r0
 80036a0:	daaf      	bge.n	8003602 <__ieee754_rem_pio2+0x62>
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	68e3      	ldr	r3, [r4, #12]
 80036a6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80036aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80036ae:	4247      	negs	r7, r0
 80036b0:	6062      	str	r2, [r4, #4]
 80036b2:	60e3      	str	r3, [r4, #12]
 80036b4:	e7a5      	b.n	8003602 <__ieee754_rem_pio2+0x62>
 80036b6:	2700      	movs	r7, #0
 80036b8:	2400      	movs	r4, #0
 80036ba:	2500      	movs	r5, #0
 80036bc:	e9c2 0100 	strd	r0, r1, [r2]
 80036c0:	4638      	mov	r0, r7
 80036c2:	e9c2 4502 	strd	r4, r5, [r2, #8]
 80036c6:	b00f      	add	sp, #60	; 0x3c
 80036c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	f7fc fdfa 	bl	80002c8 <__aeabi_dsub>
 80036d4:	2700      	movs	r7, #0
 80036d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80036da:	e9c4 0100 	strd	r0, r1, [r4]
 80036de:	e790      	b.n	8003602 <__ieee754_rem_pio2+0x62>
 80036e0:	a369      	add	r3, pc, #420	; (adr r3, 8003888 <__ieee754_rem_pio2+0x2e8>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f7fc fdef 	bl	80002c8 <__aeabi_dsub>
 80036ea:	a369      	add	r3, pc, #420	; (adr r3, 8003890 <__ieee754_rem_pio2+0x2f0>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	4606      	mov	r6, r0
 80036f2:	460f      	mov	r7, r1
 80036f4:	f7fc fde8 	bl	80002c8 <__aeabi_dsub>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	e9c4 2300 	strd	r2, r3, [r4]
 8003700:	4630      	mov	r0, r6
 8003702:	4639      	mov	r1, r7
 8003704:	f7fc fde0 	bl	80002c8 <__aeabi_dsub>
 8003708:	a361      	add	r3, pc, #388	; (adr r3, 8003890 <__ieee754_rem_pio2+0x2f0>)
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f7fc fddb 	bl	80002c8 <__aeabi_dsub>
 8003712:	2701      	movs	r7, #1
 8003714:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003718:	4638      	mov	r0, r7
 800371a:	b00f      	add	sp, #60	; 0x3c
 800371c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003720:	f000 ff5e 	bl	80045e0 <fabs>
 8003724:	a35c      	add	r3, pc, #368	; (adr r3, 8003898 <__ieee754_rem_pio2+0x2f8>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	4680      	mov	r8, r0
 800372c:	4689      	mov	r9, r1
 800372e:	f7fc ff87 	bl	8000640 <__aeabi_dmul>
 8003732:	2200      	movs	r2, #0
 8003734:	4b61      	ldr	r3, [pc, #388]	; (80038bc <__ieee754_rem_pio2+0x31c>)
 8003736:	f7fc fdc9 	bl	80002cc <__adddf3>
 800373a:	f7fd fa21 	bl	8000b80 <__aeabi_d2iz>
 800373e:	4607      	mov	r7, r0
 8003740:	f7fc ff10 	bl	8000564 <__aeabi_i2d>
 8003744:	a34c      	add	r3, pc, #304	; (adr r3, 8003878 <__ieee754_rem_pio2+0x2d8>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	4682      	mov	sl, r0
 800374c:	468b      	mov	fp, r1
 800374e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003752:	f7fc ff75 	bl	8000640 <__aeabi_dmul>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4640      	mov	r0, r8
 800375c:	4649      	mov	r1, r9
 800375e:	f7fc fdb3 	bl	80002c8 <__aeabi_dsub>
 8003762:	a347      	add	r3, pc, #284	; (adr r3, 8003880 <__ieee754_rem_pio2+0x2e0>)
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800376c:	4650      	mov	r0, sl
 800376e:	4659      	mov	r1, fp
 8003770:	f7fc ff66 	bl	8000640 <__aeabi_dmul>
 8003774:	2f1f      	cmp	r7, #31
 8003776:	4680      	mov	r8, r0
 8003778:	4689      	mov	r9, r1
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003782:	dc28      	bgt.n	80037d6 <__ieee754_rem_pio2+0x236>
 8003784:	f7fc fda0 	bl	80002c8 <__aeabi_dsub>
 8003788:	4b4d      	ldr	r3, [pc, #308]	; (80038c0 <__ieee754_rem_pio2+0x320>)
 800378a:	1e7a      	subs	r2, r7, #1
 800378c:	4683      	mov	fp, r0
 800378e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003792:	42ab      	cmp	r3, r5
 8003794:	468a      	mov	sl, r1
 8003796:	d022      	beq.n	80037de <__ieee754_rem_pio2+0x23e>
 8003798:	465a      	mov	r2, fp
 800379a:	4653      	mov	r3, sl
 800379c:	e9c4 2300 	strd	r2, r3, [r4]
 80037a0:	465a      	mov	r2, fp
 80037a2:	4653      	mov	r3, sl
 80037a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037a8:	f7fc fd8e 	bl	80002c8 <__aeabi_dsub>
 80037ac:	4642      	mov	r2, r8
 80037ae:	464b      	mov	r3, r9
 80037b0:	f7fc fd8a 	bl	80002c8 <__aeabi_dsub>
 80037b4:	2e00      	cmp	r6, #0
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80037be:	f6bf af20 	bge.w	8003602 <__ieee754_rem_pio2+0x62>
 80037c2:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80037c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80037ca:	e9c4 b300 	strd	fp, r3, [r4]
 80037ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80037d2:	427f      	negs	r7, r7
 80037d4:	e715      	b.n	8003602 <__ieee754_rem_pio2+0x62>
 80037d6:	f7fc fd77 	bl	80002c8 <__aeabi_dsub>
 80037da:	4683      	mov	fp, r0
 80037dc:	468a      	mov	sl, r1
 80037de:	152d      	asrs	r5, r5, #20
 80037e0:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80037e4:	1aeb      	subs	r3, r5, r3
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	ddd6      	ble.n	8003798 <__ieee754_rem_pio2+0x1f8>
 80037ea:	a327      	add	r3, pc, #156	; (adr r3, 8003888 <__ieee754_rem_pio2+0x2e8>)
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037f4:	f7fc ff24 	bl	8000640 <__aeabi_dmul>
 80037f8:	4680      	mov	r8, r0
 80037fa:	4689      	mov	r9, r1
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003804:	f7fc fd60 	bl	80002c8 <__aeabi_dsub>
 8003808:	4682      	mov	sl, r0
 800380a:	468b      	mov	fp, r1
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003814:	f7fc fd58 	bl	80002c8 <__aeabi_dsub>
 8003818:	4642      	mov	r2, r8
 800381a:	464b      	mov	r3, r9
 800381c:	f7fc fd54 	bl	80002c8 <__aeabi_dsub>
 8003820:	a31b      	add	r3, pc, #108	; (adr r3, 8003890 <__ieee754_rem_pio2+0x2f0>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	4680      	mov	r8, r0
 8003828:	4689      	mov	r9, r1
 800382a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800382e:	f7fc ff07 	bl	8000640 <__aeabi_dmul>
 8003832:	4642      	mov	r2, r8
 8003834:	464b      	mov	r3, r9
 8003836:	f7fc fd47 	bl	80002c8 <__aeabi_dsub>
 800383a:	460b      	mov	r3, r1
 800383c:	4602      	mov	r2, r0
 800383e:	4680      	mov	r8, r0
 8003840:	4689      	mov	r9, r1
 8003842:	4650      	mov	r0, sl
 8003844:	4659      	mov	r1, fp
 8003846:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800384a:	f7fc fd3d 	bl	80002c8 <__aeabi_dsub>
 800384e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003852:	1aed      	subs	r5, r5, r3
 8003854:	2d31      	cmp	r5, #49	; 0x31
 8003856:	4683      	mov	fp, r0
 8003858:	468a      	mov	sl, r1
 800385a:	dc33      	bgt.n	80038c4 <__ieee754_rem_pio2+0x324>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	e9c4 2300 	strd	r2, r3, [r4]
 8003864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003868:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800386c:	e798      	b.n	80037a0 <__ieee754_rem_pio2+0x200>
 800386e:	2303      	movs	r3, #3
 8003870:	e70b      	b.n	800368a <__ieee754_rem_pio2+0xea>
 8003872:	bf00      	nop
 8003874:	f3af 8000 	nop.w
 8003878:	54400000 	.word	0x54400000
 800387c:	3ff921fb 	.word	0x3ff921fb
 8003880:	1a626331 	.word	0x1a626331
 8003884:	3dd0b461 	.word	0x3dd0b461
 8003888:	1a600000 	.word	0x1a600000
 800388c:	3dd0b461 	.word	0x3dd0b461
 8003890:	2e037073 	.word	0x2e037073
 8003894:	3ba3198a 	.word	0x3ba3198a
 8003898:	6dc9c883 	.word	0x6dc9c883
 800389c:	3fe45f30 	.word	0x3fe45f30
 80038a0:	3fe921fb 	.word	0x3fe921fb
 80038a4:	4002d97b 	.word	0x4002d97b
 80038a8:	3ff921fb 	.word	0x3ff921fb
 80038ac:	413921fb 	.word	0x413921fb
 80038b0:	7fefffff 	.word	0x7fefffff
 80038b4:	41700000 	.word	0x41700000
 80038b8:	08004bc0 	.word	0x08004bc0
 80038bc:	3fe00000 	.word	0x3fe00000
 80038c0:	08004b40 	.word	0x08004b40
 80038c4:	a338      	add	r3, pc, #224	; (adr r3, 80039a8 <__ieee754_rem_pio2+0x408>)
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038ce:	f7fc feb7 	bl	8000640 <__aeabi_dmul>
 80038d2:	4680      	mov	r8, r0
 80038d4:	4689      	mov	r9, r1
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038de:	f7fc fcf3 	bl	80002c8 <__aeabi_dsub>
 80038e2:	4682      	mov	sl, r0
 80038e4:	468b      	mov	fp, r1
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038ee:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80038f2:	f7fc fce9 	bl	80002c8 <__aeabi_dsub>
 80038f6:	4642      	mov	r2, r8
 80038f8:	464b      	mov	r3, r9
 80038fa:	f7fc fce5 	bl	80002c8 <__aeabi_dsub>
 80038fe:	a32c      	add	r3, pc, #176	; (adr r3, 80039b0 <__ieee754_rem_pio2+0x410>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	4680      	mov	r8, r0
 8003906:	4689      	mov	r9, r1
 8003908:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800390c:	f7fc fe98 	bl	8000640 <__aeabi_dmul>
 8003910:	4642      	mov	r2, r8
 8003912:	464b      	mov	r3, r9
 8003914:	f7fc fcd8 	bl	80002c8 <__aeabi_dsub>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4680      	mov	r8, r0
 800391e:	4689      	mov	r9, r1
 8003920:	4650      	mov	r0, sl
 8003922:	4659      	mov	r1, fp
 8003924:	f7fc fcd0 	bl	80002c8 <__aeabi_dsub>
 8003928:	4683      	mov	fp, r0
 800392a:	468a      	mov	sl, r1
 800392c:	e734      	b.n	8003798 <__ieee754_rem_pio2+0x1f8>
 800392e:	f7fc fccd 	bl	80002cc <__adddf3>
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <__ieee754_rem_pio2+0x430>)
 8003934:	429d      	cmp	r5, r3
 8003936:	4606      	mov	r6, r0
 8003938:	460f      	mov	r7, r1
 800393a:	d016      	beq.n	800396a <__ieee754_rem_pio2+0x3ca>
 800393c:	a31e      	add	r3, pc, #120	; (adr r3, 80039b8 <__ieee754_rem_pio2+0x418>)
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f7fc fcc3 	bl	80002cc <__adddf3>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	e9c4 2300 	strd	r2, r3, [r4]
 800394e:	4639      	mov	r1, r7
 8003950:	4630      	mov	r0, r6
 8003952:	f7fc fcb9 	bl	80002c8 <__aeabi_dsub>
 8003956:	a318      	add	r3, pc, #96	; (adr r3, 80039b8 <__ieee754_rem_pio2+0x418>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f7fc fcb6 	bl	80002cc <__adddf3>
 8003960:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003964:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003968:	e64b      	b.n	8003602 <__ieee754_rem_pio2+0x62>
 800396a:	a315      	add	r3, pc, #84	; (adr r3, 80039c0 <__ieee754_rem_pio2+0x420>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f7fc fcac 	bl	80002cc <__adddf3>
 8003974:	a314      	add	r3, pc, #80	; (adr r3, 80039c8 <__ieee754_rem_pio2+0x428>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	460f      	mov	r7, r1
 800397c:	4606      	mov	r6, r0
 800397e:	f7fc fca5 	bl	80002cc <__adddf3>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	e9c4 2300 	strd	r2, r3, [r4]
 800398a:	4639      	mov	r1, r7
 800398c:	4630      	mov	r0, r6
 800398e:	f7fc fc9b 	bl	80002c8 <__aeabi_dsub>
 8003992:	a30d      	add	r3, pc, #52	; (adr r3, 80039c8 <__ieee754_rem_pio2+0x428>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f7fc fc98 	bl	80002cc <__adddf3>
 800399c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80039a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80039a4:	e62d      	b.n	8003602 <__ieee754_rem_pio2+0x62>
 80039a6:	bf00      	nop
 80039a8:	2e000000 	.word	0x2e000000
 80039ac:	3ba3198a 	.word	0x3ba3198a
 80039b0:	252049c1 	.word	0x252049c1
 80039b4:	397b839a 	.word	0x397b839a
 80039b8:	1a626331 	.word	0x1a626331
 80039bc:	3dd0b461 	.word	0x3dd0b461
 80039c0:	1a600000 	.word	0x1a600000
 80039c4:	3dd0b461 	.word	0x3dd0b461
 80039c8:	2e037073 	.word	0x2e037073
 80039cc:	3ba3198a 	.word	0x3ba3198a
 80039d0:	3ff921fb 	.word	0x3ff921fb
	...

080039e0 <__kernel_cos>:
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80039e8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80039ec:	b085      	sub	sp, #20
 80039ee:	460c      	mov	r4, r1
 80039f0:	4692      	mov	sl, r2
 80039f2:	469b      	mov	fp, r3
 80039f4:	4605      	mov	r5, r0
 80039f6:	da6b      	bge.n	8003ad0 <__kernel_cos+0xf0>
 80039f8:	f7fd f8c2 	bl	8000b80 <__aeabi_d2iz>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	f000 80e8 	beq.w	8003bd2 <__kernel_cos+0x1f2>
 8003a02:	462a      	mov	r2, r5
 8003a04:	4623      	mov	r3, r4
 8003a06:	4628      	mov	r0, r5
 8003a08:	4621      	mov	r1, r4
 8003a0a:	f7fc fe19 	bl	8000640 <__aeabi_dmul>
 8003a0e:	a374      	add	r3, pc, #464	; (adr r3, 8003be0 <__kernel_cos+0x200>)
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	4680      	mov	r8, r0
 8003a16:	4689      	mov	r9, r1
 8003a18:	f7fc fe12 	bl	8000640 <__aeabi_dmul>
 8003a1c:	a372      	add	r3, pc, #456	; (adr r3, 8003be8 <__kernel_cos+0x208>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f7fc fc53 	bl	80002cc <__adddf3>
 8003a26:	4642      	mov	r2, r8
 8003a28:	464b      	mov	r3, r9
 8003a2a:	f7fc fe09 	bl	8000640 <__aeabi_dmul>
 8003a2e:	a370      	add	r3, pc, #448	; (adr r3, 8003bf0 <__kernel_cos+0x210>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f7fc fc48 	bl	80002c8 <__aeabi_dsub>
 8003a38:	4642      	mov	r2, r8
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	f7fc fe00 	bl	8000640 <__aeabi_dmul>
 8003a40:	a36d      	add	r3, pc, #436	; (adr r3, 8003bf8 <__kernel_cos+0x218>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f7fc fc41 	bl	80002cc <__adddf3>
 8003a4a:	4642      	mov	r2, r8
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	f7fc fdf7 	bl	8000640 <__aeabi_dmul>
 8003a52:	a36b      	add	r3, pc, #428	; (adr r3, 8003c00 <__kernel_cos+0x220>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fc36 	bl	80002c8 <__aeabi_dsub>
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	f7fc fdee 	bl	8000640 <__aeabi_dmul>
 8003a64:	a368      	add	r3, pc, #416	; (adr r3, 8003c08 <__kernel_cos+0x228>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f7fc fc2f 	bl	80002cc <__adddf3>
 8003a6e:	4642      	mov	r2, r8
 8003a70:	464b      	mov	r3, r9
 8003a72:	f7fc fde5 	bl	8000640 <__aeabi_dmul>
 8003a76:	e9cd 0100 	strd	r0, r1, [sp]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	4b64      	ldr	r3, [pc, #400]	; (8003c10 <__kernel_cos+0x230>)
 8003a7e:	4640      	mov	r0, r8
 8003a80:	4649      	mov	r1, r9
 8003a82:	f7fc fddd 	bl	8000640 <__aeabi_dmul>
 8003a86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	460f      	mov	r7, r1
 8003a8e:	4640      	mov	r0, r8
 8003a90:	4649      	mov	r1, r9
 8003a92:	f7fc fdd5 	bl	8000640 <__aeabi_dmul>
 8003a96:	4652      	mov	r2, sl
 8003a98:	4680      	mov	r8, r0
 8003a9a:	4689      	mov	r9, r1
 8003a9c:	465b      	mov	r3, fp
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	f7fc fdcd 	bl	8000640 <__aeabi_dmul>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4640      	mov	r0, r8
 8003aac:	4649      	mov	r1, r9
 8003aae:	f7fc fc0b 	bl	80002c8 <__aeabi_dsub>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	4639      	mov	r1, r7
 8003aba:	f7fc fc05 	bl	80002c8 <__aeabi_dsub>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	4953      	ldr	r1, [pc, #332]	; (8003c14 <__kernel_cos+0x234>)
 8003ac6:	f7fc fbff 	bl	80002c8 <__aeabi_dsub>
 8003aca:	b005      	add	sp, #20
 8003acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	f7fc fdb4 	bl	8000640 <__aeabi_dmul>
 8003ad8:	a341      	add	r3, pc, #260	; (adr r3, 8003be0 <__kernel_cos+0x200>)
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	4680      	mov	r8, r0
 8003ae0:	4689      	mov	r9, r1
 8003ae2:	f7fc fdad 	bl	8000640 <__aeabi_dmul>
 8003ae6:	a340      	add	r3, pc, #256	; (adr r3, 8003be8 <__kernel_cos+0x208>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fbee 	bl	80002cc <__adddf3>
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	f7fc fda4 	bl	8000640 <__aeabi_dmul>
 8003af8:	a33d      	add	r3, pc, #244	; (adr r3, 8003bf0 <__kernel_cos+0x210>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc fbe3 	bl	80002c8 <__aeabi_dsub>
 8003b02:	4642      	mov	r2, r8
 8003b04:	464b      	mov	r3, r9
 8003b06:	f7fc fd9b 	bl	8000640 <__aeabi_dmul>
 8003b0a:	a33b      	add	r3, pc, #236	; (adr r3, 8003bf8 <__kernel_cos+0x218>)
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f7fc fbdc 	bl	80002cc <__adddf3>
 8003b14:	4642      	mov	r2, r8
 8003b16:	464b      	mov	r3, r9
 8003b18:	f7fc fd92 	bl	8000640 <__aeabi_dmul>
 8003b1c:	a338      	add	r3, pc, #224	; (adr r3, 8003c00 <__kernel_cos+0x220>)
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	f7fc fbd1 	bl	80002c8 <__aeabi_dsub>
 8003b26:	4642      	mov	r2, r8
 8003b28:	464b      	mov	r3, r9
 8003b2a:	f7fc fd89 	bl	8000640 <__aeabi_dmul>
 8003b2e:	a336      	add	r3, pc, #216	; (adr r3, 8003c08 <__kernel_cos+0x228>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f7fc fbca 	bl	80002cc <__adddf3>
 8003b38:	464b      	mov	r3, r9
 8003b3a:	4642      	mov	r2, r8
 8003b3c:	f7fc fd80 	bl	8000640 <__aeabi_dmul>
 8003b40:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <__kernel_cos+0x238>)
 8003b42:	429e      	cmp	r6, r3
 8003b44:	e9cd 0100 	strd	r0, r1, [sp]
 8003b48:	dd97      	ble.n	8003a7a <__kernel_cos+0x9a>
 8003b4a:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <__kernel_cos+0x23c>)
 8003b4c:	429e      	cmp	r6, r3
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	dc38      	bgt.n	8003bc6 <__kernel_cos+0x1e6>
 8003b54:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 8003b58:	2000      	movs	r0, #0
 8003b5a:	492e      	ldr	r1, [pc, #184]	; (8003c14 <__kernel_cos+0x234>)
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	461f      	mov	r7, r3
 8003b60:	f7fc fbb2 	bl	80002c8 <__aeabi_dsub>
 8003b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <__kernel_cos+0x230>)
 8003b6c:	4640      	mov	r0, r8
 8003b6e:	4649      	mov	r1, r9
 8003b70:	f7fc fd66 	bl	8000640 <__aeabi_dmul>
 8003b74:	4632      	mov	r2, r6
 8003b76:	463b      	mov	r3, r7
 8003b78:	f7fc fba6 	bl	80002c8 <__aeabi_dsub>
 8003b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b80:	4606      	mov	r6, r0
 8003b82:	460f      	mov	r7, r1
 8003b84:	4640      	mov	r0, r8
 8003b86:	4649      	mov	r1, r9
 8003b88:	f7fc fd5a 	bl	8000640 <__aeabi_dmul>
 8003b8c:	4652      	mov	r2, sl
 8003b8e:	4680      	mov	r8, r0
 8003b90:	4689      	mov	r9, r1
 8003b92:	465b      	mov	r3, fp
 8003b94:	4628      	mov	r0, r5
 8003b96:	4621      	mov	r1, r4
 8003b98:	f7fc fd52 	bl	8000640 <__aeabi_dmul>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	f7fc fb90 	bl	80002c8 <__aeabi_dsub>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4630      	mov	r0, r6
 8003bae:	4639      	mov	r1, r7
 8003bb0:	f7fc fb8a 	bl	80002c8 <__aeabi_dsub>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bbc:	f7fc fb84 	bl	80002c8 <__aeabi_dsub>
 8003bc0:	b005      	add	sp, #20
 8003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <__kernel_cos+0x240>)
 8003bc8:	4f16      	ldr	r7, [pc, #88]	; (8003c24 <__kernel_cos+0x244>)
 8003bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bce:	2600      	movs	r6, #0
 8003bd0:	e7ca      	b.n	8003b68 <__kernel_cos+0x188>
 8003bd2:	4910      	ldr	r1, [pc, #64]	; (8003c14 <__kernel_cos+0x234>)
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	b005      	add	sp, #20
 8003bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bdc:	f3af 8000 	nop.w
 8003be0:	be8838d4 	.word	0xbe8838d4
 8003be4:	bda8fae9 	.word	0xbda8fae9
 8003be8:	bdb4b1c4 	.word	0xbdb4b1c4
 8003bec:	3e21ee9e 	.word	0x3e21ee9e
 8003bf0:	809c52ad 	.word	0x809c52ad
 8003bf4:	3e927e4f 	.word	0x3e927e4f
 8003bf8:	19cb1590 	.word	0x19cb1590
 8003bfc:	3efa01a0 	.word	0x3efa01a0
 8003c00:	16c15177 	.word	0x16c15177
 8003c04:	3f56c16c 	.word	0x3f56c16c
 8003c08:	5555554c 	.word	0x5555554c
 8003c0c:	3fa55555 	.word	0x3fa55555
 8003c10:	3fe00000 	.word	0x3fe00000
 8003c14:	3ff00000 	.word	0x3ff00000
 8003c18:	3fd33332 	.word	0x3fd33332
 8003c1c:	3fe90000 	.word	0x3fe90000
 8003c20:	3fe70000 	.word	0x3fe70000
 8003c24:	3fd20000 	.word	0x3fd20000
	...

08003c30 <__kernel_rem_pio2>:
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003c38:	4cb6      	ldr	r4, [pc, #728]	; (8003f14 <__kernel_rem_pio2+0x2e4>)
 8003c3a:	9da2      	ldr	r5, [sp, #648]	; 0x288
 8003c3c:	9308      	str	r3, [sp, #32]
 8003c3e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8003c42:	9405      	str	r4, [sp, #20]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	f112 0f14 	cmn.w	r2, #20
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c4e:	9303      	str	r3, [sp, #12]
 8003c50:	f2c0 82c8 	blt.w	80041e4 <__kernel_rem_pio2+0x5b4>
 8003c54:	49b0      	ldr	r1, [pc, #704]	; (8003f18 <__kernel_rem_pio2+0x2e8>)
 8003c56:	1ed3      	subs	r3, r2, #3
 8003c58:	fb81 0103 	smull	r0, r1, r1, r3
 8003c5c:	17db      	asrs	r3, r3, #31
 8003c5e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8003c62:	9307      	str	r3, [sp, #28]
 8003c64:	3301      	adds	r3, #1
 8003c66:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	9306      	str	r3, [sp, #24]
 8003c70:	9a07      	ldr	r2, [sp, #28]
 8003c72:	9b03      	ldr	r3, [sp, #12]
 8003c74:	1ad4      	subs	r4, r2, r3
 8003c76:	9a05      	ldr	r2, [sp, #20]
 8003c78:	18d7      	adds	r7, r2, r3
 8003c7a:	d41b      	bmi.n	8003cb4 <__kernel_rem_pio2+0x84>
 8003c7c:	3701      	adds	r7, #1
 8003c7e:	4427      	add	r7, r4
 8003c80:	ad20      	add	r5, sp, #128	; 0x80
 8003c82:	f04f 0800 	mov.w	r8, #0
 8003c86:	f04f 0900 	mov.w	r9, #0
 8003c8a:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 8003c8e:	e008      	b.n	8003ca2 <__kernel_rem_pio2+0x72>
 8003c90:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8003c94:	f7fc fc66 	bl	8000564 <__aeabi_i2d>
 8003c98:	3401      	adds	r4, #1
 8003c9a:	42bc      	cmp	r4, r7
 8003c9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003ca0:	d008      	beq.n	8003cb4 <__kernel_rem_pio2+0x84>
 8003ca2:	2c00      	cmp	r4, #0
 8003ca4:	daf4      	bge.n	8003c90 <__kernel_rem_pio2+0x60>
 8003ca6:	3401      	adds	r4, #1
 8003ca8:	4640      	mov	r0, r8
 8003caa:	4649      	mov	r1, r9
 8003cac:	42bc      	cmp	r4, r7
 8003cae:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003cb2:	d1f6      	bne.n	8003ca2 <__kernel_rem_pio2+0x72>
 8003cb4:	9b05      	ldr	r3, [sp, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f2c0 83b5 	blt.w	8004426 <__kernel_rem_pio2+0x7f6>
 8003cbc:	9b08      	ldr	r3, [sp, #32]
 8003cbe:	f1a6 0208 	sub.w	r2, r6, #8
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	eb02 0803 	add.w	r8, r2, r3
 8003cc8:	9204      	str	r2, [sp, #16]
 8003cca:	aa20      	add	r2, sp, #128	; 0x80
 8003ccc:	eb02 0a03 	add.w	sl, r2, r3
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	9b05      	ldr	r3, [sp, #20]
 8003cd4:	aa72      	add	r2, sp, #456	; 0x1c8
 8003cd6:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
 8003cda:	f50d 79e0 	add.w	r9, sp, #448	; 0x1c0
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f2c0 819a 	blt.w	800401a <__kernel_rem_pio2+0x3ea>
 8003ce6:	9c04      	ldr	r4, [sp, #16]
 8003ce8:	4655      	mov	r5, sl
 8003cea:	2600      	movs	r6, #0
 8003cec:	2700      	movs	r7, #0
 8003cee:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003cf2:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
 8003cf6:	f7fc fca3 	bl	8000640 <__aeabi_dmul>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4630      	mov	r0, r6
 8003d00:	4639      	mov	r1, r7
 8003d02:	f7fc fae3 	bl	80002cc <__adddf3>
 8003d06:	4544      	cmp	r4, r8
 8003d08:	4606      	mov	r6, r0
 8003d0a:	460f      	mov	r7, r1
 8003d0c:	d1ef      	bne.n	8003cee <__kernel_rem_pio2+0xbe>
 8003d0e:	e8e9 6702 	strd	r6, r7, [r9], #8
 8003d12:	45d9      	cmp	r9, fp
 8003d14:	f10a 0a08 	add.w	sl, sl, #8
 8003d18:	d1e1      	bne.n	8003cde <__kernel_rem_pio2+0xae>
 8003d1a:	9801      	ldr	r0, [sp, #4]
 8003d1c:	9c04      	ldr	r4, [sp, #16]
 8003d1e:	9905      	ldr	r1, [sp, #20]
 8003d20:	9101      	str	r1, [sp, #4]
 8003d22:	4420      	add	r0, r4
 8003d24:	008b      	lsls	r3, r1, #2
 8003d26:	4683      	mov	fp, r0
 8003d28:	a80b      	add	r0, sp, #44	; 0x2c
 8003d2a:	f1a3 0208 	sub.w	r2, r3, #8
 8003d2e:	18c3      	adds	r3, r0, r3
 8003d30:	930a      	str	r3, [sp, #40]	; 0x28
 8003d32:	ab0c      	add	r3, sp, #48	; 0x30
 8003d34:	4413      	add	r3, r2
 8003d36:	9309      	str	r3, [sp, #36]	; 0x24
 8003d38:	9a01      	ldr	r2, [sp, #4]
 8003d3a:	a998      	add	r1, sp, #608	; 0x260
 8003d3c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003d46:	dd29      	ble.n	8003d9c <__kernel_rem_pio2+0x16c>
 8003d48:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8003d4c:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 8003d50:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003d54:	2200      	movs	r2, #0
 8003d56:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <__kernel_rem_pio2+0x2ec>)
 8003d58:	4620      	mov	r0, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	f7fc fc70 	bl	8000640 <__aeabi_dmul>
 8003d60:	f7fc ff0e 	bl	8000b80 <__aeabi_d2iz>
 8003d64:	f7fc fbfe 	bl	8000564 <__aeabi_i2d>
 8003d68:	2200      	movs	r2, #0
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	; (8003f20 <__kernel_rem_pio2+0x2f0>)
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	460f      	mov	r7, r1
 8003d70:	f7fc fc66 	bl	8000640 <__aeabi_dmul>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4620      	mov	r0, r4
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	f7fc faa4 	bl	80002c8 <__aeabi_dsub>
 8003d80:	f7fc fefe 	bl	8000b80 <__aeabi_d2iz>
 8003d84:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8003d88:	f849 0b04 	str.w	r0, [r9], #4
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f7fc fa9c 	bl	80002cc <__adddf3>
 8003d94:	45d0      	cmp	r8, sl
 8003d96:	4604      	mov	r4, r0
 8003d98:	460d      	mov	r5, r1
 8003d9a:	d1db      	bne.n	8003d54 <__kernel_rem_pio2+0x124>
 8003d9c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003da0:	4620      	mov	r0, r4
 8003da2:	4629      	mov	r1, r5
 8003da4:	464a      	mov	r2, r9
 8003da6:	f000 fcab 	bl	8004700 <scalbn>
 8003daa:	2200      	movs	r2, #0
 8003dac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003db0:	4604      	mov	r4, r0
 8003db2:	460d      	mov	r5, r1
 8003db4:	f7fc fc44 	bl	8000640 <__aeabi_dmul>
 8003db8:	f000 fc1a 	bl	80045f0 <floor>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <__kernel_rem_pio2+0x2f4>)
 8003dc0:	f7fc fc3e 	bl	8000640 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4620      	mov	r0, r4
 8003dca:	4629      	mov	r1, r5
 8003dcc:	f7fc fa7c 	bl	80002c8 <__aeabi_dsub>
 8003dd0:	460d      	mov	r5, r1
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	f7fc fed4 	bl	8000b80 <__aeabi_d2iz>
 8003dd8:	4680      	mov	r8, r0
 8003dda:	f7fc fbc3 	bl	8000564 <__aeabi_i2d>
 8003dde:	460b      	mov	r3, r1
 8003de0:	4602      	mov	r2, r0
 8003de2:	4629      	mov	r1, r5
 8003de4:	4620      	mov	r0, r4
 8003de6:	f7fc fa6f 	bl	80002c8 <__aeabi_dsub>
 8003dea:	464b      	mov	r3, r9
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	4606      	mov	r6, r0
 8003df0:	460f      	mov	r7, r1
 8003df2:	f340 8099 	ble.w	8003f28 <__kernel_rem_pio2+0x2f8>
 8003df6:	9a01      	ldr	r2, [sp, #4]
 8003df8:	a90c      	add	r1, sp, #48	; 0x30
 8003dfa:	3a01      	subs	r2, #1
 8003dfc:	f1c9 0318 	rsb	r3, r9, #24
 8003e00:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 8003e04:	fa45 f103 	asr.w	r1, r5, r3
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	1aeb      	subs	r3, r5, r3
 8003e0e:	f1c9 0517 	rsb	r5, r9, #23
 8003e12:	a80c      	add	r0, sp, #48	; 0x30
 8003e14:	fa43 f505 	asr.w	r5, r3, r5
 8003e18:	2d00      	cmp	r5, #0
 8003e1a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003e1e:	4488      	add	r8, r1
 8003e20:	f300 808c 	bgt.w	8003f3c <__kernel_rem_pio2+0x30c>
 8003e24:	2200      	movs	r2, #0
 8003e26:	2300      	movs	r3, #0
 8003e28:	4630      	mov	r0, r6
 8003e2a:	4639      	mov	r1, r7
 8003e2c:	f7fc fe76 	bl	8000b1c <__aeabi_dcmpeq>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f000 829c 	beq.w	800436e <__kernel_rem_pio2+0x73e>
 8003e36:	9b01      	ldr	r3, [sp, #4]
 8003e38:	9a05      	ldr	r2, [sp, #20]
 8003e3a:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8003e3e:	454a      	cmp	r2, r9
 8003e40:	dc10      	bgt.n	8003e64 <__kernel_rem_pio2+0x234>
 8003e42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e46:	aa0c      	add	r2, sp, #48	; 0x30
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e50:	2200      	movs	r2, #0
 8003e52:	f853 1904 	ldr.w	r1, [r3], #-4
 8003e56:	4283      	cmp	r3, r0
 8003e58:	ea42 0201 	orr.w	r2, r2, r1
 8003e5c:	d1f9      	bne.n	8003e52 <__kernel_rem_pio2+0x222>
 8003e5e:	2a00      	cmp	r2, #0
 8003e60:	f040 80e5 	bne.w	800402e <__kernel_rem_pio2+0x3fe>
 8003e64:	9b05      	ldr	r3, [sp, #20]
 8003e66:	aa0c      	add	r2, sp, #48	; 0x30
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80ce 	bne.w	8004010 <__kernel_rem_pio2+0x3e0>
 8003e74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e76:	2301      	movs	r3, #1
 8003e78:	f852 1904 	ldr.w	r1, [r2], #-4
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	d0fa      	beq.n	8003e78 <__kernel_rem_pio2+0x248>
 8003e82:	9901      	ldr	r1, [sp, #4]
 8003e84:	1c4a      	adds	r2, r1, #1
 8003e86:	18cb      	adds	r3, r1, r3
 8003e88:	9302      	str	r3, [sp, #8]
 8003e8a:	4691      	mov	r9, r2
 8003e8c:	9b07      	ldr	r3, [sp, #28]
 8003e8e:	9908      	ldr	r1, [sp, #32]
 8003e90:	eb02 0a03 	add.w	sl, r2, r3
 8003e94:	9b01      	ldr	r3, [sp, #4]
 8003e96:	440b      	add	r3, r1
 8003e98:	461d      	mov	r5, r3
 8003e9a:	ab20      	add	r3, sp, #128	; 0x80
 8003e9c:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 8003ea0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003ea4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003ea6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003eaa:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8003eae:	ab70      	add	r3, sp, #448	; 0x1c0
 8003eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8003eba:	f7fc fb53 	bl	8000564 <__aeabi_i2d>
 8003ebe:	9b03      	ldr	r3, [sp, #12]
 8003ec0:	46a8      	mov	r8, r5
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	e8e8 0102 	strd	r0, r1, [r8], #8
 8003ec8:	db20      	blt.n	8003f0c <__kernel_rem_pio2+0x2dc>
 8003eca:	3d08      	subs	r5, #8
 8003ecc:	9c04      	ldr	r4, [sp, #16]
 8003ece:	2600      	movs	r6, #0
 8003ed0:	2700      	movs	r7, #0
 8003ed2:	e001      	b.n	8003ed8 <__kernel_rem_pio2+0x2a8>
 8003ed4:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8003ed8:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8003edc:	f7fc fbb0 	bl	8000640 <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	f7fc f9f0 	bl	80002cc <__adddf3>
 8003eec:	455c      	cmp	r4, fp
 8003eee:	4606      	mov	r6, r0
 8003ef0:	460f      	mov	r7, r1
 8003ef2:	d1ef      	bne.n	8003ed4 <__kernel_rem_pio2+0x2a4>
 8003ef4:	9b01      	ldr	r3, [sp, #4]
 8003ef6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	9b02      	ldr	r3, [sp, #8]
 8003efe:	f109 0901 	add.w	r9, r9, #1
 8003f02:	4599      	cmp	r9, r3
 8003f04:	4645      	mov	r5, r8
 8003f06:	ddd6      	ble.n	8003eb6 <__kernel_rem_pio2+0x286>
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	e715      	b.n	8003d38 <__kernel_rem_pio2+0x108>
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	2700      	movs	r7, #0
 8003f10:	e7f0      	b.n	8003ef4 <__kernel_rem_pio2+0x2c4>
 8003f12:	bf00      	nop
 8003f14:	08004d10 	.word	0x08004d10
 8003f18:	2aaaaaab 	.word	0x2aaaaaab
 8003f1c:	3e700000 	.word	0x3e700000
 8003f20:	41700000 	.word	0x41700000
 8003f24:	40200000 	.word	0x40200000
 8003f28:	d169      	bne.n	8003ffe <__kernel_rem_pio2+0x3ce>
 8003f2a:	9b01      	ldr	r3, [sp, #4]
 8003f2c:	aa0c      	add	r2, sp, #48	; 0x30
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003f34:	15ed      	asrs	r5, r5, #23
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	f77f af74 	ble.w	8003e24 <__kernel_rem_pio2+0x1f4>
 8003f3c:	9b01      	ldr	r3, [sp, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f108 0801 	add.w	r8, r8, #1
 8003f44:	f340 8211 	ble.w	800436a <__kernel_rem_pio2+0x73a>
 8003f48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003f4a:	2c00      	cmp	r4, #0
 8003f4c:	d13a      	bne.n	8003fc4 <__kernel_rem_pio2+0x394>
 8003f4e:	9b01      	ldr	r3, [sp, #4]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d009      	beq.n	8003f68 <__kernel_rem_pio2+0x338>
 8003f54:	a90c      	add	r1, sp, #48	; 0x30
 8003f56:	2201      	movs	r2, #1
 8003f58:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8003f5c:	1c53      	adds	r3, r2, #1
 8003f5e:	bb9c      	cbnz	r4, 8003fc8 <__kernel_rem_pio2+0x398>
 8003f60:	461a      	mov	r2, r3
 8003f62:	9b01      	ldr	r3, [sp, #4]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d1f7      	bne.n	8003f58 <__kernel_rem_pio2+0x328>
 8003f68:	9b06      	ldr	r3, [sp, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	dd0e      	ble.n	8003f8c <__kernel_rem_pio2+0x35c>
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	f000 811b 	beq.w	80041aa <__kernel_rem_pio2+0x57a>
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d109      	bne.n	8003f8c <__kernel_rem_pio2+0x35c>
 8003f78:	9b01      	ldr	r3, [sp, #4]
 8003f7a:	1e5a      	subs	r2, r3, #1
 8003f7c:	ab0c      	add	r3, sp, #48	; 0x30
 8003f7e:	a90c      	add	r1, sp, #48	; 0x30
 8003f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003f88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003f8c:	2d02      	cmp	r5, #2
 8003f8e:	f47f af49 	bne.w	8003e24 <__kernel_rem_pio2+0x1f4>
 8003f92:	4632      	mov	r2, r6
 8003f94:	463b      	mov	r3, r7
 8003f96:	2000      	movs	r0, #0
 8003f98:	4997      	ldr	r1, [pc, #604]	; (80041f8 <__kernel_rem_pio2+0x5c8>)
 8003f9a:	f7fc f995 	bl	80002c8 <__aeabi_dsub>
 8003f9e:	4606      	mov	r6, r0
 8003fa0:	460f      	mov	r7, r1
 8003fa2:	2c00      	cmp	r4, #0
 8003fa4:	f43f af3e 	beq.w	8003e24 <__kernel_rem_pio2+0x1f4>
 8003fa8:	9a06      	ldr	r2, [sp, #24]
 8003faa:	4993      	ldr	r1, [pc, #588]	; (80041f8 <__kernel_rem_pio2+0x5c8>)
 8003fac:	2000      	movs	r0, #0
 8003fae:	f000 fba7 	bl	8004700 <scalbn>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	4639      	mov	r1, r7
 8003fba:	f7fc f985 	bl	80002c8 <__aeabi_dsub>
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	460f      	mov	r7, r1
 8003fc2:	e72f      	b.n	8003e24 <__kernel_rem_pio2+0x1f4>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	a90c      	add	r1, sp, #48	; 0x30
 8003fca:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 8003fce:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 8003fd2:	9901      	ldr	r1, [sp, #4]
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	dd10      	ble.n	8003ffa <__kernel_rem_pio2+0x3ca>
 8003fd8:	aa0c      	add	r2, sp, #48	; 0x30
 8003fda:	a80c      	add	r0, sp, #48	; 0x30
 8003fdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003fe0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003fe4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003fe8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003fec:	e000      	b.n	8003ff0 <__kernel_rem_pio2+0x3c0>
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	1a8a      	subs	r2, r1, r2
 8003ff2:	f843 2b04 	str.w	r2, [r3], #4
 8003ff6:	4283      	cmp	r3, r0
 8003ff8:	d1f9      	bne.n	8003fee <__kernel_rem_pio2+0x3be>
 8003ffa:	2401      	movs	r4, #1
 8003ffc:	e7b4      	b.n	8003f68 <__kernel_rem_pio2+0x338>
 8003ffe:	2200      	movs	r2, #0
 8004000:	4b7e      	ldr	r3, [pc, #504]	; (80041fc <__kernel_rem_pio2+0x5cc>)
 8004002:	f7fc fda9 	bl	8000b58 <__aeabi_dcmpge>
 8004006:	2800      	cmp	r0, #0
 8004008:	f040 80da 	bne.w	80041c0 <__kernel_rem_pio2+0x590>
 800400c:	4605      	mov	r5, r0
 800400e:	e709      	b.n	8003e24 <__kernel_rem_pio2+0x1f4>
 8004010:	9b01      	ldr	r3, [sp, #4]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	4691      	mov	r9, r2
 8004016:	9202      	str	r2, [sp, #8]
 8004018:	e738      	b.n	8003e8c <__kernel_rem_pio2+0x25c>
 800401a:	2600      	movs	r6, #0
 800401c:	2700      	movs	r7, #0
 800401e:	e8e9 6702 	strd	r6, r7, [r9], #8
 8004022:	45d9      	cmp	r9, fp
 8004024:	f10a 0a08 	add.w	sl, sl, #8
 8004028:	f47f ae59 	bne.w	8003cde <__kernel_rem_pio2+0xae>
 800402c:	e675      	b.n	8003d1a <__kernel_rem_pio2+0xea>
 800402e:	ab0c      	add	r3, sp, #48	; 0x30
 8004030:	9a06      	ldr	r2, [sp, #24]
 8004032:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8004036:	f8cd 801c 	str.w	r8, [sp, #28]
 800403a:	3a18      	subs	r2, #24
 800403c:	9504      	str	r5, [sp, #16]
 800403e:	9206      	str	r2, [sp, #24]
 8004040:	b973      	cbnz	r3, 8004060 <__kernel_rem_pio2+0x430>
 8004042:	9b01      	ldr	r3, [sp, #4]
 8004044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004048:	3b02      	subs	r3, #2
 800404a:	a90c      	add	r1, sp, #48	; 0x30
 800404c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004050:	f853 1904 	ldr.w	r1, [r3], #-4
 8004054:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004058:	3a18      	subs	r2, #24
 800405a:	2900      	cmp	r1, #0
 800405c:	d0f8      	beq.n	8004050 <__kernel_rem_pio2+0x420>
 800405e:	9206      	str	r2, [sp, #24]
 8004060:	9a06      	ldr	r2, [sp, #24]
 8004062:	4965      	ldr	r1, [pc, #404]	; (80041f8 <__kernel_rem_pio2+0x5c8>)
 8004064:	2000      	movs	r0, #0
 8004066:	f000 fb4b 	bl	8004700 <scalbn>
 800406a:	f1b9 0f00 	cmp.w	r9, #0
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	f2c0 81df 	blt.w	8004434 <__kernel_rem_pio2+0x804>
 8004076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407a:	aa70      	add	r2, sp, #448	; 0x1c0
 800407c:	eb02 0803 	add.w	r8, r2, r3
 8004080:	9306      	str	r3, [sp, #24]
 8004082:	f109 0601 	add.w	r6, r9, #1
 8004086:	ab0c      	add	r3, sp, #48	; 0x30
 8004088:	f8df b174 	ldr.w	fp, [pc, #372]	; 8004200 <__kernel_rem_pio2+0x5d0>
 800408c:	f108 0708 	add.w	r7, r8, #8
 8004090:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8004094:	f04f 0a00 	mov.w	sl, #0
 8004098:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 800409c:	f7fc fa62 	bl	8000564 <__aeabi_i2d>
 80040a0:	4622      	mov	r2, r4
 80040a2:	462b      	mov	r3, r5
 80040a4:	f7fc facc 	bl	8000640 <__aeabi_dmul>
 80040a8:	465b      	mov	r3, fp
 80040aa:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80040ae:	4652      	mov	r2, sl
 80040b0:	4620      	mov	r0, r4
 80040b2:	4629      	mov	r1, r5
 80040b4:	f7fc fac4 	bl	8000640 <__aeabi_dmul>
 80040b8:	ab0c      	add	r3, sp, #48	; 0x30
 80040ba:	429e      	cmp	r6, r3
 80040bc:	4604      	mov	r4, r0
 80040be:	460d      	mov	r5, r1
 80040c0:	d1ea      	bne.n	8004098 <__kernel_rem_pio2+0x468>
 80040c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80040c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80040ca:	ab48      	add	r3, sp, #288	; 0x120
 80040cc:	f1b9 0f00 	cmp.w	r9, #0
 80040d0:	9303      	str	r3, [sp, #12]
 80040d2:	46c3      	mov	fp, r8
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	f04f 0a00 	mov.w	sl, #0
 80040da:	db2b      	blt.n	8004134 <__kernel_rem_pio2+0x504>
 80040dc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8004204 <__kernel_rem_pio2+0x5d4>
 80040e0:	465d      	mov	r5, fp
 80040e2:	a343      	add	r3, pc, #268	; (adr r3, 80041f0 <__kernel_rem_pio2+0x5c0>)
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	2600      	movs	r6, #0
 80040ea:	2700      	movs	r7, #0
 80040ec:	2400      	movs	r4, #0
 80040ee:	e003      	b.n	80040f8 <__kernel_rem_pio2+0x4c8>
 80040f0:	4554      	cmp	r4, sl
 80040f2:	dc10      	bgt.n	8004116 <__kernel_rem_pio2+0x4e6>
 80040f4:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80040f8:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80040fc:	f7fc faa0 	bl	8000640 <__aeabi_dmul>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4630      	mov	r0, r6
 8004106:	4639      	mov	r1, r7
 8004108:	f7fc f8e0 	bl	80002cc <__adddf3>
 800410c:	3401      	adds	r4, #1
 800410e:	45a1      	cmp	r9, r4
 8004110:	4606      	mov	r6, r0
 8004112:	460f      	mov	r7, r1
 8004114:	daec      	bge.n	80040f0 <__kernel_rem_pio2+0x4c0>
 8004116:	9b01      	ldr	r3, [sp, #4]
 8004118:	9a02      	ldr	r2, [sp, #8]
 800411a:	e8e3 6702 	strd	r6, r7, [r3], #8
 800411e:	4592      	cmp	sl, r2
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	f1ab 0b08 	sub.w	fp, fp, #8
 8004126:	f10a 0301 	add.w	r3, sl, #1
 800412a:	d006      	beq.n	800413a <__kernel_rem_pio2+0x50a>
 800412c:	f1b9 0f00 	cmp.w	r9, #0
 8004130:	469a      	mov	sl, r3
 8004132:	dad3      	bge.n	80040dc <__kernel_rem_pio2+0x4ac>
 8004134:	2600      	movs	r6, #0
 8004136:	2700      	movs	r7, #0
 8004138:	e7ed      	b.n	8004116 <__kernel_rem_pio2+0x4e6>
 800413a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800413c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d82b      	bhi.n	800419c <__kernel_rem_pio2+0x56c>
 8004144:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004148:	00e000f1 	.word	0x00e000f1
 800414c:	006200e0 	.word	0x006200e0
 8004150:	2500      	movs	r5, #0
 8004152:	462c      	mov	r4, r5
 8004154:	4623      	mov	r3, r4
 8004156:	462a      	mov	r2, r5
 8004158:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800415c:	f7fc f8b4 	bl	80002c8 <__aeabi_dsub>
 8004160:	9b04      	ldr	r3, [sp, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 813f 	bne.w	80043e6 <__kernel_rem_pio2+0x7b6>
 8004168:	4623      	mov	r3, r4
 800416a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800416c:	462a      	mov	r2, r5
 800416e:	f1b9 0f00 	cmp.w	r9, #0
 8004172:	e9c4 2300 	strd	r2, r3, [r4]
 8004176:	dd0c      	ble.n	8004192 <__kernel_rem_pio2+0x562>
 8004178:	ad48      	add	r5, sp, #288	; 0x120
 800417a:	2401      	movs	r4, #1
 800417c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8004180:	3401      	adds	r4, #1
 8004182:	f7fc f8a3 	bl	80002cc <__adddf3>
 8004186:	45a1      	cmp	r9, r4
 8004188:	daf8      	bge.n	800417c <__kernel_rem_pio2+0x54c>
 800418a:	9b04      	ldr	r3, [sp, #16]
 800418c:	b10b      	cbz	r3, 8004192 <__kernel_rem_pio2+0x562>
 800418e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004192:	460b      	mov	r3, r1
 8004194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004196:	4602      	mov	r2, r0
 8004198:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800419c:	9b07      	ldr	r3, [sp, #28]
 800419e:	f003 0007 	and.w	r0, r3, #7
 80041a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80041a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041aa:	9b01      	ldr	r3, [sp, #4]
 80041ac:	1e5a      	subs	r2, r3, #1
 80041ae:	ab0c      	add	r3, sp, #48	; 0x30
 80041b0:	a90c      	add	r1, sp, #48	; 0x30
 80041b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80041ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80041be:	e6e5      	b.n	8003f8c <__kernel_rem_pio2+0x35c>
 80041c0:	9b01      	ldr	r3, [sp, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f108 0801 	add.w	r8, r8, #1
 80041c8:	bfc8      	it	gt
 80041ca:	2502      	movgt	r5, #2
 80041cc:	f73f aebc 	bgt.w	8003f48 <__kernel_rem_pio2+0x318>
 80041d0:	4632      	mov	r2, r6
 80041d2:	463b      	mov	r3, r7
 80041d4:	2000      	movs	r0, #0
 80041d6:	4908      	ldr	r1, [pc, #32]	; (80041f8 <__kernel_rem_pio2+0x5c8>)
 80041d8:	f7fc f876 	bl	80002c8 <__aeabi_dsub>
 80041dc:	2502      	movs	r5, #2
 80041de:	4606      	mov	r6, r0
 80041e0:	460f      	mov	r7, r1
 80041e2:	e61f      	b.n	8003e24 <__kernel_rem_pio2+0x1f4>
 80041e4:	2100      	movs	r1, #0
 80041e6:	f06f 0317 	mvn.w	r3, #23
 80041ea:	9107      	str	r1, [sp, #28]
 80041ec:	e53e      	b.n	8003c6c <__kernel_rem_pio2+0x3c>
 80041ee:	bf00      	nop
 80041f0:	40000000 	.word	0x40000000
 80041f4:	3ff921fb 	.word	0x3ff921fb
 80041f8:	3ff00000 	.word	0x3ff00000
 80041fc:	3fe00000 	.word	0x3fe00000
 8004200:	3e700000 	.word	0x3e700000
 8004204:	08004cd8 	.word	0x08004cd8
 8004208:	ab48      	add	r3, sp, #288	; 0x120
 800420a:	9303      	str	r3, [sp, #12]
 800420c:	f1b9 0f00 	cmp.w	r9, #0
 8004210:	f340 8123 	ble.w	800445a <__kernel_rem_pio2+0x82a>
 8004214:	9a03      	ldr	r2, [sp, #12]
 8004216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421a:	eb02 0803 	add.w	r8, r2, r3
 800421e:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	e958 6702 	ldrd	r6, r7, [r8, #-8]
 8004228:	4652      	mov	r2, sl
 800422a:	465b      	mov	r3, fp
 800422c:	4630      	mov	r0, r6
 800422e:	4639      	mov	r1, r7
 8004230:	f7fc f84c 	bl	80002cc <__adddf3>
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4630      	mov	r0, r6
 800423e:	4639      	mov	r1, r7
 8004240:	f7fc f842 	bl	80002c8 <__aeabi_dsub>
 8004244:	465b      	mov	r3, fp
 8004246:	4652      	mov	r2, sl
 8004248:	f7fc f840 	bl	80002cc <__adddf3>
 800424c:	e9c8 0100 	strd	r0, r1, [r8]
 8004250:	e968 4502 	strd	r4, r5, [r8, #-8]!
 8004254:	9b03      	ldr	r3, [sp, #12]
 8004256:	4543      	cmp	r3, r8
 8004258:	46a2      	mov	sl, r4
 800425a:	46ab      	mov	fp, r5
 800425c:	d1e2      	bne.n	8004224 <__kernel_rem_pio2+0x5f4>
 800425e:	f1b9 0f01 	cmp.w	r9, #1
 8004262:	f340 80fa 	ble.w	800445a <__kernel_rem_pio2+0x82a>
 8004266:	9b01      	ldr	r3, [sp, #4]
 8004268:	9a03      	ldr	r2, [sp, #12]
 800426a:	4413      	add	r3, r2
 800426c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8004270:	461c      	mov	r4, r3
 8004272:	461d      	mov	r5, r3
 8004274:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004278:	4652      	mov	r2, sl
 800427a:	465b      	mov	r3, fp
 800427c:	4640      	mov	r0, r8
 800427e:	4649      	mov	r1, r9
 8004280:	f7fc f824 	bl	80002cc <__adddf3>
 8004284:	4606      	mov	r6, r0
 8004286:	460f      	mov	r7, r1
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4640      	mov	r0, r8
 800428e:	4649      	mov	r1, r9
 8004290:	f7fc f81a 	bl	80002c8 <__aeabi_dsub>
 8004294:	465b      	mov	r3, fp
 8004296:	4652      	mov	r2, sl
 8004298:	f7fc f818 	bl	80002cc <__adddf3>
 800429c:	e9c5 0100 	strd	r0, r1, [r5]
 80042a0:	e965 6702 	strd	r6, r7, [r5, #-8]!
 80042a4:	ab4a      	add	r3, sp, #296	; 0x128
 80042a6:	42ab      	cmp	r3, r5
 80042a8:	46b2      	mov	sl, r6
 80042aa:	46bb      	mov	fp, r7
 80042ac:	d1e2      	bne.n	8004274 <__kernel_rem_pio2+0x644>
 80042ae:	9903      	ldr	r1, [sp, #12]
 80042b0:	2300      	movs	r3, #0
 80042b2:	3408      	adds	r4, #8
 80042b4:	461a      	mov	r2, r3
 80042b6:	f101 0510 	add.w	r5, r1, #16
 80042ba:	4618      	mov	r0, r3
 80042bc:	4611      	mov	r1, r2
 80042be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80042c2:	f7fc f803 	bl	80002cc <__adddf3>
 80042c6:	42a5      	cmp	r5, r4
 80042c8:	4603      	mov	r3, r0
 80042ca:	460a      	mov	r2, r1
 80042cc:	d1f5      	bne.n	80042ba <__kernel_rem_pio2+0x68a>
 80042ce:	9903      	ldr	r1, [sp, #12]
 80042d0:	e9d1 8c00 	ldrd	r8, ip, [r1]
 80042d4:	e9d1 e902 	ldrd	lr, r9, [r1, #8]
 80042d8:	9904      	ldr	r1, [sp, #16]
 80042da:	2900      	cmp	r1, #0
 80042dc:	f040 808d 	bne.w	80043fa <__kernel_rem_pio2+0x7ca>
 80042e0:	4618      	mov	r0, r3
 80042e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042e4:	4646      	mov	r6, r8
 80042e6:	4674      	mov	r4, lr
 80042e8:	4667      	mov	r7, ip
 80042ea:	464d      	mov	r5, r9
 80042ec:	4611      	mov	r1, r2
 80042ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80042f2:	e9c3 6700 	strd	r6, r7, [r3]
 80042f6:	e9c3 4502 	strd	r4, r5, [r3, #8]
 80042fa:	9b07      	ldr	r3, [sp, #28]
 80042fc:	f003 0007 	and.w	r0, r3, #7
 8004300:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004308:	9e06      	ldr	r6, [sp, #24]
 800430a:	9f03      	ldr	r7, [sp, #12]
 800430c:	3608      	adds	r6, #8
 800430e:	2500      	movs	r5, #0
 8004310:	443e      	add	r6, r7
 8004312:	462c      	mov	r4, r5
 8004314:	4628      	mov	r0, r5
 8004316:	4621      	mov	r1, r4
 8004318:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800431c:	f7fb ffd6 	bl	80002cc <__adddf3>
 8004320:	42b7      	cmp	r7, r6
 8004322:	4605      	mov	r5, r0
 8004324:	460c      	mov	r4, r1
 8004326:	d1f5      	bne.n	8004314 <__kernel_rem_pio2+0x6e4>
 8004328:	e714      	b.n	8004154 <__kernel_rem_pio2+0x524>
 800432a:	9c06      	ldr	r4, [sp, #24]
 800432c:	9d03      	ldr	r5, [sp, #12]
 800432e:	3408      	adds	r4, #8
 8004330:	2200      	movs	r2, #0
 8004332:	442c      	add	r4, r5
 8004334:	4613      	mov	r3, r2
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800433e:	f7fb ffc5 	bl	80002cc <__adddf3>
 8004342:	42a5      	cmp	r5, r4
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	d1f5      	bne.n	8004336 <__kernel_rem_pio2+0x706>
 800434a:	9904      	ldr	r1, [sp, #16]
 800434c:	b109      	cbz	r1, 8004352 <__kernel_rem_pio2+0x722>
 800434e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004352:	4619      	mov	r1, r3
 8004354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004356:	4610      	mov	r0, r2
 8004358:	e9c3 0100 	strd	r0, r1, [r3]
 800435c:	9b07      	ldr	r3, [sp, #28]
 800435e:	f003 0007 	and.w	r0, r3, #7
 8004362:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436a:	2400      	movs	r4, #0
 800436c:	e5fc      	b.n	8003f68 <__kernel_rem_pio2+0x338>
 800436e:	4639      	mov	r1, r7
 8004370:	9f06      	ldr	r7, [sp, #24]
 8004372:	9504      	str	r5, [sp, #16]
 8004374:	427a      	negs	r2, r7
 8004376:	4630      	mov	r0, r6
 8004378:	f8cd 801c 	str.w	r8, [sp, #28]
 800437c:	f000 f9c0 	bl	8004700 <scalbn>
 8004380:	2200      	movs	r2, #0
 8004382:	4b37      	ldr	r3, [pc, #220]	; (8004460 <__kernel_rem_pio2+0x830>)
 8004384:	4604      	mov	r4, r0
 8004386:	460d      	mov	r5, r1
 8004388:	f7fc fbe6 	bl	8000b58 <__aeabi_dcmpge>
 800438c:	b308      	cbz	r0, 80043d2 <__kernel_rem_pio2+0x7a2>
 800438e:	2200      	movs	r2, #0
 8004390:	4b34      	ldr	r3, [pc, #208]	; (8004464 <__kernel_rem_pio2+0x834>)
 8004392:	4620      	mov	r0, r4
 8004394:	4629      	mov	r1, r5
 8004396:	f7fc f953 	bl	8000640 <__aeabi_dmul>
 800439a:	f7fc fbf1 	bl	8000b80 <__aeabi_d2iz>
 800439e:	4606      	mov	r6, r0
 80043a0:	f7fc f8e0 	bl	8000564 <__aeabi_i2d>
 80043a4:	2200      	movs	r2, #0
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <__kernel_rem_pio2+0x830>)
 80043a8:	f7fc f94a 	bl	8000640 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4620      	mov	r0, r4
 80043b2:	4629      	mov	r1, r5
 80043b4:	f7fb ff88 	bl	80002c8 <__aeabi_dsub>
 80043b8:	f7fc fbe2 	bl	8000b80 <__aeabi_d2iz>
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	aa0c      	add	r2, sp, #48	; 0x30
 80043c0:	f103 0901 	add.w	r9, r3, #1
 80043c4:	3718      	adds	r7, #24
 80043c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80043ca:	9706      	str	r7, [sp, #24]
 80043cc:	f842 6029 	str.w	r6, [r2, r9, lsl #2]
 80043d0:	e646      	b.n	8004060 <__kernel_rem_pio2+0x430>
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fc fbd3 	bl	8000b80 <__aeabi_d2iz>
 80043da:	9b01      	ldr	r3, [sp, #4]
 80043dc:	aa0c      	add	r2, sp, #48	; 0x30
 80043de:	4699      	mov	r9, r3
 80043e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80043e4:	e63c      	b.n	8004060 <__kernel_rem_pio2+0x430>
 80043e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043e8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80043ec:	f1b9 0f00 	cmp.w	r9, #0
 80043f0:	e9c3 5400 	strd	r5, r4, [r3]
 80043f4:	f73f aec0 	bgt.w	8004178 <__kernel_rem_pio2+0x548>
 80043f8:	e6c9      	b.n	800418e <__kernel_rem_pio2+0x55e>
 80043fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	9b07      	ldr	r3, [sp, #28]
 8004400:	f8c4 8000 	str.w	r8, [r4]
 8004404:	f10c 4000 	add.w	r0, ip, #2147483648	; 0x80000000
 8004408:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800440c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8004410:	6060      	str	r0, [r4, #4]
 8004412:	f003 0007 	and.w	r0, r3, #7
 8004416:	60e1      	str	r1, [r4, #12]
 8004418:	6162      	str	r2, [r4, #20]
 800441a:	f8c4 e008 	str.w	lr, [r4, #8]
 800441e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004426:	f1a6 0308 	sub.w	r3, r6, #8
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	9b08      	ldr	r3, [sp, #32]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	e472      	b.n	8003d1a <__kernel_rem_pio2+0xea>
 8004434:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004436:	2b03      	cmp	r3, #3
 8004438:	f63f aeb0 	bhi.w	800419c <__kernel_rem_pio2+0x56c>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <__kernel_rem_pio2+0x814>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004455 	.word	0x08004455
 8004448:	08004151 	.word	0x08004151
 800444c:	08004151 	.word	0x08004151
 8004450:	08004209 	.word	0x08004209
 8004454:	2200      	movs	r2, #0
 8004456:	4613      	mov	r3, r2
 8004458:	e777      	b.n	800434a <__kernel_rem_pio2+0x71a>
 800445a:	2300      	movs	r3, #0
 800445c:	461a      	mov	r2, r3
 800445e:	e736      	b.n	80042ce <__kernel_rem_pio2+0x69e>
 8004460:	41700000 	.word	0x41700000
 8004464:	3e700000 	.word	0x3e700000
	...

08004470 <__kernel_sin>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004478:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800447c:	b085      	sub	sp, #20
 800447e:	460c      	mov	r4, r1
 8004480:	4690      	mov	r8, r2
 8004482:	4699      	mov	r9, r3
 8004484:	4605      	mov	r5, r0
 8004486:	da04      	bge.n	8004492 <__kernel_sin+0x22>
 8004488:	f7fc fb7a 	bl	8000b80 <__aeabi_d2iz>
 800448c:	2800      	cmp	r0, #0
 800448e:	f000 8085 	beq.w	800459c <__kernel_sin+0x12c>
 8004492:	462a      	mov	r2, r5
 8004494:	4623      	mov	r3, r4
 8004496:	4628      	mov	r0, r5
 8004498:	4621      	mov	r1, r4
 800449a:	f7fc f8d1 	bl	8000640 <__aeabi_dmul>
 800449e:	4606      	mov	r6, r0
 80044a0:	460f      	mov	r7, r1
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4628      	mov	r0, r5
 80044a8:	4621      	mov	r1, r4
 80044aa:	f7fc f8c9 	bl	8000640 <__aeabi_dmul>
 80044ae:	a33e      	add	r3, pc, #248	; (adr r3, 80045a8 <__kernel_sin+0x138>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	4682      	mov	sl, r0
 80044b6:	468b      	mov	fp, r1
 80044b8:	4630      	mov	r0, r6
 80044ba:	4639      	mov	r1, r7
 80044bc:	f7fc f8c0 	bl	8000640 <__aeabi_dmul>
 80044c0:	a33b      	add	r3, pc, #236	; (adr r3, 80045b0 <__kernel_sin+0x140>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f7fb feff 	bl	80002c8 <__aeabi_dsub>
 80044ca:	4632      	mov	r2, r6
 80044cc:	463b      	mov	r3, r7
 80044ce:	f7fc f8b7 	bl	8000640 <__aeabi_dmul>
 80044d2:	a339      	add	r3, pc, #228	; (adr r3, 80045b8 <__kernel_sin+0x148>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fb fef8 	bl	80002cc <__adddf3>
 80044dc:	4632      	mov	r2, r6
 80044de:	463b      	mov	r3, r7
 80044e0:	f7fc f8ae 	bl	8000640 <__aeabi_dmul>
 80044e4:	a336      	add	r3, pc, #216	; (adr r3, 80045c0 <__kernel_sin+0x150>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fb feed 	bl	80002c8 <__aeabi_dsub>
 80044ee:	4632      	mov	r2, r6
 80044f0:	463b      	mov	r3, r7
 80044f2:	f7fc f8a5 	bl	8000640 <__aeabi_dmul>
 80044f6:	a334      	add	r3, pc, #208	; (adr r3, 80045c8 <__kernel_sin+0x158>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fb fee6 	bl	80002cc <__adddf3>
 8004500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004502:	e9cd 0100 	strd	r0, r1, [sp]
 8004506:	b39b      	cbz	r3, 8004570 <__kernel_sin+0x100>
 8004508:	2200      	movs	r2, #0
 800450a:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <__kernel_sin+0x168>)
 800450c:	4640      	mov	r0, r8
 800450e:	4649      	mov	r1, r9
 8004510:	f7fc f896 	bl	8000640 <__aeabi_dmul>
 8004514:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800451c:	4650      	mov	r0, sl
 800451e:	4659      	mov	r1, fp
 8004520:	f7fc f88e 	bl	8000640 <__aeabi_dmul>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800452c:	f7fb fecc 	bl	80002c8 <__aeabi_dsub>
 8004530:	4632      	mov	r2, r6
 8004532:	463b      	mov	r3, r7
 8004534:	f7fc f884 	bl	8000640 <__aeabi_dmul>
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	f7fb fec4 	bl	80002c8 <__aeabi_dsub>
 8004540:	a323      	add	r3, pc, #140	; (adr r3, 80045d0 <__kernel_sin+0x160>)
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	4606      	mov	r6, r0
 8004548:	460f      	mov	r7, r1
 800454a:	4650      	mov	r0, sl
 800454c:	4659      	mov	r1, fp
 800454e:	f7fc f877 	bl	8000640 <__aeabi_dmul>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4630      	mov	r0, r6
 8004558:	4639      	mov	r1, r7
 800455a:	f7fb feb7 	bl	80002cc <__adddf3>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4628      	mov	r0, r5
 8004564:	4621      	mov	r1, r4
 8004566:	f7fb feaf 	bl	80002c8 <__aeabi_dsub>
 800456a:	b005      	add	sp, #20
 800456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4630      	mov	r0, r6
 8004576:	4639      	mov	r1, r7
 8004578:	f7fc f862 	bl	8000640 <__aeabi_dmul>
 800457c:	a314      	add	r3, pc, #80	; (adr r3, 80045d0 <__kernel_sin+0x160>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fb fea1 	bl	80002c8 <__aeabi_dsub>
 8004586:	4652      	mov	r2, sl
 8004588:	465b      	mov	r3, fp
 800458a:	f7fc f859 	bl	8000640 <__aeabi_dmul>
 800458e:	462a      	mov	r2, r5
 8004590:	4623      	mov	r3, r4
 8004592:	f7fb fe9b 	bl	80002cc <__adddf3>
 8004596:	b005      	add	sp, #20
 8004598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459c:	4628      	mov	r0, r5
 800459e:	4621      	mov	r1, r4
 80045a0:	b005      	add	sp, #20
 80045a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a6:	bf00      	nop
 80045a8:	5acfd57c 	.word	0x5acfd57c
 80045ac:	3de5d93a 	.word	0x3de5d93a
 80045b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80045b4:	3e5ae5e6 	.word	0x3e5ae5e6
 80045b8:	57b1fe7d 	.word	0x57b1fe7d
 80045bc:	3ec71de3 	.word	0x3ec71de3
 80045c0:	19c161d5 	.word	0x19c161d5
 80045c4:	3f2a01a0 	.word	0x3f2a01a0
 80045c8:	1110f8a6 	.word	0x1110f8a6
 80045cc:	3f811111 	.word	0x3f811111
 80045d0:	55555549 	.word	0x55555549
 80045d4:	3fc55555 	.word	0x3fc55555
 80045d8:	3fe00000 	.word	0x3fe00000
 80045dc:	00000000 	.word	0x00000000

080045e0 <fabs>:
 80045e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045e4:	4619      	mov	r1, r3
 80045e6:	4770      	bx	lr
	...

080045f0 <floor>:
 80045f0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80045f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80045fc:	2e13      	cmp	r6, #19
 80045fe:	460b      	mov	r3, r1
 8004600:	460d      	mov	r5, r1
 8004602:	4604      	mov	r4, r0
 8004604:	4607      	mov	r7, r0
 8004606:	dc31      	bgt.n	800466c <floor+0x7c>
 8004608:	2e00      	cmp	r6, #0
 800460a:	db1f      	blt.n	800464c <floor+0x5c>
 800460c:	4a38      	ldr	r2, [pc, #224]	; (80046f0 <floor+0x100>)
 800460e:	fa42 f806 	asr.w	r8, r2, r6
 8004612:	ea08 0201 	and.w	r2, r8, r1
 8004616:	4302      	orrs	r2, r0
 8004618:	d02d      	beq.n	8004676 <floor+0x86>
 800461a:	a333      	add	r3, pc, #204	; (adr r3, 80046e8 <floor+0xf8>)
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f7fb fe54 	bl	80002cc <__adddf3>
 8004624:	2200      	movs	r2, #0
 8004626:	2300      	movs	r3, #0
 8004628:	f7fc faa0 	bl	8000b6c <__aeabi_dcmpgt>
 800462c:	b148      	cbz	r0, 8004642 <floor+0x52>
 800462e:	2d00      	cmp	r5, #0
 8004630:	da04      	bge.n	800463c <floor+0x4c>
 8004632:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004636:	fa43 f606 	asr.w	r6, r3, r6
 800463a:	4435      	add	r5, r6
 800463c:	ea25 0508 	bic.w	r5, r5, r8
 8004640:	2700      	movs	r7, #0
 8004642:	463c      	mov	r4, r7
 8004644:	4629      	mov	r1, r5
 8004646:	4620      	mov	r0, r4
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800464c:	a326      	add	r3, pc, #152	; (adr r3, 80046e8 <floor+0xf8>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fb fe3b 	bl	80002cc <__adddf3>
 8004656:	2200      	movs	r2, #0
 8004658:	2300      	movs	r3, #0
 800465a:	f7fc fa87 	bl	8000b6c <__aeabi_dcmpgt>
 800465e:	2800      	cmp	r0, #0
 8004660:	d0ef      	beq.n	8004642 <floor+0x52>
 8004662:	2d00      	cmp	r5, #0
 8004664:	db29      	blt.n	80046ba <floor+0xca>
 8004666:	2700      	movs	r7, #0
 8004668:	463d      	mov	r5, r7
 800466a:	e7ea      	b.n	8004642 <floor+0x52>
 800466c:	2e33      	cmp	r6, #51	; 0x33
 800466e:	dd06      	ble.n	800467e <floor+0x8e>
 8004670:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004674:	d01c      	beq.n	80046b0 <floor+0xc0>
 8004676:	4619      	mov	r1, r3
 8004678:	4620      	mov	r0, r4
 800467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8004682:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004686:	fa28 f802 	lsr.w	r8, r8, r2
 800468a:	ea18 0f00 	tst.w	r8, r0
 800468e:	d0f2      	beq.n	8004676 <floor+0x86>
 8004690:	a315      	add	r3, pc, #84	; (adr r3, 80046e8 <floor+0xf8>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fb fe19 	bl	80002cc <__adddf3>
 800469a:	2200      	movs	r2, #0
 800469c:	2300      	movs	r3, #0
 800469e:	f7fc fa65 	bl	8000b6c <__aeabi_dcmpgt>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d0cd      	beq.n	8004642 <floor+0x52>
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	db10      	blt.n	80046cc <floor+0xdc>
 80046aa:	ea27 0708 	bic.w	r7, r7, r8
 80046ae:	e7c8      	b.n	8004642 <floor+0x52>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f7fb fe0b 	bl	80002cc <__adddf3>
 80046b6:	4604      	mov	r4, r0
 80046b8:	e7de      	b.n	8004678 <floor+0x88>
 80046ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80046be:	4a0d      	ldr	r2, [pc, #52]	; (80046f4 <floor+0x104>)
 80046c0:	431f      	orrs	r7, r3
 80046c2:	2f00      	cmp	r7, #0
 80046c4:	bf18      	it	ne
 80046c6:	4615      	movne	r5, r2
 80046c8:	2700      	movs	r7, #0
 80046ca:	e7ba      	b.n	8004642 <floor+0x52>
 80046cc:	2e14      	cmp	r6, #20
 80046ce:	d008      	beq.n	80046e2 <floor+0xf2>
 80046d0:	2301      	movs	r3, #1
 80046d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80046d6:	fa03 f606 	lsl.w	r6, r3, r6
 80046da:	1937      	adds	r7, r6, r4
 80046dc:	bf28      	it	cs
 80046de:	18ed      	addcs	r5, r5, r3
 80046e0:	e7e3      	b.n	80046aa <floor+0xba>
 80046e2:	3501      	adds	r5, #1
 80046e4:	e7e1      	b.n	80046aa <floor+0xba>
 80046e6:	bf00      	nop
 80046e8:	8800759c 	.word	0x8800759c
 80046ec:	7e37e43c 	.word	0x7e37e43c
 80046f0:	000fffff 	.word	0x000fffff
 80046f4:	bff00000 	.word	0xbff00000
	...

08004700 <scalbn>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004706:	4604      	mov	r4, r0
 8004708:	460d      	mov	r5, r1
 800470a:	460e      	mov	r6, r1
 800470c:	4617      	mov	r7, r2
 800470e:	bb73      	cbnz	r3, 800476e <scalbn+0x6e>
 8004710:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004714:	4603      	mov	r3, r0
 8004716:	4333      	orrs	r3, r6
 8004718:	d028      	beq.n	800476c <scalbn+0x6c>
 800471a:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <scalbn+0xe0>)
 800471c:	2200      	movs	r2, #0
 800471e:	f7fb ff8f 	bl	8000640 <__aeabi_dmul>
 8004722:	4b30      	ldr	r3, [pc, #192]	; (80047e4 <scalbn+0xe4>)
 8004724:	429f      	cmp	r7, r3
 8004726:	4604      	mov	r4, r0
 8004728:	460d      	mov	r5, r1
 800472a:	db1a      	blt.n	8004762 <scalbn+0x62>
 800472c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004730:	460e      	mov	r6, r1
 8004732:	3b36      	subs	r3, #54	; 0x36
 8004734:	443b      	add	r3, r7
 8004736:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800473a:	4293      	cmp	r3, r2
 800473c:	dc20      	bgt.n	8004780 <scalbn+0x80>
 800473e:	2b00      	cmp	r3, #0
 8004740:	dc3d      	bgt.n	80047be <scalbn+0xbe>
 8004742:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8004746:	da2c      	bge.n	80047a2 <scalbn+0xa2>
 8004748:	f24c 3350 	movw	r3, #50000	; 0xc350
 800474c:	429f      	cmp	r7, r3
 800474e:	dc17      	bgt.n	8004780 <scalbn+0x80>
 8004750:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004754:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 8004758:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800475c:	4822      	ldr	r0, [pc, #136]	; (80047e8 <scalbn+0xe8>)
 800475e:	f041 011f 	orr.w	r1, r1, #31
 8004762:	a31b      	add	r3, pc, #108	; (adr r3, 80047d0 <scalbn+0xd0>)
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f7fb ff6a 	bl	8000640 <__aeabi_dmul>
 800476c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800476e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004772:	4293      	cmp	r3, r2
 8004774:	d1de      	bne.n	8004734 <scalbn+0x34>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	f7fb fda7 	bl	80002cc <__adddf3>
 800477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004780:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004784:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 8004788:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800478c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004790:	a311      	add	r3, pc, #68	; (adr r3, 80047d8 <scalbn+0xd8>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	4815      	ldr	r0, [pc, #84]	; (80047ec <scalbn+0xec>)
 8004798:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800479c:	f7fb ff50 	bl	8000640 <__aeabi_dmul>
 80047a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a2:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80047a6:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80047aa:	3336      	adds	r3, #54	; 0x36
 80047ac:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 80047b0:	4620      	mov	r0, r4
 80047b2:	4629      	mov	r1, r5
 80047b4:	2200      	movs	r2, #0
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <scalbn+0xf0>)
 80047b8:	f7fb ff42 	bl	8000640 <__aeabi_dmul>
 80047bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047be:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80047c2:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80047c6:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d0:	c2f8f359 	.word	0xc2f8f359
 80047d4:	01a56e1f 	.word	0x01a56e1f
 80047d8:	8800759c 	.word	0x8800759c
 80047dc:	7e37e43c 	.word	0x7e37e43c
 80047e0:	43500000 	.word	0x43500000
 80047e4:	ffff3cb0 	.word	0xffff3cb0
 80047e8:	c2f8f359 	.word	0xc2f8f359
 80047ec:	8800759c 	.word	0x8800759c
 80047f0:	3c900000 	.word	0x3c900000
	...

08004800 <trunc>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004806:	f2a6 34ff 	subw	r4, r6, #1023	; 0x3ff
 800480a:	2c13      	cmp	r4, #19
 800480c:	460d      	mov	r5, r1
 800480e:	dc12      	bgt.n	8004836 <trunc+0x36>
 8004810:	2c00      	cmp	r4, #0
 8004812:	db09      	blt.n	8004828 <trunc+0x28>
 8004814:	4916      	ldr	r1, [pc, #88]	; (8004870 <trunc+0x70>)
 8004816:	2200      	movs	r2, #0
 8004818:	fa41 f404 	asr.w	r4, r1, r4
 800481c:	ea25 0304 	bic.w	r3, r5, r4
 8004820:	4614      	mov	r4, r2
 8004822:	4620      	mov	r0, r4
 8004824:	4619      	mov	r1, r3
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	2200      	movs	r2, #0
 800482a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800482e:	4614      	mov	r4, r2
 8004830:	4620      	mov	r0, r4
 8004832:	4619      	mov	r1, r3
 8004834:	bd70      	pop	{r4, r5, r6, pc}
 8004836:	2c33      	cmp	r4, #51	; 0x33
 8004838:	4602      	mov	r2, r0
 800483a:	dd07      	ble.n	800484c <trunc+0x4c>
 800483c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004840:	460b      	mov	r3, r1
 8004842:	d010      	beq.n	8004866 <trunc+0x66>
 8004844:	4604      	mov	r4, r0
 8004846:	4620      	mov	r0, r4
 8004848:	4619      	mov	r1, r3
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004850:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8004854:	fa23 f606 	lsr.w	r6, r3, r6
 8004858:	ea22 0006 	bic.w	r0, r2, r6
 800485c:	4604      	mov	r4, r0
 800485e:	462b      	mov	r3, r5
 8004860:	4620      	mov	r0, r4
 8004862:	4619      	mov	r1, r3
 8004864:	bd70      	pop	{r4, r5, r6, pc}
 8004866:	f7fb fd31 	bl	80002cc <__adddf3>
 800486a:	4604      	mov	r4, r0
 800486c:	460b      	mov	r3, r1
 800486e:	e7d8      	b.n	8004822 <trunc+0x22>
 8004870:	000fffff 	.word	0x000fffff
	...

08004880 <CSWTCH.18>:
 8004880:	00060c09 00000000 00000000 00000000     ................

08004890 <CSWTCH.19>:
 8004890:	00050a08 00000000 00000000 00000000     ................
 80048a0:	3a206425 20642520 00000a0d 00206425     %d : %d ....%d .

080048b0 <_stm32_dma_streams>:
 80048b0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 80048c0:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 80048d0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 80048e0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 80048f0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8004900:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8004910:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8004920:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8004930:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8004940:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8004950:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8004960:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08004970 <ch_debug>:
 8004970:	6e69616d 18811600 08440204 1814100c     main......D.....
 8004980:	1e1d1c00 00000000 00000000 00000000     ................
 8004990:	6c756e28 0000296c 00000000 00000000     (null)..........

080049a0 <icucfgA>:
 80049a0:	00000000 000f4240 08000ec1 00000000     ....@B..........
	...

080049c0 <icucfgB>:
 80049c0:	00000000 000f4240 00000000 08000ec1     ....@B..........
 80049d0:	00000000 00000001 00000000 00000000     ................

080049e0 <icucfgC>:
 80049e0:	00000000 000f4240 00000000 08000ec1     ....@B..........
	...

08004a00 <line_sensors_cfg1>:
 8004a00:	00010000 00000000 00000000 00000000     ................
 8004a10:	40000000 00000000 00000000 00000000     ...@............
 8004a20:	00000000 00000006 00000000 00000000     ................

08004a30 <line_sensors_cfg2>:
 8004a30:	00010000 00000000 00000000 00000000     ................
 8004a40:	40000000 00000000 00000000 00000000     ...@............
 8004a50:	00000000 00000007 00000000 00000000     ................
 8004a60:	656c6469 00000000 00000000 00000000     idle............

08004a70 <pow10>:
 8004a70:	0000000a 00000064 000003e8 00002710     ....d........'..
 8004a80:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8004a90:	3b9aca00 00000000 00000000 00000000     ...;............

08004aa0 <ram_areas>:
 8004aa0:	08004d54 20000fa0 20000fa0 20000fa0     TM..... ... ... 
 8004ab0:	08004d54 00000000 00000000 00000000     TM..............
 8004ac0:	08004d54 00000000 00000000 00000000     TM..............
 8004ad0:	08004d54 00000000 00000000 00000000     TM..............
 8004ae0:	08004d54 00000000 00000000 00000000     TM..............
 8004af0:	08004d54 00000000 00000000 00000000     TM..............
 8004b00:	08004d54 00000000 00000000 00000000     TM..............
 8004b10:	08004d54 00000000 00000000 00000000     TM..............

08004b20 <vmt>:
 8004b20:	08001f51 08002061 08001fc1 08002211     Q...a ......."..
 8004b30:	08001fb1 08002201 08001f41 08002051     ....."..A...Q ..

08004b40 <npio2_hw>:
 8004b40:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 8004b50:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 8004b60:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 8004b70:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 8004b80:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 8004b90:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 8004ba0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 8004bb0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

08004bc0 <two_over_pi>:
 8004bc0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 8004bd0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 8004be0:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 8004bf0:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 8004c00:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 8004c10:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 8004c20:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 8004c30:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 8004c40:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 8004c50:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 8004c60:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 8004c70:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 8004c80:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 8004c90:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 8004ca0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 8004cb0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 8004cc0:	0060e27b 00c08c6b 00000000 00000000     {.`.k...........

08004cd0 <PIo2>:
 8004cd0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 8004ce0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 8004cf0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 8004d00:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

08004d10 <init_jk>:
 8004d10:	00000002 00000003 00000004 00000006     ................
