
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4823      	ldr	r0, [pc, #140]	; (8000250 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f002 f9e5 	bl	80025a0 <__core_init>
 80001d6:	f002 f8f3 	bl	80023c0 <__early_init>
 80001da:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001de:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xa>)
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <endfiniloop+0xe>)

080001e2 <msloop>:
 80001e2:	4291      	cmp	r1, r2
 80001e4:	bf3c      	itt	cc
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ea:	e7fa      	bcc.n	80001e2 <msloop>
 80001ec:	491b      	ldr	r1, [pc, #108]	; (800025c <endfiniloop+0x12>)
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <endfiniloop+0x6>)

080001f0 <psloop>:
 80001f0:	4291      	cmp	r1, r2
 80001f2:	bf3c      	itt	cc
 80001f4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f8:	e7fa      	bcc.n	80001f0 <psloop>
 80001fa:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x16>)
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <endfiniloop+0x1a>)
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x1e>)

08000200 <dloop>:
 8000200:	429a      	cmp	r2, r3
 8000202:	bf3e      	ittt	cc
 8000204:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000208:	f842 0b04 	strcc.w	r0, [r2], #4
 800020c:	e7f8      	bcc.n	8000200 <dloop>
 800020e:	2000      	movs	r0, #0
 8000210:	4916      	ldr	r1, [pc, #88]	; (800026c <endfiniloop+0x22>)
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x26>)

08000214 <bloop>:
 8000214:	4291      	cmp	r1, r2
 8000216:	bf3c      	itt	cc
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
 800021c:	e7fa      	bcc.n	8000214 <bloop>
 800021e:	f002 f977 	bl	8002510 <__init_ram_areas>
 8000222:	f002 f9b5 	bl	8002590 <__late_init>
 8000226:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2a>)
 8000228:	4d13      	ldr	r5, [pc, #76]	; (8000278 <endfiniloop+0x2e>)

0800022a <initloop>:
 800022a:	42ac      	cmp	r4, r5
 800022c:	da03      	bge.n	8000236 <endinitloop>
 800022e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000232:	4788      	blx	r1
 8000234:	e7f9      	b.n	800022a <initloop>

08000236 <endinitloop>:
 8000236:	f001 fc53 	bl	8001ae0 <main>
 800023a:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x32>)
 800023c:	4d10      	ldr	r5, [pc, #64]	; (8000280 <endfiniloop+0x36>)

0800023e <finiloop>:
 800023e:	42ac      	cmp	r4, r5
 8000240:	da03      	bge.n	800024a <endfiniloop>
 8000242:	f854 1b04 	ldr.w	r1, [r4], #4
 8000246:	4788      	blx	r1
 8000248:	e7f9      	b.n	800023e <finiloop>

0800024a <endfiniloop>:
 800024a:	f002 b999 	b.w	8002580 <__default_exit>
 800024e:	0000      	.short	0x0000
 8000250:	20000800 	.word	0x20000800
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	080027e0 	.word	0x080027e0
 8000264:	20000800 	.word	0x20000800
 8000268:	20000838 	.word	0x20000838
 800026c:	20000838 	.word	0x20000838
 8000270:	20000b9c 	.word	0x20000b9c
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	2300      	movs	r3, #0
 80002a2:	f383 8811 	msr	BASEPRI, r3
 80002a6:	4628      	mov	r0, r5
 80002a8:	47a0      	blx	r4
 80002aa:	2000      	movs	r0, #0
 80002ac:	f002 f8e8 	bl	8002480 <chThdExit>

080002b0 <_port_switch_from_isr>:
 80002b0:	f002 f90e 	bl	80024d0 <chSchDoReschedule>

080002b4 <_port_exit_from_isr>:
 80002b4:	df00      	svc	0
 80002b6:	e7fe      	b.n	80002b6 <_port_exit_from_isr+0x2>
	...

080002c0 <chTMStartMeasurementX.constprop.31>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80002c0:	4b01      	ldr	r3, [pc, #4]	; (80002c8 <chTMStartMeasurementX.constprop.31+0x8>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80002c4:	6083      	str	r3, [r0, #8]
}
 80002c6:	4770      	bx	lr
 80002c8:	e0001000 	.word	0xe0001000
 80002cc:	00000000 	.word	0x00000000

080002d0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <notify1+0xc>)
 80002d2:	68d3      	ldr	r3, [r2, #12]
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	60d3      	str	r3, [r2, #12]
}
 80002da:	4770      	bx	lr
 80002dc:	40011000 	.word	0x40011000

080002e0 <sdObjectInit.constprop.23>:
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <sdObjectInit.constprop.23+0x54>)
 80002e2:	4a15      	ldr	r2, [pc, #84]	; (8000338 <sdObjectInit.constprop.23+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80002e4:	b470      	push	{r4, r5, r6}
  sdp->vmt = &vmt;
 80002e6:	4618      	mov	r0, r3
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80002e8:	4c14      	ldr	r4, [pc, #80]	; (800033c <sdObjectInit.constprop.23+0x5c>)
 80002ea:	f840 2b04 	str.w	r2, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80002ee:	2501      	movs	r5, #1
  iqp->q_counter = 0;
 80002f0:	2200      	movs	r2, #0
  oqp->q_counter = size;
 80002f2:	2110      	movs	r1, #16
 80002f4:	721d      	strb	r5, [r3, #8]
  oqp->q_top     = bp + size;
 80002f6:	f103 0674 	add.w	r6, r3, #116	; 0x74
  iqp->q_counter = 0;
 80002fa:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80002fc:	f103 050c 	add.w	r5, r3, #12
  iqp->q_notify  = infy;
 8000300:	629a      	str	r2, [r3, #40]	; 0x28
  oqp->q_counter = size;
 8000302:	6399      	str	r1, [r3, #56]	; 0x38
  iqp->q_top     = bp + size;
 8000304:	f103 0264 	add.w	r2, r3, #100	; 0x64
  iqp->q_buffer  = bp;
 8000308:	f103 0154 	add.w	r1, r3, #84	; 0x54
  oqp->q_notify  = onfy;
 800030c:	64dc      	str	r4, [r3, #76]	; 0x4c
 800030e:	f103 0430 	add.w	r4, r3, #48	; 0x30
  oqp->q_top     = bp + size;
 8000312:	641e      	str	r6, [r3, #64]	; 0x40
  tqp->p_prev = (thread_t *)tqp;
 8000314:	e9c3 5503 	strd	r5, r5, [r3, #12]
 8000318:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
  iqp->q_link    = link;
 800031c:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_link    = link;
 800031e:	651b      	str	r3, [r3, #80]	; 0x50
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8000320:	6058      	str	r0, [r3, #4]
  iqp->q_buffer  = bp;
 8000322:	6199      	str	r1, [r3, #24]
  iqp->q_wrptr   = bp;
 8000324:	e9c3 1108 	strd	r1, r1, [r3, #32]
  iqp->q_top     = bp + size;
 8000328:	61da      	str	r2, [r3, #28]
  oqp->q_buffer  = bp;
 800032a:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_wrptr   = bp;
 800032c:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
 8000330:	bc70      	pop	{r4, r5, r6}
 8000332:	4770      	bx	lr
 8000334:	200008d0 	.word	0x200008d0
 8000338:	080027c0 	.word	0x080027c0
 800033c:	080002d1 	.word	0x080002d1

08000340 <pwmEnableChannel.constprop.11>:
 * @param[in] channel   PWM channel identifier (0...channels-1)
 * @param[in] width     PWM pulse width as clock pulses number
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
 8000340:	b430      	push	{r4, r5}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000342:	2320      	movs	r3, #32
 8000344:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <pwmEnableChannel.constprop.11+0x2c>)
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 800034a:	699c      	ldr	r4, [r3, #24]
 800034c:	68da      	ldr	r2, [r3, #12]
 800034e:	f100 050c 	add.w	r5, r0, #12
 8000352:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000356:	2501      	movs	r5, #1
 8000358:	4085      	lsls	r5, r0
 800035a:	432a      	orrs	r2, r5
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	6061      	str	r1, [r4, #4]
 8000360:	2300      	movs	r3, #0
 8000362:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8000366:	bc30      	pop	{r4, r5}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	200008b4 	.word	0x200008b4

08000370 <_idle_thread>:
}
 8000370:	e7fe      	b.n	8000370 <_idle_thread>
 8000372:	bf00      	nop
	...

08000380 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000380:	4603      	mov	r3, r0
 8000382:	2220      	movs	r2, #32
 8000384:	f382 8811 	msr	BASEPRI, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000388:	4908      	ldr	r1, [pc, #32]	; (80003ac <chCoreAlloc+0x2c>)
 800038a:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <chCoreAlloc+0x30>)
 800038c:	6808      	ldr	r0, [r1, #0]
 800038e:	6812      	ldr	r2, [r2, #0]
  size = MEM_ALIGN_NEXT(size);
 8000390:	3307      	adds	r3, #7
 8000392:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000396:	1a12      	subs	r2, r2, r0
 8000398:	4293      	cmp	r3, r2
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800039a:	bf9a      	itte	ls
 800039c:	181b      	addls	r3, r3, r0
 800039e:	600b      	strls	r3, [r1, #0]
    return NULL;
 80003a0:	2000      	movhi	r0, #0
 80003a2:	2300      	movs	r3, #0
 80003a4:	f383 8811 	msr	BASEPRI, r3
}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000b90 	.word	0x20000b90
 80003b0:	20000b3c 	.word	0x20000b3c
	...

080003c0 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 80003c2:	68c3      	ldr	r3, [r0, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 80003c4:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
 80003c6:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80003c8:	68dc      	ldr	r4, [r3, #12]
 80003ca:	4014      	ands	r4, r2
 80003cc:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 80003ce:	43d2      	mvns	r2, r2
 80003d0:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 80003d2:	7d0b      	ldrb	r3, [r1, #20]
void icu_lld_serve_interrupt(ICUDriver *icup) {
 80003d4:	4605      	mov	r5, r0
 80003d6:	f004 0702 	and.w	r7, r4, #2
 80003da:	f004 0604 	and.w	r6, r4, #4
  if (icup->config->channel == ICU_CHANNEL_1) {
 80003de:	b9c3      	cbnz	r3, 8000412 <icu_lld_serve_interrupt+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80003e0:	b17e      	cbz	r6, 8000402 <icu_lld_serve_interrupt+0x42>
      _icu_isr_invoke_width_cb(icup);
 80003e2:	7803      	ldrb	r3, [r0, #0]
 80003e4:	2b04      	cmp	r3, #4
 80003e6:	d009      	beq.n	80003fc <icu_lld_serve_interrupt+0x3c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80003e8:	b987      	cbnz	r7, 800040c <icu_lld_serve_interrupt+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80003ea:	07e3      	lsls	r3, r4, #31
 80003ec:	d505      	bpl.n	80003fa <icu_lld_serve_interrupt+0x3a>
    _icu_isr_invoke_overflow_cb(icup);
 80003ee:	686b      	ldr	r3, [r5, #4]
 80003f0:	4628      	mov	r0, r5
 80003f2:	691b      	ldr	r3, [r3, #16]
 80003f4:	4798      	blx	r3
 80003f6:	2303      	movs	r3, #3
 80003f8:	702b      	strb	r3, [r5, #0]
}
 80003fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _icu_isr_invoke_width_cb(icup);
 80003fc:	688b      	ldr	r3, [r1, #8]
 80003fe:	b303      	cbz	r3, 8000442 <icu_lld_serve_interrupt+0x82>
 8000400:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000402:	2f00      	cmp	r7, #0
 8000404:	d0f1      	beq.n	80003ea <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
 8000406:	782b      	ldrb	r3, [r5, #0]
 8000408:	2b04      	cmp	r3, #4
 800040a:	d011      	beq.n	8000430 <icu_lld_serve_interrupt+0x70>
 800040c:	2304      	movs	r3, #4
 800040e:	702b      	strb	r3, [r5, #0]
 8000410:	e7eb      	b.n	80003ea <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000412:	b147      	cbz	r7, 8000426 <icu_lld_serve_interrupt+0x66>
      _icu_isr_invoke_width_cb(icup);
 8000414:	7803      	ldrb	r3, [r0, #0]
 8000416:	2b04      	cmp	r3, #4
 8000418:	d002      	beq.n	8000420 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800041a:	2e00      	cmp	r6, #0
 800041c:	d1f6      	bne.n	800040c <icu_lld_serve_interrupt+0x4c>
 800041e:	e7e4      	b.n	80003ea <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_width_cb(icup);
 8000420:	688b      	ldr	r3, [r1, #8]
 8000422:	b18b      	cbz	r3, 8000448 <icu_lld_serve_interrupt+0x88>
 8000424:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000426:	2e00      	cmp	r6, #0
 8000428:	d0df      	beq.n	80003ea <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
 800042a:	782b      	ldrb	r3, [r5, #0]
 800042c:	2b04      	cmp	r3, #4
 800042e:	d1ed      	bne.n	800040c <icu_lld_serve_interrupt+0x4c>
 8000430:	6869      	ldr	r1, [r5, #4]
 8000432:	68cb      	ldr	r3, [r1, #12]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0e9      	beq.n	800040c <icu_lld_serve_interrupt+0x4c>
 8000438:	4628      	mov	r0, r5
 800043a:	4798      	blx	r3
 800043c:	2304      	movs	r3, #4
 800043e:	702b      	strb	r3, [r5, #0]
 8000440:	e7d3      	b.n	80003ea <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000442:	2f00      	cmp	r7, #0
 8000444:	d1f5      	bne.n	8000432 <icu_lld_serve_interrupt+0x72>
 8000446:	e7d0      	b.n	80003ea <icu_lld_serve_interrupt+0x2a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000448:	2e00      	cmp	r6, #0
 800044a:	d1f2      	bne.n	8000432 <icu_lld_serve_interrupt+0x72>
 800044c:	e7cd      	b.n	80003ea <icu_lld_serve_interrupt+0x2a>
 800044e:	bf00      	nop

08000450 <icu_lld_enable_notifications>:
  uint32_t dier = icup->tim->DIER;
 8000450:	68c2      	ldr	r2, [r0, #12]
 8000452:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
 8000454:	b410      	push	{r4}
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8000456:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800045a:	d10c      	bne.n	8000476 <icu_lld_enable_notifications+0x26>
    if (icup->config->channel == ICU_CHANNEL_1) {
 800045c:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
 800045e:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8000460:	7d0c      	ldrb	r4, [r1, #20]
 8000462:	6888      	ldr	r0, [r1, #8]
 8000464:	b94c      	cbnz	r4, 800047a <icu_lld_enable_notifications+0x2a>
      if (icup->config->width_cb != NULL)
 8000466:	b168      	cbz	r0, 8000484 <icu_lld_enable_notifications+0x34>
        dier |= STM32_TIM_DIER_CC1IE;
 8000468:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
 800046c:	6909      	ldr	r1, [r1, #16]
 800046e:	b109      	cbz	r1, 8000474 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8000470:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
 8000474:	60d3      	str	r3, [r2, #12]
}
 8000476:	bc10      	pop	{r4}
 8000478:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 800047a:	2800      	cmp	r0, #0
 800047c:	d1f4      	bne.n	8000468 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC2IE;
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	e7f3      	b.n	800046c <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC1IE;
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	e7f0      	b.n	800046c <icu_lld_enable_notifications+0x1c>
 800048a:	bf00      	nop
 800048c:	0000      	movs	r0, r0
	...

08000490 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
 8000490:	7802      	ldrb	r2, [r0, #0]
 8000492:	68c3      	ldr	r3, [r0, #12]
 8000494:	2a01      	cmp	r2, #1
void icu_lld_start(ICUDriver *icup) {
 8000496:	b430      	push	{r4, r5}
  if (icup->state == ICU_STOP) {
 8000498:	d037      	beq.n	800050a <icu_lld_start+0x7a>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800049e:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80004a0:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 80004a2:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (icup->clock / icup->config->frequency) - 1;
 80004a4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80004a8:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
 80004aa:	684d      	ldr	r5, [r1, #4]
 80004ac:	fbb2 f2f5 	udiv	r2, r2, r5
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 80004b0:	2500      	movs	r5, #0
 80004b2:	611d      	str	r5, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80004b4:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
 80004b8:	3a01      	subs	r2, #1
  icup->tim->ARR  = 0xFFFF;
 80004ba:	f64f 75ff 	movw	r5, #65535	; 0xffff
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80004be:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
 80004c0:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 80004c2:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 80004c4:	7d0c      	ldrb	r4, [r1, #20]
 80004c6:	780a      	ldrb	r2, [r1, #0]
 80004c8:	b98c      	cbnz	r4, 80004ee <icu_lld_start+0x5e>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 80004ca:	f240 2401 	movw	r4, #513	; 0x201
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 80004ce:	2154      	movs	r1, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 80004d0:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 80004d2:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80004d4:	b142      	cbz	r2, 80004e8 <icu_lld_start+0x58>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 80004d6:	2213      	movs	r2, #19
 80004d8:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 80004da:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 80004de:	3334      	adds	r3, #52	; 0x34
 80004e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
 80004e4:	bc30      	pop	{r4, r5}
 80004e6:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80004e8:	2231      	movs	r2, #49	; 0x31
 80004ea:	621a      	str	r2, [r3, #32]
 80004ec:	e7f5      	b.n	80004da <icu_lld_start+0x4a>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 80004ee:	f44f 7481 	mov.w	r4, #258	; 0x102
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 80004f2:	2164      	movs	r1, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 80004f4:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 80004f6:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80004f8:	bb3a      	cbnz	r2, 800054a <icu_lld_start+0xba>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 80004fa:	2213      	movs	r2, #19
 80004fc:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 80004fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 8000502:	3338      	adds	r3, #56	; 0x38
 8000504:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8000508:	e7ec      	b.n	80004e4 <icu_lld_start+0x54>
    if (&ICUD2 == icup) {
 800050a:	4a28      	ldr	r2, [pc, #160]	; (80005ac <icu_lld_start+0x11c>)
 800050c:	4290      	cmp	r0, r2
 800050e:	d036      	beq.n	800057e <icu_lld_start+0xee>
    if (&ICUD3 == icup) {
 8000510:	4a27      	ldr	r2, [pc, #156]	; (80005b0 <icu_lld_start+0x120>)
 8000512:	4290      	cmp	r0, r2
 8000514:	d01c      	beq.n	8000550 <icu_lld_start+0xc0>
    if (&ICUD5 == icup) {
 8000516:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <icu_lld_start+0x124>)
 8000518:	4290      	cmp	r0, r2
 800051a:	d1c3      	bne.n	80004a4 <icu_lld_start+0x14>
      rccEnableTIM5(FALSE);
 800051c:	4a26      	ldr	r2, [pc, #152]	; (80005b8 <icu_lld_start+0x128>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800051e:	4927      	ldr	r1, [pc, #156]	; (80005bc <icu_lld_start+0x12c>)
 8000520:	6c14      	ldr	r4, [r2, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 8000522:	4d27      	ldr	r5, [pc, #156]	; (80005c0 <icu_lld_start+0x130>)
      rccEnableTIM5(FALSE);
 8000524:	f044 0408 	orr.w	r4, r4, #8
 8000528:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM5();
 800052a:	6a14      	ldr	r4, [r2, #32]
 800052c:	f044 0408 	orr.w	r4, r4, #8
 8000530:	6214      	str	r4, [r2, #32]
 8000532:	2400      	movs	r4, #0
 8000534:	6214      	str	r4, [r2, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000536:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800053a:	2470      	movs	r4, #112	; 0x70
 800053c:	f881 4332 	strb.w	r4, [r1, #818]	; 0x332
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000540:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000544:	604a      	str	r2, [r1, #4]
      icup->clock = STM32_TIMCLK1;
 8000546:	6085      	str	r5, [r0, #8]
 8000548:	e7ac      	b.n	80004a4 <icu_lld_start+0x14>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 800054a:	2231      	movs	r2, #49	; 0x31
 800054c:	621a      	str	r2, [r3, #32]
 800054e:	e7d6      	b.n	80004fe <icu_lld_start+0x6e>
      rccEnableTIM3(FALSE);
 8000550:	4a19      	ldr	r2, [pc, #100]	; (80005b8 <icu_lld_start+0x128>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000552:	491a      	ldr	r1, [pc, #104]	; (80005bc <icu_lld_start+0x12c>)
 8000554:	6c14      	ldr	r4, [r2, #64]	; 0x40
     icup->clock = STM32_TIMCLK1;
 8000556:	4d1a      	ldr	r5, [pc, #104]	; (80005c0 <icu_lld_start+0x130>)
      rccEnableTIM3(FALSE);
 8000558:	f044 0402 	orr.w	r4, r4, #2
 800055c:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM3();
 800055e:	6a14      	ldr	r4, [r2, #32]
 8000560:	f044 0402 	orr.w	r4, r4, #2
 8000564:	6214      	str	r4, [r2, #32]
 8000566:	2400      	movs	r4, #0
 8000568:	6214      	str	r4, [r2, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800056a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800056e:	2470      	movs	r4, #112	; 0x70
 8000570:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000574:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000578:	600a      	str	r2, [r1, #0]
     icup->clock = STM32_TIMCLK1;
 800057a:	6085      	str	r5, [r0, #8]
    if (&ICUD5 == icup) {
 800057c:	e792      	b.n	80004a4 <icu_lld_start+0x14>
      rccEnableTIM2(FALSE);
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <icu_lld_start+0x128>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000580:	490e      	ldr	r1, [pc, #56]	; (80005bc <icu_lld_start+0x12c>)
 8000582:	6c14      	ldr	r4, [r2, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 8000584:	4d0e      	ldr	r5, [pc, #56]	; (80005c0 <icu_lld_start+0x130>)
      rccEnableTIM2(FALSE);
 8000586:	f044 0401 	orr.w	r4, r4, #1
 800058a:	6414      	str	r4, [r2, #64]	; 0x40
      rccResetTIM2();
 800058c:	6a14      	ldr	r4, [r2, #32]
 800058e:	f044 0401 	orr.w	r4, r4, #1
 8000592:	6214      	str	r4, [r2, #32]
 8000594:	2400      	movs	r4, #0
 8000596:	6214      	str	r4, [r2, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800059c:	2470      	movs	r4, #112	; 0x70
 800059e:	f881 431c 	strb.w	r4, [r1, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80005a2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80005a6:	600a      	str	r2, [r1, #0]
      icup->clock = STM32_TIMCLK1;
 80005a8:	6085      	str	r5, [r0, #8]
    if (&ICUD5 == icup) {
 80005aa:	e77b      	b.n	80004a4 <icu_lld_start+0x14>
 80005ac:	2000086c 	.word	0x2000086c
 80005b0:	20000884 	.word	0x20000884
 80005b4:	2000089c 	.word	0x2000089c
 80005b8:	40023800 	.word	0x40023800
 80005bc:	e000e100 	.word	0xe000e100
 80005c0:	05b8d800 	.word	0x05b8d800
	...

080005d0 <icu_lld_init>:
void icu_lld_init(void) {
 80005d0:	b430      	push	{r4, r5}
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 80005d2:	480a      	ldr	r0, [pc, #40]	; (80005fc <icu_lld_init+0x2c>)
 80005d4:	4c0a      	ldr	r4, [pc, #40]	; (8000600 <icu_lld_init+0x30>)
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <icu_lld_init+0x34>)
  ICUD3.tim = STM32_TIM3;
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <icu_lld_init+0x38>)
 80005da:	60c2      	str	r2, [r0, #12]
 80005dc:	2101      	movs	r1, #1
  ICUD2.tim = STM32_TIM2;
 80005de:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  icup->config = NULL;
 80005e2:	2200      	movs	r2, #0
 80005e4:	60e5      	str	r5, [r4, #12]
  icup->state  = ICU_STOP;
 80005e6:	7001      	strb	r1, [r0, #0]
  ICUD5.tim = STM32_TIM5;
 80005e8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80005ec:	7019      	strb	r1, [r3, #0]
 80005ee:	7021      	strb	r1, [r4, #0]
  icup->config = NULL;
 80005f0:	6062      	str	r2, [r4, #4]
 80005f2:	60dd      	str	r5, [r3, #12]
 80005f4:	6042      	str	r2, [r0, #4]
 80005f6:	605a      	str	r2, [r3, #4]
}
 80005f8:	bc30      	pop	{r4, r5}
 80005fa:	4770      	bx	lr
 80005fc:	20000884 	.word	0x20000884
 8000600:	2000086c 	.word	0x2000086c
 8000604:	2000089c 	.word	0x2000089c
 8000608:	40000400 	.word	0x40000400
 800060c:	00000000 	.word	0x00000000

08000610 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000610:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 8000614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000618:	09d2      	lsrs	r2, r2, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800061a:	4667      	mov	r7, ip
  uint32_t bit     = 0;
 800061c:	2400      	movs	r4, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800061e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
 8000622:	f04f 0803 	mov.w	r8, #3
      m4 = 15 << ((bit & 7) * 4);
 8000626:	f04f 0e0f 	mov.w	lr, #15
 800062a:	e00f      	b.n	800064c <_pal_lld_setgroupmode+0x3c>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800062c:	f8d0 a000 	ldr.w	sl, [r0]
 8000630:	ea03 030a 	and.w	r3, r3, sl
 8000634:	433b      	orrs	r3, r7
        if (bit < 8)
 8000636:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000638:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 800063a:	d835      	bhi.n	80006a8 <_pal_lld_setgroupmode+0x98>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800063c:	6a03      	ldr	r3, [r0, #32]
 800063e:	401e      	ands	r6, r3
 8000640:	4335      	orrs	r5, r6
 8000642:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000644:	0849      	lsrs	r1, r1, #1
 8000646:	d02d      	beq.n	80006a4 <_pal_lld_setgroupmode+0x94>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000648:	00bf      	lsls	r7, r7, #2
    bit++;
 800064a:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 800064c:	07cb      	lsls	r3, r1, #31
 800064e:	d5f9      	bpl.n	8000644 <_pal_lld_setgroupmode+0x34>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000650:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000652:	fa09 f504 	lsl.w	r5, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000656:	ea23 0305 	bic.w	r3, r3, r5
 800065a:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 800065c:	0063      	lsls	r3, r4, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800065e:	6885      	ldr	r5, [r0, #8]
      m2 = 3 << (bit * 2);
 8000660:	fa08 f303 	lsl.w	r3, r8, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000664:	43db      	mvns	r3, r3
 8000666:	401d      	ands	r5, r3
 8000668:	6085      	str	r5, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800066a:	68c6      	ldr	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800066c:	f004 0507 	and.w	r5, r4, #7
 8000670:	00ad      	lsls	r5, r5, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000672:	401e      	ands	r6, r3
      m4 = 15 << ((bit & 7) * 4);
 8000674:	fa0e fa05 	lsl.w	sl, lr, r5
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000678:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800067c:	60c6      	str	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 800067e:	fa02 f505 	lsl.w	r5, r2, r5
 8000682:	ea6f 060a 	mvn.w	r6, sl
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000686:	d1d1      	bne.n	800062c <_pal_lld_setgroupmode+0x1c>
        if (bit < 8)
 8000688:	2c07      	cmp	r4, #7
 800068a:	d812      	bhi.n	80006b2 <_pal_lld_setgroupmode+0xa2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800068c:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8000690:	ea06 060a 	and.w	r6, r6, sl
 8000694:	4335      	orrs	r5, r6
 8000696:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000698:	6805      	ldr	r5, [r0, #0]
 800069a:	402b      	ands	r3, r5
 800069c:	433b      	orrs	r3, r7
    if (!mask)
 800069e:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 80006a0:	6003      	str	r3, [r0, #0]
    if (!mask)
 80006a2:	d1d1      	bne.n	8000648 <_pal_lld_setgroupmode+0x38>
  }
}
 80006a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80006a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006aa:	401e      	ands	r6, r3
 80006ac:	4335      	orrs	r5, r6
 80006ae:	6245      	str	r5, [r0, #36]	; 0x24
 80006b0:	e7c8      	b.n	8000644 <_pal_lld_setgroupmode+0x34>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80006b2:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 80006b6:	ea06 060a 	and.w	r6, r6, sl
 80006ba:	4335      	orrs	r5, r6
 80006bc:	6245      	str	r5, [r0, #36]	; 0x24
 80006be:	e7eb      	b.n	8000698 <_pal_lld_setgroupmode+0x88>

080006c0 <icuStartCapture>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @api
 */
void icuStartCapture(ICUDriver *icup) {
 80006c0:	b430      	push	{r4, r5}
 80006c2:	2320      	movs	r3, #32
 80006c4:	f383 8811 	msr	BASEPRI, r3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80006c8:	68c3      	ldr	r3, [r0, #12]
 80006ca:	695a      	ldr	r2, [r3, #20]
  icup->tim->SR = 0;
 80006cc:	2100      	movs	r1, #0
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80006ce:	f042 0201 	orr.w	r2, r2, #1
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80006d2:	2505      	movs	r5, #5

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 80006d4:	2403      	movs	r4, #3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80006d6:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 80006d8:	6119      	str	r1, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80006da:	601d      	str	r5, [r3, #0]
 80006dc:	7004      	strb	r4, [r0, #0]
 80006de:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 80006e2:	bc30      	pop	{r4, r5}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
	...

080006f0 <_port_irq_epilogue>:
 80006f0:	2320      	movs	r3, #32
 80006f2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <_port_irq_epilogue+0x4c>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80006fe:	d102      	bne.n	8000706 <_port_irq_epilogue+0x16>
 8000700:	f383 8811 	msr	BASEPRI, r3
 8000704:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800070a:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800070e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000712:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8000716:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800071a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <_port_irq_epilogue+0x50>)
 8000720:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000722:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000724:	6889      	ldr	r1, [r1, #8]
 8000726:	6892      	ldr	r2, [r2, #8]
 8000728:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800072a:	bf8c      	ite	hi
 800072c:	4a05      	ldrhi	r2, [pc, #20]	; (8000744 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800072e:	4a06      	ldrls	r2, [pc, #24]	; (8000748 <_port_irq_epilogue+0x58>)
 8000730:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	20000948 	.word	0x20000948
 8000744:	080002b1 	.word	0x080002b1
 8000748:	080002b4 	.word	0x080002b4
 800074c:	00000000 	.word	0x00000000

08000750 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000750:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000752:	4d17      	ldr	r5, [pc, #92]	; (80007b0 <VectorA4+0x60>)
 8000754:	69ab      	ldr	r3, [r5, #24]
 8000756:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	4014      	ands	r4, r2
 800075c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800075e:	43d2      	mvns	r2, r2
 8000760:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000762:	07a3      	lsls	r3, r4, #30
 8000764:	d504      	bpl.n	8000770 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8000766:	686b      	ldr	r3, [r5, #4]
 8000768:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800076a:	b10b      	cbz	r3, 8000770 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
 800076c:	4628      	mov	r0, r5
 800076e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000770:	0760      	lsls	r0, r4, #29
 8000772:	d504      	bpl.n	800077e <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8000774:	686b      	ldr	r3, [r5, #4]
 8000776:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000778:	b10b      	cbz	r3, 800077e <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <VectorA4+0x60>)
 800077c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800077e:	0721      	lsls	r1, r4, #28
 8000780:	d504      	bpl.n	800078c <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8000782:	686b      	ldr	r3, [r5, #4]
 8000784:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000786:	b10b      	cbz	r3, 800078c <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <VectorA4+0x60>)
 800078a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800078c:	06e2      	lsls	r2, r4, #27
 800078e:	d504      	bpl.n	800079a <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8000790:	686b      	ldr	r3, [r5, #4]
 8000792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000794:	b10b      	cbz	r3, 800079a <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <VectorA4+0x60>)
 8000798:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800079a:	07e3      	lsls	r3, r4, #31
 800079c:	d504      	bpl.n	80007a8 <VectorA4+0x58>
 800079e:	686b      	ldr	r3, [r5, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	b10b      	cbz	r3, 80007a8 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <VectorA4+0x60>)
 80007a6:	4798      	blx	r3
}
 80007a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80007ac:	f7ff bfa0 	b.w	80006f0 <_port_irq_epilogue>
 80007b0:	200008b4 	.word	0x200008b4
	...

080007c0 <VectorAC>:
 80007c0:	f7ff bfc6 	b.w	8000750 <VectorA4>
	...

080007d0 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 80007d0:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD5);
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <Vector108+0x10>)
 80007d4:	f7ff fdf4 	bl	80003c0 <icu_lld_serve_interrupt>
}
 80007d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80007dc:	f7ff bf88 	b.w	80006f0 <_port_irq_epilogue>
 80007e0:	2000089c 	.word	0x2000089c
	...

080007f0 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80007f0:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD3);
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <VectorB4+0x10>)
 80007f4:	f7ff fde4 	bl	80003c0 <icu_lld_serve_interrupt>
}
 80007f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80007fc:	f7ff bf78 	b.w	80006f0 <_port_irq_epilogue>
 8000800:	20000884 	.word	0x20000884
	...

08000810 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8000810:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD2);
 8000812:	4803      	ldr	r0, [pc, #12]	; (8000820 <VectorB0+0x10>)
 8000814:	f7ff fdd4 	bl	80003c0 <icu_lld_serve_interrupt>
}
 8000818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800081c:	f7ff bf68 	b.w	80006f0 <_port_irq_epilogue>
 8000820:	2000086c 	.word	0x2000086c
	...

08000830 <VectorB8>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000830:	4a26      	ldr	r2, [pc, #152]	; (80008cc <VectorB8+0x9c>)
 8000832:	6913      	ldr	r3, [r2, #16]
 8000834:	079b      	lsls	r3, r3, #30
 8000836:	d401      	bmi.n	800083c <VectorB8+0xc>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000838:	f7ff bf5a 	b.w	80006f0 <_port_irq_epilogue>
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    STM32_ST_TIM->SR = 0U;
 8000840:	2700      	movs	r7, #0
 8000842:	6117      	str	r7, [r2, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000844:	2620      	movs	r6, #32
 8000846:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 800084a:	4c21      	ldr	r4, [pc, #132]	; (80008d0 <VectorB8+0xa0>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800084c:	6a50      	ldr	r0, [r2, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800084e:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
  vtp = ch.vtlist.vt_next;
 8000852:	69e1      	ldr	r1, [r4, #28]
 8000854:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000856:	eba0 050c 	sub.w	r5, r0, ip
 800085a:	890b      	ldrh	r3, [r1, #8]
 800085c:	b2ad      	uxth	r5, r5
 800085e:	429d      	cmp	r5, r3
 8000860:	bf38      	it	cc
 8000862:	f104 081c 	addcc.w	r8, r4, #28
 8000866:	d31e      	bcc.n	80008a6 <VectorB8+0x76>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000868:	4615      	mov	r5, r2
 800086a:	f104 081c 	add.w	r8, r4, #28
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800086e:	680a      	ldr	r2, [r1, #0]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000870:	4463      	add	r3, ip
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000872:	4542      	cmp	r2, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000874:	84e3      	strh	r3, [r4, #38]	; 0x26
    fn = vtp->vt_func;
 8000876:	68cb      	ldr	r3, [r1, #12]
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000878:	f8c2 8004 	str.w	r8, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800087c:	61e2      	str	r2, [r4, #28]
    vtp->vt_func = NULL;
 800087e:	60cf      	str	r7, [r1, #12]
 8000880:	bf08      	it	eq
 8000882:	60ef      	streq	r7, [r5, #12]
 8000884:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000888:	6908      	ldr	r0, [r1, #16]
 800088a:	4798      	blx	r3
 800088c:	f386 8811 	msr	BASEPRI, r6
  return (systime_t)STM32_ST_TIM->CNT;
 8000890:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000892:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000896:	69e1      	ldr	r1, [r4, #28]
 8000898:	b280      	uxth	r0, r0
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800089a:	eba0 020c 	sub.w	r2, r0, ip
 800089e:	890b      	ldrh	r3, [r1, #8]
 80008a0:	b292      	uxth	r2, r2
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d9e3      	bls.n	800086e <VectorB8+0x3e>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80008a6:	4541      	cmp	r1, r8
 80008a8:	d009      	beq.n	80008be <VectorB8+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 80008aa:	4463      	add	r3, ip
 80008ac:	1a1b      	subs	r3, r3, r0
 80008ae:	b29b      	uxth	r3, r3
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	bf2c      	ite	cs
 80008b4:	18c3      	addcs	r3, r0, r3
 80008b6:	1c83      	addcc	r3, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <VectorB8+0x9c>)
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	6353      	str	r3, [r2, #52]	; 0x34
 80008be:	2300      	movs	r3, #0
 80008c0:	f383 8811 	msr	BASEPRI, r3
}
 80008c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 80008c8:	f7ff bf12 	b.w	80006f0 <_port_irq_epilogue>
 80008cc:	40000800 	.word	0x40000800
 80008d0:	20000948 	.word	0x20000948
	...

080008e0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80008e4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 80008e6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80008e8:	0d89      	lsrs	r1, r1, #22
 80008ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 80008ee:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 80008f0:	058c      	lsls	r4, r1, #22
 80008f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 80008f4:	b10a      	cbz	r2, 80008fa <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80008f6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80008f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80008fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80008fe:	f7ff bef7 	b.w	80006f0 <_port_irq_epilogue>
 8000902:	bf00      	nop
 8000904:	40026400 	.word	0x40026400
 8000908:	20000ab8 	.word	0x20000ab8
 800090c:	00000000 	.word	0x00000000

08000910 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000914:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8000916:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000918:	0c09      	lsrs	r1, r1, #16
 800091a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800091e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8000920:	040c      	lsls	r4, r1, #16
 8000922:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8000924:	b10a      	cbz	r2, 800092a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8000926:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8000928:	4790      	blx	r2
}
 800092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800092e:	f7ff bedf 	b.w	80006f0 <_port_irq_epilogue>
 8000932:	bf00      	nop
 8000934:	40026400 	.word	0x40026400
 8000938:	20000ab8 	.word	0x20000ab8
 800093c:	00000000 	.word	0x00000000

08000940 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000944:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 8000946:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000948:	0989      	lsrs	r1, r1, #6
 800094a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800094e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8000950:	018c      	lsls	r4, r1, #6
 8000952:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8000954:	b10a      	cbz	r2, 800095a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8000956:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8000958:	4790      	blx	r2
}
 800095a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800095e:	f7ff bec7 	b.w	80006f0 <_port_irq_epilogue>
 8000962:	bf00      	nop
 8000964:	40026400 	.word	0x40026400
 8000968:	20000ab8 	.word	0x20000ab8
 800096c:	00000000 	.word	0x00000000

08000970 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8000970:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000976:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 8000978:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800097a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800097e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8000980:	b10a      	cbz	r2, 8000986 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8000982:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000984:	4790      	blx	r2
}
 8000986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800098a:	f7ff beb1 	b.w	80006f0 <_port_irq_epilogue>
 800098e:	bf00      	nop
 8000990:	40026400 	.word	0x40026400
 8000994:	20000ab8 	.word	0x20000ab8
	...

080009a0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80009a4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 80009a6:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80009a8:	0d89      	lsrs	r1, r1, #22
 80009aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80009ae:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 80009b0:	058c      	lsls	r4, r1, #22
 80009b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 80009b4:	b10a      	cbz	r2, 80009ba <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 80009b6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80009b8:	4790      	blx	r2
}
 80009ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80009be:	f7ff be97 	b.w	80006f0 <_port_irq_epilogue>
 80009c2:	bf00      	nop
 80009c4:	40026400 	.word	0x40026400
 80009c8:	20000ab8 	.word	0x20000ab8
 80009cc:	00000000 	.word	0x00000000

080009d0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
 80009d2:	4809      	ldr	r0, [pc, #36]	; (80009f8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80009d4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 80009d6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80009d8:	0c09      	lsrs	r1, r1, #16
 80009da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80009de:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 80009e0:	040c      	lsls	r4, r1, #16
 80009e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 80009e4:	b10a      	cbz	r2, 80009ea <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 80009e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80009e8:	4790      	blx	r2
}
 80009ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80009ee:	f7ff be7f 	b.w	80006f0 <_port_irq_epilogue>
 80009f2:	bf00      	nop
 80009f4:	40026400 	.word	0x40026400
 80009f8:	20000ab8 	.word	0x20000ab8
 80009fc:	00000000 	.word	0x00000000

08000a00 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000a04:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 8000a06:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000a08:	0989      	lsrs	r1, r1, #6
 8000a0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8000a0e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8000a10:	018c      	lsls	r4, r1, #6
 8000a12:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8000a14:	b10a      	cbz	r2, 8000a1a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8000a16:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8000a18:	4790      	blx	r2
}
 8000a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000a1e:	f7ff be67 	b.w	80006f0 <_port_irq_epilogue>
 8000a22:	bf00      	nop
 8000a24:	40026400 	.word	0x40026400
 8000a28:	20000ab8 	.word	0x20000ab8
 8000a2c:	00000000 	.word	0x00000000

08000a30 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8000a30:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000a36:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 8000a38:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000a3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8000a3e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8000a40:	b10a      	cbz	r2, 8000a46 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8000a42:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000a44:	4790      	blx	r2
}
 8000a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000a4a:	f7ff be51 	b.w	80006f0 <_port_irq_epilogue>
 8000a4e:	bf00      	nop
 8000a50:	40026400 	.word	0x40026400
 8000a54:	20000ab8 	.word	0x20000ab8
	...

08000a60 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
 8000a62:	4809      	ldr	r0, [pc, #36]	; (8000a88 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000a64:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 8000a66:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000a68:	0d89      	lsrs	r1, r1, #22
 8000a6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8000a6e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8000a70:	058c      	lsls	r4, r1, #22
 8000a72:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8000a74:	b10a      	cbz	r2, 8000a7a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8000a76:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000a78:	4790      	blx	r2
}
 8000a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000a7e:	f7ff be37 	b.w	80006f0 <_port_irq_epilogue>
 8000a82:	bf00      	nop
 8000a84:	40026000 	.word	0x40026000
 8000a88:	20000ab8 	.word	0x20000ab8
 8000a8c:	00000000 	.word	0x00000000

08000a90 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000a94:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8000a96:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000a98:	0c09      	lsrs	r1, r1, #16
 8000a9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000a9e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8000aa0:	040c      	lsls	r4, r1, #16
 8000aa2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8000aa4:	b10a      	cbz	r2, 8000aaa <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000aa6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000aa8:	4790      	blx	r2
}
 8000aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000aae:	f7ff be1f 	b.w	80006f0 <_port_irq_epilogue>
 8000ab2:	bf00      	nop
 8000ab4:	40026000 	.word	0x40026000
 8000ab8:	20000ab8 	.word	0x20000ab8
 8000abc:	00000000 	.word	0x00000000

08000ac0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ac4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8000ac6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000ac8:	0989      	lsrs	r1, r1, #6
 8000aca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000ace:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8000ad0:	018c      	lsls	r4, r1, #6
 8000ad2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8000ad4:	b10a      	cbz	r2, 8000ada <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000ad6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000ad8:	4790      	blx	r2
}
 8000ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000ade:	f7ff be07 	b.w	80006f0 <_port_irq_epilogue>
 8000ae2:	bf00      	nop
 8000ae4:	40026000 	.word	0x40026000
 8000ae8:	20000ab8 	.word	0x20000ab8
 8000aec:	00000000 	.word	0x00000000

08000af0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000af0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000af6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8000af8:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000afa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8000afe:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8000b00:	b10a      	cbz	r2, 8000b06 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8000b02:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000b04:	4790      	blx	r2
}
 8000b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000b0a:	f7ff bdf1 	b.w	80006f0 <_port_irq_epilogue>
 8000b0e:	bf00      	nop
 8000b10:	40026000 	.word	0x40026000
 8000b14:	20000ab8 	.word	0x20000ab8
	...

08000b20 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
 8000b22:	4809      	ldr	r0, [pc, #36]	; (8000b48 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b24:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 8000b26:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b28:	0d89      	lsrs	r1, r1, #22
 8000b2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8000b2e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8000b30:	058c      	lsls	r4, r1, #22
 8000b32:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8000b34:	b10a      	cbz	r2, 8000b3a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8000b36:	69c0      	ldr	r0, [r0, #28]
 8000b38:	4790      	blx	r2
}
 8000b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000b3e:	f7ff bdd7 	b.w	80006f0 <_port_irq_epilogue>
 8000b42:	bf00      	nop
 8000b44:	40026000 	.word	0x40026000
 8000b48:	20000ab8 	.word	0x20000ab8
 8000b4c:	00000000 	.word	0x00000000

08000b50 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000b54:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 8000b56:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000b58:	0c09      	lsrs	r1, r1, #16
 8000b5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000b5e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8000b60:	040c      	lsls	r4, r1, #16
 8000b62:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8000b64:	b10a      	cbz	r2, 8000b6a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8000b66:	6940      	ldr	r0, [r0, #20]
 8000b68:	4790      	blx	r2
}
 8000b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000b6e:	f7ff bdbf 	b.w	80006f0 <_port_irq_epilogue>
 8000b72:	bf00      	nop
 8000b74:	40026000 	.word	0x40026000
 8000b78:	20000ab8 	.word	0x20000ab8
 8000b7c:	00000000 	.word	0x00000000

08000b80 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000b84:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 8000b86:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000b88:	0989      	lsrs	r1, r1, #6
 8000b8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8000b8e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8000b90:	018c      	lsls	r4, r1, #6
 8000b92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8000b94:	b10a      	cbz	r2, 8000b9a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8000b96:	68c0      	ldr	r0, [r0, #12]
 8000b98:	4790      	blx	r2
}
 8000b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000b9e:	f7ff bda7 	b.w	80006f0 <_port_irq_epilogue>
 8000ba2:	bf00      	nop
 8000ba4:	40026000 	.word	0x40026000
 8000ba8:	20000ab8 	.word	0x20000ab8
 8000bac:	00000000 	.word	0x00000000

08000bb0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8000bb0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000bb6:	6819      	ldr	r1, [r3, #0]
 8000bb8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8000bbc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	b10b      	cbz	r3, 8000bc6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8000bc2:	6850      	ldr	r0, [r2, #4]
 8000bc4:	4798      	blx	r3
}
 8000bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000bca:	f7ff bd91 	b.w	80006f0 <_port_irq_epilogue>
 8000bce:	bf00      	nop
 8000bd0:	40026000 	.word	0x40026000
 8000bd4:	20000ab8 	.word	0x20000ab8
	...

08000be0 <SVC_Handler>:
void SVC_Handler(void) {
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000be4:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8000be8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000bea:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f383 8811 	msr	BASEPRI, r3
}
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	0000      	movs	r0, r0
	...

08000c00 <chTMStopMeasurementX>:
  return DWT->CYCCNT;
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <chTMStopMeasurementX+0x44>)
 8000c04:	6852      	ldr	r2, [r2, #4]
 8000c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8000c08:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000c0a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
  tmp->last = (now - tmp->last) - offset;
 8000c0e:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 8000c10:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000c14:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000c16:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000c18:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8000c1a:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 8000c1c:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c1e:	eb14 0b03 	adds.w	fp, r4, r3
  if (tmp->last < tmp->best) {
 8000c22:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000c24:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c26:	f145 0c00 	adc.w	ip, r5, #0
  if (tmp->last > tmp->worst) {
 8000c2a:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000c2c:	bf88      	it	hi
 8000c2e:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000c30:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000c32:	e9c0 bc04 	strd	fp, ip, [r0, #16]
    tmp->best = tmp->last;
 8000c36:	bf38      	it	cc
 8000c38:	6003      	strcc	r3, [r0, #0]
}
 8000c3a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8000c3e:	4770      	bx	lr
 8000c40:	e0001000 	.word	0xe0001000
 8000c44:	20000948 	.word	0x20000948
	...

08000c50 <wakeup>:
 8000c50:	2320      	movs	r3, #32
 8000c52:	f383 8811 	msr	BASEPRI, r3
  switch (tp->p_state) {
 8000c56:	7f03      	ldrb	r3, [r0, #28]
 8000c58:	2b07      	cmp	r3, #7
 8000c5a:	d80d      	bhi.n	8000c78 <wakeup+0x28>
 8000c5c:	e8df f003 	tbb	[pc, r3]
 8000c60:	220c0c26 	.word	0x220c0c26
 8000c64:	080c0408 	.word	0x080c0408
    chSemFastSignalI(tp->p_u.wtsemp);
 8000c68:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000c6a:	6893      	ldr	r3, [r2, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000c70:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000c74:	6013      	str	r3, [r2, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000c76:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 8000c78:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 8000c7a:	2200      	movs	r2, #0
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000c7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->p_prio >= tp->p_prio);
 8000c80:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <wakeup+0x64>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000c84:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 8000c86:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 8000c88:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	d2fb      	bcs.n	8000c88 <wakeup+0x38>
  tp->p_prev = cp->p_prev;
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	2100      	movs	r1, #0
 8000c94:	e9c0 3200 	strd	r3, r2, [r0]
  tp->p_prev->p_next = tp;
 8000c98:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8000c9a:	6058      	str	r0, [r3, #4]
 8000c9c:	f381 8811 	msr	BASEPRI, r1
}
 8000ca0:	bc10      	pop	{r4}
 8000ca2:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 8000ca4:	6a03      	ldr	r3, [r0, #32]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
    break;
 8000caa:	e7e5      	b.n	8000c78 <wakeup+0x28>
 8000cac:	2300      	movs	r3, #0
 8000cae:	f383 8811 	msr	BASEPRI, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	20000948 	.word	0x20000948
	...

08000cc0 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 8000cc0:	2200      	movs	r2, #0
  } while (cp->p_prio >= tp->p_prio);
 8000cc2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <chSchReadyI+0x24>)
thread_t *chSchReadyI(thread_t *tp) {
 8000cc6:	b410      	push	{r4}
 8000cc8:	4604      	mov	r4, r0
  tp->p_state = CH_STATE_READY;
 8000cca:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 8000ccc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	d2fb      	bcs.n	8000ccc <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 8000cd4:	685a      	ldr	r2, [r3, #4]
}
 8000cd6:	4620      	mov	r0, r4
  tp->p_prev = cp->p_prev;
 8000cd8:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 8000cdc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000cde:	605c      	str	r4, [r3, #4]
}
 8000ce0:	bc10      	pop	{r4}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000948 	.word	0x20000948
	...

08000cf0 <chEvtBroadcastFlagsI.constprop.28>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8000cf2:	4f15      	ldr	r7, [pc, #84]	; (8000d48 <chEvtBroadcastFlagsI.constprop.28+0x58>)
 8000cf4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000cf8:	42bc      	cmp	r4, r7
 8000cfa:	d01f      	beq.n	8000d3c <chEvtBroadcastFlagsI.constprop.28+0x4c>
 8000cfc:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000cfe:	2600      	movs	r6, #0
 8000d00:	e004      	b.n	8000d0c <chEvtBroadcastFlagsI.constprop.28+0x1c>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000d02:	2a0b      	cmp	r2, #11
 8000d04:	d01b      	beq.n	8000d3e <chEvtBroadcastFlagsI.constprop.28+0x4e>
    elp = elp->el_next;
 8000d06:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000d08:	42bc      	cmp	r4, r7
 8000d0a:	d017      	beq.n	8000d3c <chEvtBroadcastFlagsI.constprop.28+0x4c>
    elp->el_flags |= flags;
 8000d0c:	68e3      	ldr	r3, [r4, #12]
 8000d0e:	432b      	orrs	r3, r5
 8000d10:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000d12:	b115      	cbz	r5, 8000d1a <chEvtBroadcastFlagsI.constprop.28+0x2a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000d14:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000d16:	4213      	tst	r3, r2
 8000d18:	d0f5      	beq.n	8000d06 <chEvtBroadcastFlagsI.constprop.28+0x16>
  tp->p_epending |= events;
 8000d1a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8000d1e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000d20:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 8000d22:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000d24:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 8000d26:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000d28:	d1eb      	bne.n	8000d02 <chEvtBroadcastFlagsI.constprop.28+0x12>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000d2a:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000d2c:	4213      	tst	r3, r2
 8000d2e:	d0ea      	beq.n	8000d06 <chEvtBroadcastFlagsI.constprop.28+0x16>
    tp->p_u.rdymsg = MSG_OK;
 8000d30:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 8000d32:	f7ff ffc5 	bl	8000cc0 <chSchReadyI>
    elp = elp->el_next;
 8000d36:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000d38:	42bc      	cmp	r4, r7
 8000d3a:	d1e7      	bne.n	8000d0c <chEvtBroadcastFlagsI.constprop.28+0x1c>
}
 8000d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000d3e:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000d40:	ea32 0303 	bics.w	r3, r2, r3
 8000d44:	d1df      	bne.n	8000d06 <chEvtBroadcastFlagsI.constprop.28+0x16>
 8000d46:	e7f3      	b.n	8000d30 <chEvtBroadcastFlagsI.constprop.28+0x40>
 8000d48:	200008d0 	.word	0x200008d0
 8000d4c:	00000000 	.word	0x00000000

08000d50 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8000d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8000d54:	4c67      	ldr	r4, [pc, #412]	; (8000ef4 <VectorD4+0x1a4>)
 8000d56:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000d58:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 8000d5c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8000d5e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8000d60:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8000d62:	d47d      	bmi.n	8000e60 <VectorD4+0x110>
 8000d64:	2320      	movs	r3, #32
 8000d66:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000d6a:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8000d6e:	d049      	beq.n	8000e04 <VectorD4+0xb4>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000d70:	4f61      	ldr	r7, [pc, #388]	; (8000ef8 <VectorD4+0x1a8>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000d72:	f04f 0900 	mov.w	r9, #0
 8000d76:	e008      	b.n	8000d8a <VectorD4+0x3a>
    if (sr & USART_SR_RXNE)
 8000d78:	06a9      	lsls	r1, r5, #26
    b = u->DR;
 8000d7a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000d7e:	d41d      	bmi.n	8000dbc <VectorD4+0x6c>
    sr = u->SR;
 8000d80:	6835      	ldr	r5, [r6, #0]
 8000d82:	b2ad      	uxth	r5, r5
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000d84:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8000d88:	d03c      	beq.n	8000e04 <VectorD4+0xb4>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000d8a:	072b      	lsls	r3, r5, #28
 8000d8c:	d0f4      	beq.n	8000d78 <VectorD4+0x28>
    sts |= SD_OVERRUN_ERROR;
 8000d8e:	f015 0f08 	tst.w	r5, #8
 8000d92:	bf0c      	ite	eq
 8000d94:	2000      	moveq	r0, #0
 8000d96:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8000d98:	07e9      	lsls	r1, r5, #31
    sts |= SD_PARITY_ERROR;
 8000d9a:	bf48      	it	mi
 8000d9c:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8000da0:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8000da2:	bf48      	it	mi
 8000da4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8000da8:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 8000daa:	bf48      	it	mi
 8000dac:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000db0:	f7ff ff9e 	bl	8000cf0 <chEvtBroadcastFlagsI.constprop.28>
    if (sr & USART_SR_RXNE)
 8000db4:	06a9      	lsls	r1, r5, #26
    b = u->DR;
 8000db6:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000dba:	d5e1      	bpl.n	8000d80 <VectorD4+0x30>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000dbc:	6963      	ldr	r3, [r4, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d040      	beq.n	8000e44 <VectorD4+0xf4>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000dc2:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d043      	beq.n	8000e52 <VectorD4+0x102>
  iqp->q_counter++;
 8000dca:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
 8000dcc:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
 8000dce:	3201      	adds	r2, #1
 8000dd0:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
 8000dd2:	6221      	str	r1, [r4, #32]
    b = u->DR;
 8000dd4:	f883 a000 	strb.w	sl, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000dd8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d301      	bcc.n	8000de4 <VectorD4+0x94>
    iqp->q_wrptr = iqp->q_buffer;
 8000de0:	69a3      	ldr	r3, [r4, #24]
 8000de2:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000de4:	68e3      	ldr	r3, [r4, #12]
 8000de6:	42bb      	cmp	r3, r7
 8000de8:	d0ca      	beq.n	8000d80 <VectorD4+0x30>
  tqp->p_next = tp->p_next;
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	60e2      	str	r2, [r4, #12]
  (void) chSchReadyI(tp);
 8000dee:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000df0:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 8000df2:	f8c3 9020 	str.w	r9, [r3, #32]
  (void) chSchReadyI(tp);
 8000df6:	f7ff ff63 	bl	8000cc0 <chSchReadyI>
    sr = u->SR;
 8000dfa:	6835      	ldr	r5, [r6, #0]
 8000dfc:	b2ad      	uxth	r5, r5
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000dfe:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8000e02:	d1c2      	bne.n	8000d8a <VectorD4+0x3a>
 8000e04:	2300      	movs	r3, #0
 8000e06:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000e0a:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000e0e:	d001      	beq.n	8000e14 <VectorD4+0xc4>
 8000e10:	062a      	lsls	r2, r5, #24
 8000e12:	d433      	bmi.n	8000e7c <VectorD4+0x12c>
  if (sr & USART_SR_TC) {
 8000e14:	066b      	lsls	r3, r5, #25
 8000e16:	d511      	bpl.n	8000e3c <VectorD4+0xec>
 8000e18:	2320      	movs	r3, #32
 8000e1a:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000e1e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d051      	beq.n	8000eca <VectorD4+0x17a>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000e26:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000e2a:	ea08 0303 	and.w	r3, r8, r3
    u->SR = ~USART_SR_TC;
 8000e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000e32:	60f3      	str	r3, [r6, #12]
 8000e34:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8000e36:	6032      	str	r2, [r6, #0]
 8000e38:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 8000e3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8000e40:	f7ff bc56 	b.w	80006f0 <_port_irq_epilogue>
 8000e44:	2004      	movs	r0, #4
 8000e46:	f7ff ff53 	bl	8000cf0 <chEvtBroadcastFlagsI.constprop.28>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000e4a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d1bb      	bne.n	8000dca <VectorD4+0x7a>
 8000e52:	6962      	ldr	r2, [r4, #20]
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d0b8      	beq.n	8000dca <VectorD4+0x7a>
 8000e58:	2080      	movs	r0, #128	; 0x80
 8000e5a:	f7ff ff49 	bl	8000cf0 <chEvtBroadcastFlagsI.constprop.28>
 8000e5e:	e78f      	b.n	8000d80 <VectorD4+0x30>
 8000e60:	2320      	movs	r3, #32
 8000e62:	f383 8811 	msr	BASEPRI, r3
 8000e66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e6a:	f7ff ff41 	bl	8000cf0 <chEvtBroadcastFlagsI.constprop.28>
    u->SR = ~USART_SR_LBD;
 8000e6e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000e72:	6033      	str	r3, [r6, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	f383 8811 	msr	BASEPRI, r3
 8000e7a:	e773      	b.n	8000d64 <VectorD4+0x14>
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000e82:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d026      	beq.n	8000ed8 <VectorD4+0x188>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000e8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000e8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
  b = *oqp->q_rdptr++;
 8000e8e:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 8000e90:	3201      	adds	r2, #1
 8000e92:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000e94:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8000e96:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 8000e98:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000e9a:	d301      	bcc.n	8000ea0 <VectorD4+0x150>
    oqp->q_rdptr = oqp->q_buffer;
 8000e9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e9e:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000ea0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ea2:	4a16      	ldr	r2, [pc, #88]	; (8000efc <VectorD4+0x1ac>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d009      	beq.n	8000ebc <VectorD4+0x16c>
  tqp->p_next = tp->p_next;
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_u.rdymsg = msg;
 8000eac:	f04f 0c00 	mov.w	ip, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000eb0:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8000eb2:	4618      	mov	r0, r3
  tp->p_u.rdymsg = msg;
 8000eb4:	f8c3 c020 	str.w	ip, [r3, #32]
  (void) chSchReadyI(tp);
 8000eb8:	f7ff ff02 	bl	8000cc0 <chSchReadyI>
      u->DR = b;
 8000ebc:	6077      	str	r7, [r6, #4]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f383 8811 	msr	BASEPRI, r3
  if (sr & USART_SR_TC) {
 8000ec4:	066b      	lsls	r3, r5, #25
 8000ec6:	d5b9      	bpl.n	8000e3c <VectorD4+0xec>
 8000ec8:	e7a6      	b.n	8000e18 <VectorD4+0xc8>
 8000eca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0aa      	beq.n	8000e26 <VectorD4+0xd6>
 8000ed0:	2010      	movs	r0, #16
 8000ed2:	f7ff ff0d 	bl	8000cf0 <chEvtBroadcastFlagsI.constprop.28>
 8000ed6:	e7a6      	b.n	8000e26 <VectorD4+0xd6>
 8000ed8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d0d5      	beq.n	8000e8a <VectorD4+0x13a>
 8000ede:	2008      	movs	r0, #8
 8000ee0:	f7ff ff06 	bl	8000cf0 <chEvtBroadcastFlagsI.constprop.28>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000ee4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000ee8:	ea08 0303 	and.w	r3, r8, r3
 8000eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef0:	60f3      	str	r3, [r6, #12]
 8000ef2:	e7e4      	b.n	8000ebe <VectorD4+0x16e>
 8000ef4:	200008d0 	.word	0x200008d0
 8000ef8:	200008dc 	.word	0x200008dc
 8000efc:	20000900 	.word	0x20000900

08000f00 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <Vector88+0x8c>)
 8000f04:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8000f06:	2100      	movs	r1, #0
 8000f08:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8000f0a:	0693      	lsls	r3, r2, #26
 8000f0c:	d536      	bpl.n	8000f7c <Vector88+0x7c>
 8000f0e:	4c20      	ldr	r4, [pc, #128]	; (8000f90 <Vector88+0x90>)
 8000f10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f12:	680a      	ldr	r2, [r1, #0]
 8000f14:	6853      	ldr	r3, [r2, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d030      	beq.n	8000f7c <Vector88+0x7c>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 8000f1a:	6925      	ldr	r5, [r4, #16]
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d02d      	beq.n	8000f7c <Vector88+0x7c>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8000f20:	6813      	ldr	r3, [r2, #0]
 8000f22:	f023 031f 	bic.w	r3, r3, #31
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f013 0301 	ands.w	r3, r3, #1
 8000f2e:	d1fb      	bne.n	8000f28 <Vector88+0x28>
 8000f30:	7a0f      	ldrb	r7, [r1, #8]
 8000f32:	684e      	ldr	r6, [r1, #4]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8000f34:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 8000f36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8000f38:	203d      	movs	r0, #61	; 0x3d
 8000f3a:	40b8      	lsls	r0, r7
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000f3c:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
 8000f3e:	6030      	str	r0, [r6, #0]
  adcp->adc->CR1 = 0;
 8000f40:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8000f42:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000f44:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8000f46:	b1ed      	cbz	r5, 8000f84 <Vector88+0x84>
 8000f48:	2305      	movs	r3, #5
 8000f4a:	7023      	strb	r3, [r4, #0]
 8000f4c:	4810      	ldr	r0, [pc, #64]	; (8000f90 <Vector88+0x90>)
 8000f4e:	47a8      	blx	r5
 8000f50:	7823      	ldrb	r3, [r4, #0]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	bf04      	itt	eq
 8000f56:	2302      	moveq	r3, #2
 8000f58:	7023      	strbeq	r3, [r4, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	6123      	str	r3, [r4, #16]
 8000f5e:	2320      	movs	r3, #32
 8000f60:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8000f64:	6960      	ldr	r0, [r4, #20]
 8000f66:	b130      	cbz	r0, 8000f76 <Vector88+0x76>
    tp->p_u.rdymsg = msg;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6c:	6203      	str	r3, [r0, #32]
    *trp = NULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	6163      	str	r3, [r4, #20]
    (void) chSchReadyI(tp);
 8000f72:	f7ff fea5 	bl	8000cc0 <chSchReadyI>
 8000f76:	2300      	movs	r3, #0
 8000f78:	f383 8811 	msr	BASEPRI, r3
}
 8000f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8000f80:	f7ff bbb6 	b.w	80006f0 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8000f84:	2302      	movs	r3, #2
 8000f86:	6125      	str	r5, [r4, #16]
 8000f88:	7023      	strb	r3, [r4, #0]
 8000f8a:	e7e8      	b.n	8000f5e <Vector88+0x5e>
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	20000838 	.word	0x20000838
	...

08000fa0 <adc_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000fa0:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8000fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa8:	4604      	mov	r4, r0
 8000faa:	6905      	ldr	r5, [r0, #16]
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000fac:	d033      	beq.n	8001016 <adc_lld_serve_rx_interrupt+0x76>
  dmaStreamDisable(adcp->dmastp);
 8000fae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000fb0:	6803      	ldr	r3, [r0, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f022 021f 	bic.w	r2, r2, #31
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	6819      	ldr	r1, [r3, #0]
 8000fbc:	f011 0101 	ands.w	r1, r1, #1
 8000fc0:	d1fb      	bne.n	8000fba <adc_lld_serve_rx_interrupt+0x1a>
 8000fc2:	7a07      	ldrb	r7, [r0, #8]
 8000fc4:	6846      	ldr	r6, [r0, #4]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000fc6:	68ad      	ldr	r5, [r5, #8]
  adcp->adc->CR1 = 0;
 8000fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8000fca:	223d      	movs	r2, #61	; 0x3d
 8000fcc:	40ba      	lsls	r2, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000fce:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8000fd0:	6032      	str	r2, [r6, #0]
  adcp->adc->CR1 = 0;
 8000fd2:	6059      	str	r1, [r3, #4]
  adcp->adc->CR2 = 0;
 8000fd4:	6099      	str	r1, [r3, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000fd6:	6098      	str	r0, [r3, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	d03e      	beq.n	800105a <adc_lld_serve_rx_interrupt+0xba>
 8000fdc:	2305      	movs	r3, #5
 8000fde:	7023      	strb	r3, [r4, #0]
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	47a8      	blx	r5
 8000fe4:	7823      	ldrb	r3, [r4, #0]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	bf04      	itt	eq
 8000fea:	2302      	moveq	r3, #2
 8000fec:	7023      	strbeq	r3, [r4, #0]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	6123      	str	r3, [r4, #16]
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8000ff8:	6963      	ldr	r3, [r4, #20]
 8000ffa:	b13b      	cbz	r3, 800100c <adc_lld_serve_rx_interrupt+0x6c>
    *trp = NULL;
 8000ffc:	2100      	movs	r1, #0
    tp->p_u.rdymsg = msg;
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    *trp = NULL;
 8001002:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8001004:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8001006:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8001008:	f7ff fe5a 	bl	8000cc0 <chSchReadyI>
 800100c:	2300      	movs	r3, #0
 800100e:	f383 8811 	msr	BASEPRI, r3
}
 8001012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (adcp->grpp != NULL) {
 8001016:	2d00      	cmp	r5, #0
 8001018:	d0fb      	beq.n	8001012 <adc_lld_serve_rx_interrupt+0x72>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 800101a:	068a      	lsls	r2, r1, #26
 800101c:	d512      	bpl.n	8001044 <adc_lld_serve_rx_interrupt+0xa4>
        _adc_isr_full_code(adcp);
 800101e:	782b      	ldrb	r3, [r5, #0]
 8001020:	686e      	ldr	r6, [r5, #4]
 8001022:	b1f3      	cbz	r3, 8001062 <adc_lld_serve_rx_interrupt+0xc2>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d0f4      	beq.n	8001012 <adc_lld_serve_rx_interrupt+0x72>
 8001028:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 800102c:	2a01      	cmp	r2, #1
 800102e:	d943      	bls.n	80010b8 <adc_lld_serve_rx_interrupt+0x118>
 8001030:	886b      	ldrh	r3, [r5, #2]
 8001032:	0852      	lsrs	r2, r2, #1
 8001034:	fb02 f303 	mul.w	r3, r2, r3
 8001038:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800103c:	4633      	mov	r3, r6
}
 800103e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 8001042:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001044:	06cb      	lsls	r3, r1, #27
 8001046:	d5e4      	bpl.n	8001012 <adc_lld_serve_rx_interrupt+0x72>
        _adc_isr_half_code(adcp);
 8001048:	686b      	ldr	r3, [r5, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0e1      	beq.n	8001012 <adc_lld_serve_rx_interrupt+0x72>
 800104e:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
}
 8001052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_half_code(adcp);
 8001056:	0852      	lsrs	r2, r2, #1
 8001058:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 800105a:	2302      	movs	r3, #2
 800105c:	6125      	str	r5, [r4, #16]
 800105e:	7023      	strb	r3, [r4, #0]
 8001060:	e7c7      	b.n	8000ff2 <adc_lld_serve_rx_interrupt+0x52>
  dmaStreamDisable(adcp->dmastp);
 8001062:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001064:	6802      	ldr	r2, [r0, #0]
 8001066:	6813      	ldr	r3, [r2, #0]
 8001068:	f023 031f 	bic.w	r3, r3, #31
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	f013 0301 	ands.w	r3, r3, #1
 8001074:	d1fb      	bne.n	800106e <adc_lld_serve_rx_interrupt+0xce>
 8001076:	7a07      	ldrb	r7, [r0, #8]
 8001078:	6845      	ldr	r5, [r0, #4]
  adcp->adc->CR1 = 0;
 800107a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800107c:	213d      	movs	r1, #61	; 0x3d
 800107e:	40b9      	lsls	r1, r7
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001080:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
 8001082:	6029      	str	r1, [r5, #0]
  adcp->adc->CR1 = 0;
 8001084:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8001086:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8001088:	6090      	str	r0, [r2, #8]
        _adc_isr_full_code(adcp);
 800108a:	b1ce      	cbz	r6, 80010c0 <adc_lld_serve_rx_interrupt+0x120>
 800108c:	2304      	movs	r3, #4
 800108e:	7023      	strb	r3, [r4, #0]
 8001090:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001094:	4620      	mov	r0, r4
 8001096:	47b0      	blx	r6
 8001098:	7823      	ldrb	r3, [r4, #0]
 800109a:	2b04      	cmp	r3, #4
 800109c:	d010      	beq.n	80010c0 <adc_lld_serve_rx_interrupt+0x120>
 800109e:	2320      	movs	r3, #32
 80010a0:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80010a4:	6963      	ldr	r3, [r4, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0b0      	beq.n	800100c <adc_lld_serve_rx_interrupt+0x6c>
    *trp = NULL;
 80010aa:	2200      	movs	r2, #0
 80010ac:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
 80010ae:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 80010b0:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 80010b2:	f7ff fe05 	bl	8000cc0 <chSchReadyI>
 80010b6:	e7a9      	b.n	800100c <adc_lld_serve_rx_interrupt+0x6c>
 80010b8:	4633      	mov	r3, r6
}
 80010ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        _adc_isr_full_code(adcp);
 80010be:	4718      	bx	r3
 80010c0:	2202      	movs	r2, #2
 80010c2:	2300      	movs	r3, #0
 80010c4:	7022      	strb	r2, [r4, #0]
 80010c6:	6123      	str	r3, [r4, #16]
 80010c8:	e7e9      	b.n	800109e <adc_lld_serve_rx_interrupt+0xfe>
 80010ca:	bf00      	nop
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <chVTDoResetI+0x70>)
 80010d2:	6802      	ldr	r2, [r0, #0]
 80010d4:	69d9      	ldr	r1, [r3, #28]
 80010d6:	4281      	cmp	r1, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 80010d8:	b430      	push	{r4, r5}
  if (ch.vtlist.vt_next != vtp) {
 80010da:	d00e      	beq.n	80010fa <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 80010dc:	6841      	ldr	r1, [r0, #4]
 80010de:	600a      	str	r2, [r1, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80010e0:	6802      	ldr	r2, [r0, #0]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80010e2:	331c      	adds	r3, #28
    vtp->vt_func = NULL;
 80010e4:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80010e6:	429a      	cmp	r2, r3
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80010e8:	6051      	str	r1, [r2, #4]
    vtp->vt_func = NULL;
 80010ea:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80010ec:	d003      	beq.n	80010f6 <chVTDoResetI+0x26>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 80010ee:	8901      	ldrh	r1, [r0, #8]
 80010f0:	8913      	ldrh	r3, [r2, #8]
 80010f2:	440b      	add	r3, r1
 80010f4:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80010f6:	bc30      	pop	{r4, r5}
 80010f8:	4770      	bx	lr
  ch.vtlist.vt_next = vtp->vt_next;
 80010fa:	4618      	mov	r0, r3
  vtp->vt_func = NULL;
 80010fc:	2400      	movs	r4, #0
  ch.vtlist.vt_next = vtp->vt_next;
 80010fe:	f840 2f1c 	str.w	r2, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001102:	4282      	cmp	r2, r0
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001104:	6050      	str	r0, [r2, #4]
  vtp->vt_func = NULL;
 8001106:	60cc      	str	r4, [r1, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001108:	d017      	beq.n	800113a <chVTDoResetI+0x6a>
  return (systime_t)STM32_ST_TIM->CNT;
 800110a:	4c0e      	ldr	r4, [pc, #56]	; (8001144 <chVTDoResetI+0x74>)
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800110c:	8908      	ldrh	r0, [r1, #8]
 800110e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001110:	8cdd      	ldrh	r5, [r3, #38]	; 0x26
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001112:	8913      	ldrh	r3, [r2, #8]
 8001114:	b289      	uxth	r1, r1
 8001116:	4403      	add	r3, r0
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001118:	1b48      	subs	r0, r1, r5
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800111a:	b29b      	uxth	r3, r3
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800111c:	b280      	uxth	r0, r0
 800111e:	4283      	cmp	r3, r0
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001120:	8113      	strh	r3, [r2, #8]
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001122:	d9e8      	bls.n	80010f6 <chVTDoResetI+0x26>
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001124:	1a6d      	subs	r5, r5, r1
 8001126:	442b      	add	r3, r5
 8001128:	b29b      	uxth	r3, r3
  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 800112a:	2b02      	cmp	r3, #2
 800112c:	bf2c      	ite	cs
 800112e:	18cb      	addcs	r3, r1, r3
 8001130:	1c8b      	addcc	r3, r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001132:	b29b      	uxth	r3, r3
 8001134:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001136:	bc30      	pop	{r4, r5}
 8001138:	4770      	bx	lr
  STM32_ST_TIM->DIER = 0;
 800113a:	4b02      	ldr	r3, [pc, #8]	; (8001144 <chVTDoResetI+0x74>)
 800113c:	60dc      	str	r4, [r3, #12]
    return;
 800113e:	e7da      	b.n	80010f6 <chVTDoResetI+0x26>
 8001140:	20000948 	.word	0x20000948
 8001144:	40000800 	.word	0x40000800
	...

08001150 <motor_tick>:
    } else { return; }
    motor_checker(motor_number);
    chprintf(&SD1, "%d \r\n", motor_actual_speeds[motor_number]);
}*/

void motor_tick() {
 8001150:	b538      	push	{r3, r4, r5, lr}
    int8_t i = index;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <motor_tick+0x5c>)
    index = -1;
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 8001154:	4916      	ldr	r1, [pc, #88]	; (80011b0 <motor_tick+0x60>)
    int8_t i = index;
 8001156:	f993 4000 	ldrsb.w	r4, [r3]
    //chprintf(&SD1, "%d %5d %5d %5d %5d \r\n",i, main_timer[i], motor_actual_speeds[i], period[i], motor_freqs[i]);
    if (motor_actual_speeds[i] < 2048) {
 800115a:	4d16      	ldr	r5, [pc, #88]	; (80011b4 <motor_tick+0x64>)
    index = -1;
 800115c:	20ff      	movs	r0, #255	; 0xff
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 800115e:	2220      	movs	r2, #32
    index = -1;
 8001160:	7018      	strb	r0, [r3, #0]
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 8001162:	830a      	strh	r2, [r1, #24]
    if (motor_actual_speeds[i] < 2048) {
 8001164:	f935 1014 	ldrsh.w	r1, [r5, r4, lsl #1]
 8001168:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800116c:	db13      	blt.n	8001196 <motor_tick+0x46>
        pwmEnableChannel(&PWMD1, i, ++motor_actual_speeds[i]);
    } else {
        chVTReset(&main_timer[i]);
 800116e:	4812      	ldr	r0, [pc, #72]	; (80011b8 <motor_tick+0x68>)
 8001170:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001174:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001178:	f382 8811 	msr	BASEPRI, r2
  if (chVTIsArmedI(vtp)) {
 800117c:	68c3      	ldr	r3, [r0, #12]
 800117e:	b10b      	cbz	r3, 8001184 <motor_tick+0x34>
    chVTDoResetI(vtp);
 8001180:	f7ff ffa6 	bl	80010d0 <chVTDoResetI>
 8001184:	2300      	movs	r3, #0
 8001186:	f383 8811 	msr	BASEPRI, r3
        motor_actual_speeds[i] = motor_freqs[i]; // set to default
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <motor_tick+0x6c>)
 800118c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001190:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
        //chprintf(&SD1, "_Error: Motor malfunction or bad power supply on motor %d \r \n", i);
    }
}
 8001194:	bd38      	pop	{r3, r4, r5, pc}
        pwmEnableChannel(&PWMD1, i, ++motor_actual_speeds[i]);
 8001196:	3101      	adds	r1, #1
 8001198:	b20b      	sxth	r3, r1
 800119a:	4619      	mov	r1, r3
 800119c:	b2e0      	uxtb	r0, r4
 800119e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
}
 80011a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pwmEnableChannel(&PWMD1, i, ++motor_actual_speeds[i]);
 80011a6:	f7ff b8cb 	b.w	8000340 <pwmEnableChannel.constprop.11>
 80011aa:	bf00      	nop
 80011ac:	20000800 	.word	0x20000800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	20000b7c 	.word	0x20000b7c
 80011b8:	20000b40 	.word	0x20000b40
 80011bc:	20000b84 	.word	0x20000b84

080011c0 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 80011c0:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80011c2:	4e25      	ldr	r6, [pc, #148]	; (8001258 <chVTDoSetI+0x98>)
  return (systime_t)STM32_ST_TIM->CNT;
 80011c4:	4f25      	ldr	r7, [pc, #148]	; (800125c <chVTDoSetI+0x9c>)
 80011c6:	46b4      	mov	ip, r6
 80011c8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80011ca:	f85c 4f1c 	ldr.w	r4, [ip, #28]!
 80011ce:	2902      	cmp	r1, #2
 80011d0:	bf38      	it	cc
 80011d2:	2102      	movcc	r1, #2
 80011d4:	4564      	cmp	r4, ip
  vtp->vt_func = vtfunc;
 80011d6:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80011da:	b2aa      	uxth	r2, r5
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80011dc:	d02d      	beq.n	800123a <chVTDoSetI+0x7a>
    delta = now - ch.vtlist.vt_lasttime + delay;
 80011de:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
 80011e2:	8923      	ldrh	r3, [r4, #8]
 80011e4:	eba2 020c 	sub.w	r2, r2, ip
    if (delta < now - ch.vtlist.vt_lasttime) {
 80011e8:	b2ad      	uxth	r5, r5
    delta = now - ch.vtlist.vt_lasttime + delay;
 80011ea:	4411      	add	r1, r2
 80011ec:	b289      	uxth	r1, r1
    if (delta < now - ch.vtlist.vt_lasttime) {
 80011ee:	eba5 050c 	sub.w	r5, r5, ip
 80011f2:	42a9      	cmp	r1, r5
 80011f4:	db17      	blt.n	8001226 <chVTDoSetI+0x66>
    else if (delta < p->vt_delta) {
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d81a      	bhi.n	8001230 <chVTDoSetI+0x70>
  while (p->vt_delta < delta) {
 80011fa:	4299      	cmp	r1, r3
 80011fc:	d905      	bls.n	800120a <chVTDoSetI+0x4a>
    p = p->vt_next;
 80011fe:	6824      	ldr	r4, [r4, #0]
    delta -= p->vt_delta;
 8001200:	1ac9      	subs	r1, r1, r3
  while (p->vt_delta < delta) {
 8001202:	8923      	ldrh	r3, [r4, #8]
    delta -= p->vt_delta;
 8001204:	b289      	uxth	r1, r1
  while (p->vt_delta < delta) {
 8001206:	428b      	cmp	r3, r1
 8001208:	d3f9      	bcc.n	80011fe <chVTDoSetI+0x3e>
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->vt_prev->vt_next = vtp;
 8001210:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 8001212:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001214:	8101      	strh	r1, [r0, #8]
  p->vt_delta -= delta;
 8001216:	8923      	ldrh	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001218:	f64f 72ff 	movw	r2, #65535	; 0xffff
  p->vt_delta -= delta;
 800121c:	1a59      	subs	r1, r3, r1
 800121e:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001220:	84b2      	strh	r2, [r6, #36]	; 0x24
}
 8001222:	bcf0      	pop	{r4, r5, r6, r7}
 8001224:	4770      	bx	lr
      p = p->vt_next;
 8001226:	6824      	ldr	r4, [r4, #0]
      delta -= p->vt_delta;
 8001228:	1ac9      	subs	r1, r1, r3
 800122a:	b289      	uxth	r1, r1
      p = p->vt_next;
 800122c:	8923      	ldrh	r3, [r4, #8]
 800122e:	e7e4      	b.n	80011fa <chVTDoSetI+0x3a>
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8001230:	448c      	add	ip, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001232:	fa1f f28c 	uxth.w	r2, ip
 8001236:	637a      	str	r2, [r7, #52]	; 0x34
 8001238:	e7df      	b.n	80011fa <chVTDoSetI+0x3a>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800123a:	188b      	adds	r3, r1, r2
      ch.vtlist.vt_lasttime = now;
 800123c:	84f2      	strh	r2, [r6, #38]	; 0x26
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800123e:	b29b      	uxth	r3, r3
  STM32_ST_TIM->SR     = 0;
 8001240:	2500      	movs	r5, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001242:	2202      	movs	r2, #2
      ch.vtlist.vt_prev = vtp;
 8001244:	e9c6 0007 	strd	r0, r0, [r6, #28]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001248:	e9c0 4400 	strd	r4, r4, [r0]
      vtp->vt_delta = delay;
 800124c:	8101      	strh	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001250:	613d      	str	r5, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001252:	60fa      	str	r2, [r7, #12]
 8001254:	e7e5      	b.n	8001222 <chVTDoSetI+0x62>
 8001256:	bf00      	nop
 8001258:	20000948 	.word	0x20000948
 800125c:	40000800 	.word	0x40000800

08001260 <encoder_pulse_captured>:
void encoder_pulse_captured(ICUDriver *icup) {
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (icup == &ICUD2) {
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <encoder_pulse_captured+0xb4>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001264:	6942      	ldr	r2, [r0, #20]
    if (icup == &ICUD2) {
 8001266:	4298      	cmp	r0, r3
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 8001268:	6814      	ldr	r4, [r2, #0]
    if (icup == &ICUD2) {
 800126a:	d04e      	beq.n	800130a <encoder_pulse_captured+0xaa>
    } else if (icup == &ICUD5) {
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <encoder_pulse_captured+0xb8>)
 800126e:	4298      	cmp	r0, r3
 8001270:	d003      	beq.n	800127a <encoder_pulse_captured+0x1a>
    } else if (icup == &ICUD3) {
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <encoder_pulse_captured+0xbc>)
 8001274:	4298      	cmp	r0, r3
 8001276:	d043      	beq.n	8001300 <encoder_pulse_captured+0xa0>
}
 8001278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (icup == &ICUD5) {
 800127a:	2601      	movs	r6, #1
 800127c:	4f28      	ldr	r7, [pc, #160]	; (8001320 <encoder_pulse_captured+0xc0>)
 800127e:	4635      	mov	r5, r6
        sender = 1;
 8001280:	4631      	mov	r1, r6
        index = sender;
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <encoder_pulse_captured+0xc4>)
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001284:	4a28      	ldr	r2, [pc, #160]	; (8001328 <encoder_pulse_captured+0xc8>)
        index = sender;
 8001286:	7019      	strb	r1, [r3, #0]
        palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001288:	2320      	movs	r3, #32
 800128a:	8353      	strh	r3, [r2, #26]
 800128c:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	b113      	cbz	r3, 800129a <encoder_pulse_captured+0x3a>
    chVTDoResetI(vtp);
 8001294:	4638      	mov	r0, r7
 8001296:	f7ff ff1b 	bl	80010d0 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 800129a:	4638      	mov	r0, r7
 800129c:	2300      	movs	r3, #0
 800129e:	4a23      	ldr	r2, [pc, #140]	; (800132c <encoder_pulse_captured+0xcc>)
    int16_t period_width = 1000000/icuGetPeriodX(icup);
 80012a0:	4f23      	ldr	r7, [pc, #140]	; (8001330 <encoder_pulse_captured+0xd0>)
 80012a2:	f644 6120 	movw	r1, #20000	; 0x4e20
 80012a6:	f7ff ff8b 	bl	80011c0 <chVTDoSetI>
 80012aa:	3401      	adds	r4, #1
 80012ac:	2300      	movs	r3, #0
 80012ae:	fbb7 f4f4 	udiv	r4, r7, r4
 80012b2:	b224      	sxth	r4, r4
 80012b4:	f383 8811 	msr	BASEPRI, r3
        rotations_per_sec[sender] = period_width;
 80012b8:	481e      	ldr	r0, [pc, #120]	; (8001334 <encoder_pulse_captured+0xd4>)
    int16_t period_calc = (1848*period_width-281984)/1667;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <encoder_pulse_captured+0xd8>)
        rotations_per_sec[sender] = period_width;
 80012bc:	f820 4015 	strh.w	r4, [r0, r5, lsl #1]
    int16_t period_calc = (1848*period_width-281984)/1667;
 80012c0:	4a1e      	ldr	r2, [pc, #120]	; (800133c <encoder_pulse_captured+0xdc>)
        if(period_calc < motor_freqs[sender]) {
 80012c2:	491f      	ldr	r1, [pc, #124]	; (8001340 <encoder_pulse_captured+0xe0>)
    int16_t period_calc = (1848*period_width-281984)/1667;
 80012c4:	f44f 60e7 	mov.w	r0, #1848	; 0x738
 80012c8:	fb14 3300 	smlabb	r3, r4, r0, r3
 80012cc:	fb82 0203 	smull	r0, r2, r2, r3
 80012d0:	441a      	add	r2, r3
 80012d2:	17db      	asrs	r3, r3, #31
        if(period_calc < motor_freqs[sender]) {
 80012d4:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
    int16_t period_calc = (1848*period_width-281984)/1667;
 80012d8:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
            pwmEnableChannel(&PWMD1, sender, ++motor_actual_speeds[sender]);
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <encoder_pulse_captured+0xe4>)
        if(period_calc < motor_freqs[sender]) {
 80012de:	b21b      	sxth	r3, r3
 80012e0:	428b      	cmp	r3, r1
            pwmEnableChannel(&PWMD1, sender, ++motor_actual_speeds[sender]);
 80012e2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80012e6:	bfb4      	ite	lt
 80012e8:	3301      	addlt	r3, #1
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
 80012ea:	f103 33ff 	addge.w	r3, r3, #4294967295	; 0xffffffff
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4630      	mov	r0, r6
 80012f2:	4619      	mov	r1, r3
 80012f4:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
}
 80012f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            pwmEnableChannel(&PWMD1, sender, --motor_actual_speeds[sender]);
 80012fc:	f7ff b820 	b.w	8000340 <pwmEnableChannel.constprop.11>
    } else if (icup == &ICUD3) {
 8001300:	2602      	movs	r6, #2
 8001302:	4635      	mov	r5, r6
        sender = 2;
 8001304:	4631      	mov	r1, r6
    } else if (icup == &ICUD3) {
 8001306:	4f10      	ldr	r7, [pc, #64]	; (8001348 <encoder_pulse_captured+0xe8>)
 8001308:	e7bb      	b.n	8001282 <encoder_pulse_captured+0x22>
    if (icup == &ICUD2) {
 800130a:	2600      	movs	r6, #0
 800130c:	4635      	mov	r5, r6
        sender = 0;
 800130e:	4631      	mov	r1, r6
    if (icup == &ICUD2) {
 8001310:	4f0e      	ldr	r7, [pc, #56]	; (800134c <encoder_pulse_captured+0xec>)
 8001312:	e7b6      	b.n	8001282 <encoder_pulse_captured+0x22>
 8001314:	2000086c 	.word	0x2000086c
 8001318:	2000089c 	.word	0x2000089c
 800131c:	20000884 	.word	0x20000884
 8001320:	20000b54 	.word	0x20000b54
 8001324:	20000800 	.word	0x20000800
 8001328:	40020000 	.word	0x40020000
 800132c:	08001151 	.word	0x08001151
 8001330:	000f4240 	.word	0x000f4240
 8001334:	20000b94 	.word	0x20000b94
 8001338:	fffbb280 	.word	0xfffbb280
 800133c:	9d414457 	.word	0x9d414457
 8001340:	20000b84 	.word	0x20000b84
 8001344:	20000b7c 	.word	0x20000b7c
 8001348:	20000b68 	.word	0x20000b68
 800134c:	20000b40 	.word	0x20000b40

08001350 <move_motor.constprop.2>:
void move_motor(int8_t motor_number, int16_t speed) {
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <move_motor.constprop.2+0x74>)
        case 0:
            palClearPad(GPIOC, pinA);
            palClearPad(GPIOC, pinB);
            break;
        case 1:
            palSetPad(GPIOC, pinA);
 8001354:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <move_motor.constprop.2+0x78>)
 8001356:	491d      	ldr	r1, [pc, #116]	; (80013cc <move_motor.constprop.2+0x7c>)
    if (motor_actual_speeds[motor_number] == 0) {
 8001358:	4e1d      	ldr	r6, [pc, #116]	; (80013d0 <move_motor.constprop.2+0x80>)
void move_motor(int8_t motor_number, int16_t speed) {
 800135a:	4604      	mov	r4, r0
 800135c:	b2c0      	uxtb	r0, r0
 800135e:	561d      	ldrsb	r5, [r3, r0]
            palSetPad(GPIOC, pinA);
 8001360:	5612      	ldrsb	r2, [r2, r0]
 8001362:	2301      	movs	r3, #1
 8001364:	fa03 f202 	lsl.w	r2, r3, r2
            palClearPad(GPIOC, pinB);
 8001368:	40ab      	lsls	r3, r5
            palSetPad(GPIOC, pinA);
 800136a:	b292      	uxth	r2, r2
            palClearPad(GPIOC, pinB);
 800136c:	b29b      	uxth	r3, r3
            palSetPad(GPIOC, pinA);
 800136e:	830a      	strh	r2, [r1, #24]
            palClearPad(GPIOC, pinB);
 8001370:	834b      	strh	r3, [r1, #26]
    motor_freqs[motor_number] = speed; 
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <move_motor.constprop.2+0x84>)
    if (motor_actual_speeds[motor_number] == 0) {
 8001374:	f936 3014 	ldrsh.w	r3, [r6, r4, lsl #1]
    motor_freqs[motor_number] = speed; 
 8001378:	f44f 7516 	mov.w	r5, #600	; 0x258
 800137c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    if (motor_actual_speeds[motor_number] == 0) {
 8001380:	b1cb      	cbz	r3, 80013b6 <move_motor.constprop.2+0x66>
    index = motor_number;
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <move_motor.constprop.2+0x88>)
    chVTSet(&main_timer[motor_number], MS2ST(2000), motor_tick, NULL);
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <move_motor.constprop.2+0x8c>)
    index = motor_number;
 8001386:	7014      	strb	r4, [r2, #0]
    chVTSet(&main_timer[motor_number], MS2ST(2000), motor_tick, NULL);
 8001388:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800138c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001390:	2320      	movs	r3, #32
 8001392:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 8001396:	68e3      	ldr	r3, [r4, #12]
 8001398:	b113      	cbz	r3, 80013a0 <move_motor.constprop.2+0x50>
    chVTDoResetI(vtp);
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fe98 	bl	80010d0 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 80013a0:	4620      	mov	r0, r4
 80013a2:	2300      	movs	r3, #0
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <move_motor.constprop.2+0x90>)
 80013a6:	f644 6120 	movw	r1, #20000	; 0x4e20
 80013aa:	f7ff ff09 	bl	80011c0 <chVTDoSetI>
 80013ae:	2300      	movs	r3, #0
 80013b0:	f383 8811 	msr	BASEPRI, r3
}
 80013b4:	bd70      	pop	{r4, r5, r6, pc}
        pwmEnableChannel(&PWMD1, motor_number, speed);
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7fe ffc2 	bl	8000340 <pwmEnableChannel.constprop.11>
        motor_actual_speeds[motor_number] = speed;
 80013bc:	f826 5014 	strh.w	r5, [r6, r4, lsl #1]
 80013c0:	e7df      	b.n	8001382 <move_motor.constprop.2+0x32>
 80013c2:	bf00      	nop
 80013c4:	080025c0 	.word	0x080025c0
 80013c8:	080025b0 	.word	0x080025b0
 80013cc:	40020800 	.word	0x40020800
 80013d0:	20000b7c 	.word	0x20000b7c
 80013d4:	20000b84 	.word	0x20000b84
 80013d8:	20000800 	.word	0x20000800
 80013dc:	20000b40 	.word	0x20000b40
 80013e0:	08001151 	.word	0x08001151
	...

080013f0 <BusFault_Handler>:
__attribute__((weak))
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
 80013f0:	e7fe      	b.n	80013f0 <BusFault_Handler>
 80013f2:	bf00      	nop
	...

08001400 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001400:	b40e      	push	{r1, r2, r3}
 8001402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001406:	b086      	sub	sp, #24
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001408:	af10      	add	r7, sp, #64	; 0x40
  int n = 0;
 800140a:	f04f 0800 	mov.w	r8, #0
 800140e:	f8df a288 	ldr.w	sl, [pc, #648]	; 8001698 <chprintf.constprop.0+0x298>
    c = *fmt++;
 8001412:	4ca0      	ldr	r4, [pc, #640]	; (8001694 <chprintf.constprop.0+0x294>)
  va_start(ap, fmt);
 8001414:	9702      	str	r7, [sp, #8]
    c = *fmt++;
 8001416:	214c      	movs	r1, #76	; 0x4c
 8001418:	46c3      	mov	fp, r8
 800141a:	e000      	b.n	800141e <chprintf.constprop.0+0x1e>
 800141c:	46c3      	mov	fp, r8
      streamPut(chp, (uint8_t)c);
 800141e:	f8da 3000 	ldr.w	r3, [sl]
 8001422:	489d      	ldr	r0, [pc, #628]	; (8001698 <chprintf.constprop.0+0x298>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4798      	blx	r3
      n++;
 8001428:	f10b 0b01 	add.w	fp, fp, #1
 800142c:	46a1      	mov	r9, r4
 800142e:	46d8      	mov	r8, fp
    c = *fmt++;
 8001430:	464c      	mov	r4, r9
 8001432:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0)
 8001436:	2900      	cmp	r1, #0
 8001438:	f000 80c4 	beq.w	80015c4 <chprintf.constprop.0+0x1c4>
    if (c != '%') {
 800143c:	2925      	cmp	r1, #37	; 0x25
 800143e:	d1ed      	bne.n	800141c <chprintf.constprop.0+0x1c>
    if (*fmt == '-') {
 8001440:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001444:	2b2d      	cmp	r3, #45	; 0x2d
 8001446:	bf03      	ittte	eq
 8001448:	f899 3002 	ldrbeq.w	r3, [r9, #2]
      fmt++;
 800144c:	f109 0402 	addeq.w	r4, r9, #2
      left_align = TRUE;
 8001450:	2101      	moveq	r1, #1
    left_align = FALSE;
 8001452:	2100      	movne	r1, #0
    if (*fmt == '0') {
 8001454:	2b30      	cmp	r3, #48	; 0x30
 8001456:	f000 80bb 	beq.w	80015d0 <chprintf.constprop.0+0x1d0>
    filler = ' ';
 800145a:	2220      	movs	r2, #32
 800145c:	9200      	str	r2, [sp, #0]
 800145e:	3401      	adds	r4, #1
    width = 0;
 8001460:	2600      	movs	r6, #0
 8001462:	e007      	b.n	8001474 <chprintf.constprop.0+0x74>
        c = va_arg(ap, int);
 8001464:	f850 2b04 	ldr.w	r2, [r0], #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	4607      	mov	r7, r0
 800146c:	f814 3b01 	ldrb.w	r3, [r4], #1
      width = width * 10 + c;
 8001470:	eb02 0645 	add.w	r6, r2, r5, lsl #1
      if (c >= '0' && c <= '9')
 8001474:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	2a09      	cmp	r2, #9
        c = va_arg(ap, int);
 800147c:	4638      	mov	r0, r7
      c = *fmt++;
 800147e:	46a1      	mov	r9, r4
      width = width * 10 + c;
 8001480:	eb06 0586 	add.w	r5, r6, r6, lsl #2
      if (c >= '0' && c <= '9')
 8001484:	d9f2      	bls.n	800146c <chprintf.constprop.0+0x6c>
      else if (c == '*')
 8001486:	2b2a      	cmp	r3, #42	; 0x2a
 8001488:	d0ec      	beq.n	8001464 <chprintf.constprop.0+0x64>
    if (c == '.') {
 800148a:	2b2e      	cmp	r3, #46	; 0x2e
    precision = 0;
 800148c:	f04f 0200 	mov.w	r2, #0
    if (c == '.') {
 8001490:	d04a      	beq.n	8001528 <chprintf.constprop.0+0x128>
    if (c == 'l' || c == 'L') {
 8001492:	f003 00df 	and.w	r0, r3, #223	; 0xdf
 8001496:	284c      	cmp	r0, #76	; 0x4c
 8001498:	f899 4000 	ldrb.w	r4, [r9]
 800149c:	d051      	beq.n	8001542 <chprintf.constprop.0+0x142>
      is_long = (c >= 'A') && (c <= 'Z');
 800149e:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
    switch (c) {
 80014a2:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 80014a6:	b2e5      	uxtb	r5, r4
    switch (c) {
 80014a8:	2834      	cmp	r0, #52	; 0x34
 80014aa:	f200 811f 	bhi.w	80016ec <chprintf.constprop.0+0x2ec>
 80014ae:	e8df f010 	tbh	[pc, r0, lsl #1]
 80014b2:	00f5      	.short	0x00f5
 80014b4:	011d011d 	.word	0x011d011d
 80014b8:	011d011d 	.word	0x011d011d
 80014bc:	011d00f5 	.word	0x011d00f5
 80014c0:	011d011d 	.word	0x011d011d
 80014c4:	011d011d 	.word	0x011d011d
 80014c8:	011d0172 	.word	0x011d0172
 80014cc:	011d011d 	.word	0x011d011d
 80014d0:	011d011d 	.word	0x011d011d
 80014d4:	011d0165 	.word	0x011d0165
 80014d8:	016f011d 	.word	0x016f011d
 80014dc:	011d011d 	.word	0x011d011d
 80014e0:	011d011d 	.word	0x011d011d
 80014e4:	011d011d 	.word	0x011d011d
 80014e8:	011d011d 	.word	0x011d011d
 80014ec:	011d011d 	.word	0x011d011d
 80014f0:	00f500ae 	.word	0x00f500ae
 80014f4:	011d011d 	.word	0x011d011d
 80014f8:	011d011d 	.word	0x011d011d
 80014fc:	011d00f5 	.word	0x011d00f5
 8001500:	011d011d 	.word	0x011d011d
 8001504:	011d011d 	.word	0x011d011d
 8001508:	011d0172 	.word	0x011d0172
 800150c:	011d011d 	.word	0x011d011d
 8001510:	011d0093 	.word	0x011d0093
 8001514:	011d0165 	.word	0x011d0165
 8001518:	016f011d 	.word	0x016f011d
          c = va_arg(ap, int);
 800151c:	f854 0b04 	ldr.w	r0, [r4], #4
 8001520:	b2c0      	uxtb	r0, r0
 8001522:	4627      	mov	r7, r4
        precision += c;
 8001524:	eb00 0245 	add.w	r2, r0, r5, lsl #1
        c = *fmt++;
 8001528:	f819 3b01 	ldrb.w	r3, [r9], #1
        if (c >= '0' && c <= '9')
 800152c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8001530:	b2c0      	uxtb	r0, r0
 8001532:	2809      	cmp	r0, #9
          c = va_arg(ap, int);
 8001534:	463c      	mov	r4, r7
        precision *= 10;
 8001536:	eb02 0582 	add.w	r5, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
 800153a:	d9f3      	bls.n	8001524 <chprintf.constprop.0+0x124>
        else if (c == '*')
 800153c:	2b2a      	cmp	r3, #42	; 0x2a
 800153e:	d0ed      	beq.n	800151c <chprintf.constprop.0+0x11c>
 8001540:	e7a7      	b.n	8001492 <chprintf.constprop.0+0x92>
      if (*fmt)
 8001542:	2c00      	cmp	r4, #0
 8001544:	f000 80d2 	beq.w	80016ec <chprintf.constprop.0+0x2ec>
    switch (c) {
 8001548:	f1a4 0344 	sub.w	r3, r4, #68	; 0x44
 800154c:	f109 0901 	add.w	r9, r9, #1
 8001550:	2b34      	cmp	r3, #52	; 0x34
 8001552:	f200 80ca 	bhi.w	80016ea <chprintf.constprop.0+0x2ea>
 8001556:	e8df f013 	tbh	[pc, r3, lsl #1]
 800155a:	00a1      	.short	0x00a1
 800155c:	00c800c8 	.word	0x00c800c8
 8001560:	00c800c8 	.word	0x00c800c8
 8001564:	00c800a1 	.word	0x00c800a1
 8001568:	00c800c8 	.word	0x00c800c8
 800156c:	00c800c8 	.word	0x00c800c8
 8001570:	00c800de 	.word	0x00c800de
 8001574:	00c800c8 	.word	0x00c800c8
 8001578:	00c800c8 	.word	0x00c800c8
 800157c:	00c80109 	.word	0x00c80109
 8001580:	010d00c8 	.word	0x010d00c8
 8001584:	00c800c8 	.word	0x00c800c8
 8001588:	00c800c8 	.word	0x00c800c8
 800158c:	00c800c8 	.word	0x00c800c8
 8001590:	00c800c8 	.word	0x00c800c8
 8001594:	00c800c8 	.word	0x00c800c8
 8001598:	00a1005a 	.word	0x00a1005a
 800159c:	00c800c8 	.word	0x00c800c8
 80015a0:	00c800c8 	.word	0x00c800c8
 80015a4:	00c800a1 	.word	0x00c800a1
 80015a8:	00c800c8 	.word	0x00c800c8
 80015ac:	00c800c8 	.word	0x00c800c8
 80015b0:	00c800de 	.word	0x00c800de
 80015b4:	00c800c8 	.word	0x00c800c8
 80015b8:	00c8003f 	.word	0x00c8003f
 80015bc:	00c80109 	.word	0x00c80109
 80015c0:	010d00c8 	.word	0x010d00c8
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80015c4:	4640      	mov	r0, r8
 80015c6:	b006      	add	sp, #24
 80015c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015cc:	b003      	add	sp, #12
 80015ce:	4770      	bx	lr
      filler = '0';
 80015d0:	9300      	str	r3, [sp, #0]
      fmt++;
 80015d2:	3401      	adds	r4, #1
    if (*fmt == '0') {
 80015d4:	7823      	ldrb	r3, [r4, #0]
 80015d6:	e742      	b.n	800145e <chprintf.constprop.0+0x5e>
      if ((s = va_arg(ap, char *)) == 0)
 80015d8:	f857 4b04 	ldr.w	r4, [r7], #4
 80015dc:	2c00      	cmp	r4, #0
 80015de:	f000 80f5 	beq.w	80017cc <chprintf.constprop.0+0x3cc>
      for (p = s; *p && (--precision >= 0); p++)
 80015e2:	7823      	ldrb	r3, [r4, #0]
        precision = 32767;
 80015e4:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	bf08      	it	eq
 80015ec:	4602      	moveq	r2, r0
      for (p = s; *p && (--precision >= 0); p++)
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80f3 	beq.w	80017da <chprintf.constprop.0+0x3da>
    precision = 0;
 80015f4:	4625      	mov	r5, r4
 80015f6:	e001      	b.n	80015fc <chprintf.constprop.0+0x1fc>
      for (p = s; *p && (--precision >= 0); p++)
 80015f8:	42d3      	cmn	r3, r2
 80015fa:	d405      	bmi.n	8001608 <chprintf.constprop.0+0x208>
 80015fc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001600:	43eb      	mvns	r3, r5
 8001602:	4423      	add	r3, r4
 8001604:	2800      	cmp	r0, #0
 8001606:	d1f7      	bne.n	80015f8 <chprintf.constprop.0+0x1f8>
      filler = ' ';
 8001608:	2320      	movs	r3, #32
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	e008      	b.n	8001620 <chprintf.constprop.0+0x220>
      filler = ' ';
 800160e:	2320      	movs	r3, #32
 8001610:	9300      	str	r3, [sp, #0]
      *p++ = va_arg(ap, int);
 8001612:	f857 3b04 	ldr.w	r3, [r7], #4
 8001616:	f88d 300c 	strb.w	r3, [sp, #12]
    s = tmpbuf;
 800161a:	ac03      	add	r4, sp, #12
      *p++ = va_arg(ap, int);
 800161c:	f10d 050d 	add.w	r5, sp, #13
    i = (int)(p - s);
 8001620:	1b2d      	subs	r5, r5, r4
 8001622:	1e6b      	subs	r3, r5, #1
    if ((width -= i) < 0)
 8001624:	1b76      	subs	r6, r6, r5
 8001626:	4618      	mov	r0, r3
 8001628:	d466      	bmi.n	80016f8 <chprintf.constprop.0+0x2f8>
    if (left_align == FALSE)
 800162a:	2900      	cmp	r1, #0
 800162c:	d16b      	bne.n	8001706 <chprintf.constprop.0+0x306>
 800162e:	46b3      	mov	fp, r6
      width = -width;
 8001630:	4276      	negs	r6, r6
    if (width < 0) {
 8001632:	f1bb 0f00 	cmp.w	fp, #0
 8001636:	d065      	beq.n	8001704 <chprintf.constprop.0+0x304>
      if (*s == '-' && filler == '0') {
 8001638:	7821      	ldrb	r1, [r4, #0]
 800163a:	292d      	cmp	r1, #45	; 0x2d
 800163c:	f000 80b6 	beq.w	80017ac <chprintf.constprop.0+0x3ac>
        streamPut(chp, (uint8_t)filler);
 8001640:	f8da 3000 	ldr.w	r3, [sl]
 8001644:	9900      	ldr	r1, [sp, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4650      	mov	r0, sl
 800164a:	4798      	blx	r3
      } while (++width != 0);
 800164c:	3601      	adds	r6, #1
 800164e:	d1f7      	bne.n	8001640 <chprintf.constprop.0+0x240>
    while (--i >= 0) {
 8001650:	1e6b      	subs	r3, r5, #1
 8001652:	44d8      	add	r8, fp
 8001654:	f53f aeec 	bmi.w	8001430 <chprintf.constprop.0+0x30>
 8001658:	18e5      	adds	r5, r4, r3
 800165a:	469b      	mov	fp, r3
      streamPut(chp, (uint8_t)*s++);
 800165c:	f8da 3000 	ldr.w	r3, [sl]
 8001660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	4650      	mov	r0, sl
 8001668:	4790      	blx	r2
 800166a:	1b2a      	subs	r2, r5, r4
    while (--i >= 0) {
 800166c:	2a00      	cmp	r2, #0
 800166e:	daf5      	bge.n	800165c <chprintf.constprop.0+0x25c>
 8001670:	f108 0201 	add.w	r2, r8, #1
 8001674:	eb0b 0802 	add.w	r8, fp, r2
    while (width) {
 8001678:	2e00      	cmp	r6, #0
 800167a:	f43f aed9 	beq.w	8001430 <chprintf.constprop.0+0x30>
 800167e:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 8001680:	f8da 3000 	ldr.w	r3, [sl]
 8001684:	9900      	ldr	r1, [sp, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4650      	mov	r0, sl
 800168a:	4798      	blx	r3
    while (width) {
 800168c:	3c01      	subs	r4, #1
 800168e:	d1f7      	bne.n	8001680 <chprintf.constprop.0+0x280>
 8001690:	44b0      	add	r8, r6
 8001692:	e6cd      	b.n	8001430 <chprintf.constprop.0+0x30>
 8001694:	080026b1 	.word	0x080026b1
 8001698:	200008d0 	.word	0x200008d0
        l = va_arg(ap, int);
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	1d3b      	adds	r3, r7, #4
      if (l < 0) {
 80016a0:	2a00      	cmp	r2, #0
        l = va_arg(ap, int);
 80016a2:	461f      	mov	r7, r3
      if (l < 0) {
 80016a4:	db7a      	blt.n	800179c <chprintf.constprop.0+0x39c>
    p = tmpbuf;
 80016a6:	ac03      	add	r4, sp, #12
 80016a8:	46a3      	mov	fp, r4
  q = p + MAX_FILLER;
 80016aa:	f10b 050b 	add.w	r5, fp, #11
 80016ae:	46ac      	mov	ip, r5
 80016b0:	e000      	b.n	80016b4 <chprintf.constprop.0+0x2b4>
  } while ((ll /= radix) != 0);
 80016b2:	4602      	mov	r2, r0
    i = (int)(l % radix);
 80016b4:	4b4e      	ldr	r3, [pc, #312]	; (80017f0 <chprintf.constprop.0+0x3f0>)
 80016b6:	fba3 3002 	umull	r3, r0, r3, r2
 80016ba:	08c0      	lsrs	r0, r0, #3
 80016bc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80016c0:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    i += '0';
 80016c4:	3330      	adds	r3, #48	; 0x30
  } while ((ll /= radix) != 0);
 80016c6:	2a09      	cmp	r2, #9
    *--q = i;
 80016c8:	f80c 3d01 	strb.w	r3, [ip, #-1]!
  } while ((ll /= radix) != 0);
 80016cc:	dcf1      	bgt.n	80016b2 <chprintf.constprop.0+0x2b2>
  i = (int)(p + MAX_FILLER - q);
 80016ce:	eba5 050c 	sub.w	r5, r5, ip
 80016d2:	eb0c 0e05 	add.w	lr, ip, r5
 80016d6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    *p++ = *q++;
 80016da:	f81c 2b01 	ldrb.w	r2, [ip], #1
 80016de:	f803 2f01 	strb.w	r2, [r3, #1]!
  while (--i);
 80016e2:	45f4      	cmp	ip, lr
 80016e4:	d1f9      	bne.n	80016da <chprintf.constprop.0+0x2da>
 80016e6:	445d      	add	r5, fp
 80016e8:	e79a      	b.n	8001620 <chprintf.constprop.0+0x220>
    switch (c) {
 80016ea:	4623      	mov	r3, r4
      *p++ = c;
 80016ec:	f88d 300c 	strb.w	r3, [sp, #12]
    s = tmpbuf;
 80016f0:	ac03      	add	r4, sp, #12
      *p++ = c;
 80016f2:	f10d 050d 	add.w	r5, sp, #13
 80016f6:	e793      	b.n	8001620 <chprintf.constprop.0+0x220>
    if (left_align == FALSE)
 80016f8:	b941      	cbnz	r1, 800170c <chprintf.constprop.0+0x30c>
    while (--i >= 0) {
 80016fa:	2b00      	cmp	r3, #0
      width = -width;
 80016fc:	bfa8      	it	ge
 80016fe:	460e      	movge	r6, r1
    while (--i >= 0) {
 8001700:	daaa      	bge.n	8001658 <chprintf.constprop.0+0x258>
 8001702:	e695      	b.n	8001430 <chprintf.constprop.0+0x30>
 8001704:	1e68      	subs	r0, r5, #1
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	daa6      	bge.n	8001658 <chprintf.constprop.0+0x258>
 800170a:	e7b5      	b.n	8001678 <chprintf.constprop.0+0x278>
 800170c:	2b00      	cmp	r3, #0
      width = 0;
 800170e:	bfa8      	it	ge
 8001710:	2600      	movge	r6, #0
    while (--i >= 0) {
 8001712:	daa1      	bge.n	8001658 <chprintf.constprop.0+0x258>
 8001714:	e68c      	b.n	8001430 <chprintf.constprop.0+0x30>
      c = 8;
 8001716:	f04f 0e08 	mov.w	lr, #8
 800171a:	1d3b      	adds	r3, r7, #4
        l = va_arg(ap, unsigned long);
 800171c:	683c      	ldr	r4, [r7, #0]
 800171e:	461f      	mov	r7, r3
  q = p + MAX_FILLER;
 8001720:	f10d 0317 	add.w	r3, sp, #23
 8001724:	e000      	b.n	8001728 <chprintf.constprop.0+0x328>
  } while ((ll /= radix) != 0);
 8001726:	4663      	mov	r3, ip
    i = (int)(l % radix);
 8001728:	4622      	mov	r2, r4
 800172a:	fbb4 f4fe 	udiv	r4, r4, lr
 800172e:	fb0e 2514 	mls	r5, lr, r4, r2
    i += '0';
 8001732:	f105 0030 	add.w	r0, r5, #48	; 0x30
    if (i > '9')
 8001736:	2839      	cmp	r0, #57	; 0x39
      i += 'A' - '0' - 10;
 8001738:	bfc8      	it	gt
 800173a:	f105 0037 	addgt.w	r0, r5, #55	; 0x37
    *--q = i;
 800173e:	b2c0      	uxtb	r0, r0
  } while ((ll /= radix) != 0);
 8001740:	4596      	cmp	lr, r2
    *--q = i;
 8001742:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8001746:	f803 0c01 	strb.w	r0, [r3, #-1]
  } while ((ll /= radix) != 0);
 800174a:	d9ec      	bls.n	8001726 <chprintf.constprop.0+0x326>
  i = (int)(p + MAX_FILLER - q);
 800174c:	f10d 0217 	add.w	r2, sp, #23
 8001750:	ac03      	add	r4, sp, #12
 8001752:	eba2 050c 	sub.w	r5, r2, ip
 8001756:	46a6      	mov	lr, r4
 8001758:	44ac      	add	ip, r5
 800175a:	e001      	b.n	8001760 <chprintf.constprop.0+0x360>
 800175c:	f813 0b01 	ldrb.w	r0, [r3], #1
    *p++ = *q++;
 8001760:	f80e 0b01 	strb.w	r0, [lr], #1
  while (--i);
 8001764:	459c      	cmp	ip, r3
 8001766:	d1f9      	bne.n	800175c <chprintf.constprop.0+0x35c>
 8001768:	4425      	add	r5, r4
 800176a:	e759      	b.n	8001620 <chprintf.constprop.0+0x220>
      c = 10;
 800176c:	f04f 0e0a 	mov.w	lr, #10
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	e7d3      	b.n	800171c <chprintf.constprop.0+0x31c>
      c = 16;
 8001774:	f04f 0e10 	mov.w	lr, #16
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	e7cf      	b.n	800171c <chprintf.constprop.0+0x31c>
      c = 10;
 800177c:	f04f 0e0a 	mov.w	lr, #10
 8001780:	463b      	mov	r3, r7
      if (is_long)
 8001782:	2d19      	cmp	r5, #25
 8001784:	f853 4b04 	ldr.w	r4, [r3], #4
        l = va_arg(ap, unsigned int);
 8001788:	bf88      	it	hi
 800178a:	461f      	movhi	r7, r3
      if (is_long)
 800178c:	d8c8      	bhi.n	8001720 <chprintf.constprop.0+0x320>
 800178e:	e7c5      	b.n	800171c <chprintf.constprop.0+0x31c>
      c = 16;
 8001790:	f04f 0e10 	mov.w	lr, #16
 8001794:	e7f4      	b.n	8001780 <chprintf.constprop.0+0x380>
      c = 8;
 8001796:	f04f 0e08 	mov.w	lr, #8
 800179a:	e7f1      	b.n	8001780 <chprintf.constprop.0+0x380>
        *p++ = '-';
 800179c:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800179e:	4252      	negs	r2, r2
        *p++ = '-';
 80017a0:	f88d 300c 	strb.w	r3, [sp, #12]
 80017a4:	f10d 0b0d 	add.w	fp, sp, #13
 80017a8:	ac03      	add	r4, sp, #12
 80017aa:	e77e      	b.n	80016aa <chprintf.constprop.0+0x2aa>
      if (*s == '-' && filler == '0') {
 80017ac:	9a00      	ldr	r2, [sp, #0]
 80017ae:	2a30      	cmp	r2, #48	; 0x30
 80017b0:	f47f af46 	bne.w	8001640 <chprintf.constprop.0+0x240>
        streamPut(chp, (uint8_t)*s++);
 80017b4:	f8da 0000 	ldr.w	r0, [sl]
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	6885      	ldr	r5, [r0, #8]
 80017bc:	4650      	mov	r0, sl
 80017be:	47a8      	blx	r5
 80017c0:	9b01      	ldr	r3, [sp, #4]
 80017c2:	f108 0801 	add.w	r8, r8, #1
 80017c6:	3401      	adds	r4, #1
 80017c8:	461d      	mov	r5, r3
 80017ca:	e739      	b.n	8001640 <chprintf.constprop.0+0x240>
      if (precision == 0)
 80017cc:	4c09      	ldr	r4, [pc, #36]	; (80017f4 <chprintf.constprop.0+0x3f4>)
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	f47f af10 	bne.w	80015f4 <chprintf.constprop.0+0x1f4>
        precision = 32767;
 80017d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80017d8:	e70c      	b.n	80015f4 <chprintf.constprop.0+0x1f4>
    if (left_align == FALSE)
 80017da:	b931      	cbnz	r1, 80017ea <chprintf.constprop.0+0x3ea>
      filler = ' ';
 80017dc:	2220      	movs	r2, #32
    i = (int)(p - s);
 80017de:	460d      	mov	r5, r1
    if (left_align == FALSE)
 80017e0:	46b3      	mov	fp, r6
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      filler = ' ';
 80017e6:	9200      	str	r2, [sp, #0]
 80017e8:	e722      	b.n	8001630 <chprintf.constprop.0+0x230>
 80017ea:	2320      	movs	r3, #32
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	e743      	b.n	8001678 <chprintf.constprop.0+0x278>
 80017f0:	cccccccd 	.word	0xcccccccd
 80017f4:	080026bc 	.word	0x080026bc
	...

08001800 <chSchGoSleepS>:
  otp = currp;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <chSchGoSleepS+0x20>)
 8001802:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8001804:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8001806:	b410      	push	{r4}
  otp->p_state = newstate;
 8001808:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 800180a:	6810      	ldr	r0, [r2, #0]
 800180c:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 800180e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001810:	6043      	str	r3, [r0, #4]
 8001812:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8001814:	4610      	mov	r0, r2
}
 8001816:	bc10      	pop	{r4}
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001818:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800181a:	f7fe bd39 	b.w	8000290 <_port_switch>
 800181e:	bf00      	nop
 8001820:	20000948 	.word	0x20000948
	...

08001830 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001830:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != time) {
 8001832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001836:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001838:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 800183a:	d012      	beq.n	8001862 <chSchGoSleepTimeoutS+0x32>
    chVTDoSetI(&vt, time, wakeup, currp);
 800183c:	4c0c      	ldr	r4, [pc, #48]	; (8001870 <chSchGoSleepTimeoutS+0x40>)
 800183e:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <chSchGoSleepTimeoutS+0x44>)
 8001840:	69a3      	ldr	r3, [r4, #24]
 8001842:	4605      	mov	r5, r0
 8001844:	a801      	add	r0, sp, #4
 8001846:	f7ff fcbb 	bl	80011c0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800184a:	4628      	mov	r0, r5
 800184c:	f7ff ffd8 	bl	8001800 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001850:	9b04      	ldr	r3, [sp, #16]
 8001852:	b113      	cbz	r3, 800185a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8001854:	a801      	add	r0, sp, #4
 8001856:	f7ff fc3b 	bl	80010d0 <chVTDoResetI>
  return currp->p_u.rdymsg;
 800185a:	69a3      	ldr	r3, [r4, #24]
}
 800185c:	6a18      	ldr	r0, [r3, #32]
 800185e:	b007      	add	sp, #28
 8001860:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 8001862:	4c03      	ldr	r4, [pc, #12]	; (8001870 <chSchGoSleepTimeoutS+0x40>)
 8001864:	f7ff ffcc 	bl	8001800 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 8001868:	69a3      	ldr	r3, [r4, #24]
}
 800186a:	6a18      	ldr	r0, [r3, #32]
 800186c:	b007      	add	sp, #28
 800186e:	bd30      	pop	{r4, r5, pc}
 8001870:	20000948 	.word	0x20000948
 8001874:	08000c51 	.word	0x08000c51
	...

08001880 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001880:	b161      	cbz	r1, 800189c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <chThdEnqueueTimeoutS+0x24>)
 8001884:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001886:	b410      	push	{r4}
  tp->p_next = (thread_t *)tqp;
 8001888:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 800188a:	6844      	ldr	r4, [r0, #4]
 800188c:	605c      	str	r4, [r3, #4]
 800188e:	4602      	mov	r2, r0
  tp->p_prev->p_next = tp;
 8001890:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001892:	2004      	movs	r0, #4
  tqp->p_prev = tp;
 8001894:	6053      	str	r3, [r2, #4]
}
 8001896:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001898:	f7ff bfca 	b.w	8001830 <chSchGoSleepTimeoutS>
}
 800189c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000948 	.word	0x20000948
	...

080018b0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 80018b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b4:	b083      	sub	sp, #12
 80018b6:	4604      	mov	r4, r0
 80018b8:	460e      	mov	r6, r1
 80018ba:	4615      	mov	r5, r2
 80018bc:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80018be:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80018c2:	f04f 0920 	mov.w	r9, #32
 80018c6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 80018ca:	2700      	movs	r7, #0
 80018cc:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 80018ce:	68a2      	ldr	r2, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80018d0:	46b3      	mov	fp, r6
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80018d2:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 80018d4:	b302      	cbz	r2, 8001918 <chOQWriteTimeout+0x68>
    *oqp->q_wrptr++ = *bp++;
 80018d6:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 80018d8:	68a2      	ldr	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80018da:	1c4e      	adds	r6, r1, #1
    oqp->q_counter--;
 80018dc:	3a01      	subs	r2, #1
    *oqp->q_wrptr++ = *bp++;
 80018de:	6166      	str	r6, [r4, #20]
    oqp->q_counter--;
 80018e0:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80018e2:	f81b 2b01 	ldrb.w	r2, [fp], #1
 80018e6:	700a      	strb	r2, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80018e8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80018ec:	4291      	cmp	r1, r2
      oqp->q_wrptr = oqp->q_buffer;
 80018ee:	bf24      	itt	cs
 80018f0:	68e2      	ldrcs	r2, [r4, #12]
 80018f2:	6162      	strcs	r2, [r4, #20]
    if (nfy != NULL) {
 80018f4:	f1b8 0f00 	cmp.w	r8, #0
 80018f8:	d000      	beq.n	80018fc <chOQWriteTimeout+0x4c>
      nfy(oqp);
 80018fa:	47c0      	blx	r8
 80018fc:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8001900:	3d01      	subs	r5, #1
    w++;
 8001902:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001906:	d011      	beq.n	800192c <chOQWriteTimeout+0x7c>
 8001908:	f389 8811 	msr	BASEPRI, r9
 800190c:	68a2      	ldr	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800190e:	465e      	mov	r6, fp
 8001910:	46b3      	mov	fp, r6
      nfy(oqp);
 8001912:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8001914:	2a00      	cmp	r2, #0
 8001916:	d1de      	bne.n	80018d6 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001918:	9901      	ldr	r1, [sp, #4]
 800191a:	9200      	str	r2, [sp, #0]
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff ffaf 	bl	8001880 <chThdEnqueueTimeoutS>
 8001922:	9a00      	ldr	r2, [sp, #0]
 8001924:	2800      	cmp	r0, #0
 8001926:	d0d2      	beq.n	80018ce <chOQWriteTimeout+0x1e>
 8001928:	f382 8811 	msr	BASEPRI, r2
      return w;
    }
    chSysLock();
  }
}
 800192c:	4638      	mov	r0, r7
 800192e:	b003      	add	sp, #12
 8001930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001940 <writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001940:	3030      	adds	r0, #48	; 0x30
 8001942:	f7ff bfb5 	b.w	80018b0 <chOQWriteTimeout>
 8001946:	bf00      	nop
	...

08001950 <write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001950:	3030      	adds	r0, #48	; 0x30
 8001952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001956:	f7ff bfab 	b.w	80018b0 <chOQWriteTimeout>
 800195a:	bf00      	nop
 800195c:	0000      	movs	r0, r0
	...

08001960 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	4604      	mov	r4, r0
 8001964:	460f      	mov	r7, r1
 8001966:	4616      	mov	r6, r2
 8001968:	2320      	movs	r3, #32
 800196a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800196e:	e003      	b.n	8001978 <chOQPutTimeout+0x18>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001970:	f7ff ff86 	bl	8001880 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001974:	2800      	cmp	r0, #0
 8001976:	db18      	blt.n	80019aa <chOQPutTimeout+0x4a>
 8001978:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800197a:	4631      	mov	r1, r6
 800197c:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 800197e:	2d00      	cmp	r5, #0
 8001980:	d0f6      	beq.n	8001970 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8001982:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001984:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001986:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001988:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800198a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800198c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800198e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001990:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8001994:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001996:	bf24      	itt	cs
 8001998:	68e3      	ldrcs	r3, [r4, #12]
 800199a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800199c:	69e3      	ldr	r3, [r4, #28]
 800199e:	b103      	cbz	r3, 80019a2 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 80019a0:	4798      	blx	r3
 80019a2:	2000      	movs	r0, #0
 80019a4:	f380 8811 	msr	BASEPRI, r0
}
 80019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019aa:	f385 8811 	msr	BASEPRI, r5
 80019ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019b0 <putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80019b0:	3030      	adds	r0, #48	; 0x30
 80019b2:	f7ff bfd5 	b.w	8001960 <chOQPutTimeout>
 80019b6:	bf00      	nop
	...

080019c0 <put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80019c0:	3030      	adds	r0, #48	; 0x30
 80019c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c6:	f7ff bfcb 	b.w	8001960 <chOQPutTimeout>
 80019ca:	bf00      	nop
 80019cc:	0000      	movs	r0, r0
	...

080019d0 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 80019d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d4:	4604      	mov	r4, r0
 80019d6:	b083      	sub	sp, #12
 80019d8:	4689      	mov	r9, r1
 80019da:	4693      	mov	fp, r2
 80019dc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80019de:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80019e2:	2720      	movs	r7, #32
 80019e4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80019e8:	2600      	movs	r6, #0
 80019ea:	9701      	str	r7, [sp, #4]
 80019ec:	46b2      	mov	sl, r6
    if (nfy != NULL) {
 80019ee:	f1b8 0f00 	cmp.w	r8, #0
 80019f2:	d005      	beq.n	8001a00 <chIQReadTimeout+0x30>
      nfy(iqp);
 80019f4:	4620      	mov	r0, r4
 80019f6:	47c0      	blx	r8
 80019f8:	e002      	b.n	8001a00 <chIQReadTimeout+0x30>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 80019fa:	f7ff ff41 	bl	8001880 <chThdEnqueueTimeoutS>
 80019fe:	b9e0      	cbnz	r0, 8001a3a <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 8001a00:	68a7      	ldr	r7, [r4, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 8001a06:	2f00      	cmp	r7, #0
 8001a08:	d0f7      	beq.n	80019fa <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 8001a0a:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 8001a0c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001a0e:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8001a10:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001a12:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 8001a14:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001a16:	7813      	ldrb	r3, [r2, #0]
 8001a18:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8001a1c:	6923      	ldr	r3, [r4, #16]
 8001a1e:	69a2      	ldr	r2, [r4, #24]
 8001a20:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001a22:	bf24      	itt	cs
 8001a24:	68e3      	ldrcs	r3, [r4, #12]
 8001a26:	61a3      	strcs	r3, [r4, #24]
 8001a28:	f38a 8811 	msr	BASEPRI, sl
    r++;
 8001a2c:	3601      	adds	r6, #1
    if (--n == 0U) {
 8001a2e:	45b3      	cmp	fp, r6
 8001a30:	d005      	beq.n	8001a3e <chIQReadTimeout+0x6e>
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	e7d9      	b.n	80019ee <chIQReadTimeout+0x1e>
 8001a3a:	f387 8811 	msr	BASEPRI, r7
}
 8001a3e:	4630      	mov	r0, r6
 8001a40:	b003      	add	sp, #12
 8001a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a46:	bf00      	nop
	...

08001a50 <readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001a50:	300c      	adds	r0, #12
 8001a52:	f7ff bfbd 	b.w	80019d0 <chIQReadTimeout>
 8001a56:	bf00      	nop
	...

08001a60 <read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001a60:	300c      	adds	r0, #12
 8001a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a66:	f7ff bfb3 	b.w	80019d0 <chIQReadTimeout>
 8001a6a:	bf00      	nop
 8001a6c:	0000      	movs	r0, r0
	...

08001a70 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001a70:	b570      	push	{r4, r5, r6, lr}
 8001a72:	2320      	movs	r3, #32
 8001a74:	460e      	mov	r6, r1
 8001a76:	4604      	mov	r4, r0
 8001a78:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 8001a7c:	69c3      	ldr	r3, [r0, #28]
 8001a7e:	b12b      	cbz	r3, 8001a8c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8001a80:	4798      	blx	r3
 8001a82:	e003      	b.n	8001a8c <chIQGetTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001a84:	f7ff fefc 	bl	8001880 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	db15      	blt.n	8001ab8 <chIQGetTimeout+0x48>
 8001a8c:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001a8e:	4631      	mov	r1, r6
 8001a90:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	d0f6      	beq.n	8001a84 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8001a96:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001a98:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001a9a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 8001a9c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001a9e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001aa0:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 8001aa2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001aa4:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001aa6:	bf28      	it	cs
 8001aa8:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8001aaa:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001aac:	bf28      	it	cs
 8001aae:	61a3      	strcs	r3, [r4, #24]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f383 8811 	msr	BASEPRI, r3
}
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	f385 8811 	msr	BASEPRI, r5
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
 8001abe:	bf00      	nop

08001ac0 <gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001ac0:	300c      	adds	r0, #12
 8001ac2:	f7ff bfd5 	b.w	8001a70 <chIQGetTimeout>
 8001ac6:	bf00      	nop
	...

08001ad0 <get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001ad0:	300c      	adds	r0, #12
 8001ad2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ad6:	f7ff bfcb 	b.w	8001a70 <chIQGetTimeout>
 8001ada:	bf00      	nop
 8001adc:	0000      	movs	r0, r0
	...

08001ae0 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <main+0x6c>)
  PWR->CR |= PWR_CR_DBP;
 8001ae2:	4c1b      	ldr	r4, [pc, #108]	; (8001b50 <main+0x70>)
  rccResetAHB1(~0);
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aea:	2200      	movs	r2, #0
#include "motor.h"
#include "analog.h"
#include "includes/chprintf.h"
///home/adam/ChibiOS_16.1.9/os/hal/lib/streams/

int main(void) {
 8001aec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001af0:	6119      	str	r1, [r3, #16]
 8001af2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001af4:	6958      	ldr	r0, [r3, #20]
 8001af6:	6159      	str	r1, [r3, #20]
 8001af8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001afa:	6a18      	ldr	r0, [r3, #32]
 8001afc:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8001b00:	6218      	str	r0, [r3, #32]
 8001b02:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001b04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001b06:	6259      	str	r1, [r3, #36]	; 0x24
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001b0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b0c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001b10:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8001b12:	6821      	ldr	r1, [r4, #0]
 8001b14:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001b18:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001b1a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001b1c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8001b20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001b24:	b087      	sub	sp, #28
 8001b26:	d003      	beq.n	8001b30 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001b28:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001b2c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001b2e:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001b30:	4807      	ldr	r0, [pc, #28]	; (8001b50 <main+0x70>)
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <main+0x74>)
 8001b34:	6843      	ldr	r3, [r0, #4]
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8001b36:	4c08      	ldr	r4, [pc, #32]	; (8001b58 <main+0x78>)
 8001b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b3c:	6043      	str	r3, [r0, #4]
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <main+0x7c>)
 8001b40:	2100      	movs	r1, #0
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001b42:	4689      	mov	r9, r1
  dma_streams_mask = 0U;
 8001b44:	6019      	str	r1, [r3, #0]
    _stm32_dma_streams[i].stream->CR = 0U;
 8001b46:	460d      	mov	r5, r1
 8001b48:	e00c      	b.n	8001b64 <main+0x84>
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40007000 	.word	0x40007000
 8001b54:	080025dc 	.word	0x080025dc
 8001b58:	40026010 	.word	0x40026010
 8001b5c:	20000b38 	.word	0x20000b38
 8001b60:	f852 4c0c 	ldr.w	r4, [r2, #-12]
    dma_isr_redir[i].dma_func = NULL;
 8001b64:	4bc9      	ldr	r3, [pc, #804]	; (8001e8c <main+0x3ac>)
    _stm32_dma_streams[i].stream->CR = 0U;
 8001b66:	6025      	str	r5, [r4, #0]
    dma_isr_redir[i].dma_func = NULL;
 8001b68:	f843 5039 	str.w	r5, [r3, r9, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001b6c:	f109 0901 	add.w	r9, r9, #1
 8001b70:	f1b9 0f10 	cmp.w	r9, #16
 8001b74:	f102 020c 	add.w	r2, r2, #12
 8001b78:	d1f2      	bne.n	8001b60 <main+0x80>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001b7a:	4fc5      	ldr	r7, [pc, #788]	; (8001e90 <main+0x3b0>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001b7c:	4cc5      	ldr	r4, [pc, #788]	; (8001e94 <main+0x3b4>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001b7e:	f8df b378 	ldr.w	fp, [pc, #888]	; 8001ef8 <main+0x418>
  gpiop->OTYPER  = config->otyper;
 8001b82:	f8df e378 	ldr.w	lr, [pc, #888]	; 8001efc <main+0x41c>
  gpiop->PUPDR   = config->pupdr;
 8001b86:	f8df 8378 	ldr.w	r8, [pc, #888]	; 8001f00 <main+0x420>
  gpiop->OTYPER  = config->otyper;
 8001b8a:	f8df c378 	ldr.w	ip, [pc, #888]	; 8001f04 <main+0x424>
 8001b8e:	4ec2      	ldr	r6, [pc, #776]	; (8001e98 <main+0x3b8>)
 8001b90:	48c2      	ldr	r0, [pc, #776]	; (8001e9c <main+0x3bc>)
 8001b92:	49c3      	ldr	r1, [pc, #780]	; (8001ea0 <main+0x3c0>)
 8001b94:	4ac3      	ldr	r2, [pc, #780]	; (8001ea4 <main+0x3c4>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9a:	60bb      	str	r3, [r7, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001b9c:	60fb      	str	r3, [r7, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001b9e:	60a3      	str	r3, [r4, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001ba0:	60e3      	str	r3, [r4, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001ba2:	f8db 4030 	ldr.w	r4, [fp, #48]	; 0x30
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001ba6:	4fc0      	ldr	r7, [pc, #768]	; (8001ea8 <main+0x3c8>)
 8001ba8:	f044 049f 	orr.w	r4, r4, #159	; 0x9f
 8001bac:	f8cb 4030 	str.w	r4, [fp, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001bb0:	f8db a050 	ldr.w	sl, [fp, #80]	; 0x50
 8001bb4:	f04a 0a9f 	orr.w	sl, sl, #159	; 0x9f
 8001bb8:	f8cb a050 	str.w	sl, [fp, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8001bbc:	f46f 6a8a 	mvn.w	sl, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8001bc0:	f8ce 5004 	str.w	r5, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001bc4:	f8ce a008 	str.w	sl, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8001bc8:	f8ce 800c 	str.w	r8, [lr, #12]
  gpiop->ODR     = config->odr;
 8001bcc:	f64f 7adf 	movw	sl, #65503	; 0xffdf
  gpiop->AFRL    = config->afrl;
 8001bd0:	f44f 48ee 	mov.w	r8, #30464	; 0x7700
  gpiop->ODR     = config->odr;
 8001bd4:	f8ce a014 	str.w	sl, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8001bd8:	f8ce 8020 	str.w	r8, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8001bdc:	f44f 2a2a 	mov.w	sl, #696320	; 0xaa000
  gpiop->MODER   = config->moder;
 8001be0:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001f08 <main+0x428>
  gpiop->AFRH    = config->afrh;
 8001be4:	f8ce a024 	str.w	sl, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001be8:	2480      	movs	r4, #128	; 0x80
 8001bea:	f8ce 8000 	str.w	r8, [lr]
  gpiop->PUPDR   = config->pupdr;
 8001bee:	f04f 3a55 	mov.w	sl, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
 8001bf2:	f64f 78ff 	movw	r8, #65535	; 0xffff
  gpiop->OTYPER  = config->otyper;
 8001bf6:	f8cc 5004 	str.w	r5, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001bfa:	f8cc 3008 	str.w	r3, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8001bfe:	f8cc a00c 	str.w	sl, [ip, #12]
  gpiop->ODR     = config->odr;
 8001c02:	f8cc 8014 	str.w	r8, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8001c06:	f8cc 5020 	str.w	r5, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8001c0a:	f8cc 5024 	str.w	r5, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c0e:	f8cc 4000 	str.w	r4, [ip]
  gpiop->PUPDR   = config->pupdr;
 8001c12:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 8001f0c <main+0x42c>
  gpiop->OTYPER  = config->otyper;
 8001c16:	6075      	str	r5, [r6, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c18:	4ca4      	ldr	r4, [pc, #656]	; (8001eac <main+0x3cc>)
  gpiop->OSPEEDR = config->ospeedr;
 8001c1a:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c1c:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->ODR     = config->odr;
 8001c20:	f8c6 8014 	str.w	r8, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001c24:	6235      	str	r5, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8001c26:	6275      	str	r5, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c28:	6035      	str	r5, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8001c2a:	6045      	str	r5, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c2c:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c2e:	f8c0 a00c 	str.w	sl, [r0, #12]
  gpiop->ODR     = config->odr;
 8001c32:	f8c0 8014 	str.w	r8, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8001c36:	6205      	str	r5, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001c38:	6245      	str	r5, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c3a:	6005      	str	r5, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8001c3c:	489c      	ldr	r0, [pc, #624]	; (8001eb0 <main+0x3d0>)
  gpiop->OTYPER  = config->otyper;
 8001c3e:	604d      	str	r5, [r1, #4]
 8001c40:	2660      	movs	r6, #96	; 0x60
  gpiop->OSPEEDR = config->ospeedr;
 8001c42:	608b      	str	r3, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c44:	f8c1 a00c 	str.w	sl, [r1, #12]
  gpiop->ODR     = config->odr;
 8001c48:	f8c1 8014 	str.w	r8, [r1, #20]
 8001c4c:	f04f 0a01 	mov.w	sl, #1
  gpiop->AFRL    = config->afrl;
 8001c50:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8001c52:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c54:	600d      	str	r5, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8001c56:	6055      	str	r5, [r2, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c58:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  gpiop->OSPEEDR = config->ospeedr;
 8001c5c:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c5e:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 8001c60:	f8c2 8014 	str.w	r8, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001c64:	6215      	str	r5, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001c66:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c68:	6015      	str	r5, [r2, #0]
  ADCD1.adc = ADC1;
 8001c6a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001c6e:	f887 a000 	strb.w	sl, [r7]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001c72:	f884 6312 	strb.w	r6, [r4, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001c76:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001c7a:	6021      	str	r1, [r4, #0]
 8001c7c:	62ba      	str	r2, [r7, #40]	; 0x28
  tqp->p_next = (thread_t *)tqp;
 8001c7e:	f107 0218 	add.w	r2, r7, #24
  pwmp->state    = PWM_STOP;
 8001c82:	4e8c      	ldr	r6, [pc, #560]	; (8001eb4 <main+0x3d4>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001c84:	488c      	ldr	r0, [pc, #560]	; (8001eb8 <main+0x3d8>)
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001c86:	498d      	ldr	r1, [pc, #564]	; (8001ebc <main+0x3dc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001c88:	623d      	str	r5, [r7, #32]
  tqp->p_prev = (thread_t *)tqp;
 8001c8a:	e9c7 2206 	strd	r2, r2, [r7, #24]
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8001c90:	6339      	str	r1, [r7, #48]	; 0x30
  adcp->config   = NULL;
  adcp->samples  = NULL;
 8001c92:	e9c7 5501 	strd	r5, r5, [r7, #4]
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 8001c96:	e9c7 5503 	strd	r5, r5, [r7, #12]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8001c9a:	617d      	str	r5, [r7, #20]
  icu_lld_init();
 8001c9c:	f7fe fc98 	bl	80005d0 <icu_lld_init>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001ca0:	2104      	movs	r1, #4
  PWMD1.tim = STM32_TIM1;
 8001ca2:	4a87      	ldr	r2, [pc, #540]	; (8001ec0 <main+0x3e0>)
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001ca4:	7431      	strb	r1, [r6, #16]
  PWMD1.tim = STM32_TIM1;
 8001ca6:	61b2      	str	r2, [r6, #24]
 8001ca8:	f886 a000 	strb.w	sl, [r6]
  pwmp->config   = NULL;
 8001cac:	6075      	str	r5, [r6, #4]
  pwmp->enabled  = 0;
 8001cae:	60f5      	str	r5, [r6, #12]
 * @notapi
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 8001cb0:	f7fe fb16 	bl	80002e0 <sdObjectInit.constprop.23>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001cb4:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001cb8:	4882      	ldr	r0, [pc, #520]	; (8001ec4 <main+0x3e4>)
  SCB->VTOR = CORTEX_VTOR_INIT;
 8001cba:	4983      	ldr	r1, [pc, #524]	; (8001ec8 <main+0x3e8>)
  ST_ENABLE_CLOCK();
 8001cbc:	f042 0204 	orr.w	r2, r2, #4
 8001cc0:	f8cb 2040 	str.w	r2, [fp, #64]	; 0x40
  ST_ENABLE_STOP();
 8001cc4:	f8d0 c008 	ldr.w	ip, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001cc8:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <main+0x3ec>)
  SD1.usart = USART1;
 8001cca:	f8df b244 	ldr.w	fp, [pc, #580]	; 8001f10 <main+0x430>
  ST_ENABLE_STOP();
 8001cce:	f04c 0c04 	orr.w	ip, ip, #4
 8001cd2:	f8c0 c008 	str.w	ip, [r0, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001cd6:	f242 507f 	movw	r0, #9599	; 0x257f
 8001cda:	6290      	str	r0, [r2, #40]	; 0x28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001cdc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001ce4:	f8c2 802c 	str.w	r8, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001ce8:	6195      	str	r5, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001cea:	6355      	str	r5, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001cec:	60d5      	str	r5, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8001cee:	6055      	str	r5, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001cf0:	f8c2 a014 	str.w	sl, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001cf4:	f8c2 a000 	str.w	sl, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001cf8:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001cfc:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d00:	6020      	str	r0, [r4, #0]
 8001d02:	608d      	str	r5, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	68c8      	ldr	r0, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001d06:	4a72      	ldr	r2, [pc, #456]	; (8001ed0 <main+0x3f0>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001d08:	f8df c208 	ldr.w	ip, [pc, #520]	; 8001f14 <main+0x434>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001d0c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001d10:	4020      	ands	r0, r4
  reg_value  =  (reg_value                                   |
 8001d12:	4302      	orrs	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001d14:	60ca      	str	r2, [r1, #12]
 8001d16:	f8dc 200c 	ldr.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001d1a:	486e      	ldr	r0, [pc, #440]	; (8001ed4 <main+0x3f4>)
  tqp->p_next = (thread_t *)tqp;
 8001d1c:	4c6e      	ldr	r4, [pc, #440]	; (8001ed8 <main+0x3f8>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001d1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001d22:	f8cc 200c 	str.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001d26:	6802      	ldr	r2, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001d28:	6064      	str	r4, [r4, #4]
 8001d2a:	ea42 020a 	orr.w	r2, r2, sl
 8001d2e:	6002      	str	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	2220      	movs	r2, #32
 8001d32:	f881 901f 	strb.w	r9, [r1, #31]
 8001d36:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
 8001d3a:	f101 41c0 	add.w	r1, r1, #1610612736	; 0x60000000
 8001d3e:	f501 510c 	add.w	r1, r1, #8960	; 0x2300
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001d42:	f104 001c 	add.w	r0, r4, #28
 8001d46:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
  tmp->best       = (rtcnt_t)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001d4e:	e9c4 0007 	strd	r0, r0, [r4, #28]
  tqp->p_next = (thread_t *)tqp;
 8001d52:	6024      	str	r4, [r4, #0]
  chTMStartMeasurementX(&tm);
 8001d54:	4668      	mov	r0, sp
  ch.rlist.r_prio = NOPRIO;
 8001d56:	60a5      	str	r5, [r4, #8]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8001d58:	e9c4 4404 	strd	r4, r4, [r4, #16]
  tmp->cumulative = (rttime_t)0;
 8001d5c:	f04f 0900 	mov.w	r9, #0
  ch.vtlist.vt_delta = (systime_t)-1;
 8001d60:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 8001d64:	f04f 0800 	mov.w	r8, #0
  tmp->worst      = (rtcnt_t)0;
 8001d68:	e9cd 3500 	strd	r3, r5, [sp]
  tmp->cumulative = (rttime_t)0;
 8001d6c:	e9cd 8904 	strd	r8, r9, [sp, #16]
  ch.tm.offset = (rtcnt_t)0;
 8001d70:	6725      	str	r5, [r4, #112]	; 0x70
  tmp->n          = (ucnt_t)0;
 8001d72:	e9cd 5502 	strd	r5, r5, [sp, #8]
  chTMStartMeasurementX(&tm);
 8001d76:	f7fe faa3 	bl	80002c0 <chTMStartMeasurementX.constprop.31>
  chTMStopMeasurementX(&tm);
 8001d7a:	4668      	mov	r0, sp
 8001d7c:	f7fe ff40 	bl	8000c00 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001d80:	4b56      	ldr	r3, [pc, #344]	; (8001edc <main+0x3fc>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001d82:	4857      	ldr	r0, [pc, #348]	; (8001ee0 <main+0x400>)
  REG_INSERT(tp);
 8001d84:	f8d4 e014 	ldr.w	lr, [r4, #20]
  ch.tm.offset = tm.last;
 8001d88:	9a02      	ldr	r2, [sp, #8]
 8001d8a:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
 8001d8e:	f103 0c10 	add.w	ip, r3, #16
  tqp->p_prev = (thread_t *)tqp;
 8001d92:	e9c3 cc04 	strd	ip, ip, [r3, #16]
 8001d96:	f020 0807 	bic.w	r8, r0, #7
  tp->p_prio = prio;
 8001d9a:	f04f 0c40 	mov.w	ip, #64	; 0x40
  REG_INSERT(tp);
 8001d9e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001da2:	619d      	str	r5, [r3, #24]
  tp->p_prio = prio;
 8001da4:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  tp->p_realprio = prio;
 8001da8:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001dac:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
  tp->p_epending = (eventmask_t)0;
 8001db0:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
  tp->p_refs = (trefs_t)1;
 8001db4:	f884 a04a 	strb.w	sl, [r4, #74]	; 0x4a
  tp->p_name = NULL;
 8001db8:	6465      	str	r5, [r4, #68]	; 0x44
  REG_INSERT(tp);
 8001dba:	63e4      	str	r4, [r4, #60]	; 0x3c
 8001dbc:	6722      	str	r2, [r4, #112]	; 0x70
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001dbe:	4949      	ldr	r1, [pc, #292]	; (8001ee4 <main+0x404>)
 8001dc0:	f8ce 0010 	str.w	r0, [lr, #16]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8001dc4:	e9c4 0005 	strd	r0, r0, [r4, #20]
  tlp->p_next = (thread_t *)tlp;
 8001dc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001dcc:	f8df e148 	ldr.w	lr, [pc, #328]	; 8001f18 <main+0x438>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001dd0:	f8df c148 	ldr.w	ip, [pc, #328]	; 8001f1c <main+0x43c>
 8001dd4:	6520      	str	r0, [r4, #80]	; 0x50
 8001dd6:	4844      	ldr	r0, [pc, #272]	; (8001ee8 <main+0x408>)
 8001dd8:	6018      	str	r0, [r3, #0]
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001dda:	f021 0107 	bic.w	r1, r1, #7
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
 8001dde:	e9c3 5502 	strd	r5, r5, [r3, #8]
  tqp->p_next = (thread_t *)tqp;
 8001de2:	f104 0354 	add.w	r3, r4, #84	; 0x54
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8001de6:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
  tqp->p_prev = (thread_t *)tqp;
 8001dea:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8001dee:	f8ce 1000 	str.w	r1, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001df2:	f8cc 8000 	str.w	r8, [ip]
 8001df6:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8001dfa:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001dfc:	69a3      	ldr	r3, [r4, #24]
 8001dfe:	493b      	ldr	r1, [pc, #236]	; (8001eec <main+0x40c>)
 8001e00:	6199      	str	r1, [r3, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001e02:	2220      	movs	r2, #32
 8001e04:	f382 8811 	msr	BASEPRI, r2
 8001e08:	6963      	ldr	r3, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e0a:	f8df c114 	ldr.w	ip, [pc, #276]	; 8001f20 <main+0x440>
 8001e0e:	4838      	ldr	r0, [pc, #224]	; (8001ef0 <main+0x410>)
  tp->p_prio = prio;
 8001e10:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
  tp->p_state = CH_STATE_WTSTART;
 8001e14:	2102      	movs	r1, #2
  REG_INSERT(tp);
 8001e16:	f104 0278 	add.w	r2, r4, #120	; 0x78
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e1a:	f504 7e96 	add.w	lr, r4, #300	; 0x12c
  tp->p_mtxlist = NULL;
 8001e1e:	e9c4 5a2c 	strd	r5, sl, [r4, #176]	; 0xb0
  tp->p_epending = (eventmask_t)0;
 8001e22:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  tp->p_refs = (trefs_t)1;
 8001e26:	f884 a096 	strb.w	sl, [r4, #150]	; 0x96
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e2a:	f8c4 c12c 	str.w	ip, [r4, #300]	; 0x12c
 8001e2e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
  tp->p_state = CH_STATE_WTSTART;
 8001e32:	f8a4 1094 	strh.w	r1, [r4, #148]	; 0x94
  REG_INSERT(tp);
 8001e36:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e3a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
  tp->p_name = NULL;
 8001e3e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e42:	e9c4 e421 	strd	lr, r4, [r4, #132]	; 0x84
  REG_INSERT(tp);
 8001e46:	611a      	str	r2, [r3, #16]
  if (ntp->p_prio <= currp->p_prio) {
 8001e48:	69a3      	ldr	r3, [r4, #24]
  ntp->p_u.rdymsg = msg;
 8001e4a:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  if (ntp->p_prio <= currp->p_prio) {
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	6162      	str	r2, [r4, #20]
  tqp->p_next = (thread_t *)tqp;
 8001e52:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
  tlp->p_next = (thread_t *)tlp;
 8001e56:	f104 0c9c 	add.w	ip, r4, #156	; 0x9c
  tqp->p_next = (thread_t *)tqp;
 8001e5a:	e9c4 c027 	strd	ip, r0, [r4, #156]	; 0x9c
  tqp->p_prev = (thread_t *)tqp;
 8001e5e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8001e62:	2900      	cmp	r1, #0
 8001e64:	f000 8083 	beq.w	8001f6e <main+0x48e>
  tp->p_state = CH_STATE_READY;
 8001e68:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
  cp = (thread_t *)&ch.rlist.r_queue;
 8001e6c:	4623      	mov	r3, r4
    cp = cp->p_next;
 8001e6e:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001e70:	689d      	ldr	r5, [r3, #8]
 8001e72:	2d00      	cmp	r5, #0
 8001e74:	d1fb      	bne.n	8001e6e <main+0x38e>
  tp->p_next = cp;
 8001e76:	67a3      	str	r3, [r4, #120]	; 0x78
  tp->p_prev = cp->p_prev;
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	67e1      	str	r1, [r4, #124]	; 0x7c
  tp->p_prev->p_next = tp;
 8001e7c:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	f385 8811 	msr	BASEPRI, r5
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <main+0x414>)
 8001e86:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001e8a:	e04b      	b.n	8001f24 <main+0x444>
 8001e8c:	20000ab8 	.word	0x20000ab8
 8001e90:	40026000 	.word	0x40026000
 8001e94:	40026400 	.word	0x40026400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40021c00 	.word	0x40021c00
 8001ea8:	20000838 	.word	0x20000838
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	55555550 	.word	0x55555550
 8001eb4:	200008b4 	.word	0x200008b4
 8001eb8:	08002660 	.word	0x08002660
 8001ebc:	00022c16 	.word	0x00022c16
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	e0042000 	.word	0xe0042000
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	05fa0300 	.word	0x05fa0300
 8001ed4:	e0001000 	.word	0xe0001000
 8001ed8:	20000948 	.word	0x20000948
 8001edc:	20000a98 	.word	0x20000a98
 8001ee0:	20020000 	.word	0x20020000
 8001ee4:	20000ba7 	.word	0x20000ba7
 8001ee8:	08000381 	.word	0x08000381
 8001eec:	08002690 	.word	0x08002690
 8001ef0:	080002a1 	.word	0x080002a1
 8001ef4:	08002730 	.word	0x08002730
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	64155105 	.word	0x64155105
 8001f04:	40020400 	.word	0x40020400
 8001f08:	2a8004a0 	.word	0x2a8004a0
 8001f0c:	51555555 	.word	0x51555555
 8001f10:	200008d0 	.word	0x200008d0
 8001f14:	e000edf0 	.word	0xe000edf0
 8001f18:	20000b90 	.word	0x20000b90
 8001f1c:	20000b3c 	.word	0x20000b3c
 8001f20:	08000371 	.word	0x08000371
  sdObjectInit(&SD1, NULL, notify1);
 8001f24:	f7fe f9dc 	bl	80002e0 <sdObjectInit.constprop.23>
  SD1.usart = USART1;
 8001f28:	4bc4      	ldr	r3, [pc, #784]	; (800223c <main+0x75c>)
 8001f2a:	f8cb 3074 	str.w	r3, [fp, #116]	; 0x74
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001f34:	f89b 3008 	ldrb.w	r3, [fp, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10b      	bne.n	8001f54 <main+0x474>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 8001f3c:	48c0      	ldr	r0, [pc, #768]	; (8002240 <main+0x760>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001f3e:	4bc1      	ldr	r3, [pc, #772]	; (8002244 <main+0x764>)
 8001f40:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001f42:	f041 0110 	orr.w	r1, r1, #16
 8001f46:	6441      	str	r1, [r0, #68]	; 0x44
 8001f48:	21c0      	movs	r1, #192	; 0xc0
 8001f4a:	f883 1325 	strb.w	r1, [r3, #805]	; 0x325
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001f4e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001f52:	605a      	str	r2, [r3, #4]
  USART_TypeDef *u = sdp->usart;
 8001f54:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8001f58:	4bb8      	ldr	r3, [pc, #736]	; (800223c <main+0x75c>)
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d009      	beq.n	8001f72 <main+0x492>
 8001f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d005      	beq.n	8001f72 <main+0x492>
    u->BRR = STM32_PCLK1 / config->speed;
 8001f66:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001f6a:	6093      	str	r3, [r2, #8]
 8001f6c:	e004      	b.n	8001f78 <main+0x498>
  tp->p_state = CH_STATE_READY;
 8001f6e:	7719      	strb	r1, [r3, #28]
 8001f70:	e7fe      	b.n	8001f70 <main+0x490>
    u->BRR = STM32_PCLK2 / config->speed;
 8001f72:	f240 3341 	movw	r3, #833	; 0x341
 8001f76:	6093      	str	r3, [r2, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	6113      	str	r3, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001f7c:	2101      	movs	r1, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001f7e:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 8001f82:	2300      	movs	r3, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001f84:	6151      	str	r1, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001f86:	60d0      	str	r0, [r2, #12]
  u->SR = 0;
 8001f88:	6013      	str	r3, [r2, #0]
  sdp->state = SD_READY;
 8001f8a:	2002      	movs	r0, #2
  (void)u->SR;  /* SR reset step 1.*/
 8001f8c:	6814      	ldr	r4, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001f8e:	6852      	ldr	r2, [r2, #4]
 8001f90:	f88b 0008 	strb.w	r0, [fp, #8]
 8001f94:	f383 8811 	msr	BASEPRI, r3
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001f98:	2004      	movs	r0, #4
  PWMD1.tim = STM32_TIM1;
 8001f9a:	4aab      	ldr	r2, [pc, #684]	; (8002248 <main+0x768>)
 8001f9c:	61b2      	str	r2, [r6, #24]
  pwmp->state    = PWM_STOP;
 8001f9e:	7031      	strb	r1, [r6, #0]
  pwmp->config   = NULL;
 8001fa0:	6073      	str	r3, [r6, #4]
  pwmp->enabled  = 0;
 8001fa2:	60f3      	str	r3, [r6, #12]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001fa4:	7430      	strb	r0, [r6, #16]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f382 8811 	msr	BASEPRI, r2
  pwmp->config = config;
 8001fac:	48a7      	ldr	r0, [pc, #668]	; (800224c <main+0x76c>)
  if (pwmp->state == PWM_STOP) {
 8001fae:	7832      	ldrb	r2, [r6, #0]
  pwmp->period = config->period;
 8001fb0:	6844      	ldr	r4, [r0, #4]
 8001fb2:	428a      	cmp	r2, r1
 8001fb4:	e9c6 0401 	strd	r0, r4, [r6, #4]
 8001fb8:	f000 81bc 	beq.w	8002334 <main+0x854>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8001fbc:	69b2      	ldr	r2, [r6, #24]
 8001fbe:	6013      	str	r3, [r2, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8001fc0:	6353      	str	r3, [r2, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8001fc2:	6393      	str	r3, [r2, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8001fc4:	63d3      	str	r3, [r2, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8001fc8:	6253      	str	r3, [r2, #36]	; 0x24
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001fca:	68c2      	ldr	r2, [r0, #12]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001fcc:	6973      	ldr	r3, [r6, #20]
 8001fce:	6801      	ldr	r1, [r0, #0]
 8001fd0:	fbb3 f1f1 	udiv	r1, r3, r1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001fd4:	f002 020f 	and.w	r2, r2, #15
  pwmp->tim->PSC  = psc;
 8001fd8:	69b3      	ldr	r3, [r6, #24]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001fda:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
  pwmp->tim->ARR  = pwmp->period - 1;
 8001fde:	3c01      	subs	r4, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001fe0:	3901      	subs	r1, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001fe2:	2a01      	cmp	r2, #1
  pwmp->tim->PSC  = psc;
 8001fe4:	6299      	str	r1, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8001fe6:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001fe8:	f8c3 c004 	str.w	ip, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001fec:	d002      	beq.n	8001ff4 <main+0x514>
 8001fee:	2a02      	cmp	r2, #2
 8001ff0:	d102      	bne.n	8001ff8 <main+0x518>
    ccer |= STM32_TIM_CCER_CC1P;
 8001ff2:	4615      	mov	r5, r2
    ccer |= STM32_TIM_CCER_CC1E;
 8001ff4:	f045 0501 	orr.w	r5, r5, #1
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001ff8:	6942      	ldr	r2, [r0, #20]
 8001ffa:	f002 020f 	and.w	r2, r2, #15
 8001ffe:	2a01      	cmp	r2, #1
 8002000:	d003      	beq.n	800200a <main+0x52a>
 8002002:	2a02      	cmp	r2, #2
 8002004:	d103      	bne.n	800200e <main+0x52e>
    ccer |= STM32_TIM_CCER_CC2P;
 8002006:	f045 0520 	orr.w	r5, r5, #32
    ccer |= STM32_TIM_CCER_CC2E;
 800200a:	f045 0510 	orr.w	r5, r5, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 800200e:	69c2      	ldr	r2, [r0, #28]
 8002010:	f002 020f 	and.w	r2, r2, #15
 8002014:	2a01      	cmp	r2, #1
 8002016:	d003      	beq.n	8002020 <main+0x540>
 8002018:	2a02      	cmp	r2, #2
 800201a:	d103      	bne.n	8002024 <main+0x544>
    ccer |= STM32_TIM_CCER_CC3P;
 800201c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 8002020:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8002024:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002026:	f002 020f 	and.w	r2, r2, #15
 800202a:	2a01      	cmp	r2, #1
 800202c:	d003      	beq.n	8002036 <main+0x556>
 800202e:	2a02      	cmp	r2, #2
 8002030:	d103      	bne.n	800203a <main+0x55a>
    ccer |= STM32_TIM_CCER_CC4P;
 8002032:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8002036:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800203a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 800203c:	621d      	str	r5, [r3, #32]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 800203e:	2400      	movs	r4, #0
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002040:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8002044:	2501      	movs	r5, #1
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8002046:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 800204a:	2185      	movs	r1, #133	; 0x85
  pwmp->state = PWM_READY;
 800204c:	f04f 0802 	mov.w	r8, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8002050:	615d      	str	r5, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8002052:	611c      	str	r4, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8002054:	60da      	str	r2, [r3, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 8002056:	6458      	str	r0, [r3, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8002058:	6019      	str	r1, [r3, #0]
  pwmp->enabled = 0;
 800205a:	60f4      	str	r4, [r6, #12]
  pwmp->state = PWM_READY;
 800205c:	f886 8000 	strb.w	r8, [r6]
 8002060:	f384 8811 	msr	BASEPRI, r4
 8002064:	f7fe fab4 	bl	80005d0 <icu_lld_init>
 8002068:	2520      	movs	r5, #32
 800206a:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 800206e:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 800226c <main+0x78c>
 8002072:	4b77      	ldr	r3, [pc, #476]	; (8002250 <main+0x770>)
 8002074:	f8ca 3004 	str.w	r3, [sl, #4]
  icu_lld_start(icup);
 8002078:	4650      	mov	r0, sl
 800207a:	f7fe fa09 	bl	8000490 <icu_lld_start>
  icup->state = ICU_READY;
 800207e:	f88a 8000 	strb.w	r8, [sl]
 8002082:	f384 8811 	msr	BASEPRI, r4
 8002086:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 800208a:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8002270 <main+0x790>
 800208e:	4b71      	ldr	r3, [pc, #452]	; (8002254 <main+0x774>)
 8002090:	f8c9 3004 	str.w	r3, [r9, #4]
  icu_lld_start(icup);
 8002094:	4648      	mov	r0, r9
 8002096:	f7fe f9fb 	bl	8000490 <icu_lld_start>
  icup->state = ICU_READY;
 800209a:	f889 8000 	strb.w	r8, [r9]
 800209e:	f384 8811 	msr	BASEPRI, r4
 80020a2:	f385 8811 	msr	BASEPRI, r5
  icup->config = config;
 80020a6:	4e6c      	ldr	r6, [pc, #432]	; (8002258 <main+0x778>)
 80020a8:	4b6c      	ldr	r3, [pc, #432]	; (800225c <main+0x77c>)
 80020aa:	6073      	str	r3, [r6, #4]
  icu_lld_start(icup);
 80020ac:	4630      	mov	r0, r6
 80020ae:	f7fe f9ef 	bl	8000490 <icu_lld_start>
  icup->state = ICU_READY;
 80020b2:	f886 8000 	strb.w	r8, [r6]
 80020b6:	f384 8811 	msr	BASEPRI, r4
    
    icuStart(&ICUD2, &icucfgA);
    icuStart(&ICUD5, &icucfgB);
    icuStart(&ICUD3, &icucfgC);
    
    icuStartCapture(&ICUD2);
 80020ba:	4650      	mov	r0, sl
 80020bc:	f7fe fb00 	bl	80006c0 <icuStartCapture>
    icuStartCapture(&ICUD5);
 80020c0:	4648      	mov	r0, r9
 80020c2:	f7fe fafd 	bl	80006c0 <icuStartCapture>
    icuStartCapture(&ICUD3);
 80020c6:	4630      	mov	r0, r6
 80020c8:	f7fe fafa 	bl	80006c0 <icuStartCapture>

    //ADC
    palSetGroupMode(GPIOA, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 80020cc:	2203      	movs	r2, #3
 80020ce:	2106      	movs	r1, #6
 80020d0:	4863      	ldr	r0, [pc, #396]	; (8002260 <main+0x780>)
 80020d2:	f7fe fa9d 	bl	8000610 <_pal_lld_setgroupmode>
                    0, PAL_MODE_INPUT_ANALOG);
    palSetGroupMode(GPIOB, PAL_PORT_BIT(1) | PAL_PORT_BIT(2),
 80020d6:	2203      	movs	r2, #3
 80020d8:	2106      	movs	r1, #6
 80020da:	4862      	ldr	r0, [pc, #392]	; (8002264 <main+0x784>)
 80020dc:	f7fe fa98 	bl	8000610 <_pal_lld_setgroupmode>
 80020e0:	f385 8811 	msr	BASEPRI, r5
  if (adcp->state == ADC_STOP) {
 80020e4:	783b      	ldrb	r3, [r7, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 80020e6:	607c      	str	r4, [r7, #4]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	f000 80cb 	beq.w	8002284 <main+0x7a4>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 80020ee:	f04f 0802 	mov.w	r8, #2
 80020f2:	f887 8000 	strb.w	r8, [r7]
 80020f6:	2600      	movs	r6, #0
 80020f8:	f386 8811 	msr	BASEPRI, r6
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 80020fc:	4a5a      	ldr	r2, [pc, #360]	; (8002268 <main+0x788>)
 80020fe:	6853      	ldr	r3, [r2, #4]
 8002100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002104:	6053      	str	r3, [r2, #4]
 8002106:	2420      	movs	r4, #32
 8002108:	f384 8811 	msr	BASEPRI, r4
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 800210c:	4857      	ldr	r0, [pc, #348]	; (800226c <main+0x78c>)
 800210e:	f7fe f99f 	bl	8000450 <icu_lld_enable_notifications>
 8002112:	f386 8811 	msr	BASEPRI, r6
 8002116:	f384 8811 	msr	BASEPRI, r4
 800211a:	4855      	ldr	r0, [pc, #340]	; (8002270 <main+0x790>)
 800211c:	f7fe f998 	bl	8000450 <icu_lld_enable_notifications>
 8002120:	f386 8811 	msr	BASEPRI, r6
 8002124:	f384 8811 	msr	BASEPRI, r4
 8002128:	484b      	ldr	r0, [pc, #300]	; (8002258 <main+0x778>)
 800212a:	f7fe f991 	bl	8000450 <icu_lld_enable_notifications>
 800212e:	f386 8811 	msr	BASEPRI, r6
    palSetPadMode(GPIOA,15,PAL_MODE_ALTERNATE(7));
 8002132:	4d4b      	ldr	r5, [pc, #300]	; (8002260 <main+0x780>)
 8002134:	f240 3282 	movw	r2, #898	; 0x382
 8002138:	4628      	mov	r0, r5
 800213a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800213e:	f7fe fa67 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,3,PAL_MODE_ALTERNATE(7));
 8002142:	f240 3282 	movw	r2, #898	; 0x382
 8002146:	2108      	movs	r1, #8
 8002148:	4846      	ldr	r0, [pc, #280]	; (8002264 <main+0x784>)
 800214a:	f7fe fa61 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,10,PAL_MODE_OUTPUT_PUSHPULL);
 800214e:	2201      	movs	r2, #1
 8002150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002154:	4847      	ldr	r0, [pc, #284]	; (8002274 <main+0x794>)
 8002156:	f7fe fa5b 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,12,PAL_MODE_OUTPUT_PUSHPULL);
 800215a:	2201      	movs	r2, #1
 800215c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002160:	4844      	ldr	r0, [pc, #272]	; (8002274 <main+0x794>)
 8002162:	f7fe fa55 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,8,PAL_MODE_ALTERNATE(1));
 8002166:	4628      	mov	r0, r5
 8002168:	2282      	movs	r2, #130	; 0x82
 800216a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800216e:	f7fe fa4f 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,8,PAL_MODE_OUTPUT_PUSHPULL);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002178:	483e      	ldr	r0, [pc, #248]	; (8002274 <main+0x794>)
 800217a:	f7fe fa49 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,9,PAL_MODE_OUTPUT_PUSHPULL);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002184:	483b      	ldr	r0, [pc, #236]	; (8002274 <main+0x794>)
 8002186:	f7fe fa43 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,9,PAL_MODE_ALTERNATE(1));
 800218a:	4628      	mov	r0, r5
 800218c:	2282      	movs	r2, #130	; 0x82
 800218e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002192:	f7fe fa3d 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,5,PAL_MODE_OUTPUT_PUSHPULL);
 8002196:	4621      	mov	r1, r4
 8002198:	2201      	movs	r2, #1
 800219a:	4836      	ldr	r0, [pc, #216]	; (8002274 <main+0x794>)
 800219c:	f7fe fa38 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,6,PAL_MODE_OUTPUT_PUSHPULL);
 80021a0:	2201      	movs	r2, #1
 80021a2:	2140      	movs	r1, #64	; 0x40
 80021a4:	4833      	ldr	r0, [pc, #204]	; (8002274 <main+0x794>)
 80021a6:	f7fe fa33 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,10,PAL_MODE_ALTERNATE(1));
 80021aa:	4628      	mov	r0, r5
 80021ac:	2282      	movs	r2, #130	; 0x82
 80021ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b2:	f7fe fa2d 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,0,PAL_MODE_ALTERNATE(1));
 80021b6:	2282      	movs	r2, #130	; 0x82
 80021b8:	2101      	movs	r1, #1
 80021ba:	f7fe fa29 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,1,PAL_MODE_ALTERNATE(2));
 80021be:	4641      	mov	r1, r8
 80021c0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80021c4:	f7fe fa24 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,4,PAL_MODE_ALTERNATE(2));
 80021c8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80021cc:	2110      	movs	r1, #16
 80021ce:	4825      	ldr	r0, [pc, #148]	; (8002264 <main+0x784>)
 80021d0:	f7fe fa1e 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,6,PAL_MODE_INPUT_ANALOG);
 80021d4:	4628      	mov	r0, r5
 80021d6:	2203      	movs	r2, #3
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	f7fe fa19 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,7,PAL_MODE_INPUT_ANALOG);
 80021de:	2203      	movs	r2, #3
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	f7fe fa15 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA,5,PAL_MODE_OUTPUT_PUSHPULL);
 80021e6:	4621      	mov	r1, r4
 80021e8:	2201      	movs	r2, #1
 80021ea:	f7fe fa11 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB,6,PAL_MODE_OUTPUT_PUSHPULL);
 80021ee:	2201      	movs	r2, #1
 80021f0:	2140      	movs	r1, #64	; 0x40
 80021f2:	481c      	ldr	r0, [pc, #112]	; (8002264 <main+0x784>)
 80021f4:	f7fe fa0c 	bl	8000610 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC,7,PAL_MODE_OUTPUT_PUSHPULL);
 80021f8:	2201      	movs	r2, #1
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	481d      	ldr	r0, [pc, #116]	; (8002274 <main+0x794>)
 80021fe:	f7fe fa07 	bl	8000610 <_pal_lld_setgroupmode>

    board_init();
    init_pins();
    chprintf(&SD1, "Loaded! \r\n");
 8002202:	491d      	ldr	r1, [pc, #116]	; (8002278 <main+0x798>)
 8002204:	481d      	ldr	r0, [pc, #116]	; (800227c <main+0x79c>)
 8002206:	f7ff f8fb 	bl	8001400 <chprintf.constprop.0>
  vtp->vt_func = NULL;
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <main+0x7a0>)
    //init_sensor_thread();
    timer_init();
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 800220c:	836c      	strh	r4, [r5, #26]
    move_motor(0, 600);
 800220e:	4630      	mov	r0, r6
 8002210:	60de      	str	r6, [r3, #12]
 8002212:	621e      	str	r6, [r3, #32]
 8002214:	635e      	str	r6, [r3, #52]	; 0x34
 8002216:	f7ff f89b 	bl	8001350 <move_motor.constprop.2>
    move_motor(1, 600);
 800221a:	2001      	movs	r0, #1
 800221c:	f7ff f898 	bl	8001350 <move_motor.constprop.2>
    move_motor(2, 600);
 8002220:	4640      	mov	r0, r8
 8002222:	f7ff f895 	bl	8001350 <move_motor.constprop.2>
 8002226:	f384 8811 	msr	BASEPRI, r4
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800222a:	2164      	movs	r1, #100	; 0x64
 800222c:	2008      	movs	r0, #8
 800222e:	f7ff faff 	bl	8001830 <chSchGoSleepTimeoutS>
 8002232:	2300      	movs	r3, #0
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	e7f5      	b.n	8002226 <main+0x746>
 800223a:	bf00      	nop
 800223c:	40011000 	.word	0x40011000
 8002240:	40023800 	.word	0x40023800
 8002244:	e000e100 	.word	0xe000e100
 8002248:	40010000 	.word	0x40010000
 800224c:	20000804 	.word	0x20000804
 8002250:	080026d0 	.word	0x080026d0
 8002254:	080026f0 	.word	0x080026f0
 8002258:	20000884 	.word	0x20000884
 800225c:	08002710 	.word	0x08002710
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40012300 	.word	0x40012300
 800226c:	2000086c 	.word	0x2000086c
 8002270:	2000089c 	.word	0x2000089c
 8002274:	40020800 	.word	0x40020800
 8002278:	080026b0 	.word	0x080026b0
 800227c:	200008d0 	.word	0x200008d0
 8002280:	20000b40 	.word	0x20000b40
      b = dmaStreamAllocate(adcp->dmastp,
 8002284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8002286:	4d43      	ldr	r5, [pc, #268]	; (8002394 <main+0x8b4>)
 8002288:	7a51      	ldrb	r1, [r2, #9]
 800228a:	6828      	ldr	r0, [r5, #0]
 800228c:	408b      	lsls	r3, r1
 800228e:	4203      	tst	r3, r0
 8002290:	d13a      	bne.n	8002308 <main+0x828>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002292:	4e41      	ldr	r6, [pc, #260]	; (8002398 <main+0x8b8>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 8002294:	4303      	orrs	r3, r0
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002296:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800229a:	4840      	ldr	r0, [pc, #256]	; (800239c <main+0x8bc>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 800229c:	602b      	str	r3, [r5, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 800229e:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80022a2:	6067      	str	r7, [r4, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80022a4:	f846 0031 	str.w	r0, [r6, r1, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80022a8:	d004      	beq.n	80022b4 <main+0x7d4>
    rccEnableDMA1(false);
 80022aa:	483d      	ldr	r0, [pc, #244]	; (80023a0 <main+0x8c0>)
 80022ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80022ae:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80022b2:	6301      	str	r1, [r0, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 80022b4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80022b8:	d165      	bne.n	8002386 <main+0x8a6>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	f021 011f 	bic.w	r1, r1, #31
 80022c2:	6019      	str	r1, [r3, #0]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	f011 0101 	ands.w	r1, r1, #1
 80022ca:	d1fb      	bne.n	80022c4 <main+0x7e4>
 80022cc:	7a14      	ldrb	r4, [r2, #8]
 80022ce:	6855      	ldr	r5, [r2, #4]
 80022d0:	203d      	movs	r0, #61	; 0x3d
 80022d2:	40a0      	lsls	r0, r4
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80022d4:	2421      	movs	r4, #33	; 0x21
  dmaStreamDisable(dmastp);
 80022d6:	6028      	str	r0, [r5, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80022d8:	6019      	str	r1, [r3, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80022da:	615c      	str	r4, [r3, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 80022dc:	7a91      	ldrb	r1, [r2, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80022de:	094b      	lsrs	r3, r1, #5
 80022e0:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80022e2:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
 80022e6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80022ea:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80022ee:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80022f2:	f001 011f 	and.w	r1, r1, #31
 80022f6:	2001      	movs	r0, #1
 80022f8:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80022fc:	2560      	movs	r5, #96	; 0x60
 80022fe:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002302:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002306:	6019      	str	r1, [r3, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8002308:	6813      	ldr	r3, [r2, #0]
      rccEnableADC1(FALSE);
 800230a:	4925      	ldr	r1, [pc, #148]	; (80023a0 <main+0x8c0>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <main+0x8c4>)
 800230e:	609a      	str	r2, [r3, #8]
      rccEnableADC1(FALSE);
 8002310:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002312:	4825      	ldr	r0, [pc, #148]	; (80023a8 <main+0x8c8>)
    adcp->adc->CR1 = 0;
 8002314:	6aba      	ldr	r2, [r7, #40]	; 0x28
      rccEnableADC1(FALSE);
 8002316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231a:	644b      	str	r3, [r1, #68]	; 0x44
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800231c:	6843      	ldr	r3, [r0, #4]
 800231e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    adcp->adc->CR1 = 0;
 8002322:	2100      	movs	r1, #0
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    adcp->adc->CR2 = ADC_CR2_ADON;
 8002328:	2401      	movs	r4, #1
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800232a:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
 800232c:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 800232e:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8002330:	6094      	str	r4, [r2, #8]
 8002332:	e6dc      	b.n	80020ee <main+0x60e>
      rccEnableTIM1(FALSE);
 8002334:	491a      	ldr	r1, [pc, #104]	; (80023a0 <main+0x8c0>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <main+0x8cc>)
 8002338:	f8d1 c044 	ldr.w	ip, [r1, #68]	; 0x44
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800233c:	f8d6 e018 	ldr.w	lr, [r6, #24]
      rccEnableTIM1(FALSE);
 8002340:	f04c 0c01 	orr.w	ip, ip, #1
 8002344:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44
      rccResetTIM1();
 8002348:	f8d1 c024 	ldr.w	ip, [r1, #36]	; 0x24
 800234c:	f04c 0c01 	orr.w	ip, ip, #1
 8002350:	f8c1 c024 	str.w	ip, [r1, #36]	; 0x24
 8002354:	624b      	str	r3, [r1, #36]	; 0x24
 8002356:	2370      	movs	r3, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002358:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800235c:	f882 3319 	strb.w	r3, [r2, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002360:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002364:	6011      	str	r1, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002366:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800236a:	f882 331b 	strb.w	r3, [r2, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800236e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8002372:	f646 0368 	movw	r3, #26728	; 0x6868
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002376:	6011      	str	r1, [r2, #0]
      pwmp->clock = STM32_TIMCLK2;
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <main+0x8d0>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800237a:	f8ce 3018 	str.w	r3, [lr, #24]
      pwmp->clock = STM32_TIMCLK2;
 800237e:	6172      	str	r2, [r6, #20]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8002380:	f8ce 301c 	str.w	r3, [lr, #28]
 8002384:	e621      	b.n	8001fca <main+0x4ea>
    rccEnableDMA2(false);
 8002386:	4906      	ldr	r1, [pc, #24]	; (80023a0 <main+0x8c0>)
 8002388:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800238a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800238e:	630b      	str	r3, [r1, #48]	; 0x30
 8002390:	e793      	b.n	80022ba <main+0x7da>
 8002392:	bf00      	nop
 8002394:	20000b38 	.word	0x20000b38
 8002398:	20000ab8 	.word	0x20000ab8
 800239c:	08000fa1 	.word	0x08000fa1
 80023a0:	40023800 	.word	0x40023800
 80023a4:	4001204c 	.word	0x4001204c
 80023a8:	40012300 	.word	0x40012300
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	05b8d800 	.word	0x05b8d800
	...

080023c0 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <__early_init+0xa0>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80023c2:	4a28      	ldr	r2, [pc, #160]	; (8002464 <__early_init+0xa4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80023c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 80023c8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80023cc:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80023ce:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	0790      	lsls	r0, r2, #30
 80023dc:	d5fc      	bpl.n	80023d8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80023de:	6899      	ldr	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80023e0:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <__early_init+0xa0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80023e2:	f021 0103 	bic.w	r1, r1, #3
 80023e6:	6099      	str	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80023e8:	6899      	ldr	r1, [r3, #8]
 80023ea:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80023ec:	6891      	ldr	r1, [r2, #8]
 80023ee:	f011 010c 	ands.w	r1, r1, #12
 80023f2:	d1fb      	bne.n	80023ec <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80023f4:	6810      	ldr	r0, [r2, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <__early_init+0xa0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80023f8:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80023fc:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80023fe:	6091      	str	r1, [r2, #8]
  RCC->CSR |= RCC_CSR_LSION;
 8002400:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8002402:	f041 0101 	orr.w	r1, r1, #1
 8002406:	6751      	str	r1, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002408:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800240a:	0791      	lsls	r1, r2, #30
 800240c:	d5fc      	bpl.n	8002408 <__early_init+0x48>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800240e:	4a16      	ldr	r2, [pc, #88]	; (8002468 <__early_init+0xa8>)
 8002410:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002412:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002414:	4913      	ldr	r1, [pc, #76]	; (8002464 <__early_init+0xa4>)
  RCC->CR |= RCC_CR_PLLON;
 8002416:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800241a:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800241c:	684b      	ldr	r3, [r1, #4]
 800241e:	045a      	lsls	r2, r3, #17
 8002420:	d5fc      	bpl.n	800241c <__early_init+0x5c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002422:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <__early_init+0xa0>)
 8002424:	6813      	ldr	r3, [r2, #0]
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	d5fc      	bpl.n	8002424 <__early_init+0x64>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <__early_init+0xac>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800242c:	4910      	ldr	r1, [pc, #64]	; (8002470 <__early_init+0xb0>)
 800242e:	6091      	str	r1, [r2, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002430:	f240 7103 	movw	r1, #1795	; 0x703
 8002434:	6019      	str	r1, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002436:	6891      	ldr	r1, [r2, #8]
 8002438:	f041 0102 	orr.w	r1, r1, #2
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800243c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002440:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	f002 020c 	and.w	r2, r2, #12
 8002448:	2a08      	cmp	r2, #8
 800244a:	d1fa      	bne.n	8002442 <__early_init+0x82>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800244c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800244e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
 8002454:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245a:	665a      	str	r2, [r3, #100]	; 0x64
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40007000 	.word	0x40007000
 8002468:	08016010 	.word	0x08016010
 800246c:	40023c00 	.word	0x40023c00
 8002470:	38881000 	.word	0x38881000
	...

08002480 <chThdExit>:
void chThdExit(msg_t msg) {
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	2320      	movs	r3, #32
 8002484:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <chThdExit+0x40>)
 800248a:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800248c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
 800248e:	6220      	str	r0, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 8002490:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8002494:	42ab      	cmp	r3, r5
 8002496:	d007      	beq.n	80024a8 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc0f 	bl	8000cc0 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 80024a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 80024a4:	42ab      	cmp	r3, r5
 80024a6:	d1f7      	bne.n	8002498 <chThdExit+0x18>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80024a8:	7f63      	ldrb	r3, [r4, #29]
 80024aa:	079b      	lsls	r3, r3, #30
 80024ac:	d103      	bne.n	80024b6 <chThdExit+0x36>
    REG_REMOVE(tp);
 80024ae:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80024b2:	6113      	str	r3, [r2, #16]
 80024b4:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80024b6:	200f      	movs	r0, #15
}
 80024b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80024bc:	f7ff b9a0 	b.w	8001800 <chSchGoSleepS>
 80024c0:	20000948 	.word	0x20000948
	...

080024d0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80024d0:	490d      	ldr	r1, [pc, #52]	; (8002508 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 80024d2:	6808      	ldr	r0, [r1, #0]
 80024d4:	698a      	ldr	r2, [r1, #24]
  tqp->p_next = tp->p_next;
 80024d6:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80024d8:	b430      	push	{r4, r5}
  if (otp->p_prio == IDLEPRIO) {
 80024da:	6895      	ldr	r5, [r2, #8]
 80024dc:	600b      	str	r3, [r1, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80024de:	6059      	str	r1, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 80024e0:	2401      	movs	r4, #1
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80024e2:	6188      	str	r0, [r1, #24]
  otp->p_state = CH_STATE_READY;
 80024e4:	2100      	movs	r1, #0
  currp->p_state = CH_STATE_CURRENT;
 80024e6:	7704      	strb	r4, [r0, #28]
  otp->p_state = CH_STATE_READY;
 80024e8:	7711      	strb	r1, [r2, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80024ea:	e000      	b.n	80024ee <chSchDoReschedule+0x1e>
 80024ec:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	428d      	cmp	r5, r1
 80024f2:	d3fb      	bcc.n	80024ec <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 80024f4:	685c      	ldr	r4, [r3, #4]
  chSysSwitch(currp, otp);
 80024f6:	4611      	mov	r1, r2
  otp->p_prev = cp->p_prev;
 80024f8:	e9c2 3400 	strd	r3, r4, [r2]
  otp->p_prev->p_next = otp;
 80024fc:	6022      	str	r2, [r4, #0]
  cp->p_prev = otp;
 80024fe:	605a      	str	r2, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8002500:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8002502:	f7fd bec5 	b.w	8000290 <_port_switch>
 8002506:	bf00      	nop
 8002508:	20000948 	.word	0x20000948
 800250c:	00000000 	.word	0x00000000

08002510 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002510:	b4f0      	push	{r4, r5, r6, r7}
 8002512:	4f14      	ldr	r7, [pc, #80]	; (8002564 <__init_ram_areas+0x54>)
 8002514:	4d14      	ldr	r5, [pc, #80]	; (8002568 <__init_ram_areas+0x58>)
 8002516:	4815      	ldr	r0, [pc, #84]	; (800256c <__init_ram_areas+0x5c>)
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <__init_ram_areas+0x60>)
 800251a:	4916      	ldr	r1, [pc, #88]	; (8002574 <__init_ram_areas+0x64>)
 800251c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002520:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8002522:	4298      	cmp	r0, r3
 8002524:	d911      	bls.n	800254a <__init_ram_areas+0x3a>
 8002526:	3904      	subs	r1, #4
 8002528:	461a      	mov	r2, r3
      *p = *tp;
 800252a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800252e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8002532:	4290      	cmp	r0, r2
 8002534:	d8f9      	bhi.n	800252a <__init_ram_areas+0x1a>
 8002536:	1e42      	subs	r2, r0, #1
 8002538:	1ad2      	subs	r2, r2, r3
 800253a:	f022 0203 	bic.w	r2, r2, #3
 800253e:	3204      	adds	r2, #4
 8002540:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8002542:	429d      	cmp	r5, r3
 8002544:	d903      	bls.n	800254e <__init_ram_areas+0x3e>
      *p = 0;
 8002546:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800254a:	429d      	cmp	r5, r3
 800254c:	d8fb      	bhi.n	8002546 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800254e:	4567      	cmp	r7, ip
 8002550:	d005      	beq.n	800255e <__init_ram_areas+0x4e>
 8002552:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8002556:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800255a:	3710      	adds	r7, #16
 800255c:	e7e1      	b.n	8002522 <__init_ram_areas+0x12>
#endif
}
 800255e:	bcf0      	pop	{r4, r5, r6, r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	08002740 	.word	0x08002740
 8002568:	20000b9c 	.word	0x20000b9c
 800256c:	20000b9c 	.word	0x20000b9c
 8002570:	20000b9c 	.word	0x20000b9c
 8002574:	08002818 	.word	0x08002818
	...

08002580 <__default_exit>:
  }
 8002580:	e7fe      	b.n	8002580 <__default_exit>
 8002582:	bf00      	nop
	...

08002590 <__late_init>:
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
	...

080025a0 <__core_init>:
}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
	...

080025b0 <CSWTCH.13>:
 80025b0:	090c 0005 0000 0000 0000 0000 0000 0000     ................

080025c0 <CSWTCH.14>:
 80025c0:	080a 0006 0000 0000 0000 0000 0000 0000     ................

080025d0 <_stm32_dma_streams>:
 80025d0:	6010 4002 6008 4002 0000 000b 6028 4002     .`.@.`.@....(`.@
 80025e0:	6008 4002 0106 000c 6040 4002 6008 4002     .`.@....@`.@.`.@
 80025f0:	0210 000d 6058 4002 6008 4002 0316 000e     ....X`.@.`.@....
 8002600:	6070 4002 600c 4002 0400 000f 6088 4002     p`.@.`.@.....`.@
 8002610:	600c 4002 0506 0010 60a0 4002 600c 4002     .`.@.....`.@.`.@
 8002620:	0610 0011 60b8 4002 600c 4002 0716 002f     .....`.@.`.@../.
 8002630:	6410 4002 6408 4002 0800 0038 6428 4002     .d.@.d.@..8.(d.@
 8002640:	6408 4002 0906 0039 6440 4002 6408 4002     .d.@..9.@d.@.d.@
 8002650:	0a10 003a 6458 4002 6408 4002 0b16 003b     ..:.Xd.@.d.@..;.
 8002660:	6470 4002 640c 4002 0c00 003c 6488 4002     pd.@.d.@..<..d.@
 8002670:	640c 4002 0d06 0044 64a0 4002 640c 4002     .d.@..D..d.@.d.@
 8002680:	0e10 0045 64b8 4002 640c 4002 0f16 0046     ..E..d.@.d.@..F.

08002690 <ch_debug>:
 8002690:	616d 6e69 1600 1881 0204 0844 100c 1814     main......D.....
 80026a0:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................
 80026b0:	6f4c 6461 6465 2021 0a0d 0000 6e28 6c75     Loaded! ....(nul
 80026c0:	296c 0000 0000 0000 0000 0000 0000 0000     l)..............

080026d0 <icucfgA>:
 80026d0:	0000 0000 4240 000f 1261 0800 0000 0000     ....@B..a.......
	...

080026f0 <icucfgB>:
 80026f0:	0000 0000 4240 000f 0000 0000 1261 0800     ....@B......a...
 8002700:	0000 0000 0001 0000 0000 0000 0000 0000     ................

08002710 <icucfgC>:
 8002710:	0000 0000 4240 000f 0000 0000 1261 0800     ....@B......a...
	...
 8002730:	6469 656c 0000 0000 0000 0000 0000 0000     idle............

08002740 <ram_areas>:
 8002740:	2818 0800 0b9c 2000 0b9c 2000 0b9c 2000     .(..... ... ... 
 8002750:	2818 0800 0000 0000 0000 0000 0000 0000     .(..............
 8002760:	2818 0800 0000 0000 0000 0000 0000 0000     .(..............
 8002770:	2818 0800 0000 0000 0000 0000 0000 0000     .(..............
 8002780:	2818 0800 0000 0000 0000 0000 0000 0000     .(..............
 8002790:	2818 0800 0000 0000 0000 0000 0000 0000     .(..............
 80027a0:	2818 0800 0000 0000 0000 0000 0000 0000     .(..............
 80027b0:	2818 0800 0000 0000 0000 0000 0000 0000     .(..............

080027c0 <vmt>:
 80027c0:	1951 0800 1a61 0800 19c1 0800 1ad1 0800     Q...a...........
 80027d0:	19b1 0800 1ac1 0800 1941 0800 1a51 0800     ........A...Q...
